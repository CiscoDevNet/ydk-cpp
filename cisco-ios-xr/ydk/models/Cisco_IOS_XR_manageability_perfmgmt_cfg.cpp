
#include <sstream>
#include <iostream>
#include "ydk/entity_util.hpp"
#include "Cisco_IOS_XR_manageability_perfmgmt_cfg.hpp"

namespace ydk {
namespace Cisco_IOS_XR_manageability_perfmgmt_cfg {

PerfMgmt::Resources::TftpResources::TftpResources()
    :
    	directory{YType::str, "directory"},
	 server_address{YType::str, "server-address"},
	 vrf_name{YType::str, "vrf-name"}
{
    yang_name = "tftp-resources"; yang_parent_name = "resources";
}

PerfMgmt::Resources::TftpResources::~TftpResources()
{
}

bool PerfMgmt::Resources::TftpResources::has_data() const
{
    return directory.is_set
	|| server_address.is_set
	|| vrf_name.is_set;
}

bool PerfMgmt::Resources::TftpResources::has_operation() const
{
    return is_set(operation)
	|| is_set(directory.operation)
	|| is_set(server_address.operation)
	|| is_set(vrf_name.operation);
}

std::string PerfMgmt::Resources::TftpResources::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "tftp-resources";

    return path_buffer.str();

}

EntityPath PerfMgmt::Resources::TftpResources::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/resources/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (directory.is_set || is_set(directory.operation)) leaf_name_data.push_back(directory.get_name_leafdata());
    if (server_address.is_set || is_set(server_address.operation)) leaf_name_data.push_back(server_address.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Resources::TftpResources::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Resources::TftpResources::get_children()
{
    return children;
}

void PerfMgmt::Resources::TftpResources::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "directory")
    {
        directory = value;
    }
    if(value_path == "server-address")
    {
        server_address = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

PerfMgmt::Resources::DumpLocal::DumpLocal()
    :
    	enable{YType::empty, "enable"}
{
    yang_name = "dump-local"; yang_parent_name = "resources";
}

PerfMgmt::Resources::DumpLocal::~DumpLocal()
{
}

bool PerfMgmt::Resources::DumpLocal::has_data() const
{
    return enable.is_set;
}

bool PerfMgmt::Resources::DumpLocal::has_operation() const
{
    return is_set(operation)
	|| is_set(enable.operation);
}

std::string PerfMgmt::Resources::DumpLocal::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "dump-local";

    return path_buffer.str();

}

EntityPath PerfMgmt::Resources::DumpLocal::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/resources/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (enable.is_set || is_set(enable.operation)) leaf_name_data.push_back(enable.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Resources::DumpLocal::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Resources::DumpLocal::get_children()
{
    return children;
}

void PerfMgmt::Resources::DumpLocal::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "enable")
    {
        enable = value;
    }
}

PerfMgmt::Resources::MemoryResources::MemoryResources()
    :
    	max_limit{YType::int32, "max-limit"},
	 min_reserved{YType::int32, "min-reserved"}
{
    yang_name = "memory-resources"; yang_parent_name = "resources";
}

PerfMgmt::Resources::MemoryResources::~MemoryResources()
{
}

bool PerfMgmt::Resources::MemoryResources::has_data() const
{
    return max_limit.is_set
	|| min_reserved.is_set;
}

bool PerfMgmt::Resources::MemoryResources::has_operation() const
{
    return is_set(operation)
	|| is_set(max_limit.operation)
	|| is_set(min_reserved.operation);
}

std::string PerfMgmt::Resources::MemoryResources::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "memory-resources";

    return path_buffer.str();

}

EntityPath PerfMgmt::Resources::MemoryResources::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/resources/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (max_limit.is_set || is_set(max_limit.operation)) leaf_name_data.push_back(max_limit.get_name_leafdata());
    if (min_reserved.is_set || is_set(min_reserved.operation)) leaf_name_data.push_back(min_reserved.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Resources::MemoryResources::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Resources::MemoryResources::get_children()
{
    return children;
}

void PerfMgmt::Resources::MemoryResources::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "max-limit")
    {
        max_limit = value;
    }
    if(value_path == "min-reserved")
    {
        min_reserved = value;
    }
}

PerfMgmt::Resources::Resources()
    :
    dump_local(std::make_unique<PerfMgmt::Resources::DumpLocal>())
	,memory_resources(std::make_unique<PerfMgmt::Resources::MemoryResources>())
	,tftp_resources(nullptr) // presence node
{
    dump_local->parent = this;
    children["dump-local"] = dump_local.get();

    memory_resources->parent = this;
    children["memory-resources"] = memory_resources.get();

    yang_name = "resources"; yang_parent_name = "perf-mgmt";
}

PerfMgmt::Resources::~Resources()
{
}

bool PerfMgmt::Resources::has_data() const
{
    return (dump_local !=  nullptr && dump_local->has_data())
	|| (memory_resources !=  nullptr && memory_resources->has_data())
	|| (tftp_resources !=  nullptr && tftp_resources->has_data());
}

bool PerfMgmt::Resources::has_operation() const
{
    return is_set(operation)
	|| (dump_local !=  nullptr && dump_local->has_operation())
	|| (memory_resources !=  nullptr && memory_resources->has_operation())
	|| (tftp_resources !=  nullptr && tftp_resources->has_operation());
}

std::string PerfMgmt::Resources::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "resources";

    return path_buffer.str();

}

EntityPath PerfMgmt::Resources::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Resources::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "dump-local")
    {
        if(dump_local != nullptr)
        {
            children["dump-local"] = dump_local.get();
        }
        else
        {
            dump_local = std::make_unique<PerfMgmt::Resources::DumpLocal>();
            dump_local->parent = this;
            children["dump-local"] = dump_local.get();
        }
        return children.at("dump-local");
    }

    if(child_yang_name == "memory-resources")
    {
        if(memory_resources != nullptr)
        {
            children["memory-resources"] = memory_resources.get();
        }
        else
        {
            memory_resources = std::make_unique<PerfMgmt::Resources::MemoryResources>();
            memory_resources->parent = this;
            children["memory-resources"] = memory_resources.get();
        }
        return children.at("memory-resources");
    }

    if(child_yang_name == "tftp-resources")
    {
        if(tftp_resources != nullptr)
        {
            children["tftp-resources"] = tftp_resources.get();
        }
        else
        {
            tftp_resources = std::make_unique<PerfMgmt::Resources::TftpResources>();
            tftp_resources->parent = this;
            children["tftp-resources"] = tftp_resources.get();
        }
        return children.at("tftp-resources");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Resources::get_children()
{
    if(children.find("dump-local") == children.end())
    {
        if(dump_local != nullptr)
        {
            children["dump-local"] = dump_local.get();
        }
    }

    if(children.find("memory-resources") == children.end())
    {
        if(memory_resources != nullptr)
        {
            children["memory-resources"] = memory_resources.get();
        }
    }

    if(children.find("tftp-resources") == children.end())
    {
        if(tftp_resources != nullptr)
        {
            children["tftp-resources"] = tftp_resources.get();
        }
    }

    return children;
}

void PerfMgmt::Resources::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::GenericCounterInterface::Templates::Template_::Template_()
    :
    	template_name{YType::str, "template-name"},
	 history_persistent{YType::empty, "history-persistent"},
	 reg_exp_group{YType::str, "reg-exp-group"},
	 sample_interval{YType::uint32, "sample-interval"},
	 sample_size{YType::uint32, "sample-size"},
	 vrf_group{YType::str, "vrf-group"}
{
    yang_name = "template"; yang_parent_name = "templates";
}

PerfMgmt::Statistics::GenericCounterInterface::Templates::Template_::~Template_()
{
}

bool PerfMgmt::Statistics::GenericCounterInterface::Templates::Template_::has_data() const
{
    return template_name.is_set
	|| history_persistent.is_set
	|| reg_exp_group.is_set
	|| sample_interval.is_set
	|| sample_size.is_set
	|| vrf_group.is_set;
}

bool PerfMgmt::Statistics::GenericCounterInterface::Templates::Template_::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(history_persistent.operation)
	|| is_set(reg_exp_group.operation)
	|| is_set(sample_interval.operation)
	|| is_set(sample_size.operation)
	|| is_set(vrf_group.operation);
}

std::string PerfMgmt::Statistics::GenericCounterInterface::Templates::Template_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::GenericCounterInterface::Templates::Template_::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/generic-counter-interface/templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (history_persistent.is_set || is_set(history_persistent.operation)) leaf_name_data.push_back(history_persistent.get_name_leafdata());
    if (reg_exp_group.is_set || is_set(reg_exp_group.operation)) leaf_name_data.push_back(reg_exp_group.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());
    if (sample_size.is_set || is_set(sample_size.operation)) leaf_name_data.push_back(sample_size.get_name_leafdata());
    if (vrf_group.is_set || is_set(vrf_group.operation)) leaf_name_data.push_back(vrf_group.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::GenericCounterInterface::Templates::Template_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::GenericCounterInterface::Templates::Template_::get_children()
{
    return children;
}

void PerfMgmt::Statistics::GenericCounterInterface::Templates::Template_::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "history-persistent")
    {
        history_persistent = value;
    }
    if(value_path == "reg-exp-group")
    {
        reg_exp_group = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
    if(value_path == "sample-size")
    {
        sample_size = value;
    }
    if(value_path == "vrf-group")
    {
        vrf_group = value;
    }
}

PerfMgmt::Statistics::GenericCounterInterface::Templates::Templates()
{
    yang_name = "templates"; yang_parent_name = "generic-counter-interface";
}

PerfMgmt::Statistics::GenericCounterInterface::Templates::~Templates()
{
}

bool PerfMgmt::Statistics::GenericCounterInterface::Templates::has_data() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Statistics::GenericCounterInterface::Templates::has_operation() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Statistics::GenericCounterInterface::Templates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::GenericCounterInterface::Templates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/generic-counter-interface/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::GenericCounterInterface::Templates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "template")
    {
        for(auto const & c : template_)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Statistics::GenericCounterInterface::Templates::Template_>();
        c->parent = this;
        template_.push_back(std::move(c));
        children[segment_path] = template_.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::GenericCounterInterface::Templates::get_children()
{
    for (auto const & c : template_)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::GenericCounterInterface::Templates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::GenericCounterInterface::GenericCounterInterface()
    :
    templates(std::make_unique<PerfMgmt::Statistics::GenericCounterInterface::Templates>())
{
    templates->parent = this;
    children["templates"] = templates.get();

    yang_name = "generic-counter-interface"; yang_parent_name = "statistics";
}

PerfMgmt::Statistics::GenericCounterInterface::~GenericCounterInterface()
{
}

bool PerfMgmt::Statistics::GenericCounterInterface::has_data() const
{
    return (templates !=  nullptr && templates->has_data());
}

bool PerfMgmt::Statistics::GenericCounterInterface::has_operation() const
{
    return is_set(operation)
	|| (templates !=  nullptr && templates->has_operation());
}

std::string PerfMgmt::Statistics::GenericCounterInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-counter-interface";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::GenericCounterInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::GenericCounterInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "templates")
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
        else
        {
            templates = std::make_unique<PerfMgmt::Statistics::GenericCounterInterface::Templates>();
            templates->parent = this;
            children["templates"] = templates.get();
        }
        return children.at("templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::GenericCounterInterface::get_children()
{
    if(children.find("templates") == children.end())
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::GenericCounterInterface::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::ProcessNode::Templates::Template_::Template_()
    :
    	template_name{YType::str, "template-name"},
	 history_persistent{YType::empty, "history-persistent"},
	 reg_exp_group{YType::str, "reg-exp-group"},
	 sample_interval{YType::uint32, "sample-interval"},
	 sample_size{YType::uint32, "sample-size"},
	 vrf_group{YType::str, "vrf-group"}
{
    yang_name = "template"; yang_parent_name = "templates";
}

PerfMgmt::Statistics::ProcessNode::Templates::Template_::~Template_()
{
}

bool PerfMgmt::Statistics::ProcessNode::Templates::Template_::has_data() const
{
    return template_name.is_set
	|| history_persistent.is_set
	|| reg_exp_group.is_set
	|| sample_interval.is_set
	|| sample_size.is_set
	|| vrf_group.is_set;
}

bool PerfMgmt::Statistics::ProcessNode::Templates::Template_::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(history_persistent.operation)
	|| is_set(reg_exp_group.operation)
	|| is_set(sample_interval.operation)
	|| is_set(sample_size.operation)
	|| is_set(vrf_group.operation);
}

std::string PerfMgmt::Statistics::ProcessNode::Templates::Template_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::ProcessNode::Templates::Template_::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/process-node/templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (history_persistent.is_set || is_set(history_persistent.operation)) leaf_name_data.push_back(history_persistent.get_name_leafdata());
    if (reg_exp_group.is_set || is_set(reg_exp_group.operation)) leaf_name_data.push_back(reg_exp_group.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());
    if (sample_size.is_set || is_set(sample_size.operation)) leaf_name_data.push_back(sample_size.get_name_leafdata());
    if (vrf_group.is_set || is_set(vrf_group.operation)) leaf_name_data.push_back(vrf_group.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::ProcessNode::Templates::Template_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::ProcessNode::Templates::Template_::get_children()
{
    return children;
}

void PerfMgmt::Statistics::ProcessNode::Templates::Template_::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "history-persistent")
    {
        history_persistent = value;
    }
    if(value_path == "reg-exp-group")
    {
        reg_exp_group = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
    if(value_path == "sample-size")
    {
        sample_size = value;
    }
    if(value_path == "vrf-group")
    {
        vrf_group = value;
    }
}

PerfMgmt::Statistics::ProcessNode::Templates::Templates()
{
    yang_name = "templates"; yang_parent_name = "process-node";
}

PerfMgmt::Statistics::ProcessNode::Templates::~Templates()
{
}

bool PerfMgmt::Statistics::ProcessNode::Templates::has_data() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Statistics::ProcessNode::Templates::has_operation() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Statistics::ProcessNode::Templates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::ProcessNode::Templates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/process-node/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::ProcessNode::Templates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "template")
    {
        for(auto const & c : template_)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Statistics::ProcessNode::Templates::Template_>();
        c->parent = this;
        template_.push_back(std::move(c));
        children[segment_path] = template_.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::ProcessNode::Templates::get_children()
{
    for (auto const & c : template_)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::ProcessNode::Templates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::ProcessNode::ProcessNode()
    :
    templates(std::make_unique<PerfMgmt::Statistics::ProcessNode::Templates>())
{
    templates->parent = this;
    children["templates"] = templates.get();

    yang_name = "process-node"; yang_parent_name = "statistics";
}

PerfMgmt::Statistics::ProcessNode::~ProcessNode()
{
}

bool PerfMgmt::Statistics::ProcessNode::has_data() const
{
    return (templates !=  nullptr && templates->has_data());
}

bool PerfMgmt::Statistics::ProcessNode::has_operation() const
{
    return is_set(operation)
	|| (templates !=  nullptr && templates->has_operation());
}

std::string PerfMgmt::Statistics::ProcessNode::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "process-node";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::ProcessNode::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::ProcessNode::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "templates")
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
        else
        {
            templates = std::make_unique<PerfMgmt::Statistics::ProcessNode::Templates>();
            templates->parent = this;
            children["templates"] = templates.get();
        }
        return children.at("templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::ProcessNode::get_children()
{
    if(children.find("templates") == children.end())
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::ProcessNode::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::BasicCounterInterface::Templates::Template_::Template_()
    :
    	template_name{YType::str, "template-name"},
	 history_persistent{YType::empty, "history-persistent"},
	 reg_exp_group{YType::str, "reg-exp-group"},
	 sample_interval{YType::uint32, "sample-interval"},
	 sample_size{YType::uint32, "sample-size"},
	 vrf_group{YType::str, "vrf-group"}
{
    yang_name = "template"; yang_parent_name = "templates";
}

PerfMgmt::Statistics::BasicCounterInterface::Templates::Template_::~Template_()
{
}

bool PerfMgmt::Statistics::BasicCounterInterface::Templates::Template_::has_data() const
{
    return template_name.is_set
	|| history_persistent.is_set
	|| reg_exp_group.is_set
	|| sample_interval.is_set
	|| sample_size.is_set
	|| vrf_group.is_set;
}

bool PerfMgmt::Statistics::BasicCounterInterface::Templates::Template_::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(history_persistent.operation)
	|| is_set(reg_exp_group.operation)
	|| is_set(sample_interval.operation)
	|| is_set(sample_size.operation)
	|| is_set(vrf_group.operation);
}

std::string PerfMgmt::Statistics::BasicCounterInterface::Templates::Template_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::BasicCounterInterface::Templates::Template_::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/basic-counter-interface/templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (history_persistent.is_set || is_set(history_persistent.operation)) leaf_name_data.push_back(history_persistent.get_name_leafdata());
    if (reg_exp_group.is_set || is_set(reg_exp_group.operation)) leaf_name_data.push_back(reg_exp_group.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());
    if (sample_size.is_set || is_set(sample_size.operation)) leaf_name_data.push_back(sample_size.get_name_leafdata());
    if (vrf_group.is_set || is_set(vrf_group.operation)) leaf_name_data.push_back(vrf_group.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::BasicCounterInterface::Templates::Template_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::BasicCounterInterface::Templates::Template_::get_children()
{
    return children;
}

void PerfMgmt::Statistics::BasicCounterInterface::Templates::Template_::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "history-persistent")
    {
        history_persistent = value;
    }
    if(value_path == "reg-exp-group")
    {
        reg_exp_group = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
    if(value_path == "sample-size")
    {
        sample_size = value;
    }
    if(value_path == "vrf-group")
    {
        vrf_group = value;
    }
}

PerfMgmt::Statistics::BasicCounterInterface::Templates::Templates()
{
    yang_name = "templates"; yang_parent_name = "basic-counter-interface";
}

PerfMgmt::Statistics::BasicCounterInterface::Templates::~Templates()
{
}

bool PerfMgmt::Statistics::BasicCounterInterface::Templates::has_data() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Statistics::BasicCounterInterface::Templates::has_operation() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Statistics::BasicCounterInterface::Templates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::BasicCounterInterface::Templates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/basic-counter-interface/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::BasicCounterInterface::Templates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "template")
    {
        for(auto const & c : template_)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Statistics::BasicCounterInterface::Templates::Template_>();
        c->parent = this;
        template_.push_back(std::move(c));
        children[segment_path] = template_.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::BasicCounterInterface::Templates::get_children()
{
    for (auto const & c : template_)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::BasicCounterInterface::Templates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::BasicCounterInterface::BasicCounterInterface()
    :
    templates(std::make_unique<PerfMgmt::Statistics::BasicCounterInterface::Templates>())
{
    templates->parent = this;
    children["templates"] = templates.get();

    yang_name = "basic-counter-interface"; yang_parent_name = "statistics";
}

PerfMgmt::Statistics::BasicCounterInterface::~BasicCounterInterface()
{
}

bool PerfMgmt::Statistics::BasicCounterInterface::has_data() const
{
    return (templates !=  nullptr && templates->has_data());
}

bool PerfMgmt::Statistics::BasicCounterInterface::has_operation() const
{
    return is_set(operation)
	|| (templates !=  nullptr && templates->has_operation());
}

std::string PerfMgmt::Statistics::BasicCounterInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "basic-counter-interface";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::BasicCounterInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::BasicCounterInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "templates")
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
        else
        {
            templates = std::make_unique<PerfMgmt::Statistics::BasicCounterInterface::Templates>();
            templates->parent = this;
            children["templates"] = templates.get();
        }
        return children.at("templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::BasicCounterInterface::get_children()
{
    if(children.find("templates") == children.end())
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::BasicCounterInterface::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::Ospfv3Protocol::Templates::Template_::Template_()
    :
    	template_name{YType::str, "template-name"},
	 history_persistent{YType::empty, "history-persistent"},
	 reg_exp_group{YType::str, "reg-exp-group"},
	 sample_interval{YType::uint32, "sample-interval"},
	 sample_size{YType::uint32, "sample-size"},
	 vrf_group{YType::str, "vrf-group"}
{
    yang_name = "template"; yang_parent_name = "templates";
}

PerfMgmt::Statistics::Ospfv3Protocol::Templates::Template_::~Template_()
{
}

bool PerfMgmt::Statistics::Ospfv3Protocol::Templates::Template_::has_data() const
{
    return template_name.is_set
	|| history_persistent.is_set
	|| reg_exp_group.is_set
	|| sample_interval.is_set
	|| sample_size.is_set
	|| vrf_group.is_set;
}

bool PerfMgmt::Statistics::Ospfv3Protocol::Templates::Template_::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(history_persistent.operation)
	|| is_set(reg_exp_group.operation)
	|| is_set(sample_interval.operation)
	|| is_set(sample_size.operation)
	|| is_set(vrf_group.operation);
}

std::string PerfMgmt::Statistics::Ospfv3Protocol::Templates::Template_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::Ospfv3Protocol::Templates::Template_::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/ospfv3-protocol/templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (history_persistent.is_set || is_set(history_persistent.operation)) leaf_name_data.push_back(history_persistent.get_name_leafdata());
    if (reg_exp_group.is_set || is_set(reg_exp_group.operation)) leaf_name_data.push_back(reg_exp_group.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());
    if (sample_size.is_set || is_set(sample_size.operation)) leaf_name_data.push_back(sample_size.get_name_leafdata());
    if (vrf_group.is_set || is_set(vrf_group.operation)) leaf_name_data.push_back(vrf_group.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::Ospfv3Protocol::Templates::Template_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::Ospfv3Protocol::Templates::Template_::get_children()
{
    return children;
}

void PerfMgmt::Statistics::Ospfv3Protocol::Templates::Template_::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "history-persistent")
    {
        history_persistent = value;
    }
    if(value_path == "reg-exp-group")
    {
        reg_exp_group = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
    if(value_path == "sample-size")
    {
        sample_size = value;
    }
    if(value_path == "vrf-group")
    {
        vrf_group = value;
    }
}

PerfMgmt::Statistics::Ospfv3Protocol::Templates::Templates()
{
    yang_name = "templates"; yang_parent_name = "ospfv3-protocol";
}

PerfMgmt::Statistics::Ospfv3Protocol::Templates::~Templates()
{
}

bool PerfMgmt::Statistics::Ospfv3Protocol::Templates::has_data() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Statistics::Ospfv3Protocol::Templates::has_operation() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Statistics::Ospfv3Protocol::Templates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::Ospfv3Protocol::Templates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/ospfv3-protocol/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::Ospfv3Protocol::Templates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "template")
    {
        for(auto const & c : template_)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Statistics::Ospfv3Protocol::Templates::Template_>();
        c->parent = this;
        template_.push_back(std::move(c));
        children[segment_path] = template_.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::Ospfv3Protocol::Templates::get_children()
{
    for (auto const & c : template_)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::Ospfv3Protocol::Templates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::Ospfv3Protocol::Ospfv3Protocol()
    :
    templates(std::make_unique<PerfMgmt::Statistics::Ospfv3Protocol::Templates>())
{
    templates->parent = this;
    children["templates"] = templates.get();

    yang_name = "ospfv3-protocol"; yang_parent_name = "statistics";
}

PerfMgmt::Statistics::Ospfv3Protocol::~Ospfv3Protocol()
{
}

bool PerfMgmt::Statistics::Ospfv3Protocol::has_data() const
{
    return (templates !=  nullptr && templates->has_data());
}

bool PerfMgmt::Statistics::Ospfv3Protocol::has_operation() const
{
    return is_set(operation)
	|| (templates !=  nullptr && templates->has_operation());
}

std::string PerfMgmt::Statistics::Ospfv3Protocol::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ospfv3-protocol";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::Ospfv3Protocol::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::Ospfv3Protocol::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "templates")
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
        else
        {
            templates = std::make_unique<PerfMgmt::Statistics::Ospfv3Protocol::Templates>();
            templates->parent = this;
            children["templates"] = templates.get();
        }
        return children.at("templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::Ospfv3Protocol::get_children()
{
    if(children.find("templates") == children.end())
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::Ospfv3Protocol::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::CpuNode::Templates::Template_::Template_()
    :
    	template_name{YType::str, "template-name"},
	 history_persistent{YType::empty, "history-persistent"},
	 reg_exp_group{YType::str, "reg-exp-group"},
	 sample_interval{YType::uint32, "sample-interval"},
	 sample_size{YType::uint32, "sample-size"},
	 vrf_group{YType::str, "vrf-group"}
{
    yang_name = "template"; yang_parent_name = "templates";
}

PerfMgmt::Statistics::CpuNode::Templates::Template_::~Template_()
{
}

bool PerfMgmt::Statistics::CpuNode::Templates::Template_::has_data() const
{
    return template_name.is_set
	|| history_persistent.is_set
	|| reg_exp_group.is_set
	|| sample_interval.is_set
	|| sample_size.is_set
	|| vrf_group.is_set;
}

bool PerfMgmt::Statistics::CpuNode::Templates::Template_::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(history_persistent.operation)
	|| is_set(reg_exp_group.operation)
	|| is_set(sample_interval.operation)
	|| is_set(sample_size.operation)
	|| is_set(vrf_group.operation);
}

std::string PerfMgmt::Statistics::CpuNode::Templates::Template_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::CpuNode::Templates::Template_::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/cpu-node/templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (history_persistent.is_set || is_set(history_persistent.operation)) leaf_name_data.push_back(history_persistent.get_name_leafdata());
    if (reg_exp_group.is_set || is_set(reg_exp_group.operation)) leaf_name_data.push_back(reg_exp_group.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());
    if (sample_size.is_set || is_set(sample_size.operation)) leaf_name_data.push_back(sample_size.get_name_leafdata());
    if (vrf_group.is_set || is_set(vrf_group.operation)) leaf_name_data.push_back(vrf_group.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::CpuNode::Templates::Template_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::CpuNode::Templates::Template_::get_children()
{
    return children;
}

void PerfMgmt::Statistics::CpuNode::Templates::Template_::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "history-persistent")
    {
        history_persistent = value;
    }
    if(value_path == "reg-exp-group")
    {
        reg_exp_group = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
    if(value_path == "sample-size")
    {
        sample_size = value;
    }
    if(value_path == "vrf-group")
    {
        vrf_group = value;
    }
}

PerfMgmt::Statistics::CpuNode::Templates::Templates()
{
    yang_name = "templates"; yang_parent_name = "cpu-node";
}

PerfMgmt::Statistics::CpuNode::Templates::~Templates()
{
}

bool PerfMgmt::Statistics::CpuNode::Templates::has_data() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Statistics::CpuNode::Templates::has_operation() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Statistics::CpuNode::Templates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::CpuNode::Templates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/cpu-node/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::CpuNode::Templates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "template")
    {
        for(auto const & c : template_)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Statistics::CpuNode::Templates::Template_>();
        c->parent = this;
        template_.push_back(std::move(c));
        children[segment_path] = template_.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::CpuNode::Templates::get_children()
{
    for (auto const & c : template_)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::CpuNode::Templates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::CpuNode::CpuNode()
    :
    templates(std::make_unique<PerfMgmt::Statistics::CpuNode::Templates>())
{
    templates->parent = this;
    children["templates"] = templates.get();

    yang_name = "cpu-node"; yang_parent_name = "statistics";
}

PerfMgmt::Statistics::CpuNode::~CpuNode()
{
}

bool PerfMgmt::Statistics::CpuNode::has_data() const
{
    return (templates !=  nullptr && templates->has_data());
}

bool PerfMgmt::Statistics::CpuNode::has_operation() const
{
    return is_set(operation)
	|| (templates !=  nullptr && templates->has_operation());
}

std::string PerfMgmt::Statistics::CpuNode::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "cpu-node";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::CpuNode::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::CpuNode::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "templates")
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
        else
        {
            templates = std::make_unique<PerfMgmt::Statistics::CpuNode::Templates>();
            templates->parent = this;
            children["templates"] = templates.get();
        }
        return children.at("templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::CpuNode::get_children()
{
    if(children.find("templates") == children.end())
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::CpuNode::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::DataRateInterface::Templates::Template_::Template_()
    :
    	template_name{YType::str, "template-name"},
	 history_persistent{YType::empty, "history-persistent"},
	 reg_exp_group{YType::str, "reg-exp-group"},
	 sample_interval{YType::uint32, "sample-interval"},
	 sample_size{YType::uint32, "sample-size"},
	 vrf_group{YType::str, "vrf-group"}
{
    yang_name = "template"; yang_parent_name = "templates";
}

PerfMgmt::Statistics::DataRateInterface::Templates::Template_::~Template_()
{
}

bool PerfMgmt::Statistics::DataRateInterface::Templates::Template_::has_data() const
{
    return template_name.is_set
	|| history_persistent.is_set
	|| reg_exp_group.is_set
	|| sample_interval.is_set
	|| sample_size.is_set
	|| vrf_group.is_set;
}

bool PerfMgmt::Statistics::DataRateInterface::Templates::Template_::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(history_persistent.operation)
	|| is_set(reg_exp_group.operation)
	|| is_set(sample_interval.operation)
	|| is_set(sample_size.operation)
	|| is_set(vrf_group.operation);
}

std::string PerfMgmt::Statistics::DataRateInterface::Templates::Template_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::DataRateInterface::Templates::Template_::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/data-rate-interface/templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (history_persistent.is_set || is_set(history_persistent.operation)) leaf_name_data.push_back(history_persistent.get_name_leafdata());
    if (reg_exp_group.is_set || is_set(reg_exp_group.operation)) leaf_name_data.push_back(reg_exp_group.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());
    if (sample_size.is_set || is_set(sample_size.operation)) leaf_name_data.push_back(sample_size.get_name_leafdata());
    if (vrf_group.is_set || is_set(vrf_group.operation)) leaf_name_data.push_back(vrf_group.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::DataRateInterface::Templates::Template_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::DataRateInterface::Templates::Template_::get_children()
{
    return children;
}

void PerfMgmt::Statistics::DataRateInterface::Templates::Template_::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "history-persistent")
    {
        history_persistent = value;
    }
    if(value_path == "reg-exp-group")
    {
        reg_exp_group = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
    if(value_path == "sample-size")
    {
        sample_size = value;
    }
    if(value_path == "vrf-group")
    {
        vrf_group = value;
    }
}

PerfMgmt::Statistics::DataRateInterface::Templates::Templates()
{
    yang_name = "templates"; yang_parent_name = "data-rate-interface";
}

PerfMgmt::Statistics::DataRateInterface::Templates::~Templates()
{
}

bool PerfMgmt::Statistics::DataRateInterface::Templates::has_data() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Statistics::DataRateInterface::Templates::has_operation() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Statistics::DataRateInterface::Templates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::DataRateInterface::Templates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/data-rate-interface/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::DataRateInterface::Templates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "template")
    {
        for(auto const & c : template_)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Statistics::DataRateInterface::Templates::Template_>();
        c->parent = this;
        template_.push_back(std::move(c));
        children[segment_path] = template_.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::DataRateInterface::Templates::get_children()
{
    for (auto const & c : template_)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::DataRateInterface::Templates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::DataRateInterface::DataRateInterface()
    :
    templates(std::make_unique<PerfMgmt::Statistics::DataRateInterface::Templates>())
{
    templates->parent = this;
    children["templates"] = templates.get();

    yang_name = "data-rate-interface"; yang_parent_name = "statistics";
}

PerfMgmt::Statistics::DataRateInterface::~DataRateInterface()
{
}

bool PerfMgmt::Statistics::DataRateInterface::has_data() const
{
    return (templates !=  nullptr && templates->has_data());
}

bool PerfMgmt::Statistics::DataRateInterface::has_operation() const
{
    return is_set(operation)
	|| (templates !=  nullptr && templates->has_operation());
}

std::string PerfMgmt::Statistics::DataRateInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "data-rate-interface";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::DataRateInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::DataRateInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "templates")
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
        else
        {
            templates = std::make_unique<PerfMgmt::Statistics::DataRateInterface::Templates>();
            templates->parent = this;
            children["templates"] = templates.get();
        }
        return children.at("templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::DataRateInterface::get_children()
{
    if(children.find("templates") == children.end())
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::DataRateInterface::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::MemoryNode::Templates::Template_::Template_()
    :
    	template_name{YType::str, "template-name"},
	 history_persistent{YType::empty, "history-persistent"},
	 reg_exp_group{YType::str, "reg-exp-group"},
	 sample_interval{YType::uint32, "sample-interval"},
	 sample_size{YType::uint32, "sample-size"},
	 vrf_group{YType::str, "vrf-group"}
{
    yang_name = "template"; yang_parent_name = "templates";
}

PerfMgmt::Statistics::MemoryNode::Templates::Template_::~Template_()
{
}

bool PerfMgmt::Statistics::MemoryNode::Templates::Template_::has_data() const
{
    return template_name.is_set
	|| history_persistent.is_set
	|| reg_exp_group.is_set
	|| sample_interval.is_set
	|| sample_size.is_set
	|| vrf_group.is_set;
}

bool PerfMgmt::Statistics::MemoryNode::Templates::Template_::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(history_persistent.operation)
	|| is_set(reg_exp_group.operation)
	|| is_set(sample_interval.operation)
	|| is_set(sample_size.operation)
	|| is_set(vrf_group.operation);
}

std::string PerfMgmt::Statistics::MemoryNode::Templates::Template_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::MemoryNode::Templates::Template_::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/memory-node/templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (history_persistent.is_set || is_set(history_persistent.operation)) leaf_name_data.push_back(history_persistent.get_name_leafdata());
    if (reg_exp_group.is_set || is_set(reg_exp_group.operation)) leaf_name_data.push_back(reg_exp_group.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());
    if (sample_size.is_set || is_set(sample_size.operation)) leaf_name_data.push_back(sample_size.get_name_leafdata());
    if (vrf_group.is_set || is_set(vrf_group.operation)) leaf_name_data.push_back(vrf_group.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::MemoryNode::Templates::Template_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::MemoryNode::Templates::Template_::get_children()
{
    return children;
}

void PerfMgmt::Statistics::MemoryNode::Templates::Template_::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "history-persistent")
    {
        history_persistent = value;
    }
    if(value_path == "reg-exp-group")
    {
        reg_exp_group = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
    if(value_path == "sample-size")
    {
        sample_size = value;
    }
    if(value_path == "vrf-group")
    {
        vrf_group = value;
    }
}

PerfMgmt::Statistics::MemoryNode::Templates::Templates()
{
    yang_name = "templates"; yang_parent_name = "memory-node";
}

PerfMgmt::Statistics::MemoryNode::Templates::~Templates()
{
}

bool PerfMgmt::Statistics::MemoryNode::Templates::has_data() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Statistics::MemoryNode::Templates::has_operation() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Statistics::MemoryNode::Templates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::MemoryNode::Templates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/memory-node/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::MemoryNode::Templates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "template")
    {
        for(auto const & c : template_)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Statistics::MemoryNode::Templates::Template_>();
        c->parent = this;
        template_.push_back(std::move(c));
        children[segment_path] = template_.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::MemoryNode::Templates::get_children()
{
    for (auto const & c : template_)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::MemoryNode::Templates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::MemoryNode::MemoryNode()
    :
    templates(std::make_unique<PerfMgmt::Statistics::MemoryNode::Templates>())
{
    templates->parent = this;
    children["templates"] = templates.get();

    yang_name = "memory-node"; yang_parent_name = "statistics";
}

PerfMgmt::Statistics::MemoryNode::~MemoryNode()
{
}

bool PerfMgmt::Statistics::MemoryNode::has_data() const
{
    return (templates !=  nullptr && templates->has_data());
}

bool PerfMgmt::Statistics::MemoryNode::has_operation() const
{
    return is_set(operation)
	|| (templates !=  nullptr && templates->has_operation());
}

std::string PerfMgmt::Statistics::MemoryNode::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "memory-node";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::MemoryNode::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::MemoryNode::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "templates")
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
        else
        {
            templates = std::make_unique<PerfMgmt::Statistics::MemoryNode::Templates>();
            templates->parent = this;
            children["templates"] = templates.get();
        }
        return children.at("templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::MemoryNode::get_children()
{
    if(children.find("templates") == children.end())
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::MemoryNode::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::LdpMpls::Templates::Template_::Template_()
    :
    	template_name{YType::str, "template-name"},
	 history_persistent{YType::empty, "history-persistent"},
	 reg_exp_group{YType::str, "reg-exp-group"},
	 sample_interval{YType::uint32, "sample-interval"},
	 sample_size{YType::uint32, "sample-size"},
	 vrf_group{YType::str, "vrf-group"}
{
    yang_name = "template"; yang_parent_name = "templates";
}

PerfMgmt::Statistics::LdpMpls::Templates::Template_::~Template_()
{
}

bool PerfMgmt::Statistics::LdpMpls::Templates::Template_::has_data() const
{
    return template_name.is_set
	|| history_persistent.is_set
	|| reg_exp_group.is_set
	|| sample_interval.is_set
	|| sample_size.is_set
	|| vrf_group.is_set;
}

bool PerfMgmt::Statistics::LdpMpls::Templates::Template_::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(history_persistent.operation)
	|| is_set(reg_exp_group.operation)
	|| is_set(sample_interval.operation)
	|| is_set(sample_size.operation)
	|| is_set(vrf_group.operation);
}

std::string PerfMgmt::Statistics::LdpMpls::Templates::Template_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::LdpMpls::Templates::Template_::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/ldp-mpls/templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (history_persistent.is_set || is_set(history_persistent.operation)) leaf_name_data.push_back(history_persistent.get_name_leafdata());
    if (reg_exp_group.is_set || is_set(reg_exp_group.operation)) leaf_name_data.push_back(reg_exp_group.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());
    if (sample_size.is_set || is_set(sample_size.operation)) leaf_name_data.push_back(sample_size.get_name_leafdata());
    if (vrf_group.is_set || is_set(vrf_group.operation)) leaf_name_data.push_back(vrf_group.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::LdpMpls::Templates::Template_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::LdpMpls::Templates::Template_::get_children()
{
    return children;
}

void PerfMgmt::Statistics::LdpMpls::Templates::Template_::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "history-persistent")
    {
        history_persistent = value;
    }
    if(value_path == "reg-exp-group")
    {
        reg_exp_group = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
    if(value_path == "sample-size")
    {
        sample_size = value;
    }
    if(value_path == "vrf-group")
    {
        vrf_group = value;
    }
}

PerfMgmt::Statistics::LdpMpls::Templates::Templates()
{
    yang_name = "templates"; yang_parent_name = "ldp-mpls";
}

PerfMgmt::Statistics::LdpMpls::Templates::~Templates()
{
}

bool PerfMgmt::Statistics::LdpMpls::Templates::has_data() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Statistics::LdpMpls::Templates::has_operation() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Statistics::LdpMpls::Templates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::LdpMpls::Templates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/ldp-mpls/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::LdpMpls::Templates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "template")
    {
        for(auto const & c : template_)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Statistics::LdpMpls::Templates::Template_>();
        c->parent = this;
        template_.push_back(std::move(c));
        children[segment_path] = template_.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::LdpMpls::Templates::get_children()
{
    for (auto const & c : template_)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::LdpMpls::Templates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::LdpMpls::LdpMpls()
    :
    templates(std::make_unique<PerfMgmt::Statistics::LdpMpls::Templates>())
{
    templates->parent = this;
    children["templates"] = templates.get();

    yang_name = "ldp-mpls"; yang_parent_name = "statistics";
}

PerfMgmt::Statistics::LdpMpls::~LdpMpls()
{
}

bool PerfMgmt::Statistics::LdpMpls::has_data() const
{
    return (templates !=  nullptr && templates->has_data());
}

bool PerfMgmt::Statistics::LdpMpls::has_operation() const
{
    return is_set(operation)
	|| (templates !=  nullptr && templates->has_operation());
}

std::string PerfMgmt::Statistics::LdpMpls::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ldp-mpls";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::LdpMpls::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::LdpMpls::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "templates")
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
        else
        {
            templates = std::make_unique<PerfMgmt::Statistics::LdpMpls::Templates>();
            templates->parent = this;
            children["templates"] = templates.get();
        }
        return children.at("templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::LdpMpls::get_children()
{
    if(children.find("templates") == children.end())
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::LdpMpls::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::Bgp::Templates::Template_::Template_()
    :
    	template_name{YType::str, "template-name"},
	 history_persistent{YType::empty, "history-persistent"},
	 reg_exp_group{YType::str, "reg-exp-group"},
	 sample_interval{YType::uint32, "sample-interval"},
	 sample_size{YType::uint32, "sample-size"},
	 vrf_group{YType::str, "vrf-group"}
{
    yang_name = "template"; yang_parent_name = "templates";
}

PerfMgmt::Statistics::Bgp::Templates::Template_::~Template_()
{
}

bool PerfMgmt::Statistics::Bgp::Templates::Template_::has_data() const
{
    return template_name.is_set
	|| history_persistent.is_set
	|| reg_exp_group.is_set
	|| sample_interval.is_set
	|| sample_size.is_set
	|| vrf_group.is_set;
}

bool PerfMgmt::Statistics::Bgp::Templates::Template_::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(history_persistent.operation)
	|| is_set(reg_exp_group.operation)
	|| is_set(sample_interval.operation)
	|| is_set(sample_size.operation)
	|| is_set(vrf_group.operation);
}

std::string PerfMgmt::Statistics::Bgp::Templates::Template_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::Bgp::Templates::Template_::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/bgp/templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (history_persistent.is_set || is_set(history_persistent.operation)) leaf_name_data.push_back(history_persistent.get_name_leafdata());
    if (reg_exp_group.is_set || is_set(reg_exp_group.operation)) leaf_name_data.push_back(reg_exp_group.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());
    if (sample_size.is_set || is_set(sample_size.operation)) leaf_name_data.push_back(sample_size.get_name_leafdata());
    if (vrf_group.is_set || is_set(vrf_group.operation)) leaf_name_data.push_back(vrf_group.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::Bgp::Templates::Template_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::Bgp::Templates::Template_::get_children()
{
    return children;
}

void PerfMgmt::Statistics::Bgp::Templates::Template_::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "history-persistent")
    {
        history_persistent = value;
    }
    if(value_path == "reg-exp-group")
    {
        reg_exp_group = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
    if(value_path == "sample-size")
    {
        sample_size = value;
    }
    if(value_path == "vrf-group")
    {
        vrf_group = value;
    }
}

PerfMgmt::Statistics::Bgp::Templates::Templates()
{
    yang_name = "templates"; yang_parent_name = "bgp";
}

PerfMgmt::Statistics::Bgp::Templates::~Templates()
{
}

bool PerfMgmt::Statistics::Bgp::Templates::has_data() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Statistics::Bgp::Templates::has_operation() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Statistics::Bgp::Templates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::Bgp::Templates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/bgp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::Bgp::Templates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "template")
    {
        for(auto const & c : template_)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Statistics::Bgp::Templates::Template_>();
        c->parent = this;
        template_.push_back(std::move(c));
        children[segment_path] = template_.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::Bgp::Templates::get_children()
{
    for (auto const & c : template_)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::Bgp::Templates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::Bgp::Bgp()
    :
    templates(std::make_unique<PerfMgmt::Statistics::Bgp::Templates>())
{
    templates->parent = this;
    children["templates"] = templates.get();

    yang_name = "bgp"; yang_parent_name = "statistics";
}

PerfMgmt::Statistics::Bgp::~Bgp()
{
}

bool PerfMgmt::Statistics::Bgp::has_data() const
{
    return (templates !=  nullptr && templates->has_data());
}

bool PerfMgmt::Statistics::Bgp::has_operation() const
{
    return is_set(operation)
	|| (templates !=  nullptr && templates->has_operation());
}

std::string PerfMgmt::Statistics::Bgp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bgp";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::Bgp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::Bgp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "templates")
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
        else
        {
            templates = std::make_unique<PerfMgmt::Statistics::Bgp::Templates>();
            templates->parent = this;
            children["templates"] = templates.get();
        }
        return children.at("templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::Bgp::get_children()
{
    if(children.find("templates") == children.end())
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::Bgp::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::Ospfv2Protocol::Templates::Template_::Template_()
    :
    	template_name{YType::str, "template-name"},
	 history_persistent{YType::empty, "history-persistent"},
	 reg_exp_group{YType::str, "reg-exp-group"},
	 sample_interval{YType::uint32, "sample-interval"},
	 sample_size{YType::uint32, "sample-size"},
	 vrf_group{YType::str, "vrf-group"}
{
    yang_name = "template"; yang_parent_name = "templates";
}

PerfMgmt::Statistics::Ospfv2Protocol::Templates::Template_::~Template_()
{
}

bool PerfMgmt::Statistics::Ospfv2Protocol::Templates::Template_::has_data() const
{
    return template_name.is_set
	|| history_persistent.is_set
	|| reg_exp_group.is_set
	|| sample_interval.is_set
	|| sample_size.is_set
	|| vrf_group.is_set;
}

bool PerfMgmt::Statistics::Ospfv2Protocol::Templates::Template_::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(history_persistent.operation)
	|| is_set(reg_exp_group.operation)
	|| is_set(sample_interval.operation)
	|| is_set(sample_size.operation)
	|| is_set(vrf_group.operation);
}

std::string PerfMgmt::Statistics::Ospfv2Protocol::Templates::Template_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::Ospfv2Protocol::Templates::Template_::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/ospfv2-protocol/templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (history_persistent.is_set || is_set(history_persistent.operation)) leaf_name_data.push_back(history_persistent.get_name_leafdata());
    if (reg_exp_group.is_set || is_set(reg_exp_group.operation)) leaf_name_data.push_back(reg_exp_group.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());
    if (sample_size.is_set || is_set(sample_size.operation)) leaf_name_data.push_back(sample_size.get_name_leafdata());
    if (vrf_group.is_set || is_set(vrf_group.operation)) leaf_name_data.push_back(vrf_group.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::Ospfv2Protocol::Templates::Template_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::Ospfv2Protocol::Templates::Template_::get_children()
{
    return children;
}

void PerfMgmt::Statistics::Ospfv2Protocol::Templates::Template_::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "history-persistent")
    {
        history_persistent = value;
    }
    if(value_path == "reg-exp-group")
    {
        reg_exp_group = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
    if(value_path == "sample-size")
    {
        sample_size = value;
    }
    if(value_path == "vrf-group")
    {
        vrf_group = value;
    }
}

PerfMgmt::Statistics::Ospfv2Protocol::Templates::Templates()
{
    yang_name = "templates"; yang_parent_name = "ospfv2-protocol";
}

PerfMgmt::Statistics::Ospfv2Protocol::Templates::~Templates()
{
}

bool PerfMgmt::Statistics::Ospfv2Protocol::Templates::has_data() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Statistics::Ospfv2Protocol::Templates::has_operation() const
{
    for (std::size_t index=0; index<template_.size(); index++)
    {
        if(template_[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Statistics::Ospfv2Protocol::Templates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::Ospfv2Protocol::Templates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/ospfv2-protocol/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::Ospfv2Protocol::Templates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "template")
    {
        for(auto const & c : template_)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Statistics::Ospfv2Protocol::Templates::Template_>();
        c->parent = this;
        template_.push_back(std::move(c));
        children[segment_path] = template_.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::Ospfv2Protocol::Templates::get_children()
{
    for (auto const & c : template_)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::Ospfv2Protocol::Templates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::Ospfv2Protocol::Ospfv2Protocol()
    :
    templates(std::make_unique<PerfMgmt::Statistics::Ospfv2Protocol::Templates>())
{
    templates->parent = this;
    children["templates"] = templates.get();

    yang_name = "ospfv2-protocol"; yang_parent_name = "statistics";
}

PerfMgmt::Statistics::Ospfv2Protocol::~Ospfv2Protocol()
{
}

bool PerfMgmt::Statistics::Ospfv2Protocol::has_data() const
{
    return (templates !=  nullptr && templates->has_data());
}

bool PerfMgmt::Statistics::Ospfv2Protocol::has_operation() const
{
    return is_set(operation)
	|| (templates !=  nullptr && templates->has_operation());
}

std::string PerfMgmt::Statistics::Ospfv2Protocol::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ospfv2-protocol";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::Ospfv2Protocol::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::Ospfv2Protocol::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "templates")
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
        else
        {
            templates = std::make_unique<PerfMgmt::Statistics::Ospfv2Protocol::Templates>();
            templates->parent = this;
            children["templates"] = templates.get();
        }
        return children.at("templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::Ospfv2Protocol::get_children()
{
    if(children.find("templates") == children.end())
    {
        if(templates != nullptr)
        {
            children["templates"] = templates.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::Ospfv2Protocol::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Statistics::Statistics()
    :
    basic_counter_interface(std::make_unique<PerfMgmt::Statistics::BasicCounterInterface>())
	,bgp(std::make_unique<PerfMgmt::Statistics::Bgp>())
	,cpu_node(std::make_unique<PerfMgmt::Statistics::CpuNode>())
	,data_rate_interface(std::make_unique<PerfMgmt::Statistics::DataRateInterface>())
	,generic_counter_interface(std::make_unique<PerfMgmt::Statistics::GenericCounterInterface>())
	,ldp_mpls(std::make_unique<PerfMgmt::Statistics::LdpMpls>())
	,memory_node(std::make_unique<PerfMgmt::Statistics::MemoryNode>())
	,ospfv2_protocol(std::make_unique<PerfMgmt::Statistics::Ospfv2Protocol>())
	,ospfv3_protocol(std::make_unique<PerfMgmt::Statistics::Ospfv3Protocol>())
	,process_node(std::make_unique<PerfMgmt::Statistics::ProcessNode>())
{
    basic_counter_interface->parent = this;
    children["basic-counter-interface"] = basic_counter_interface.get();

    bgp->parent = this;
    children["bgp"] = bgp.get();

    cpu_node->parent = this;
    children["cpu-node"] = cpu_node.get();

    data_rate_interface->parent = this;
    children["data-rate-interface"] = data_rate_interface.get();

    generic_counter_interface->parent = this;
    children["generic-counter-interface"] = generic_counter_interface.get();

    ldp_mpls->parent = this;
    children["ldp-mpls"] = ldp_mpls.get();

    memory_node->parent = this;
    children["memory-node"] = memory_node.get();

    ospfv2_protocol->parent = this;
    children["ospfv2-protocol"] = ospfv2_protocol.get();

    ospfv3_protocol->parent = this;
    children["ospfv3-protocol"] = ospfv3_protocol.get();

    process_node->parent = this;
    children["process-node"] = process_node.get();

    yang_name = "statistics"; yang_parent_name = "perf-mgmt";
}

PerfMgmt::Statistics::~Statistics()
{
}

bool PerfMgmt::Statistics::has_data() const
{
    return (basic_counter_interface !=  nullptr && basic_counter_interface->has_data())
	|| (bgp !=  nullptr && bgp->has_data())
	|| (cpu_node !=  nullptr && cpu_node->has_data())
	|| (data_rate_interface !=  nullptr && data_rate_interface->has_data())
	|| (generic_counter_interface !=  nullptr && generic_counter_interface->has_data())
	|| (ldp_mpls !=  nullptr && ldp_mpls->has_data())
	|| (memory_node !=  nullptr && memory_node->has_data())
	|| (ospfv2_protocol !=  nullptr && ospfv2_protocol->has_data())
	|| (ospfv3_protocol !=  nullptr && ospfv3_protocol->has_data())
	|| (process_node !=  nullptr && process_node->has_data());
}

bool PerfMgmt::Statistics::has_operation() const
{
    return is_set(operation)
	|| (basic_counter_interface !=  nullptr && basic_counter_interface->has_operation())
	|| (bgp !=  nullptr && bgp->has_operation())
	|| (cpu_node !=  nullptr && cpu_node->has_operation())
	|| (data_rate_interface !=  nullptr && data_rate_interface->has_operation())
	|| (generic_counter_interface !=  nullptr && generic_counter_interface->has_operation())
	|| (ldp_mpls !=  nullptr && ldp_mpls->has_operation())
	|| (memory_node !=  nullptr && memory_node->has_operation())
	|| (ospfv2_protocol !=  nullptr && ospfv2_protocol->has_operation())
	|| (ospfv3_protocol !=  nullptr && ospfv3_protocol->has_operation())
	|| (process_node !=  nullptr && process_node->has_operation());
}

std::string PerfMgmt::Statistics::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "statistics";

    return path_buffer.str();

}

EntityPath PerfMgmt::Statistics::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Statistics::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "basic-counter-interface")
    {
        if(basic_counter_interface != nullptr)
        {
            children["basic-counter-interface"] = basic_counter_interface.get();
        }
        else
        {
            basic_counter_interface = std::make_unique<PerfMgmt::Statistics::BasicCounterInterface>();
            basic_counter_interface->parent = this;
            children["basic-counter-interface"] = basic_counter_interface.get();
        }
        return children.at("basic-counter-interface");
    }

    if(child_yang_name == "bgp")
    {
        if(bgp != nullptr)
        {
            children["bgp"] = bgp.get();
        }
        else
        {
            bgp = std::make_unique<PerfMgmt::Statistics::Bgp>();
            bgp->parent = this;
            children["bgp"] = bgp.get();
        }
        return children.at("bgp");
    }

    if(child_yang_name == "cpu-node")
    {
        if(cpu_node != nullptr)
        {
            children["cpu-node"] = cpu_node.get();
        }
        else
        {
            cpu_node = std::make_unique<PerfMgmt::Statistics::CpuNode>();
            cpu_node->parent = this;
            children["cpu-node"] = cpu_node.get();
        }
        return children.at("cpu-node");
    }

    if(child_yang_name == "data-rate-interface")
    {
        if(data_rate_interface != nullptr)
        {
            children["data-rate-interface"] = data_rate_interface.get();
        }
        else
        {
            data_rate_interface = std::make_unique<PerfMgmt::Statistics::DataRateInterface>();
            data_rate_interface->parent = this;
            children["data-rate-interface"] = data_rate_interface.get();
        }
        return children.at("data-rate-interface");
    }

    if(child_yang_name == "generic-counter-interface")
    {
        if(generic_counter_interface != nullptr)
        {
            children["generic-counter-interface"] = generic_counter_interface.get();
        }
        else
        {
            generic_counter_interface = std::make_unique<PerfMgmt::Statistics::GenericCounterInterface>();
            generic_counter_interface->parent = this;
            children["generic-counter-interface"] = generic_counter_interface.get();
        }
        return children.at("generic-counter-interface");
    }

    if(child_yang_name == "ldp-mpls")
    {
        if(ldp_mpls != nullptr)
        {
            children["ldp-mpls"] = ldp_mpls.get();
        }
        else
        {
            ldp_mpls = std::make_unique<PerfMgmt::Statistics::LdpMpls>();
            ldp_mpls->parent = this;
            children["ldp-mpls"] = ldp_mpls.get();
        }
        return children.at("ldp-mpls");
    }

    if(child_yang_name == "memory-node")
    {
        if(memory_node != nullptr)
        {
            children["memory-node"] = memory_node.get();
        }
        else
        {
            memory_node = std::make_unique<PerfMgmt::Statistics::MemoryNode>();
            memory_node->parent = this;
            children["memory-node"] = memory_node.get();
        }
        return children.at("memory-node");
    }

    if(child_yang_name == "ospfv2-protocol")
    {
        if(ospfv2_protocol != nullptr)
        {
            children["ospfv2-protocol"] = ospfv2_protocol.get();
        }
        else
        {
            ospfv2_protocol = std::make_unique<PerfMgmt::Statistics::Ospfv2Protocol>();
            ospfv2_protocol->parent = this;
            children["ospfv2-protocol"] = ospfv2_protocol.get();
        }
        return children.at("ospfv2-protocol");
    }

    if(child_yang_name == "ospfv3-protocol")
    {
        if(ospfv3_protocol != nullptr)
        {
            children["ospfv3-protocol"] = ospfv3_protocol.get();
        }
        else
        {
            ospfv3_protocol = std::make_unique<PerfMgmt::Statistics::Ospfv3Protocol>();
            ospfv3_protocol->parent = this;
            children["ospfv3-protocol"] = ospfv3_protocol.get();
        }
        return children.at("ospfv3-protocol");
    }

    if(child_yang_name == "process-node")
    {
        if(process_node != nullptr)
        {
            children["process-node"] = process_node.get();
        }
        else
        {
            process_node = std::make_unique<PerfMgmt::Statistics::ProcessNode>();
            process_node->parent = this;
            children["process-node"] = process_node.get();
        }
        return children.at("process-node");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Statistics::get_children()
{
    if(children.find("basic-counter-interface") == children.end())
    {
        if(basic_counter_interface != nullptr)
        {
            children["basic-counter-interface"] = basic_counter_interface.get();
        }
    }

    if(children.find("bgp") == children.end())
    {
        if(bgp != nullptr)
        {
            children["bgp"] = bgp.get();
        }
    }

    if(children.find("cpu-node") == children.end())
    {
        if(cpu_node != nullptr)
        {
            children["cpu-node"] = cpu_node.get();
        }
    }

    if(children.find("data-rate-interface") == children.end())
    {
        if(data_rate_interface != nullptr)
        {
            children["data-rate-interface"] = data_rate_interface.get();
        }
    }

    if(children.find("generic-counter-interface") == children.end())
    {
        if(generic_counter_interface != nullptr)
        {
            children["generic-counter-interface"] = generic_counter_interface.get();
        }
    }

    if(children.find("ldp-mpls") == children.end())
    {
        if(ldp_mpls != nullptr)
        {
            children["ldp-mpls"] = ldp_mpls.get();
        }
    }

    if(children.find("memory-node") == children.end())
    {
        if(memory_node != nullptr)
        {
            children["memory-node"] = memory_node.get();
        }
    }

    if(children.find("ospfv2-protocol") == children.end())
    {
        if(ospfv2_protocol != nullptr)
        {
            children["ospfv2-protocol"] = ospfv2_protocol.get();
        }
    }

    if(children.find("ospfv3-protocol") == children.end())
    {
        if(ospfv3_protocol != nullptr)
        {
            children["ospfv3-protocol"] = ospfv3_protocol.get();
        }
    }

    if(children.find("process-node") == children.end())
    {
        if(process_node != nullptr)
        {
            children["process-node"] = process_node.get();
        }
    }

    return children;
}

void PerfMgmt::Statistics::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::Threshold::Ospfv3Protocol::Ospfv3Protocol()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "ospfv3-protocol"; yang_parent_name = "threshold";
}

PerfMgmt::Enable::Threshold::Ospfv3Protocol::~Ospfv3Protocol()
{
}

bool PerfMgmt::Enable::Threshold::Ospfv3Protocol::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Threshold::Ospfv3Protocol::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Threshold::Ospfv3Protocol::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ospfv3-protocol";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::Ospfv3Protocol::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::Ospfv3Protocol::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::Ospfv3Protocol::get_children()
{
    return children;
}

void PerfMgmt::Enable::Threshold::Ospfv3Protocol::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Threshold::Bgp::Bgp()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "bgp"; yang_parent_name = "threshold";
}

PerfMgmt::Enable::Threshold::Bgp::~Bgp()
{
}

bool PerfMgmt::Enable::Threshold::Bgp::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Threshold::Bgp::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Threshold::Bgp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bgp";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::Bgp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::Bgp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::Bgp::get_children()
{
    return children;
}

void PerfMgmt::Enable::Threshold::Bgp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Threshold::DataRateInterface::DataRateInterface()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "data-rate-interface"; yang_parent_name = "threshold";
}

PerfMgmt::Enable::Threshold::DataRateInterface::~DataRateInterface()
{
}

bool PerfMgmt::Enable::Threshold::DataRateInterface::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Threshold::DataRateInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Threshold::DataRateInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "data-rate-interface";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::DataRateInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::DataRateInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::DataRateInterface::get_children()
{
    return children;
}

void PerfMgmt::Enable::Threshold::DataRateInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Threshold::Ospfv2Protocol::Ospfv2Protocol()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "ospfv2-protocol"; yang_parent_name = "threshold";
}

PerfMgmt::Enable::Threshold::Ospfv2Protocol::~Ospfv2Protocol()
{
}

bool PerfMgmt::Enable::Threshold::Ospfv2Protocol::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Threshold::Ospfv2Protocol::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Threshold::Ospfv2Protocol::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ospfv2-protocol";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::Ospfv2Protocol::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::Ospfv2Protocol::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::Ospfv2Protocol::get_children()
{
    return children;
}

void PerfMgmt::Enable::Threshold::Ospfv2Protocol::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Threshold::MemoryNode::Nodes::Node::Node()
    :
    	node_id{YType::str, "node-id"},
	 template_name{YType::str, "template-name"}
{
    yang_name = "node"; yang_parent_name = "nodes";
}

PerfMgmt::Enable::Threshold::MemoryNode::Nodes::Node::~Node()
{
}

bool PerfMgmt::Enable::Threshold::MemoryNode::Nodes::Node::has_data() const
{
    return node_id.is_set
	|| template_name.is_set;
}

bool PerfMgmt::Enable::Threshold::MemoryNode::Nodes::Node::has_operation() const
{
    return is_set(operation)
	|| is_set(node_id.operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Threshold::MemoryNode::Nodes::Node::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "node" <<"[node-id='" <<node_id.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::MemoryNode::Nodes::Node::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/memory-node/nodes/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (node_id.is_set || is_set(node_id.operation)) leaf_name_data.push_back(node_id.get_name_leafdata());
    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::MemoryNode::Nodes::Node::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::MemoryNode::Nodes::Node::get_children()
{
    return children;
}

void PerfMgmt::Enable::Threshold::MemoryNode::Nodes::Node::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "node-id")
    {
        node_id = value;
    }
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Threshold::MemoryNode::Nodes::Nodes()
{
    yang_name = "nodes"; yang_parent_name = "memory-node";
}

PerfMgmt::Enable::Threshold::MemoryNode::Nodes::~Nodes()
{
}

bool PerfMgmt::Enable::Threshold::MemoryNode::Nodes::has_data() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Enable::Threshold::MemoryNode::Nodes::has_operation() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Enable::Threshold::MemoryNode::Nodes::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nodes";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::MemoryNode::Nodes::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/memory-node/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::MemoryNode::Nodes::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "node")
    {
        for(auto const & c : node)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Enable::Threshold::MemoryNode::Nodes::Node>();
        c->parent = this;
        node.push_back(std::move(c));
        children[segment_path] = node.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::MemoryNode::Nodes::get_children()
{
    for (auto const & c : node)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::Threshold::MemoryNode::Nodes::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::Threshold::MemoryNode::NodeAll::NodeAll()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "node-all"; yang_parent_name = "memory-node";
}

PerfMgmt::Enable::Threshold::MemoryNode::NodeAll::~NodeAll()
{
}

bool PerfMgmt::Enable::Threshold::MemoryNode::NodeAll::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Threshold::MemoryNode::NodeAll::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Threshold::MemoryNode::NodeAll::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "node-all";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::MemoryNode::NodeAll::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/memory-node/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::MemoryNode::NodeAll::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::MemoryNode::NodeAll::get_children()
{
    return children;
}

void PerfMgmt::Enable::Threshold::MemoryNode::NodeAll::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Threshold::MemoryNode::MemoryNode()
    :
    node_all(std::make_unique<PerfMgmt::Enable::Threshold::MemoryNode::NodeAll>())
	,nodes(std::make_unique<PerfMgmt::Enable::Threshold::MemoryNode::Nodes>())
{
    node_all->parent = this;
    children["node-all"] = node_all.get();

    nodes->parent = this;
    children["nodes"] = nodes.get();

    yang_name = "memory-node"; yang_parent_name = "threshold";
}

PerfMgmt::Enable::Threshold::MemoryNode::~MemoryNode()
{
}

bool PerfMgmt::Enable::Threshold::MemoryNode::has_data() const
{
    return (node_all !=  nullptr && node_all->has_data())
	|| (nodes !=  nullptr && nodes->has_data());
}

bool PerfMgmt::Enable::Threshold::MemoryNode::has_operation() const
{
    return is_set(operation)
	|| (node_all !=  nullptr && node_all->has_operation())
	|| (nodes !=  nullptr && nodes->has_operation());
}

std::string PerfMgmt::Enable::Threshold::MemoryNode::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "memory-node";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::MemoryNode::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::MemoryNode::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "node-all")
    {
        if(node_all != nullptr)
        {
            children["node-all"] = node_all.get();
        }
        else
        {
            node_all = std::make_unique<PerfMgmt::Enable::Threshold::MemoryNode::NodeAll>();
            node_all->parent = this;
            children["node-all"] = node_all.get();
        }
        return children.at("node-all");
    }

    if(child_yang_name == "nodes")
    {
        if(nodes != nullptr)
        {
            children["nodes"] = nodes.get();
        }
        else
        {
            nodes = std::make_unique<PerfMgmt::Enable::Threshold::MemoryNode::Nodes>();
            nodes->parent = this;
            children["nodes"] = nodes.get();
        }
        return children.at("nodes");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::MemoryNode::get_children()
{
    if(children.find("node-all") == children.end())
    {
        if(node_all != nullptr)
        {
            children["node-all"] = node_all.get();
        }
    }

    if(children.find("nodes") == children.end())
    {
        if(nodes != nullptr)
        {
            children["nodes"] = nodes.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::Threshold::MemoryNode::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::Threshold::GenericCounterInterface::GenericCounterInterface()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "generic-counter-interface"; yang_parent_name = "threshold";
}

PerfMgmt::Enable::Threshold::GenericCounterInterface::~GenericCounterInterface()
{
}

bool PerfMgmt::Enable::Threshold::GenericCounterInterface::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Threshold::GenericCounterInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Threshold::GenericCounterInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-counter-interface";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::GenericCounterInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::GenericCounterInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::GenericCounterInterface::get_children()
{
    return children;
}

void PerfMgmt::Enable::Threshold::GenericCounterInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Threshold::CpuNode::Nodes::Node::Node()
    :
    	node_id{YType::str, "node-id"},
	 template_name{YType::str, "template-name"}
{
    yang_name = "node"; yang_parent_name = "nodes";
}

PerfMgmt::Enable::Threshold::CpuNode::Nodes::Node::~Node()
{
}

bool PerfMgmt::Enable::Threshold::CpuNode::Nodes::Node::has_data() const
{
    return node_id.is_set
	|| template_name.is_set;
}

bool PerfMgmt::Enable::Threshold::CpuNode::Nodes::Node::has_operation() const
{
    return is_set(operation)
	|| is_set(node_id.operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Threshold::CpuNode::Nodes::Node::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "node" <<"[node-id='" <<node_id.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::CpuNode::Nodes::Node::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/cpu-node/nodes/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (node_id.is_set || is_set(node_id.operation)) leaf_name_data.push_back(node_id.get_name_leafdata());
    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::CpuNode::Nodes::Node::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::CpuNode::Nodes::Node::get_children()
{
    return children;
}

void PerfMgmt::Enable::Threshold::CpuNode::Nodes::Node::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "node-id")
    {
        node_id = value;
    }
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Threshold::CpuNode::Nodes::Nodes()
{
    yang_name = "nodes"; yang_parent_name = "cpu-node";
}

PerfMgmt::Enable::Threshold::CpuNode::Nodes::~Nodes()
{
}

bool PerfMgmt::Enable::Threshold::CpuNode::Nodes::has_data() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Enable::Threshold::CpuNode::Nodes::has_operation() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Enable::Threshold::CpuNode::Nodes::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nodes";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::CpuNode::Nodes::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/cpu-node/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::CpuNode::Nodes::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "node")
    {
        for(auto const & c : node)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Enable::Threshold::CpuNode::Nodes::Node>();
        c->parent = this;
        node.push_back(std::move(c));
        children[segment_path] = node.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::CpuNode::Nodes::get_children()
{
    for (auto const & c : node)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::Threshold::CpuNode::Nodes::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::Threshold::CpuNode::NodeAll::NodeAll()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "node-all"; yang_parent_name = "cpu-node";
}

PerfMgmt::Enable::Threshold::CpuNode::NodeAll::~NodeAll()
{
}

bool PerfMgmt::Enable::Threshold::CpuNode::NodeAll::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Threshold::CpuNode::NodeAll::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Threshold::CpuNode::NodeAll::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "node-all";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::CpuNode::NodeAll::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/cpu-node/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::CpuNode::NodeAll::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::CpuNode::NodeAll::get_children()
{
    return children;
}

void PerfMgmt::Enable::Threshold::CpuNode::NodeAll::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Threshold::CpuNode::CpuNode()
    :
    node_all(std::make_unique<PerfMgmt::Enable::Threshold::CpuNode::NodeAll>())
	,nodes(std::make_unique<PerfMgmt::Enable::Threshold::CpuNode::Nodes>())
{
    node_all->parent = this;
    children["node-all"] = node_all.get();

    nodes->parent = this;
    children["nodes"] = nodes.get();

    yang_name = "cpu-node"; yang_parent_name = "threshold";
}

PerfMgmt::Enable::Threshold::CpuNode::~CpuNode()
{
}

bool PerfMgmt::Enable::Threshold::CpuNode::has_data() const
{
    return (node_all !=  nullptr && node_all->has_data())
	|| (nodes !=  nullptr && nodes->has_data());
}

bool PerfMgmt::Enable::Threshold::CpuNode::has_operation() const
{
    return is_set(operation)
	|| (node_all !=  nullptr && node_all->has_operation())
	|| (nodes !=  nullptr && nodes->has_operation());
}

std::string PerfMgmt::Enable::Threshold::CpuNode::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "cpu-node";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::CpuNode::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::CpuNode::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "node-all")
    {
        if(node_all != nullptr)
        {
            children["node-all"] = node_all.get();
        }
        else
        {
            node_all = std::make_unique<PerfMgmt::Enable::Threshold::CpuNode::NodeAll>();
            node_all->parent = this;
            children["node-all"] = node_all.get();
        }
        return children.at("node-all");
    }

    if(child_yang_name == "nodes")
    {
        if(nodes != nullptr)
        {
            children["nodes"] = nodes.get();
        }
        else
        {
            nodes = std::make_unique<PerfMgmt::Enable::Threshold::CpuNode::Nodes>();
            nodes->parent = this;
            children["nodes"] = nodes.get();
        }
        return children.at("nodes");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::CpuNode::get_children()
{
    if(children.find("node-all") == children.end())
    {
        if(node_all != nullptr)
        {
            children["node-all"] = node_all.get();
        }
    }

    if(children.find("nodes") == children.end())
    {
        if(nodes != nullptr)
        {
            children["nodes"] = nodes.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::Threshold::CpuNode::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::Threshold::LdpMpls::LdpMpls()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "ldp-mpls"; yang_parent_name = "threshold";
}

PerfMgmt::Enable::Threshold::LdpMpls::~LdpMpls()
{
}

bool PerfMgmt::Enable::Threshold::LdpMpls::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Threshold::LdpMpls::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Threshold::LdpMpls::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ldp-mpls";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::LdpMpls::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::LdpMpls::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::LdpMpls::get_children()
{
    return children;
}

void PerfMgmt::Enable::Threshold::LdpMpls::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Threshold::ProcessNode::Nodes::Node::Node()
    :
    	node_id{YType::str, "node-id"},
	 template_name{YType::str, "template-name"}
{
    yang_name = "node"; yang_parent_name = "nodes";
}

PerfMgmt::Enable::Threshold::ProcessNode::Nodes::Node::~Node()
{
}

bool PerfMgmt::Enable::Threshold::ProcessNode::Nodes::Node::has_data() const
{
    return node_id.is_set
	|| template_name.is_set;
}

bool PerfMgmt::Enable::Threshold::ProcessNode::Nodes::Node::has_operation() const
{
    return is_set(operation)
	|| is_set(node_id.operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Threshold::ProcessNode::Nodes::Node::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "node" <<"[node-id='" <<node_id.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::ProcessNode::Nodes::Node::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/process-node/nodes/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (node_id.is_set || is_set(node_id.operation)) leaf_name_data.push_back(node_id.get_name_leafdata());
    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::ProcessNode::Nodes::Node::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::ProcessNode::Nodes::Node::get_children()
{
    return children;
}

void PerfMgmt::Enable::Threshold::ProcessNode::Nodes::Node::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "node-id")
    {
        node_id = value;
    }
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Threshold::ProcessNode::Nodes::Nodes()
{
    yang_name = "nodes"; yang_parent_name = "process-node";
}

PerfMgmt::Enable::Threshold::ProcessNode::Nodes::~Nodes()
{
}

bool PerfMgmt::Enable::Threshold::ProcessNode::Nodes::has_data() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Enable::Threshold::ProcessNode::Nodes::has_operation() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Enable::Threshold::ProcessNode::Nodes::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nodes";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::ProcessNode::Nodes::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/process-node/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::ProcessNode::Nodes::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "node")
    {
        for(auto const & c : node)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Enable::Threshold::ProcessNode::Nodes::Node>();
        c->parent = this;
        node.push_back(std::move(c));
        children[segment_path] = node.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::ProcessNode::Nodes::get_children()
{
    for (auto const & c : node)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::Threshold::ProcessNode::Nodes::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::Threshold::ProcessNode::NodeAll::NodeAll()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "node-all"; yang_parent_name = "process-node";
}

PerfMgmt::Enable::Threshold::ProcessNode::NodeAll::~NodeAll()
{
}

bool PerfMgmt::Enable::Threshold::ProcessNode::NodeAll::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Threshold::ProcessNode::NodeAll::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Threshold::ProcessNode::NodeAll::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "node-all";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::ProcessNode::NodeAll::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/process-node/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::ProcessNode::NodeAll::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::ProcessNode::NodeAll::get_children()
{
    return children;
}

void PerfMgmt::Enable::Threshold::ProcessNode::NodeAll::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Threshold::ProcessNode::ProcessNode()
    :
    node_all(std::make_unique<PerfMgmt::Enable::Threshold::ProcessNode::NodeAll>())
	,nodes(std::make_unique<PerfMgmt::Enable::Threshold::ProcessNode::Nodes>())
{
    node_all->parent = this;
    children["node-all"] = node_all.get();

    nodes->parent = this;
    children["nodes"] = nodes.get();

    yang_name = "process-node"; yang_parent_name = "threshold";
}

PerfMgmt::Enable::Threshold::ProcessNode::~ProcessNode()
{
}

bool PerfMgmt::Enable::Threshold::ProcessNode::has_data() const
{
    return (node_all !=  nullptr && node_all->has_data())
	|| (nodes !=  nullptr && nodes->has_data());
}

bool PerfMgmt::Enable::Threshold::ProcessNode::has_operation() const
{
    return is_set(operation)
	|| (node_all !=  nullptr && node_all->has_operation())
	|| (nodes !=  nullptr && nodes->has_operation());
}

std::string PerfMgmt::Enable::Threshold::ProcessNode::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "process-node";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::ProcessNode::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::ProcessNode::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "node-all")
    {
        if(node_all != nullptr)
        {
            children["node-all"] = node_all.get();
        }
        else
        {
            node_all = std::make_unique<PerfMgmt::Enable::Threshold::ProcessNode::NodeAll>();
            node_all->parent = this;
            children["node-all"] = node_all.get();
        }
        return children.at("node-all");
    }

    if(child_yang_name == "nodes")
    {
        if(nodes != nullptr)
        {
            children["nodes"] = nodes.get();
        }
        else
        {
            nodes = std::make_unique<PerfMgmt::Enable::Threshold::ProcessNode::Nodes>();
            nodes->parent = this;
            children["nodes"] = nodes.get();
        }
        return children.at("nodes");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::ProcessNode::get_children()
{
    if(children.find("node-all") == children.end())
    {
        if(node_all != nullptr)
        {
            children["node-all"] = node_all.get();
        }
    }

    if(children.find("nodes") == children.end())
    {
        if(nodes != nullptr)
        {
            children["nodes"] = nodes.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::Threshold::ProcessNode::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::Threshold::BasicCounterInterface::BasicCounterInterface()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "basic-counter-interface"; yang_parent_name = "threshold";
}

PerfMgmt::Enable::Threshold::BasicCounterInterface::~BasicCounterInterface()
{
}

bool PerfMgmt::Enable::Threshold::BasicCounterInterface::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Threshold::BasicCounterInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Threshold::BasicCounterInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "basic-counter-interface";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::BasicCounterInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::BasicCounterInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::BasicCounterInterface::get_children()
{
    return children;
}

void PerfMgmt::Enable::Threshold::BasicCounterInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Threshold::Threshold()
    :
    basic_counter_interface(std::make_unique<PerfMgmt::Enable::Threshold::BasicCounterInterface>())
	,bgp(std::make_unique<PerfMgmt::Enable::Threshold::Bgp>())
	,cpu_node(std::make_unique<PerfMgmt::Enable::Threshold::CpuNode>())
	,data_rate_interface(std::make_unique<PerfMgmt::Enable::Threshold::DataRateInterface>())
	,generic_counter_interface(std::make_unique<PerfMgmt::Enable::Threshold::GenericCounterInterface>())
	,ldp_mpls(std::make_unique<PerfMgmt::Enable::Threshold::LdpMpls>())
	,memory_node(std::make_unique<PerfMgmt::Enable::Threshold::MemoryNode>())
	,ospfv2_protocol(std::make_unique<PerfMgmt::Enable::Threshold::Ospfv2Protocol>())
	,ospfv3_protocol(std::make_unique<PerfMgmt::Enable::Threshold::Ospfv3Protocol>())
	,process_node(std::make_unique<PerfMgmt::Enable::Threshold::ProcessNode>())
{
    basic_counter_interface->parent = this;
    children["basic-counter-interface"] = basic_counter_interface.get();

    bgp->parent = this;
    children["bgp"] = bgp.get();

    cpu_node->parent = this;
    children["cpu-node"] = cpu_node.get();

    data_rate_interface->parent = this;
    children["data-rate-interface"] = data_rate_interface.get();

    generic_counter_interface->parent = this;
    children["generic-counter-interface"] = generic_counter_interface.get();

    ldp_mpls->parent = this;
    children["ldp-mpls"] = ldp_mpls.get();

    memory_node->parent = this;
    children["memory-node"] = memory_node.get();

    ospfv2_protocol->parent = this;
    children["ospfv2-protocol"] = ospfv2_protocol.get();

    ospfv3_protocol->parent = this;
    children["ospfv3-protocol"] = ospfv3_protocol.get();

    process_node->parent = this;
    children["process-node"] = process_node.get();

    yang_name = "threshold"; yang_parent_name = "enable";
}

PerfMgmt::Enable::Threshold::~Threshold()
{
}

bool PerfMgmt::Enable::Threshold::has_data() const
{
    return (basic_counter_interface !=  nullptr && basic_counter_interface->has_data())
	|| (bgp !=  nullptr && bgp->has_data())
	|| (cpu_node !=  nullptr && cpu_node->has_data())
	|| (data_rate_interface !=  nullptr && data_rate_interface->has_data())
	|| (generic_counter_interface !=  nullptr && generic_counter_interface->has_data())
	|| (ldp_mpls !=  nullptr && ldp_mpls->has_data())
	|| (memory_node !=  nullptr && memory_node->has_data())
	|| (ospfv2_protocol !=  nullptr && ospfv2_protocol->has_data())
	|| (ospfv3_protocol !=  nullptr && ospfv3_protocol->has_data())
	|| (process_node !=  nullptr && process_node->has_data());
}

bool PerfMgmt::Enable::Threshold::has_operation() const
{
    return is_set(operation)
	|| (basic_counter_interface !=  nullptr && basic_counter_interface->has_operation())
	|| (bgp !=  nullptr && bgp->has_operation())
	|| (cpu_node !=  nullptr && cpu_node->has_operation())
	|| (data_rate_interface !=  nullptr && data_rate_interface->has_operation())
	|| (generic_counter_interface !=  nullptr && generic_counter_interface->has_operation())
	|| (ldp_mpls !=  nullptr && ldp_mpls->has_operation())
	|| (memory_node !=  nullptr && memory_node->has_operation())
	|| (ospfv2_protocol !=  nullptr && ospfv2_protocol->has_operation())
	|| (ospfv3_protocol !=  nullptr && ospfv3_protocol->has_operation())
	|| (process_node !=  nullptr && process_node->has_operation());
}

std::string PerfMgmt::Enable::Threshold::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "threshold";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Threshold::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Threshold::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "basic-counter-interface")
    {
        if(basic_counter_interface != nullptr)
        {
            children["basic-counter-interface"] = basic_counter_interface.get();
        }
        else
        {
            basic_counter_interface = std::make_unique<PerfMgmt::Enable::Threshold::BasicCounterInterface>();
            basic_counter_interface->parent = this;
            children["basic-counter-interface"] = basic_counter_interface.get();
        }
        return children.at("basic-counter-interface");
    }

    if(child_yang_name == "bgp")
    {
        if(bgp != nullptr)
        {
            children["bgp"] = bgp.get();
        }
        else
        {
            bgp = std::make_unique<PerfMgmt::Enable::Threshold::Bgp>();
            bgp->parent = this;
            children["bgp"] = bgp.get();
        }
        return children.at("bgp");
    }

    if(child_yang_name == "cpu-node")
    {
        if(cpu_node != nullptr)
        {
            children["cpu-node"] = cpu_node.get();
        }
        else
        {
            cpu_node = std::make_unique<PerfMgmt::Enable::Threshold::CpuNode>();
            cpu_node->parent = this;
            children["cpu-node"] = cpu_node.get();
        }
        return children.at("cpu-node");
    }

    if(child_yang_name == "data-rate-interface")
    {
        if(data_rate_interface != nullptr)
        {
            children["data-rate-interface"] = data_rate_interface.get();
        }
        else
        {
            data_rate_interface = std::make_unique<PerfMgmt::Enable::Threshold::DataRateInterface>();
            data_rate_interface->parent = this;
            children["data-rate-interface"] = data_rate_interface.get();
        }
        return children.at("data-rate-interface");
    }

    if(child_yang_name == "generic-counter-interface")
    {
        if(generic_counter_interface != nullptr)
        {
            children["generic-counter-interface"] = generic_counter_interface.get();
        }
        else
        {
            generic_counter_interface = std::make_unique<PerfMgmt::Enable::Threshold::GenericCounterInterface>();
            generic_counter_interface->parent = this;
            children["generic-counter-interface"] = generic_counter_interface.get();
        }
        return children.at("generic-counter-interface");
    }

    if(child_yang_name == "ldp-mpls")
    {
        if(ldp_mpls != nullptr)
        {
            children["ldp-mpls"] = ldp_mpls.get();
        }
        else
        {
            ldp_mpls = std::make_unique<PerfMgmt::Enable::Threshold::LdpMpls>();
            ldp_mpls->parent = this;
            children["ldp-mpls"] = ldp_mpls.get();
        }
        return children.at("ldp-mpls");
    }

    if(child_yang_name == "memory-node")
    {
        if(memory_node != nullptr)
        {
            children["memory-node"] = memory_node.get();
        }
        else
        {
            memory_node = std::make_unique<PerfMgmt::Enable::Threshold::MemoryNode>();
            memory_node->parent = this;
            children["memory-node"] = memory_node.get();
        }
        return children.at("memory-node");
    }

    if(child_yang_name == "ospfv2-protocol")
    {
        if(ospfv2_protocol != nullptr)
        {
            children["ospfv2-protocol"] = ospfv2_protocol.get();
        }
        else
        {
            ospfv2_protocol = std::make_unique<PerfMgmt::Enable::Threshold::Ospfv2Protocol>();
            ospfv2_protocol->parent = this;
            children["ospfv2-protocol"] = ospfv2_protocol.get();
        }
        return children.at("ospfv2-protocol");
    }

    if(child_yang_name == "ospfv3-protocol")
    {
        if(ospfv3_protocol != nullptr)
        {
            children["ospfv3-protocol"] = ospfv3_protocol.get();
        }
        else
        {
            ospfv3_protocol = std::make_unique<PerfMgmt::Enable::Threshold::Ospfv3Protocol>();
            ospfv3_protocol->parent = this;
            children["ospfv3-protocol"] = ospfv3_protocol.get();
        }
        return children.at("ospfv3-protocol");
    }

    if(child_yang_name == "process-node")
    {
        if(process_node != nullptr)
        {
            children["process-node"] = process_node.get();
        }
        else
        {
            process_node = std::make_unique<PerfMgmt::Enable::Threshold::ProcessNode>();
            process_node->parent = this;
            children["process-node"] = process_node.get();
        }
        return children.at("process-node");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Threshold::get_children()
{
    if(children.find("basic-counter-interface") == children.end())
    {
        if(basic_counter_interface != nullptr)
        {
            children["basic-counter-interface"] = basic_counter_interface.get();
        }
    }

    if(children.find("bgp") == children.end())
    {
        if(bgp != nullptr)
        {
            children["bgp"] = bgp.get();
        }
    }

    if(children.find("cpu-node") == children.end())
    {
        if(cpu_node != nullptr)
        {
            children["cpu-node"] = cpu_node.get();
        }
    }

    if(children.find("data-rate-interface") == children.end())
    {
        if(data_rate_interface != nullptr)
        {
            children["data-rate-interface"] = data_rate_interface.get();
        }
    }

    if(children.find("generic-counter-interface") == children.end())
    {
        if(generic_counter_interface != nullptr)
        {
            children["generic-counter-interface"] = generic_counter_interface.get();
        }
    }

    if(children.find("ldp-mpls") == children.end())
    {
        if(ldp_mpls != nullptr)
        {
            children["ldp-mpls"] = ldp_mpls.get();
        }
    }

    if(children.find("memory-node") == children.end())
    {
        if(memory_node != nullptr)
        {
            children["memory-node"] = memory_node.get();
        }
    }

    if(children.find("ospfv2-protocol") == children.end())
    {
        if(ospfv2_protocol != nullptr)
        {
            children["ospfv2-protocol"] = ospfv2_protocol.get();
        }
    }

    if(children.find("ospfv3-protocol") == children.end())
    {
        if(ospfv3_protocol != nullptr)
        {
            children["ospfv3-protocol"] = ospfv3_protocol.get();
        }
    }

    if(children.find("process-node") == children.end())
    {
        if(process_node != nullptr)
        {
            children["process-node"] = process_node.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::Threshold::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::Statistics::GenericCounterInterface::GenericCounterInterface()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "generic-counter-interface"; yang_parent_name = "statistics";
}

PerfMgmt::Enable::Statistics::GenericCounterInterface::~GenericCounterInterface()
{
}

bool PerfMgmt::Enable::Statistics::GenericCounterInterface::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Statistics::GenericCounterInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Statistics::GenericCounterInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-counter-interface";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::GenericCounterInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::GenericCounterInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::GenericCounterInterface::get_children()
{
    return children;
}

void PerfMgmt::Enable::Statistics::GenericCounterInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Statistics::Bgp::Bgp()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "bgp"; yang_parent_name = "statistics";
}

PerfMgmt::Enable::Statistics::Bgp::~Bgp()
{
}

bool PerfMgmt::Enable::Statistics::Bgp::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Statistics::Bgp::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Statistics::Bgp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bgp";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::Bgp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::Bgp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::Bgp::get_children()
{
    return children;
}

void PerfMgmt::Enable::Statistics::Bgp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Statistics::Ospfv2Protocol::Ospfv2Protocol()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "ospfv2-protocol"; yang_parent_name = "statistics";
}

PerfMgmt::Enable::Statistics::Ospfv2Protocol::~Ospfv2Protocol()
{
}

bool PerfMgmt::Enable::Statistics::Ospfv2Protocol::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Statistics::Ospfv2Protocol::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Statistics::Ospfv2Protocol::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ospfv2-protocol";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::Ospfv2Protocol::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::Ospfv2Protocol::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::Ospfv2Protocol::get_children()
{
    return children;
}

void PerfMgmt::Enable::Statistics::Ospfv2Protocol::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Statistics::Ospfv3Protocol::Ospfv3Protocol()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "ospfv3-protocol"; yang_parent_name = "statistics";
}

PerfMgmt::Enable::Statistics::Ospfv3Protocol::~Ospfv3Protocol()
{
}

bool PerfMgmt::Enable::Statistics::Ospfv3Protocol::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Statistics::Ospfv3Protocol::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Statistics::Ospfv3Protocol::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ospfv3-protocol";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::Ospfv3Protocol::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::Ospfv3Protocol::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::Ospfv3Protocol::get_children()
{
    return children;
}

void PerfMgmt::Enable::Statistics::Ospfv3Protocol::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Statistics::CpuNode::NodeAll::NodeAll()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "node-all"; yang_parent_name = "cpu-node";
}

PerfMgmt::Enable::Statistics::CpuNode::NodeAll::~NodeAll()
{
}

bool PerfMgmt::Enable::Statistics::CpuNode::NodeAll::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Statistics::CpuNode::NodeAll::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Statistics::CpuNode::NodeAll::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "node-all";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::CpuNode::NodeAll::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/cpu-node/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::CpuNode::NodeAll::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::CpuNode::NodeAll::get_children()
{
    return children;
}

void PerfMgmt::Enable::Statistics::CpuNode::NodeAll::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Statistics::CpuNode::Nodes::Node::Node()
    :
    	node_id{YType::str, "node-id"},
	 template_name{YType::str, "template-name"}
{
    yang_name = "node"; yang_parent_name = "nodes";
}

PerfMgmt::Enable::Statistics::CpuNode::Nodes::Node::~Node()
{
}

bool PerfMgmt::Enable::Statistics::CpuNode::Nodes::Node::has_data() const
{
    return node_id.is_set
	|| template_name.is_set;
}

bool PerfMgmt::Enable::Statistics::CpuNode::Nodes::Node::has_operation() const
{
    return is_set(operation)
	|| is_set(node_id.operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Statistics::CpuNode::Nodes::Node::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "node" <<"[node-id='" <<node_id.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::CpuNode::Nodes::Node::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/cpu-node/nodes/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (node_id.is_set || is_set(node_id.operation)) leaf_name_data.push_back(node_id.get_name_leafdata());
    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::CpuNode::Nodes::Node::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::CpuNode::Nodes::Node::get_children()
{
    return children;
}

void PerfMgmt::Enable::Statistics::CpuNode::Nodes::Node::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "node-id")
    {
        node_id = value;
    }
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Statistics::CpuNode::Nodes::Nodes()
{
    yang_name = "nodes"; yang_parent_name = "cpu-node";
}

PerfMgmt::Enable::Statistics::CpuNode::Nodes::~Nodes()
{
}

bool PerfMgmt::Enable::Statistics::CpuNode::Nodes::has_data() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Enable::Statistics::CpuNode::Nodes::has_operation() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Enable::Statistics::CpuNode::Nodes::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nodes";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::CpuNode::Nodes::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/cpu-node/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::CpuNode::Nodes::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "node")
    {
        for(auto const & c : node)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Enable::Statistics::CpuNode::Nodes::Node>();
        c->parent = this;
        node.push_back(std::move(c));
        children[segment_path] = node.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::CpuNode::Nodes::get_children()
{
    for (auto const & c : node)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::Statistics::CpuNode::Nodes::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::Statistics::CpuNode::CpuNode()
    :
    node_all(std::make_unique<PerfMgmt::Enable::Statistics::CpuNode::NodeAll>())
	,nodes(std::make_unique<PerfMgmt::Enable::Statistics::CpuNode::Nodes>())
{
    node_all->parent = this;
    children["node-all"] = node_all.get();

    nodes->parent = this;
    children["nodes"] = nodes.get();

    yang_name = "cpu-node"; yang_parent_name = "statistics";
}

PerfMgmt::Enable::Statistics::CpuNode::~CpuNode()
{
}

bool PerfMgmt::Enable::Statistics::CpuNode::has_data() const
{
    return (node_all !=  nullptr && node_all->has_data())
	|| (nodes !=  nullptr && nodes->has_data());
}

bool PerfMgmt::Enable::Statistics::CpuNode::has_operation() const
{
    return is_set(operation)
	|| (node_all !=  nullptr && node_all->has_operation())
	|| (nodes !=  nullptr && nodes->has_operation());
}

std::string PerfMgmt::Enable::Statistics::CpuNode::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "cpu-node";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::CpuNode::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::CpuNode::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "node-all")
    {
        if(node_all != nullptr)
        {
            children["node-all"] = node_all.get();
        }
        else
        {
            node_all = std::make_unique<PerfMgmt::Enable::Statistics::CpuNode::NodeAll>();
            node_all->parent = this;
            children["node-all"] = node_all.get();
        }
        return children.at("node-all");
    }

    if(child_yang_name == "nodes")
    {
        if(nodes != nullptr)
        {
            children["nodes"] = nodes.get();
        }
        else
        {
            nodes = std::make_unique<PerfMgmt::Enable::Statistics::CpuNode::Nodes>();
            nodes->parent = this;
            children["nodes"] = nodes.get();
        }
        return children.at("nodes");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::CpuNode::get_children()
{
    if(children.find("node-all") == children.end())
    {
        if(node_all != nullptr)
        {
            children["node-all"] = node_all.get();
        }
    }

    if(children.find("nodes") == children.end())
    {
        if(nodes != nullptr)
        {
            children["nodes"] = nodes.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::Statistics::CpuNode::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::Statistics::BasicCounterInterface::BasicCounterInterface()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "basic-counter-interface"; yang_parent_name = "statistics";
}

PerfMgmt::Enable::Statistics::BasicCounterInterface::~BasicCounterInterface()
{
}

bool PerfMgmt::Enable::Statistics::BasicCounterInterface::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Statistics::BasicCounterInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Statistics::BasicCounterInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "basic-counter-interface";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::BasicCounterInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::BasicCounterInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::BasicCounterInterface::get_children()
{
    return children;
}

void PerfMgmt::Enable::Statistics::BasicCounterInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Statistics::ProcessNode::NodeAll::NodeAll()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "node-all"; yang_parent_name = "process-node";
}

PerfMgmt::Enable::Statistics::ProcessNode::NodeAll::~NodeAll()
{
}

bool PerfMgmt::Enable::Statistics::ProcessNode::NodeAll::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Statistics::ProcessNode::NodeAll::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Statistics::ProcessNode::NodeAll::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "node-all";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::ProcessNode::NodeAll::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/process-node/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::ProcessNode::NodeAll::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::ProcessNode::NodeAll::get_children()
{
    return children;
}

void PerfMgmt::Enable::Statistics::ProcessNode::NodeAll::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Statistics::ProcessNode::Nodes::Node::Node()
    :
    	node_id{YType::str, "node-id"},
	 template_name{YType::str, "template-name"}
{
    yang_name = "node"; yang_parent_name = "nodes";
}

PerfMgmt::Enable::Statistics::ProcessNode::Nodes::Node::~Node()
{
}

bool PerfMgmt::Enable::Statistics::ProcessNode::Nodes::Node::has_data() const
{
    return node_id.is_set
	|| template_name.is_set;
}

bool PerfMgmt::Enable::Statistics::ProcessNode::Nodes::Node::has_operation() const
{
    return is_set(operation)
	|| is_set(node_id.operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Statistics::ProcessNode::Nodes::Node::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "node" <<"[node-id='" <<node_id.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::ProcessNode::Nodes::Node::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/process-node/nodes/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (node_id.is_set || is_set(node_id.operation)) leaf_name_data.push_back(node_id.get_name_leafdata());
    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::ProcessNode::Nodes::Node::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::ProcessNode::Nodes::Node::get_children()
{
    return children;
}

void PerfMgmt::Enable::Statistics::ProcessNode::Nodes::Node::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "node-id")
    {
        node_id = value;
    }
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Statistics::ProcessNode::Nodes::Nodes()
{
    yang_name = "nodes"; yang_parent_name = "process-node";
}

PerfMgmt::Enable::Statistics::ProcessNode::Nodes::~Nodes()
{
}

bool PerfMgmt::Enable::Statistics::ProcessNode::Nodes::has_data() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Enable::Statistics::ProcessNode::Nodes::has_operation() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Enable::Statistics::ProcessNode::Nodes::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nodes";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::ProcessNode::Nodes::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/process-node/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::ProcessNode::Nodes::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "node")
    {
        for(auto const & c : node)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Enable::Statistics::ProcessNode::Nodes::Node>();
        c->parent = this;
        node.push_back(std::move(c));
        children[segment_path] = node.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::ProcessNode::Nodes::get_children()
{
    for (auto const & c : node)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::Statistics::ProcessNode::Nodes::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::Statistics::ProcessNode::ProcessNode()
    :
    node_all(std::make_unique<PerfMgmt::Enable::Statistics::ProcessNode::NodeAll>())
	,nodes(std::make_unique<PerfMgmt::Enable::Statistics::ProcessNode::Nodes>())
{
    node_all->parent = this;
    children["node-all"] = node_all.get();

    nodes->parent = this;
    children["nodes"] = nodes.get();

    yang_name = "process-node"; yang_parent_name = "statistics";
}

PerfMgmt::Enable::Statistics::ProcessNode::~ProcessNode()
{
}

bool PerfMgmt::Enable::Statistics::ProcessNode::has_data() const
{
    return (node_all !=  nullptr && node_all->has_data())
	|| (nodes !=  nullptr && nodes->has_data());
}

bool PerfMgmt::Enable::Statistics::ProcessNode::has_operation() const
{
    return is_set(operation)
	|| (node_all !=  nullptr && node_all->has_operation())
	|| (nodes !=  nullptr && nodes->has_operation());
}

std::string PerfMgmt::Enable::Statistics::ProcessNode::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "process-node";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::ProcessNode::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::ProcessNode::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "node-all")
    {
        if(node_all != nullptr)
        {
            children["node-all"] = node_all.get();
        }
        else
        {
            node_all = std::make_unique<PerfMgmt::Enable::Statistics::ProcessNode::NodeAll>();
            node_all->parent = this;
            children["node-all"] = node_all.get();
        }
        return children.at("node-all");
    }

    if(child_yang_name == "nodes")
    {
        if(nodes != nullptr)
        {
            children["nodes"] = nodes.get();
        }
        else
        {
            nodes = std::make_unique<PerfMgmt::Enable::Statistics::ProcessNode::Nodes>();
            nodes->parent = this;
            children["nodes"] = nodes.get();
        }
        return children.at("nodes");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::ProcessNode::get_children()
{
    if(children.find("node-all") == children.end())
    {
        if(node_all != nullptr)
        {
            children["node-all"] = node_all.get();
        }
    }

    if(children.find("nodes") == children.end())
    {
        if(nodes != nullptr)
        {
            children["nodes"] = nodes.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::Statistics::ProcessNode::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::Statistics::DataRateInterface::DataRateInterface()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "data-rate-interface"; yang_parent_name = "statistics";
}

PerfMgmt::Enable::Statistics::DataRateInterface::~DataRateInterface()
{
}

bool PerfMgmt::Enable::Statistics::DataRateInterface::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Statistics::DataRateInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Statistics::DataRateInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "data-rate-interface";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::DataRateInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::DataRateInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::DataRateInterface::get_children()
{
    return children;
}

void PerfMgmt::Enable::Statistics::DataRateInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Statistics::MemoryNode::NodeAll::NodeAll()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "node-all"; yang_parent_name = "memory-node";
}

PerfMgmt::Enable::Statistics::MemoryNode::NodeAll::~NodeAll()
{
}

bool PerfMgmt::Enable::Statistics::MemoryNode::NodeAll::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Statistics::MemoryNode::NodeAll::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Statistics::MemoryNode::NodeAll::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "node-all";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::MemoryNode::NodeAll::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/memory-node/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::MemoryNode::NodeAll::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::MemoryNode::NodeAll::get_children()
{
    return children;
}

void PerfMgmt::Enable::Statistics::MemoryNode::NodeAll::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Statistics::MemoryNode::Nodes::Node::Node()
    :
    	node_id{YType::str, "node-id"},
	 template_name{YType::str, "template-name"}
{
    yang_name = "node"; yang_parent_name = "nodes";
}

PerfMgmt::Enable::Statistics::MemoryNode::Nodes::Node::~Node()
{
}

bool PerfMgmt::Enable::Statistics::MemoryNode::Nodes::Node::has_data() const
{
    return node_id.is_set
	|| template_name.is_set;
}

bool PerfMgmt::Enable::Statistics::MemoryNode::Nodes::Node::has_operation() const
{
    return is_set(operation)
	|| is_set(node_id.operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Statistics::MemoryNode::Nodes::Node::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "node" <<"[node-id='" <<node_id.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::MemoryNode::Nodes::Node::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/memory-node/nodes/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (node_id.is_set || is_set(node_id.operation)) leaf_name_data.push_back(node_id.get_name_leafdata());
    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::MemoryNode::Nodes::Node::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::MemoryNode::Nodes::Node::get_children()
{
    return children;
}

void PerfMgmt::Enable::Statistics::MemoryNode::Nodes::Node::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "node-id")
    {
        node_id = value;
    }
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Statistics::MemoryNode::Nodes::Nodes()
{
    yang_name = "nodes"; yang_parent_name = "memory-node";
}

PerfMgmt::Enable::Statistics::MemoryNode::Nodes::~Nodes()
{
}

bool PerfMgmt::Enable::Statistics::MemoryNode::Nodes::has_data() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Enable::Statistics::MemoryNode::Nodes::has_operation() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Enable::Statistics::MemoryNode::Nodes::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nodes";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::MemoryNode::Nodes::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/memory-node/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::MemoryNode::Nodes::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "node")
    {
        for(auto const & c : node)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Enable::Statistics::MemoryNode::Nodes::Node>();
        c->parent = this;
        node.push_back(std::move(c));
        children[segment_path] = node.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::MemoryNode::Nodes::get_children()
{
    for (auto const & c : node)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::Statistics::MemoryNode::Nodes::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::Statistics::MemoryNode::MemoryNode()
    :
    node_all(std::make_unique<PerfMgmt::Enable::Statistics::MemoryNode::NodeAll>())
	,nodes(std::make_unique<PerfMgmt::Enable::Statistics::MemoryNode::Nodes>())
{
    node_all->parent = this;
    children["node-all"] = node_all.get();

    nodes->parent = this;
    children["nodes"] = nodes.get();

    yang_name = "memory-node"; yang_parent_name = "statistics";
}

PerfMgmt::Enable::Statistics::MemoryNode::~MemoryNode()
{
}

bool PerfMgmt::Enable::Statistics::MemoryNode::has_data() const
{
    return (node_all !=  nullptr && node_all->has_data())
	|| (nodes !=  nullptr && nodes->has_data());
}

bool PerfMgmt::Enable::Statistics::MemoryNode::has_operation() const
{
    return is_set(operation)
	|| (node_all !=  nullptr && node_all->has_operation())
	|| (nodes !=  nullptr && nodes->has_operation());
}

std::string PerfMgmt::Enable::Statistics::MemoryNode::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "memory-node";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::MemoryNode::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::MemoryNode::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "node-all")
    {
        if(node_all != nullptr)
        {
            children["node-all"] = node_all.get();
        }
        else
        {
            node_all = std::make_unique<PerfMgmt::Enable::Statistics::MemoryNode::NodeAll>();
            node_all->parent = this;
            children["node-all"] = node_all.get();
        }
        return children.at("node-all");
    }

    if(child_yang_name == "nodes")
    {
        if(nodes != nullptr)
        {
            children["nodes"] = nodes.get();
        }
        else
        {
            nodes = std::make_unique<PerfMgmt::Enable::Statistics::MemoryNode::Nodes>();
            nodes->parent = this;
            children["nodes"] = nodes.get();
        }
        return children.at("nodes");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::MemoryNode::get_children()
{
    if(children.find("node-all") == children.end())
    {
        if(node_all != nullptr)
        {
            children["node-all"] = node_all.get();
        }
    }

    if(children.find("nodes") == children.end())
    {
        if(nodes != nullptr)
        {
            children["nodes"] = nodes.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::Statistics::MemoryNode::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::Statistics::LdpMpls::LdpMpls()
    :
    	template_name{YType::str, "template-name"}
{
    yang_name = "ldp-mpls"; yang_parent_name = "statistics";
}

PerfMgmt::Enable::Statistics::LdpMpls::~LdpMpls()
{
}

bool PerfMgmt::Enable::Statistics::LdpMpls::has_data() const
{
    return template_name.is_set;
}

bool PerfMgmt::Enable::Statistics::LdpMpls::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::Statistics::LdpMpls::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ldp-mpls";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::LdpMpls::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/statistics/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::LdpMpls::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::LdpMpls::get_children()
{
    return children;
}

void PerfMgmt::Enable::Statistics::LdpMpls::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::Statistics::Statistics()
    :
    basic_counter_interface(std::make_unique<PerfMgmt::Enable::Statistics::BasicCounterInterface>())
	,bgp(std::make_unique<PerfMgmt::Enable::Statistics::Bgp>())
	,cpu_node(std::make_unique<PerfMgmt::Enable::Statistics::CpuNode>())
	,data_rate_interface(std::make_unique<PerfMgmt::Enable::Statistics::DataRateInterface>())
	,generic_counter_interface(std::make_unique<PerfMgmt::Enable::Statistics::GenericCounterInterface>())
	,ldp_mpls(std::make_unique<PerfMgmt::Enable::Statistics::LdpMpls>())
	,memory_node(std::make_unique<PerfMgmt::Enable::Statistics::MemoryNode>())
	,ospfv2_protocol(std::make_unique<PerfMgmt::Enable::Statistics::Ospfv2Protocol>())
	,ospfv3_protocol(std::make_unique<PerfMgmt::Enable::Statistics::Ospfv3Protocol>())
	,process_node(std::make_unique<PerfMgmt::Enable::Statistics::ProcessNode>())
{
    basic_counter_interface->parent = this;
    children["basic-counter-interface"] = basic_counter_interface.get();

    bgp->parent = this;
    children["bgp"] = bgp.get();

    cpu_node->parent = this;
    children["cpu-node"] = cpu_node.get();

    data_rate_interface->parent = this;
    children["data-rate-interface"] = data_rate_interface.get();

    generic_counter_interface->parent = this;
    children["generic-counter-interface"] = generic_counter_interface.get();

    ldp_mpls->parent = this;
    children["ldp-mpls"] = ldp_mpls.get();

    memory_node->parent = this;
    children["memory-node"] = memory_node.get();

    ospfv2_protocol->parent = this;
    children["ospfv2-protocol"] = ospfv2_protocol.get();

    ospfv3_protocol->parent = this;
    children["ospfv3-protocol"] = ospfv3_protocol.get();

    process_node->parent = this;
    children["process-node"] = process_node.get();

    yang_name = "statistics"; yang_parent_name = "enable";
}

PerfMgmt::Enable::Statistics::~Statistics()
{
}

bool PerfMgmt::Enable::Statistics::has_data() const
{
    return (basic_counter_interface !=  nullptr && basic_counter_interface->has_data())
	|| (bgp !=  nullptr && bgp->has_data())
	|| (cpu_node !=  nullptr && cpu_node->has_data())
	|| (data_rate_interface !=  nullptr && data_rate_interface->has_data())
	|| (generic_counter_interface !=  nullptr && generic_counter_interface->has_data())
	|| (ldp_mpls !=  nullptr && ldp_mpls->has_data())
	|| (memory_node !=  nullptr && memory_node->has_data())
	|| (ospfv2_protocol !=  nullptr && ospfv2_protocol->has_data())
	|| (ospfv3_protocol !=  nullptr && ospfv3_protocol->has_data())
	|| (process_node !=  nullptr && process_node->has_data());
}

bool PerfMgmt::Enable::Statistics::has_operation() const
{
    return is_set(operation)
	|| (basic_counter_interface !=  nullptr && basic_counter_interface->has_operation())
	|| (bgp !=  nullptr && bgp->has_operation())
	|| (cpu_node !=  nullptr && cpu_node->has_operation())
	|| (data_rate_interface !=  nullptr && data_rate_interface->has_operation())
	|| (generic_counter_interface !=  nullptr && generic_counter_interface->has_operation())
	|| (ldp_mpls !=  nullptr && ldp_mpls->has_operation())
	|| (memory_node !=  nullptr && memory_node->has_operation())
	|| (ospfv2_protocol !=  nullptr && ospfv2_protocol->has_operation())
	|| (ospfv3_protocol !=  nullptr && ospfv3_protocol->has_operation())
	|| (process_node !=  nullptr && process_node->has_operation());
}

std::string PerfMgmt::Enable::Statistics::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "statistics";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::Statistics::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::Statistics::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "basic-counter-interface")
    {
        if(basic_counter_interface != nullptr)
        {
            children["basic-counter-interface"] = basic_counter_interface.get();
        }
        else
        {
            basic_counter_interface = std::make_unique<PerfMgmt::Enable::Statistics::BasicCounterInterface>();
            basic_counter_interface->parent = this;
            children["basic-counter-interface"] = basic_counter_interface.get();
        }
        return children.at("basic-counter-interface");
    }

    if(child_yang_name == "bgp")
    {
        if(bgp != nullptr)
        {
            children["bgp"] = bgp.get();
        }
        else
        {
            bgp = std::make_unique<PerfMgmt::Enable::Statistics::Bgp>();
            bgp->parent = this;
            children["bgp"] = bgp.get();
        }
        return children.at("bgp");
    }

    if(child_yang_name == "cpu-node")
    {
        if(cpu_node != nullptr)
        {
            children["cpu-node"] = cpu_node.get();
        }
        else
        {
            cpu_node = std::make_unique<PerfMgmt::Enable::Statistics::CpuNode>();
            cpu_node->parent = this;
            children["cpu-node"] = cpu_node.get();
        }
        return children.at("cpu-node");
    }

    if(child_yang_name == "data-rate-interface")
    {
        if(data_rate_interface != nullptr)
        {
            children["data-rate-interface"] = data_rate_interface.get();
        }
        else
        {
            data_rate_interface = std::make_unique<PerfMgmt::Enable::Statistics::DataRateInterface>();
            data_rate_interface->parent = this;
            children["data-rate-interface"] = data_rate_interface.get();
        }
        return children.at("data-rate-interface");
    }

    if(child_yang_name == "generic-counter-interface")
    {
        if(generic_counter_interface != nullptr)
        {
            children["generic-counter-interface"] = generic_counter_interface.get();
        }
        else
        {
            generic_counter_interface = std::make_unique<PerfMgmt::Enable::Statistics::GenericCounterInterface>();
            generic_counter_interface->parent = this;
            children["generic-counter-interface"] = generic_counter_interface.get();
        }
        return children.at("generic-counter-interface");
    }

    if(child_yang_name == "ldp-mpls")
    {
        if(ldp_mpls != nullptr)
        {
            children["ldp-mpls"] = ldp_mpls.get();
        }
        else
        {
            ldp_mpls = std::make_unique<PerfMgmt::Enable::Statistics::LdpMpls>();
            ldp_mpls->parent = this;
            children["ldp-mpls"] = ldp_mpls.get();
        }
        return children.at("ldp-mpls");
    }

    if(child_yang_name == "memory-node")
    {
        if(memory_node != nullptr)
        {
            children["memory-node"] = memory_node.get();
        }
        else
        {
            memory_node = std::make_unique<PerfMgmt::Enable::Statistics::MemoryNode>();
            memory_node->parent = this;
            children["memory-node"] = memory_node.get();
        }
        return children.at("memory-node");
    }

    if(child_yang_name == "ospfv2-protocol")
    {
        if(ospfv2_protocol != nullptr)
        {
            children["ospfv2-protocol"] = ospfv2_protocol.get();
        }
        else
        {
            ospfv2_protocol = std::make_unique<PerfMgmt::Enable::Statistics::Ospfv2Protocol>();
            ospfv2_protocol->parent = this;
            children["ospfv2-protocol"] = ospfv2_protocol.get();
        }
        return children.at("ospfv2-protocol");
    }

    if(child_yang_name == "ospfv3-protocol")
    {
        if(ospfv3_protocol != nullptr)
        {
            children["ospfv3-protocol"] = ospfv3_protocol.get();
        }
        else
        {
            ospfv3_protocol = std::make_unique<PerfMgmt::Enable::Statistics::Ospfv3Protocol>();
            ospfv3_protocol->parent = this;
            children["ospfv3-protocol"] = ospfv3_protocol.get();
        }
        return children.at("ospfv3-protocol");
    }

    if(child_yang_name == "process-node")
    {
        if(process_node != nullptr)
        {
            children["process-node"] = process_node.get();
        }
        else
        {
            process_node = std::make_unique<PerfMgmt::Enable::Statistics::ProcessNode>();
            process_node->parent = this;
            children["process-node"] = process_node.get();
        }
        return children.at("process-node");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::Statistics::get_children()
{
    if(children.find("basic-counter-interface") == children.end())
    {
        if(basic_counter_interface != nullptr)
        {
            children["basic-counter-interface"] = basic_counter_interface.get();
        }
    }

    if(children.find("bgp") == children.end())
    {
        if(bgp != nullptr)
        {
            children["bgp"] = bgp.get();
        }
    }

    if(children.find("cpu-node") == children.end())
    {
        if(cpu_node != nullptr)
        {
            children["cpu-node"] = cpu_node.get();
        }
    }

    if(children.find("data-rate-interface") == children.end())
    {
        if(data_rate_interface != nullptr)
        {
            children["data-rate-interface"] = data_rate_interface.get();
        }
    }

    if(children.find("generic-counter-interface") == children.end())
    {
        if(generic_counter_interface != nullptr)
        {
            children["generic-counter-interface"] = generic_counter_interface.get();
        }
    }

    if(children.find("ldp-mpls") == children.end())
    {
        if(ldp_mpls != nullptr)
        {
            children["ldp-mpls"] = ldp_mpls.get();
        }
    }

    if(children.find("memory-node") == children.end())
    {
        if(memory_node != nullptr)
        {
            children["memory-node"] = memory_node.get();
        }
    }

    if(children.find("ospfv2-protocol") == children.end())
    {
        if(ospfv2_protocol != nullptr)
        {
            children["ospfv2-protocol"] = ospfv2_protocol.get();
        }
    }

    if(children.find("ospfv3-protocol") == children.end())
    {
        if(ospfv3_protocol != nullptr)
        {
            children["ospfv3-protocol"] = ospfv3_protocol.get();
        }
    }

    if(children.find("process-node") == children.end())
    {
        if(process_node != nullptr)
        {
            children["process-node"] = process_node.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::Statistics::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions::Session::Session()
    :
    	session{YType::str, "session"},
	 template_name{YType::str, "template-name"}
{
    yang_name = "session"; yang_parent_name = "sessions";
}

PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions::Session::~Session()
{
}

bool PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions::Session::has_data() const
{
    return session.is_set
	|| template_name.is_set;
}

bool PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions::Session::has_operation() const
{
    return is_set(operation)
	|| is_set(session.operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session" <<"[session='" <<session.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/ldp-mpls/sessions/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session.is_set || is_set(session.operation)) leaf_name_data.push_back(session.get_name_leafdata());
    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions::Session::get_children()
{
    return children;
}

void PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions::Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session")
    {
        session = value;
    }
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions::Sessions()
{
    yang_name = "sessions"; yang_parent_name = "ldp-mpls";
}

PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions::~Sessions()
{
}

bool PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions::has_data() const
{
    for (std::size_t index=0; index<session.size(); index++)
    {
        if(session[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions::has_operation() const
{
    for (std::size_t index=0; index<session.size(); index++)
    {
        if(session[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sessions";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/ldp-mpls/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "session")
    {
        for(auto const & c : session)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions::Session>();
        c->parent = this;
        session.push_back(std::move(c));
        children[segment_path] = session.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions::get_children()
{
    for (auto const & c : session)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::LdpMpls::LdpMpls()
    :
    sessions(std::make_unique<PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions>())
{
    sessions->parent = this;
    children["sessions"] = sessions.get();

    yang_name = "ldp-mpls"; yang_parent_name = "monitor-enable";
}

PerfMgmt::Enable::MonitorEnable::LdpMpls::~LdpMpls()
{
}

bool PerfMgmt::Enable::MonitorEnable::LdpMpls::has_data() const
{
    return (sessions !=  nullptr && sessions->has_data());
}

bool PerfMgmt::Enable::MonitorEnable::LdpMpls::has_operation() const
{
    return is_set(operation)
	|| (sessions !=  nullptr && sessions->has_operation());
}

std::string PerfMgmt::Enable::MonitorEnable::LdpMpls::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ldp-mpls";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::LdpMpls::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::LdpMpls::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "sessions")
    {
        if(sessions != nullptr)
        {
            children["sessions"] = sessions.get();
        }
        else
        {
            sessions = std::make_unique<PerfMgmt::Enable::MonitorEnable::LdpMpls::Sessions>();
            sessions->parent = this;
            children["sessions"] = sessions.get();
        }
        return children.at("sessions");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::LdpMpls::get_children()
{
    if(children.find("sessions") == children.end())
    {
        if(sessions != nullptr)
        {
            children["sessions"] = sessions.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::LdpMpls::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances::OspfInstance::OspfInstance()
    :
    	instance_name{YType::str, "instance-name"},
	 template_name{YType::str, "template-name"}
{
    yang_name = "ospf-instance"; yang_parent_name = "ospf-instances";
}

PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances::OspfInstance::~OspfInstance()
{
}

bool PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances::OspfInstance::has_data() const
{
    return instance_name.is_set
	|| template_name.is_set;
}

bool PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances::OspfInstance::has_operation() const
{
    return is_set(operation)
	|| is_set(instance_name.operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances::OspfInstance::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ospf-instance" <<"[instance-name='" <<instance_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances::OspfInstance::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/ospfv3-protocol/ospf-instances/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (instance_name.is_set || is_set(instance_name.operation)) leaf_name_data.push_back(instance_name.get_name_leafdata());
    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances::OspfInstance::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances::OspfInstance::get_children()
{
    return children;
}

void PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances::OspfInstance::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "instance-name")
    {
        instance_name = value;
    }
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances::OspfInstances()
{
    yang_name = "ospf-instances"; yang_parent_name = "ospfv3-protocol";
}

PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances::~OspfInstances()
{
}

bool PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances::has_data() const
{
    for (std::size_t index=0; index<ospf_instance.size(); index++)
    {
        if(ospf_instance[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances::has_operation() const
{
    for (std::size_t index=0; index<ospf_instance.size(); index++)
    {
        if(ospf_instance[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ospf-instances";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/ospfv3-protocol/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ospf-instance")
    {
        for(auto const & c : ospf_instance)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances::OspfInstance>();
        c->parent = this;
        ospf_instance.push_back(std::move(c));
        children[segment_path] = ospf_instance.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances::get_children()
{
    for (auto const & c : ospf_instance)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::Ospfv3Protocol()
    :
    ospf_instances(std::make_unique<PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances>())
{
    ospf_instances->parent = this;
    children["ospf-instances"] = ospf_instances.get();

    yang_name = "ospfv3-protocol"; yang_parent_name = "monitor-enable";
}

PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::~Ospfv3Protocol()
{
}

bool PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::has_data() const
{
    return (ospf_instances !=  nullptr && ospf_instances->has_data());
}

bool PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::has_operation() const
{
    return is_set(operation)
	|| (ospf_instances !=  nullptr && ospf_instances->has_operation());
}

std::string PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ospfv3-protocol";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ospf-instances")
    {
        if(ospf_instances != nullptr)
        {
            children["ospf-instances"] = ospf_instances.get();
        }
        else
        {
            ospf_instances = std::make_unique<PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::OspfInstances>();
            ospf_instances->parent = this;
            children["ospf-instances"] = ospf_instances.get();
        }
        return children.at("ospf-instances");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::get_children()
{
    if(children.find("ospf-instances") == children.end())
    {
        if(ospf_instances != nullptr)
        {
            children["ospf-instances"] = ospf_instances.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces::Interface::Interface()
    :
    	interface_name{YType::str, "interface-name"},
	 template_name{YType::str, "template-name"}
{
    yang_name = "interface"; yang_parent_name = "interfaces";
}

PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces::Interface::~Interface()
{
}

bool PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces::Interface::has_data() const
{
    return interface_name.is_set
	|| template_name.is_set;
}

bool PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces::Interface::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces::Interface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces::Interface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/generic-counters/interfaces/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces::Interface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces::Interface::get_children()
{
    return children;
}

void PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces::Interface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces::Interfaces()
{
    yang_name = "interfaces"; yang_parent_name = "generic-counters";
}

PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces::~Interfaces()
{
}

bool PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces::has_data() const
{
    for (std::size_t index=0; index<interface.size(); index++)
    {
        if(interface[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces::has_operation() const
{
    for (std::size_t index=0; index<interface.size(); index++)
    {
        if(interface[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interfaces";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/generic-counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface")
    {
        for(auto const & c : interface)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces::Interface>();
        c->parent = this;
        interface.push_back(std::move(c));
        children[segment_path] = interface.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces::get_children()
{
    for (auto const & c : interface)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::GenericCounters::GenericCounters()
    :
    interfaces(std::make_unique<PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces>())
{
    interfaces->parent = this;
    children["interfaces"] = interfaces.get();

    yang_name = "generic-counters"; yang_parent_name = "monitor-enable";
}

PerfMgmt::Enable::MonitorEnable::GenericCounters::~GenericCounters()
{
}

bool PerfMgmt::Enable::MonitorEnable::GenericCounters::has_data() const
{
    return (interfaces !=  nullptr && interfaces->has_data());
}

bool PerfMgmt::Enable::MonitorEnable::GenericCounters::has_operation() const
{
    return is_set(operation)
	|| (interfaces !=  nullptr && interfaces->has_operation());
}

std::string PerfMgmt::Enable::MonitorEnable::GenericCounters::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-counters";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::GenericCounters::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::GenericCounters::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interfaces")
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
        else
        {
            interfaces = std::make_unique<PerfMgmt::Enable::MonitorEnable::GenericCounters::Interfaces>();
            interfaces->parent = this;
            children["interfaces"] = interfaces.get();
        }
        return children.at("interfaces");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::GenericCounters::get_children()
{
    if(children.find("interfaces") == children.end())
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::GenericCounters::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids::Pid::Pid()
    :
    	pid{YType::uint32, "pid"},
	 template_name{YType::str, "template-name"}
{
    yang_name = "pid"; yang_parent_name = "pids";
}

PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids::Pid::~Pid()
{
}

bool PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids::Pid::has_data() const
{
    return pid.is_set
	|| template_name.is_set;
}

bool PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids::Pid::has_operation() const
{
    return is_set(operation)
	|| is_set(pid.operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids::Pid::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pid" <<"[pid='" <<pid.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids::Pid::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (pid.is_set || is_set(pid.operation)) leaf_name_data.push_back(pid.get_name_leafdata());
    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids::Pid::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids::Pid::get_children()
{
    return children;
}

void PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids::Pid::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "pid")
    {
        pid = value;
    }
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids::Pids()
{
    yang_name = "pids"; yang_parent_name = "process-node";
}

PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids::~Pids()
{
}

bool PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids::has_data() const
{
    for (std::size_t index=0; index<pid.size(); index++)
    {
        if(pid[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids::has_operation() const
{
    for (std::size_t index=0; index<pid.size(); index++)
    {
        if(pid[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pids";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "pid")
    {
        for(auto const & c : pid)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids::Pid>();
        c->parent = this;
        pid.push_back(std::move(c));
        children[segment_path] = pid.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids::get_children()
{
    for (auto const & c : pid)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::ProcessNode()
    :
    	node_id{YType::str, "node-id"}
    	,
    pids(std::make_unique<PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids>())
{
    pids->parent = this;
    children["pids"] = pids.get();

    yang_name = "process-node"; yang_parent_name = "process-nodes";
}

PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::~ProcessNode()
{
}

bool PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::has_data() const
{
    return node_id.is_set
	|| (pids !=  nullptr && pids->has_data());
}

bool PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::has_operation() const
{
    return is_set(operation)
	|| is_set(node_id.operation)
	|| (pids !=  nullptr && pids->has_operation());
}

std::string PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "process-node" <<"[node-id='" <<node_id.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/process/process-nodes/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (node_id.is_set || is_set(node_id.operation)) leaf_name_data.push_back(node_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "pids")
    {
        if(pids != nullptr)
        {
            children["pids"] = pids.get();
        }
        else
        {
            pids = std::make_unique<PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::Pids>();
            pids->parent = this;
            children["pids"] = pids.get();
        }
        return children.at("pids");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::get_children()
{
    if(children.find("pids") == children.end())
    {
        if(pids != nullptr)
        {
            children["pids"] = pids.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "node-id")
    {
        node_id = value;
    }
}

PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNodes()
{
    yang_name = "process-nodes"; yang_parent_name = "process";
}

PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::~ProcessNodes()
{
}

bool PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::has_data() const
{
    for (std::size_t index=0; index<process_node.size(); index++)
    {
        if(process_node[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::has_operation() const
{
    for (std::size_t index=0; index<process_node.size(); index++)
    {
        if(process_node[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "process-nodes";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/process/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "process-node")
    {
        for(auto const & c : process_node)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::ProcessNode>();
        c->parent = this;
        process_node.push_back(std::move(c));
        children[segment_path] = process_node.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::get_children()
{
    for (auto const & c : process_node)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::Process::Process()
    :
    process_nodes(std::make_unique<PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes>())
{
    process_nodes->parent = this;
    children["process-nodes"] = process_nodes.get();

    yang_name = "process"; yang_parent_name = "monitor-enable";
}

PerfMgmt::Enable::MonitorEnable::Process::~Process()
{
}

bool PerfMgmt::Enable::MonitorEnable::Process::has_data() const
{
    return (process_nodes !=  nullptr && process_nodes->has_data());
}

bool PerfMgmt::Enable::MonitorEnable::Process::has_operation() const
{
    return is_set(operation)
	|| (process_nodes !=  nullptr && process_nodes->has_operation());
}

std::string PerfMgmt::Enable::MonitorEnable::Process::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "process";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Process::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Process::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "process-nodes")
    {
        if(process_nodes != nullptr)
        {
            children["process-nodes"] = process_nodes.get();
        }
        else
        {
            process_nodes = std::make_unique<PerfMgmt::Enable::MonitorEnable::Process::ProcessNodes>();
            process_nodes->parent = this;
            children["process-nodes"] = process_nodes.get();
        }
        return children.at("process-nodes");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Process::get_children()
{
    if(children.find("process-nodes") == children.end())
    {
        if(process_nodes != nullptr)
        {
            children["process-nodes"] = process_nodes.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::Process::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces::Interface::Interface()
    :
    	interface_name{YType::str, "interface-name"},
	 template_name{YType::str, "template-name"}
{
    yang_name = "interface"; yang_parent_name = "interfaces";
}

PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces::Interface::~Interface()
{
}

bool PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces::Interface::has_data() const
{
    return interface_name.is_set
	|| template_name.is_set;
}

bool PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces::Interface::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces::Interface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces::Interface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/basic-counters/interfaces/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces::Interface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces::Interface::get_children()
{
    return children;
}

void PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces::Interface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces::Interfaces()
{
    yang_name = "interfaces"; yang_parent_name = "basic-counters";
}

PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces::~Interfaces()
{
}

bool PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces::has_data() const
{
    for (std::size_t index=0; index<interface.size(); index++)
    {
        if(interface[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces::has_operation() const
{
    for (std::size_t index=0; index<interface.size(); index++)
    {
        if(interface[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interfaces";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/basic-counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface")
    {
        for(auto const & c : interface)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces::Interface>();
        c->parent = this;
        interface.push_back(std::move(c));
        children[segment_path] = interface.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces::get_children()
{
    for (auto const & c : interface)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::BasicCounters::BasicCounters()
    :
    interfaces(std::make_unique<PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces>())
{
    interfaces->parent = this;
    children["interfaces"] = interfaces.get();

    yang_name = "basic-counters"; yang_parent_name = "monitor-enable";
}

PerfMgmt::Enable::MonitorEnable::BasicCounters::~BasicCounters()
{
}

bool PerfMgmt::Enable::MonitorEnable::BasicCounters::has_data() const
{
    return (interfaces !=  nullptr && interfaces->has_data());
}

bool PerfMgmt::Enable::MonitorEnable::BasicCounters::has_operation() const
{
    return is_set(operation)
	|| (interfaces !=  nullptr && interfaces->has_operation());
}

std::string PerfMgmt::Enable::MonitorEnable::BasicCounters::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "basic-counters";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::BasicCounters::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::BasicCounters::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interfaces")
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
        else
        {
            interfaces = std::make_unique<PerfMgmt::Enable::MonitorEnable::BasicCounters::Interfaces>();
            interfaces->parent = this;
            children["interfaces"] = interfaces.get();
        }
        return children.at("interfaces");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::BasicCounters::get_children()
{
    if(children.find("interfaces") == children.end())
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::BasicCounters::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::Memory::Nodes::Node::Node()
    :
    	node_id{YType::str, "node-id"},
	 template_name{YType::str, "template-name"}
{
    yang_name = "node"; yang_parent_name = "nodes";
}

PerfMgmt::Enable::MonitorEnable::Memory::Nodes::Node::~Node()
{
}

bool PerfMgmt::Enable::MonitorEnable::Memory::Nodes::Node::has_data() const
{
    return node_id.is_set
	|| template_name.is_set;
}

bool PerfMgmt::Enable::MonitorEnable::Memory::Nodes::Node::has_operation() const
{
    return is_set(operation)
	|| is_set(node_id.operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::MonitorEnable::Memory::Nodes::Node::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "node" <<"[node-id='" <<node_id.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Memory::Nodes::Node::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/memory/nodes/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (node_id.is_set || is_set(node_id.operation)) leaf_name_data.push_back(node_id.get_name_leafdata());
    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Memory::Nodes::Node::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Memory::Nodes::Node::get_children()
{
    return children;
}

void PerfMgmt::Enable::MonitorEnable::Memory::Nodes::Node::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "node-id")
    {
        node_id = value;
    }
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::MonitorEnable::Memory::Nodes::Nodes()
{
    yang_name = "nodes"; yang_parent_name = "memory";
}

PerfMgmt::Enable::MonitorEnable::Memory::Nodes::~Nodes()
{
}

bool PerfMgmt::Enable::MonitorEnable::Memory::Nodes::has_data() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Enable::MonitorEnable::Memory::Nodes::has_operation() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Enable::MonitorEnable::Memory::Nodes::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nodes";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Memory::Nodes::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/memory/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Memory::Nodes::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "node")
    {
        for(auto const & c : node)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Enable::MonitorEnable::Memory::Nodes::Node>();
        c->parent = this;
        node.push_back(std::move(c));
        children[segment_path] = node.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Memory::Nodes::get_children()
{
    for (auto const & c : node)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::Memory::Nodes::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::Memory::Memory()
    :
    nodes(std::make_unique<PerfMgmt::Enable::MonitorEnable::Memory::Nodes>())
{
    nodes->parent = this;
    children["nodes"] = nodes.get();

    yang_name = "memory"; yang_parent_name = "monitor-enable";
}

PerfMgmt::Enable::MonitorEnable::Memory::~Memory()
{
}

bool PerfMgmt::Enable::MonitorEnable::Memory::has_data() const
{
    return (nodes !=  nullptr && nodes->has_data());
}

bool PerfMgmt::Enable::MonitorEnable::Memory::has_operation() const
{
    return is_set(operation)
	|| (nodes !=  nullptr && nodes->has_operation());
}

std::string PerfMgmt::Enable::MonitorEnable::Memory::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "memory";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Memory::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Memory::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "nodes")
    {
        if(nodes != nullptr)
        {
            children["nodes"] = nodes.get();
        }
        else
        {
            nodes = std::make_unique<PerfMgmt::Enable::MonitorEnable::Memory::Nodes>();
            nodes->parent = this;
            children["nodes"] = nodes.get();
        }
        return children.at("nodes");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Memory::get_children()
{
    if(children.find("nodes") == children.end())
    {
        if(nodes != nullptr)
        {
            children["nodes"] = nodes.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::Memory::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances::OspfInstance::OspfInstance()
    :
    	instance_name{YType::str, "instance-name"},
	 template_name{YType::str, "template-name"}
{
    yang_name = "ospf-instance"; yang_parent_name = "ospf-instances";
}

PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances::OspfInstance::~OspfInstance()
{
}

bool PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances::OspfInstance::has_data() const
{
    return instance_name.is_set
	|| template_name.is_set;
}

bool PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances::OspfInstance::has_operation() const
{
    return is_set(operation)
	|| is_set(instance_name.operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances::OspfInstance::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ospf-instance" <<"[instance-name='" <<instance_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances::OspfInstance::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/ospfv2-protocol/ospf-instances/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (instance_name.is_set || is_set(instance_name.operation)) leaf_name_data.push_back(instance_name.get_name_leafdata());
    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances::OspfInstance::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances::OspfInstance::get_children()
{
    return children;
}

void PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances::OspfInstance::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "instance-name")
    {
        instance_name = value;
    }
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances::OspfInstances()
{
    yang_name = "ospf-instances"; yang_parent_name = "ospfv2-protocol";
}

PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances::~OspfInstances()
{
}

bool PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances::has_data() const
{
    for (std::size_t index=0; index<ospf_instance.size(); index++)
    {
        if(ospf_instance[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances::has_operation() const
{
    for (std::size_t index=0; index<ospf_instance.size(); index++)
    {
        if(ospf_instance[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ospf-instances";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/ospfv2-protocol/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ospf-instance")
    {
        for(auto const & c : ospf_instance)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances::OspfInstance>();
        c->parent = this;
        ospf_instance.push_back(std::move(c));
        children[segment_path] = ospf_instance.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances::get_children()
{
    for (auto const & c : ospf_instance)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::Ospfv2Protocol()
    :
    ospf_instances(std::make_unique<PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances>())
{
    ospf_instances->parent = this;
    children["ospf-instances"] = ospf_instances.get();

    yang_name = "ospfv2-protocol"; yang_parent_name = "monitor-enable";
}

PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::~Ospfv2Protocol()
{
}

bool PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::has_data() const
{
    return (ospf_instances !=  nullptr && ospf_instances->has_data());
}

bool PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::has_operation() const
{
    return is_set(operation)
	|| (ospf_instances !=  nullptr && ospf_instances->has_operation());
}

std::string PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ospfv2-protocol";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ospf-instances")
    {
        if(ospf_instances != nullptr)
        {
            children["ospf-instances"] = ospf_instances.get();
        }
        else
        {
            ospf_instances = std::make_unique<PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::OspfInstances>();
            ospf_instances->parent = this;
            children["ospf-instances"] = ospf_instances.get();
        }
        return children.at("ospf-instances");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::get_children()
{
    if(children.find("ospf-instances") == children.end())
    {
        if(ospf_instances != nullptr)
        {
            children["ospf-instances"] = ospf_instances.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::Cpu::Nodes::Node::Node()
    :
    	node_id{YType::str, "node-id"},
	 template_name{YType::str, "template-name"}
{
    yang_name = "node"; yang_parent_name = "nodes";
}

PerfMgmt::Enable::MonitorEnable::Cpu::Nodes::Node::~Node()
{
}

bool PerfMgmt::Enable::MonitorEnable::Cpu::Nodes::Node::has_data() const
{
    return node_id.is_set
	|| template_name.is_set;
}

bool PerfMgmt::Enable::MonitorEnable::Cpu::Nodes::Node::has_operation() const
{
    return is_set(operation)
	|| is_set(node_id.operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::MonitorEnable::Cpu::Nodes::Node::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "node" <<"[node-id='" <<node_id.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Cpu::Nodes::Node::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/cpu/nodes/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (node_id.is_set || is_set(node_id.operation)) leaf_name_data.push_back(node_id.get_name_leafdata());
    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Cpu::Nodes::Node::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Cpu::Nodes::Node::get_children()
{
    return children;
}

void PerfMgmt::Enable::MonitorEnable::Cpu::Nodes::Node::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "node-id")
    {
        node_id = value;
    }
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::MonitorEnable::Cpu::Nodes::Nodes()
{
    yang_name = "nodes"; yang_parent_name = "cpu";
}

PerfMgmt::Enable::MonitorEnable::Cpu::Nodes::~Nodes()
{
}

bool PerfMgmt::Enable::MonitorEnable::Cpu::Nodes::has_data() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Enable::MonitorEnable::Cpu::Nodes::has_operation() const
{
    for (std::size_t index=0; index<node.size(); index++)
    {
        if(node[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Enable::MonitorEnable::Cpu::Nodes::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nodes";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Cpu::Nodes::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/cpu/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Cpu::Nodes::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "node")
    {
        for(auto const & c : node)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Enable::MonitorEnable::Cpu::Nodes::Node>();
        c->parent = this;
        node.push_back(std::move(c));
        children[segment_path] = node.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Cpu::Nodes::get_children()
{
    for (auto const & c : node)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::Cpu::Nodes::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::Cpu::Cpu()
    :
    nodes(std::make_unique<PerfMgmt::Enable::MonitorEnable::Cpu::Nodes>())
{
    nodes->parent = this;
    children["nodes"] = nodes.get();

    yang_name = "cpu"; yang_parent_name = "monitor-enable";
}

PerfMgmt::Enable::MonitorEnable::Cpu::~Cpu()
{
}

bool PerfMgmt::Enable::MonitorEnable::Cpu::has_data() const
{
    return (nodes !=  nullptr && nodes->has_data());
}

bool PerfMgmt::Enable::MonitorEnable::Cpu::has_operation() const
{
    return is_set(operation)
	|| (nodes !=  nullptr && nodes->has_operation());
}

std::string PerfMgmt::Enable::MonitorEnable::Cpu::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "cpu";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Cpu::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Cpu::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "nodes")
    {
        if(nodes != nullptr)
        {
            children["nodes"] = nodes.get();
        }
        else
        {
            nodes = std::make_unique<PerfMgmt::Enable::MonitorEnable::Cpu::Nodes>();
            nodes->parent = this;
            children["nodes"] = nodes.get();
        }
        return children.at("nodes");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Cpu::get_children()
{
    if(children.find("nodes") == children.end())
    {
        if(nodes != nullptr)
        {
            children["nodes"] = nodes.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::Cpu::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors::Neighbor::Neighbor()
    :
    	peer_address{YType::str, "peer-address"},
	 template_name{YType::str, "template-name"}
{
    yang_name = "neighbor"; yang_parent_name = "neighbors";
}

PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors::Neighbor::~Neighbor()
{
}

bool PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors::Neighbor::has_data() const
{
    return peer_address.is_set
	|| template_name.is_set;
}

bool PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors::Neighbor::has_operation() const
{
    return is_set(operation)
	|| is_set(peer_address.operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors::Neighbor::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "neighbor" <<"[peer-address='" <<peer_address.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors::Neighbor::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/bgp/neighbors/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (peer_address.is_set || is_set(peer_address.operation)) leaf_name_data.push_back(peer_address.get_name_leafdata());
    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors::Neighbor::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors::Neighbor::get_children()
{
    return children;
}

void PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors::Neighbor::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "peer-address")
    {
        peer_address = value;
    }
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors::Neighbors()
{
    yang_name = "neighbors"; yang_parent_name = "bgp";
}

PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors::~Neighbors()
{
}

bool PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors::has_data() const
{
    for (std::size_t index=0; index<neighbor.size(); index++)
    {
        if(neighbor[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors::has_operation() const
{
    for (std::size_t index=0; index<neighbor.size(); index++)
    {
        if(neighbor[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "neighbors";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/bgp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "neighbor")
    {
        for(auto const & c : neighbor)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors::Neighbor>();
        c->parent = this;
        neighbor.push_back(std::move(c));
        children[segment_path] = neighbor.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors::get_children()
{
    for (auto const & c : neighbor)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::Bgp::Bgp()
    :
    neighbors(std::make_unique<PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors>())
{
    neighbors->parent = this;
    children["neighbors"] = neighbors.get();

    yang_name = "bgp"; yang_parent_name = "monitor-enable";
}

PerfMgmt::Enable::MonitorEnable::Bgp::~Bgp()
{
}

bool PerfMgmt::Enable::MonitorEnable::Bgp::has_data() const
{
    return (neighbors !=  nullptr && neighbors->has_data());
}

bool PerfMgmt::Enable::MonitorEnable::Bgp::has_operation() const
{
    return is_set(operation)
	|| (neighbors !=  nullptr && neighbors->has_operation());
}

std::string PerfMgmt::Enable::MonitorEnable::Bgp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bgp";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::Bgp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::Bgp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "neighbors")
    {
        if(neighbors != nullptr)
        {
            children["neighbors"] = neighbors.get();
        }
        else
        {
            neighbors = std::make_unique<PerfMgmt::Enable::MonitorEnable::Bgp::Neighbors>();
            neighbors->parent = this;
            children["neighbors"] = neighbors.get();
        }
        return children.at("neighbors");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::Bgp::get_children()
{
    if(children.find("neighbors") == children.end())
    {
        if(neighbors != nullptr)
        {
            children["neighbors"] = neighbors.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::Bgp::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces::Interface::Interface()
    :
    	interface_name{YType::str, "interface-name"},
	 template_name{YType::str, "template-name"}
{
    yang_name = "interface"; yang_parent_name = "interfaces";
}

PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces::Interface::~Interface()
{
}

bool PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces::Interface::has_data() const
{
    return interface_name.is_set
	|| template_name.is_set;
}

bool PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces::Interface::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| is_set(template_name.operation);
}

std::string PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces::Interface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces::Interface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/data-rates/interfaces/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces::Interface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces::Interface::get_children()
{
    return children;
}

void PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces::Interface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "template-name")
    {
        template_name = value;
    }
}

PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces::Interfaces()
{
    yang_name = "interfaces"; yang_parent_name = "data-rates";
}

PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces::~Interfaces()
{
}

bool PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces::has_data() const
{
    for (std::size_t index=0; index<interface.size(); index++)
    {
        if(interface[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces::has_operation() const
{
    for (std::size_t index=0; index<interface.size(); index++)
    {
        if(interface[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interfaces";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/data-rates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface")
    {
        for(auto const & c : interface)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces::Interface>();
        c->parent = this;
        interface.push_back(std::move(c));
        children[segment_path] = interface.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces::get_children()
{
    for (auto const & c : interface)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::DataRates::DataRates()
    :
    interfaces(std::make_unique<PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces>())
{
    interfaces->parent = this;
    children["interfaces"] = interfaces.get();

    yang_name = "data-rates"; yang_parent_name = "monitor-enable";
}

PerfMgmt::Enable::MonitorEnable::DataRates::~DataRates()
{
}

bool PerfMgmt::Enable::MonitorEnable::DataRates::has_data() const
{
    return (interfaces !=  nullptr && interfaces->has_data());
}

bool PerfMgmt::Enable::MonitorEnable::DataRates::has_operation() const
{
    return is_set(operation)
	|| (interfaces !=  nullptr && interfaces->has_operation());
}

std::string PerfMgmt::Enable::MonitorEnable::DataRates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "data-rates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::DataRates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/monitor-enable/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::DataRates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interfaces")
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
        else
        {
            interfaces = std::make_unique<PerfMgmt::Enable::MonitorEnable::DataRates::Interfaces>();
            interfaces->parent = this;
            children["interfaces"] = interfaces.get();
        }
        return children.at("interfaces");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::DataRates::get_children()
{
    if(children.find("interfaces") == children.end())
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::DataRates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::MonitorEnable::MonitorEnable()
    :
    basic_counters(std::make_unique<PerfMgmt::Enable::MonitorEnable::BasicCounters>())
	,bgp(std::make_unique<PerfMgmt::Enable::MonitorEnable::Bgp>())
	,cpu(std::make_unique<PerfMgmt::Enable::MonitorEnable::Cpu>())
	,data_rates(std::make_unique<PerfMgmt::Enable::MonitorEnable::DataRates>())
	,generic_counters(std::make_unique<PerfMgmt::Enable::MonitorEnable::GenericCounters>())
	,ldp_mpls(std::make_unique<PerfMgmt::Enable::MonitorEnable::LdpMpls>())
	,memory(std::make_unique<PerfMgmt::Enable::MonitorEnable::Memory>())
	,ospfv2_protocol(std::make_unique<PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol>())
	,ospfv3_protocol(std::make_unique<PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol>())
	,process(std::make_unique<PerfMgmt::Enable::MonitorEnable::Process>())
{
    basic_counters->parent = this;
    children["basic-counters"] = basic_counters.get();

    bgp->parent = this;
    children["bgp"] = bgp.get();

    cpu->parent = this;
    children["cpu"] = cpu.get();

    data_rates->parent = this;
    children["data-rates"] = data_rates.get();

    generic_counters->parent = this;
    children["generic-counters"] = generic_counters.get();

    ldp_mpls->parent = this;
    children["ldp-mpls"] = ldp_mpls.get();

    memory->parent = this;
    children["memory"] = memory.get();

    ospfv2_protocol->parent = this;
    children["ospfv2-protocol"] = ospfv2_protocol.get();

    ospfv3_protocol->parent = this;
    children["ospfv3-protocol"] = ospfv3_protocol.get();

    process->parent = this;
    children["process"] = process.get();

    yang_name = "monitor-enable"; yang_parent_name = "enable";
}

PerfMgmt::Enable::MonitorEnable::~MonitorEnable()
{
}

bool PerfMgmt::Enable::MonitorEnable::has_data() const
{
    return (basic_counters !=  nullptr && basic_counters->has_data())
	|| (bgp !=  nullptr && bgp->has_data())
	|| (cpu !=  nullptr && cpu->has_data())
	|| (data_rates !=  nullptr && data_rates->has_data())
	|| (generic_counters !=  nullptr && generic_counters->has_data())
	|| (ldp_mpls !=  nullptr && ldp_mpls->has_data())
	|| (memory !=  nullptr && memory->has_data())
	|| (ospfv2_protocol !=  nullptr && ospfv2_protocol->has_data())
	|| (ospfv3_protocol !=  nullptr && ospfv3_protocol->has_data())
	|| (process !=  nullptr && process->has_data());
}

bool PerfMgmt::Enable::MonitorEnable::has_operation() const
{
    return is_set(operation)
	|| (basic_counters !=  nullptr && basic_counters->has_operation())
	|| (bgp !=  nullptr && bgp->has_operation())
	|| (cpu !=  nullptr && cpu->has_operation())
	|| (data_rates !=  nullptr && data_rates->has_operation())
	|| (generic_counters !=  nullptr && generic_counters->has_operation())
	|| (ldp_mpls !=  nullptr && ldp_mpls->has_operation())
	|| (memory !=  nullptr && memory->has_operation())
	|| (ospfv2_protocol !=  nullptr && ospfv2_protocol->has_operation())
	|| (ospfv3_protocol !=  nullptr && ospfv3_protocol->has_operation())
	|| (process !=  nullptr && process->has_operation());
}

std::string PerfMgmt::Enable::MonitorEnable::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "monitor-enable";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::MonitorEnable::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/enable/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::MonitorEnable::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "basic-counters")
    {
        if(basic_counters != nullptr)
        {
            children["basic-counters"] = basic_counters.get();
        }
        else
        {
            basic_counters = std::make_unique<PerfMgmt::Enable::MonitorEnable::BasicCounters>();
            basic_counters->parent = this;
            children["basic-counters"] = basic_counters.get();
        }
        return children.at("basic-counters");
    }

    if(child_yang_name == "bgp")
    {
        if(bgp != nullptr)
        {
            children["bgp"] = bgp.get();
        }
        else
        {
            bgp = std::make_unique<PerfMgmt::Enable::MonitorEnable::Bgp>();
            bgp->parent = this;
            children["bgp"] = bgp.get();
        }
        return children.at("bgp");
    }

    if(child_yang_name == "cpu")
    {
        if(cpu != nullptr)
        {
            children["cpu"] = cpu.get();
        }
        else
        {
            cpu = std::make_unique<PerfMgmt::Enable::MonitorEnable::Cpu>();
            cpu->parent = this;
            children["cpu"] = cpu.get();
        }
        return children.at("cpu");
    }

    if(child_yang_name == "data-rates")
    {
        if(data_rates != nullptr)
        {
            children["data-rates"] = data_rates.get();
        }
        else
        {
            data_rates = std::make_unique<PerfMgmt::Enable::MonitorEnable::DataRates>();
            data_rates->parent = this;
            children["data-rates"] = data_rates.get();
        }
        return children.at("data-rates");
    }

    if(child_yang_name == "generic-counters")
    {
        if(generic_counters != nullptr)
        {
            children["generic-counters"] = generic_counters.get();
        }
        else
        {
            generic_counters = std::make_unique<PerfMgmt::Enable::MonitorEnable::GenericCounters>();
            generic_counters->parent = this;
            children["generic-counters"] = generic_counters.get();
        }
        return children.at("generic-counters");
    }

    if(child_yang_name == "ldp-mpls")
    {
        if(ldp_mpls != nullptr)
        {
            children["ldp-mpls"] = ldp_mpls.get();
        }
        else
        {
            ldp_mpls = std::make_unique<PerfMgmt::Enable::MonitorEnable::LdpMpls>();
            ldp_mpls->parent = this;
            children["ldp-mpls"] = ldp_mpls.get();
        }
        return children.at("ldp-mpls");
    }

    if(child_yang_name == "memory")
    {
        if(memory != nullptr)
        {
            children["memory"] = memory.get();
        }
        else
        {
            memory = std::make_unique<PerfMgmt::Enable::MonitorEnable::Memory>();
            memory->parent = this;
            children["memory"] = memory.get();
        }
        return children.at("memory");
    }

    if(child_yang_name == "ospfv2-protocol")
    {
        if(ospfv2_protocol != nullptr)
        {
            children["ospfv2-protocol"] = ospfv2_protocol.get();
        }
        else
        {
            ospfv2_protocol = std::make_unique<PerfMgmt::Enable::MonitorEnable::Ospfv2Protocol>();
            ospfv2_protocol->parent = this;
            children["ospfv2-protocol"] = ospfv2_protocol.get();
        }
        return children.at("ospfv2-protocol");
    }

    if(child_yang_name == "ospfv3-protocol")
    {
        if(ospfv3_protocol != nullptr)
        {
            children["ospfv3-protocol"] = ospfv3_protocol.get();
        }
        else
        {
            ospfv3_protocol = std::make_unique<PerfMgmt::Enable::MonitorEnable::Ospfv3Protocol>();
            ospfv3_protocol->parent = this;
            children["ospfv3-protocol"] = ospfv3_protocol.get();
        }
        return children.at("ospfv3-protocol");
    }

    if(child_yang_name == "process")
    {
        if(process != nullptr)
        {
            children["process"] = process.get();
        }
        else
        {
            process = std::make_unique<PerfMgmt::Enable::MonitorEnable::Process>();
            process->parent = this;
            children["process"] = process.get();
        }
        return children.at("process");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::MonitorEnable::get_children()
{
    if(children.find("basic-counters") == children.end())
    {
        if(basic_counters != nullptr)
        {
            children["basic-counters"] = basic_counters.get();
        }
    }

    if(children.find("bgp") == children.end())
    {
        if(bgp != nullptr)
        {
            children["bgp"] = bgp.get();
        }
    }

    if(children.find("cpu") == children.end())
    {
        if(cpu != nullptr)
        {
            children["cpu"] = cpu.get();
        }
    }

    if(children.find("data-rates") == children.end())
    {
        if(data_rates != nullptr)
        {
            children["data-rates"] = data_rates.get();
        }
    }

    if(children.find("generic-counters") == children.end())
    {
        if(generic_counters != nullptr)
        {
            children["generic-counters"] = generic_counters.get();
        }
    }

    if(children.find("ldp-mpls") == children.end())
    {
        if(ldp_mpls != nullptr)
        {
            children["ldp-mpls"] = ldp_mpls.get();
        }
    }

    if(children.find("memory") == children.end())
    {
        if(memory != nullptr)
        {
            children["memory"] = memory.get();
        }
    }

    if(children.find("ospfv2-protocol") == children.end())
    {
        if(ospfv2_protocol != nullptr)
        {
            children["ospfv2-protocol"] = ospfv2_protocol.get();
        }
    }

    if(children.find("ospfv3-protocol") == children.end())
    {
        if(ospfv3_protocol != nullptr)
        {
            children["ospfv3-protocol"] = ospfv3_protocol.get();
        }
    }

    if(children.find("process") == children.end())
    {
        if(process != nullptr)
        {
            children["process"] = process.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::MonitorEnable::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Enable::Enable()
    :
    monitor_enable(std::make_unique<PerfMgmt::Enable::MonitorEnable>())
	,statistics(std::make_unique<PerfMgmt::Enable::Statistics>())
	,threshold(std::make_unique<PerfMgmt::Enable::Threshold>())
{
    monitor_enable->parent = this;
    children["monitor-enable"] = monitor_enable.get();

    statistics->parent = this;
    children["statistics"] = statistics.get();

    threshold->parent = this;
    children["threshold"] = threshold.get();

    yang_name = "enable"; yang_parent_name = "perf-mgmt";
}

PerfMgmt::Enable::~Enable()
{
}

bool PerfMgmt::Enable::has_data() const
{
    return (monitor_enable !=  nullptr && monitor_enable->has_data())
	|| (statistics !=  nullptr && statistics->has_data())
	|| (threshold !=  nullptr && threshold->has_data());
}

bool PerfMgmt::Enable::has_operation() const
{
    return is_set(operation)
	|| (monitor_enable !=  nullptr && monitor_enable->has_operation())
	|| (statistics !=  nullptr && statistics->has_operation())
	|| (threshold !=  nullptr && threshold->has_operation());
}

std::string PerfMgmt::Enable::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "enable";

    return path_buffer.str();

}

EntityPath PerfMgmt::Enable::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Enable::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "monitor-enable")
    {
        if(monitor_enable != nullptr)
        {
            children["monitor-enable"] = monitor_enable.get();
        }
        else
        {
            monitor_enable = std::make_unique<PerfMgmt::Enable::MonitorEnable>();
            monitor_enable->parent = this;
            children["monitor-enable"] = monitor_enable.get();
        }
        return children.at("monitor-enable");
    }

    if(child_yang_name == "statistics")
    {
        if(statistics != nullptr)
        {
            children["statistics"] = statistics.get();
        }
        else
        {
            statistics = std::make_unique<PerfMgmt::Enable::Statistics>();
            statistics->parent = this;
            children["statistics"] = statistics.get();
        }
        return children.at("statistics");
    }

    if(child_yang_name == "threshold")
    {
        if(threshold != nullptr)
        {
            children["threshold"] = threshold.get();
        }
        else
        {
            threshold = std::make_unique<PerfMgmt::Enable::Threshold>();
            threshold->parent = this;
            children["threshold"] = threshold.get();
        }
        return children.at("threshold");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Enable::get_children()
{
    if(children.find("monitor-enable") == children.end())
    {
        if(monitor_enable != nullptr)
        {
            children["monitor-enable"] = monitor_enable.get();
        }
    }

    if(children.find("statistics") == children.end())
    {
        if(statistics != nullptr)
        {
            children["statistics"] = statistics.get();
        }
    }

    if(children.find("threshold") == children.end())
    {
        if(threshold != nullptr)
        {
            children["threshold"] = threshold.get();
        }
    }

    return children;
}

void PerfMgmt::Enable::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::RegExpGroups::RegExpGroup::RegExps::RegExp::RegExp()
    :
    	reg_exp_index{YType::uint32, "reg-exp-index"},
	 reg_exp_string{YType::str, "reg-exp-string"}
{
    yang_name = "reg-exp"; yang_parent_name = "reg-exps";
}

PerfMgmt::RegExpGroups::RegExpGroup::RegExps::RegExp::~RegExp()
{
}

bool PerfMgmt::RegExpGroups::RegExpGroup::RegExps::RegExp::has_data() const
{
    return reg_exp_index.is_set
	|| reg_exp_string.is_set;
}

bool PerfMgmt::RegExpGroups::RegExpGroup::RegExps::RegExp::has_operation() const
{
    return is_set(operation)
	|| is_set(reg_exp_index.operation)
	|| is_set(reg_exp_string.operation);
}

std::string PerfMgmt::RegExpGroups::RegExpGroup::RegExps::RegExp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "reg-exp" <<"[reg-exp-index='" <<reg_exp_index.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::RegExpGroups::RegExpGroup::RegExps::RegExp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (reg_exp_index.is_set || is_set(reg_exp_index.operation)) leaf_name_data.push_back(reg_exp_index.get_name_leafdata());
    if (reg_exp_string.is_set || is_set(reg_exp_string.operation)) leaf_name_data.push_back(reg_exp_string.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::RegExpGroups::RegExpGroup::RegExps::RegExp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::RegExpGroups::RegExpGroup::RegExps::RegExp::get_children()
{
    return children;
}

void PerfMgmt::RegExpGroups::RegExpGroup::RegExps::RegExp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "reg-exp-index")
    {
        reg_exp_index = value;
    }
    if(value_path == "reg-exp-string")
    {
        reg_exp_string = value;
    }
}

PerfMgmt::RegExpGroups::RegExpGroup::RegExps::RegExps()
{
    yang_name = "reg-exps"; yang_parent_name = "reg-exp-group";
}

PerfMgmt::RegExpGroups::RegExpGroup::RegExps::~RegExps()
{
}

bool PerfMgmt::RegExpGroups::RegExpGroup::RegExps::has_data() const
{
    for (std::size_t index=0; index<reg_exp.size(); index++)
    {
        if(reg_exp[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::RegExpGroups::RegExpGroup::RegExps::has_operation() const
{
    for (std::size_t index=0; index<reg_exp.size(); index++)
    {
        if(reg_exp[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::RegExpGroups::RegExpGroup::RegExps::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "reg-exps";

    return path_buffer.str();

}

EntityPath PerfMgmt::RegExpGroups::RegExpGroup::RegExps::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::RegExpGroups::RegExpGroup::RegExps::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "reg-exp")
    {
        for(auto const & c : reg_exp)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::RegExpGroups::RegExpGroup::RegExps::RegExp>();
        c->parent = this;
        reg_exp.push_back(std::move(c));
        children[segment_path] = reg_exp.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::RegExpGroups::RegExpGroup::RegExps::get_children()
{
    for (auto const & c : reg_exp)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::RegExpGroups::RegExpGroup::RegExps::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::RegExpGroups::RegExpGroup::RegExpGroup()
    :
    	reg_exp_group_name{YType::str, "reg-exp-group-name"}
    	,
    reg_exps(std::make_unique<PerfMgmt::RegExpGroups::RegExpGroup::RegExps>())
{
    reg_exps->parent = this;
    children["reg-exps"] = reg_exps.get();

    yang_name = "reg-exp-group"; yang_parent_name = "reg-exp-groups";
}

PerfMgmt::RegExpGroups::RegExpGroup::~RegExpGroup()
{
}

bool PerfMgmt::RegExpGroups::RegExpGroup::has_data() const
{
    return reg_exp_group_name.is_set
	|| (reg_exps !=  nullptr && reg_exps->has_data());
}

bool PerfMgmt::RegExpGroups::RegExpGroup::has_operation() const
{
    return is_set(operation)
	|| is_set(reg_exp_group_name.operation)
	|| (reg_exps !=  nullptr && reg_exps->has_operation());
}

std::string PerfMgmt::RegExpGroups::RegExpGroup::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "reg-exp-group" <<"[reg-exp-group-name='" <<reg_exp_group_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::RegExpGroups::RegExpGroup::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/reg-exp-groups/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (reg_exp_group_name.is_set || is_set(reg_exp_group_name.operation)) leaf_name_data.push_back(reg_exp_group_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::RegExpGroups::RegExpGroup::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "reg-exps")
    {
        if(reg_exps != nullptr)
        {
            children["reg-exps"] = reg_exps.get();
        }
        else
        {
            reg_exps = std::make_unique<PerfMgmt::RegExpGroups::RegExpGroup::RegExps>();
            reg_exps->parent = this;
            children["reg-exps"] = reg_exps.get();
        }
        return children.at("reg-exps");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::RegExpGroups::RegExpGroup::get_children()
{
    if(children.find("reg-exps") == children.end())
    {
        if(reg_exps != nullptr)
        {
            children["reg-exps"] = reg_exps.get();
        }
    }

    return children;
}

void PerfMgmt::RegExpGroups::RegExpGroup::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "reg-exp-group-name")
    {
        reg_exp_group_name = value;
    }
}

PerfMgmt::RegExpGroups::RegExpGroups()
{
    yang_name = "reg-exp-groups"; yang_parent_name = "perf-mgmt";
}

PerfMgmt::RegExpGroups::~RegExpGroups()
{
}

bool PerfMgmt::RegExpGroups::has_data() const
{
    for (std::size_t index=0; index<reg_exp_group.size(); index++)
    {
        if(reg_exp_group[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::RegExpGroups::has_operation() const
{
    for (std::size_t index=0; index<reg_exp_group.size(); index++)
    {
        if(reg_exp_group[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::RegExpGroups::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "reg-exp-groups";

    return path_buffer.str();

}

EntityPath PerfMgmt::RegExpGroups::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::RegExpGroups::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "reg-exp-group")
    {
        for(auto const & c : reg_exp_group)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::RegExpGroups::RegExpGroup>();
        c->parent = this;
        reg_exp_group.push_back(std::move(c));
        children[segment_path] = reg_exp_group.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::RegExpGroups::get_children()
{
    for (auto const & c : reg_exp_group)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::RegExpGroups::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InOctets::InOctets()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "in-octets"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InOctets::~InOctets()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InOctets::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InOctets::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InOctets::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "in-octets";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InOctets::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InOctets::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InOctets::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InOctets::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InUcastPkts::InUcastPkts()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "in-ucast-pkts"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InUcastPkts::~InUcastPkts()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InUcastPkts::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InUcastPkts::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InUcastPkts::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "in-ucast-pkts";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InUcastPkts::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InUcastPkts::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InUcastPkts::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InUcastPkts::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutUcastPkts::OutUcastPkts()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "out-ucast-pkts"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutUcastPkts::~OutUcastPkts()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutUcastPkts::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutUcastPkts::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutUcastPkts::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "out-ucast-pkts";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutUcastPkts::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutUcastPkts::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutUcastPkts::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutUcastPkts::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutBroadcastPkts::OutBroadcastPkts()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "out-broadcast-pkts"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutBroadcastPkts::~OutBroadcastPkts()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutBroadcastPkts::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutBroadcastPkts::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutBroadcastPkts::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "out-broadcast-pkts";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutBroadcastPkts::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutBroadcastPkts::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutBroadcastPkts::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutBroadcastPkts::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutMulticastPkts::OutMulticastPkts()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "out-multicast-pkts"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutMulticastPkts::~OutMulticastPkts()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutMulticastPkts::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutMulticastPkts::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutMulticastPkts::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "out-multicast-pkts";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutMulticastPkts::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutMulticastPkts::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutMulticastPkts::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutMulticastPkts::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputOverrun::InputOverrun()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-overrun"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputOverrun::~InputOverrun()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputOverrun::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputOverrun::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputOverrun::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-overrun";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputOverrun::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputOverrun::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputOverrun::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputOverrun::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutOctets::OutOctets()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "out-octets"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutOctets::~OutOctets()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutOctets::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutOctets::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutOctets::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "out-octets";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutOctets::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutOctets::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutOctets::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutOctets::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputUnderrun::OutputUnderrun()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-underrun"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputUnderrun::~OutputUnderrun()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputUnderrun::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputUnderrun::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputUnderrun::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-underrun";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputUnderrun::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputUnderrun::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputUnderrun::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputUnderrun::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalErrors::InputTotalErrors()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-total-errors"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalErrors::~InputTotalErrors()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalErrors::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalErrors::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalErrors::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-total-errors";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalErrors::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalErrors::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalErrors::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalErrors::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalDrops::OutputTotalDrops()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-total-drops"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalDrops::~OutputTotalDrops()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalDrops::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalDrops::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalDrops::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-total-drops";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalDrops::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalDrops::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalDrops::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalDrops::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputCrc::InputCrc()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-crc"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputCrc::~InputCrc()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputCrc::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputCrc::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputCrc::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-crc";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputCrc::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputCrc::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputCrc::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputCrc::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InBroadcastPkts::InBroadcastPkts()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "in-broadcast-pkts"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InBroadcastPkts::~InBroadcastPkts()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InBroadcastPkts::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InBroadcastPkts::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InBroadcastPkts::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "in-broadcast-pkts";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InBroadcastPkts::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InBroadcastPkts::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InBroadcastPkts::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InBroadcastPkts::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InMulticastPkts::InMulticastPkts()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "in-multicast-pkts"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InMulticastPkts::~InMulticastPkts()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InMulticastPkts::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InMulticastPkts::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InMulticastPkts::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "in-multicast-pkts";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InMulticastPkts::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InMulticastPkts::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InMulticastPkts::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InMulticastPkts::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutPackets::OutPackets()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "out-packets"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutPackets::~OutPackets()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutPackets::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutPackets::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutPackets::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "out-packets";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutPackets::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutPackets::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutPackets::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutPackets::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalErrors::OutputTotalErrors()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-total-errors"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalErrors::~OutputTotalErrors()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalErrors::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalErrors::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalErrors::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-total-errors";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalErrors::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalErrors::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalErrors::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalErrors::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InPackets::InPackets()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "in-packets"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InPackets::~InPackets()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InPackets::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InPackets::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InPackets::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "in-packets";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InPackets::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InPackets::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InPackets::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InPackets::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputUnknownProto::InputUnknownProto()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-unknown-proto"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputUnknownProto::~InputUnknownProto()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputUnknownProto::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputUnknownProto::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputUnknownProto::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-unknown-proto";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputUnknownProto::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputUnknownProto::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputUnknownProto::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputUnknownProto::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputQueueDrops::InputQueueDrops()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-queue-drops"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputQueueDrops::~InputQueueDrops()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputQueueDrops::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputQueueDrops::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputQueueDrops::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-queue-drops";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputQueueDrops::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputQueueDrops::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputQueueDrops::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputQueueDrops::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalDrops::InputTotalDrops()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-total-drops"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalDrops::~InputTotalDrops()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalDrops::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalDrops::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalDrops::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-total-drops";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalDrops::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalDrops::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalDrops::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalDrops::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputFrame::InputFrame()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-frame"; yang_parent_name = "generic-counter-interface-template";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputFrame::~InputFrame()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputFrame::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputFrame::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputFrame::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-frame";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputFrame::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputFrame::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputFrame::get_children()
{
    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputFrame::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::GenericCounterInterfaceTemplate()
    :
    	template_name{YType::str, "template-name"},
	 reg_exp_group{YType::str, "reg-exp-group"},
	 sample_interval{YType::uint32, "sample-interval"},
	 vrf_group{YType::str, "vrf-group"}
    	,
    in_broadcast_pkts(nullptr) // presence node
	,in_multicast_pkts(nullptr) // presence node
	,in_octets(nullptr) // presence node
	,in_packets(nullptr) // presence node
	,in_ucast_pkts(nullptr) // presence node
	,input_crc(nullptr) // presence node
	,input_frame(nullptr) // presence node
	,input_overrun(nullptr) // presence node
	,input_queue_drops(nullptr) // presence node
	,input_total_drops(nullptr) // presence node
	,input_total_errors(nullptr) // presence node
	,input_unknown_proto(nullptr) // presence node
	,out_broadcast_pkts(nullptr) // presence node
	,out_multicast_pkts(nullptr) // presence node
	,out_octets(nullptr) // presence node
	,out_packets(nullptr) // presence node
	,out_ucast_pkts(nullptr) // presence node
	,output_total_drops(nullptr) // presence node
	,output_total_errors(nullptr) // presence node
	,output_underrun(nullptr) // presence node
{
    yang_name = "generic-counter-interface-template"; yang_parent_name = "generic-counter-interface-templates";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::~GenericCounterInterfaceTemplate()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::has_data() const
{
    return template_name.is_set
	|| reg_exp_group.is_set
	|| sample_interval.is_set
	|| vrf_group.is_set
	|| (in_broadcast_pkts !=  nullptr && in_broadcast_pkts->has_data())
	|| (in_multicast_pkts !=  nullptr && in_multicast_pkts->has_data())
	|| (in_octets !=  nullptr && in_octets->has_data())
	|| (in_packets !=  nullptr && in_packets->has_data())
	|| (in_ucast_pkts !=  nullptr && in_ucast_pkts->has_data())
	|| (input_crc !=  nullptr && input_crc->has_data())
	|| (input_frame !=  nullptr && input_frame->has_data())
	|| (input_overrun !=  nullptr && input_overrun->has_data())
	|| (input_queue_drops !=  nullptr && input_queue_drops->has_data())
	|| (input_total_drops !=  nullptr && input_total_drops->has_data())
	|| (input_total_errors !=  nullptr && input_total_errors->has_data())
	|| (input_unknown_proto !=  nullptr && input_unknown_proto->has_data())
	|| (out_broadcast_pkts !=  nullptr && out_broadcast_pkts->has_data())
	|| (out_multicast_pkts !=  nullptr && out_multicast_pkts->has_data())
	|| (out_octets !=  nullptr && out_octets->has_data())
	|| (out_packets !=  nullptr && out_packets->has_data())
	|| (out_ucast_pkts !=  nullptr && out_ucast_pkts->has_data())
	|| (output_total_drops !=  nullptr && output_total_drops->has_data())
	|| (output_total_errors !=  nullptr && output_total_errors->has_data())
	|| (output_underrun !=  nullptr && output_underrun->has_data());
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(reg_exp_group.operation)
	|| is_set(sample_interval.operation)
	|| is_set(vrf_group.operation)
	|| (in_broadcast_pkts !=  nullptr && in_broadcast_pkts->has_operation())
	|| (in_multicast_pkts !=  nullptr && in_multicast_pkts->has_operation())
	|| (in_octets !=  nullptr && in_octets->has_operation())
	|| (in_packets !=  nullptr && in_packets->has_operation())
	|| (in_ucast_pkts !=  nullptr && in_ucast_pkts->has_operation())
	|| (input_crc !=  nullptr && input_crc->has_operation())
	|| (input_frame !=  nullptr && input_frame->has_operation())
	|| (input_overrun !=  nullptr && input_overrun->has_operation())
	|| (input_queue_drops !=  nullptr && input_queue_drops->has_operation())
	|| (input_total_drops !=  nullptr && input_total_drops->has_operation())
	|| (input_total_errors !=  nullptr && input_total_errors->has_operation())
	|| (input_unknown_proto !=  nullptr && input_unknown_proto->has_operation())
	|| (out_broadcast_pkts !=  nullptr && out_broadcast_pkts->has_operation())
	|| (out_multicast_pkts !=  nullptr && out_multicast_pkts->has_operation())
	|| (out_octets !=  nullptr && out_octets->has_operation())
	|| (out_packets !=  nullptr && out_packets->has_operation())
	|| (out_ucast_pkts !=  nullptr && out_ucast_pkts->has_operation())
	|| (output_total_drops !=  nullptr && output_total_drops->has_operation())
	|| (output_total_errors !=  nullptr && output_total_errors->has_operation())
	|| (output_underrun !=  nullptr && output_underrun->has_operation());
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-counter-interface-template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/generic-counter-interface/generic-counter-interface-templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (reg_exp_group.is_set || is_set(reg_exp_group.operation)) leaf_name_data.push_back(reg_exp_group.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());
    if (vrf_group.is_set || is_set(vrf_group.operation)) leaf_name_data.push_back(vrf_group.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "in-broadcast-pkts")
    {
        if(in_broadcast_pkts != nullptr)
        {
            children["in-broadcast-pkts"] = in_broadcast_pkts.get();
        }
        else
        {
            in_broadcast_pkts = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InBroadcastPkts>();
            in_broadcast_pkts->parent = this;
            children["in-broadcast-pkts"] = in_broadcast_pkts.get();
        }
        return children.at("in-broadcast-pkts");
    }

    if(child_yang_name == "in-multicast-pkts")
    {
        if(in_multicast_pkts != nullptr)
        {
            children["in-multicast-pkts"] = in_multicast_pkts.get();
        }
        else
        {
            in_multicast_pkts = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InMulticastPkts>();
            in_multicast_pkts->parent = this;
            children["in-multicast-pkts"] = in_multicast_pkts.get();
        }
        return children.at("in-multicast-pkts");
    }

    if(child_yang_name == "in-octets")
    {
        if(in_octets != nullptr)
        {
            children["in-octets"] = in_octets.get();
        }
        else
        {
            in_octets = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InOctets>();
            in_octets->parent = this;
            children["in-octets"] = in_octets.get();
        }
        return children.at("in-octets");
    }

    if(child_yang_name == "in-packets")
    {
        if(in_packets != nullptr)
        {
            children["in-packets"] = in_packets.get();
        }
        else
        {
            in_packets = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InPackets>();
            in_packets->parent = this;
            children["in-packets"] = in_packets.get();
        }
        return children.at("in-packets");
    }

    if(child_yang_name == "in-ucast-pkts")
    {
        if(in_ucast_pkts != nullptr)
        {
            children["in-ucast-pkts"] = in_ucast_pkts.get();
        }
        else
        {
            in_ucast_pkts = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InUcastPkts>();
            in_ucast_pkts->parent = this;
            children["in-ucast-pkts"] = in_ucast_pkts.get();
        }
        return children.at("in-ucast-pkts");
    }

    if(child_yang_name == "input-crc")
    {
        if(input_crc != nullptr)
        {
            children["input-crc"] = input_crc.get();
        }
        else
        {
            input_crc = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputCrc>();
            input_crc->parent = this;
            children["input-crc"] = input_crc.get();
        }
        return children.at("input-crc");
    }

    if(child_yang_name == "input-frame")
    {
        if(input_frame != nullptr)
        {
            children["input-frame"] = input_frame.get();
        }
        else
        {
            input_frame = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputFrame>();
            input_frame->parent = this;
            children["input-frame"] = input_frame.get();
        }
        return children.at("input-frame");
    }

    if(child_yang_name == "input-overrun")
    {
        if(input_overrun != nullptr)
        {
            children["input-overrun"] = input_overrun.get();
        }
        else
        {
            input_overrun = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputOverrun>();
            input_overrun->parent = this;
            children["input-overrun"] = input_overrun.get();
        }
        return children.at("input-overrun");
    }

    if(child_yang_name == "input-queue-drops")
    {
        if(input_queue_drops != nullptr)
        {
            children["input-queue-drops"] = input_queue_drops.get();
        }
        else
        {
            input_queue_drops = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputQueueDrops>();
            input_queue_drops->parent = this;
            children["input-queue-drops"] = input_queue_drops.get();
        }
        return children.at("input-queue-drops");
    }

    if(child_yang_name == "input-total-drops")
    {
        if(input_total_drops != nullptr)
        {
            children["input-total-drops"] = input_total_drops.get();
        }
        else
        {
            input_total_drops = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalDrops>();
            input_total_drops->parent = this;
            children["input-total-drops"] = input_total_drops.get();
        }
        return children.at("input-total-drops");
    }

    if(child_yang_name == "input-total-errors")
    {
        if(input_total_errors != nullptr)
        {
            children["input-total-errors"] = input_total_errors.get();
        }
        else
        {
            input_total_errors = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputTotalErrors>();
            input_total_errors->parent = this;
            children["input-total-errors"] = input_total_errors.get();
        }
        return children.at("input-total-errors");
    }

    if(child_yang_name == "input-unknown-proto")
    {
        if(input_unknown_proto != nullptr)
        {
            children["input-unknown-proto"] = input_unknown_proto.get();
        }
        else
        {
            input_unknown_proto = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::InputUnknownProto>();
            input_unknown_proto->parent = this;
            children["input-unknown-proto"] = input_unknown_proto.get();
        }
        return children.at("input-unknown-proto");
    }

    if(child_yang_name == "out-broadcast-pkts")
    {
        if(out_broadcast_pkts != nullptr)
        {
            children["out-broadcast-pkts"] = out_broadcast_pkts.get();
        }
        else
        {
            out_broadcast_pkts = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutBroadcastPkts>();
            out_broadcast_pkts->parent = this;
            children["out-broadcast-pkts"] = out_broadcast_pkts.get();
        }
        return children.at("out-broadcast-pkts");
    }

    if(child_yang_name == "out-multicast-pkts")
    {
        if(out_multicast_pkts != nullptr)
        {
            children["out-multicast-pkts"] = out_multicast_pkts.get();
        }
        else
        {
            out_multicast_pkts = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutMulticastPkts>();
            out_multicast_pkts->parent = this;
            children["out-multicast-pkts"] = out_multicast_pkts.get();
        }
        return children.at("out-multicast-pkts");
    }

    if(child_yang_name == "out-octets")
    {
        if(out_octets != nullptr)
        {
            children["out-octets"] = out_octets.get();
        }
        else
        {
            out_octets = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutOctets>();
            out_octets->parent = this;
            children["out-octets"] = out_octets.get();
        }
        return children.at("out-octets");
    }

    if(child_yang_name == "out-packets")
    {
        if(out_packets != nullptr)
        {
            children["out-packets"] = out_packets.get();
        }
        else
        {
            out_packets = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutPackets>();
            out_packets->parent = this;
            children["out-packets"] = out_packets.get();
        }
        return children.at("out-packets");
    }

    if(child_yang_name == "out-ucast-pkts")
    {
        if(out_ucast_pkts != nullptr)
        {
            children["out-ucast-pkts"] = out_ucast_pkts.get();
        }
        else
        {
            out_ucast_pkts = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutUcastPkts>();
            out_ucast_pkts->parent = this;
            children["out-ucast-pkts"] = out_ucast_pkts.get();
        }
        return children.at("out-ucast-pkts");
    }

    if(child_yang_name == "output-total-drops")
    {
        if(output_total_drops != nullptr)
        {
            children["output-total-drops"] = output_total_drops.get();
        }
        else
        {
            output_total_drops = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalDrops>();
            output_total_drops->parent = this;
            children["output-total-drops"] = output_total_drops.get();
        }
        return children.at("output-total-drops");
    }

    if(child_yang_name == "output-total-errors")
    {
        if(output_total_errors != nullptr)
        {
            children["output-total-errors"] = output_total_errors.get();
        }
        else
        {
            output_total_errors = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputTotalErrors>();
            output_total_errors->parent = this;
            children["output-total-errors"] = output_total_errors.get();
        }
        return children.at("output-total-errors");
    }

    if(child_yang_name == "output-underrun")
    {
        if(output_underrun != nullptr)
        {
            children["output-underrun"] = output_underrun.get();
        }
        else
        {
            output_underrun = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::OutputUnderrun>();
            output_underrun->parent = this;
            children["output-underrun"] = output_underrun.get();
        }
        return children.at("output-underrun");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::get_children()
{
    if(children.find("in-broadcast-pkts") == children.end())
    {
        if(in_broadcast_pkts != nullptr)
        {
            children["in-broadcast-pkts"] = in_broadcast_pkts.get();
        }
    }

    if(children.find("in-multicast-pkts") == children.end())
    {
        if(in_multicast_pkts != nullptr)
        {
            children["in-multicast-pkts"] = in_multicast_pkts.get();
        }
    }

    if(children.find("in-octets") == children.end())
    {
        if(in_octets != nullptr)
        {
            children["in-octets"] = in_octets.get();
        }
    }

    if(children.find("in-packets") == children.end())
    {
        if(in_packets != nullptr)
        {
            children["in-packets"] = in_packets.get();
        }
    }

    if(children.find("in-ucast-pkts") == children.end())
    {
        if(in_ucast_pkts != nullptr)
        {
            children["in-ucast-pkts"] = in_ucast_pkts.get();
        }
    }

    if(children.find("input-crc") == children.end())
    {
        if(input_crc != nullptr)
        {
            children["input-crc"] = input_crc.get();
        }
    }

    if(children.find("input-frame") == children.end())
    {
        if(input_frame != nullptr)
        {
            children["input-frame"] = input_frame.get();
        }
    }

    if(children.find("input-overrun") == children.end())
    {
        if(input_overrun != nullptr)
        {
            children["input-overrun"] = input_overrun.get();
        }
    }

    if(children.find("input-queue-drops") == children.end())
    {
        if(input_queue_drops != nullptr)
        {
            children["input-queue-drops"] = input_queue_drops.get();
        }
    }

    if(children.find("input-total-drops") == children.end())
    {
        if(input_total_drops != nullptr)
        {
            children["input-total-drops"] = input_total_drops.get();
        }
    }

    if(children.find("input-total-errors") == children.end())
    {
        if(input_total_errors != nullptr)
        {
            children["input-total-errors"] = input_total_errors.get();
        }
    }

    if(children.find("input-unknown-proto") == children.end())
    {
        if(input_unknown_proto != nullptr)
        {
            children["input-unknown-proto"] = input_unknown_proto.get();
        }
    }

    if(children.find("out-broadcast-pkts") == children.end())
    {
        if(out_broadcast_pkts != nullptr)
        {
            children["out-broadcast-pkts"] = out_broadcast_pkts.get();
        }
    }

    if(children.find("out-multicast-pkts") == children.end())
    {
        if(out_multicast_pkts != nullptr)
        {
            children["out-multicast-pkts"] = out_multicast_pkts.get();
        }
    }

    if(children.find("out-octets") == children.end())
    {
        if(out_octets != nullptr)
        {
            children["out-octets"] = out_octets.get();
        }
    }

    if(children.find("out-packets") == children.end())
    {
        if(out_packets != nullptr)
        {
            children["out-packets"] = out_packets.get();
        }
    }

    if(children.find("out-ucast-pkts") == children.end())
    {
        if(out_ucast_pkts != nullptr)
        {
            children["out-ucast-pkts"] = out_ucast_pkts.get();
        }
    }

    if(children.find("output-total-drops") == children.end())
    {
        if(output_total_drops != nullptr)
        {
            children["output-total-drops"] = output_total_drops.get();
        }
    }

    if(children.find("output-total-errors") == children.end())
    {
        if(output_total_errors != nullptr)
        {
            children["output-total-errors"] = output_total_errors.get();
        }
    }

    if(children.find("output-underrun") == children.end())
    {
        if(output_underrun != nullptr)
        {
            children["output-underrun"] = output_underrun.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "reg-exp-group")
    {
        reg_exp_group = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
    if(value_path == "vrf-group")
    {
        vrf_group = value;
    }
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplates()
{
    yang_name = "generic-counter-interface-templates"; yang_parent_name = "generic-counter-interface";
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::~GenericCounterInterfaceTemplates()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::has_data() const
{
    for (std::size_t index=0; index<generic_counter_interface_template.size(); index++)
    {
        if(generic_counter_interface_template[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::has_operation() const
{
    for (std::size_t index=0; index<generic_counter_interface_template.size(); index++)
    {
        if(generic_counter_interface_template[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-counter-interface-templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/generic-counter-interface/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generic-counter-interface-template")
    {
        for(auto const & c : generic_counter_interface_template)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::GenericCounterInterfaceTemplate>();
        c->parent = this;
        generic_counter_interface_template.push_back(std::move(c));
        children[segment_path] = generic_counter_interface_template.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::get_children()
{
    for (auto const & c : generic_counter_interface_template)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterface()
    :
    generic_counter_interface_templates(std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates>())
{
    generic_counter_interface_templates->parent = this;
    children["generic-counter-interface-templates"] = generic_counter_interface_templates.get();

    yang_name = "generic-counter-interface"; yang_parent_name = "threshold";
}

PerfMgmt::Threshold::GenericCounterInterface::~GenericCounterInterface()
{
}

bool PerfMgmt::Threshold::GenericCounterInterface::has_data() const
{
    return (generic_counter_interface_templates !=  nullptr && generic_counter_interface_templates->has_data());
}

bool PerfMgmt::Threshold::GenericCounterInterface::has_operation() const
{
    return is_set(operation)
	|| (generic_counter_interface_templates !=  nullptr && generic_counter_interface_templates->has_operation());
}

std::string PerfMgmt::Threshold::GenericCounterInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-counter-interface";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::GenericCounterInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::GenericCounterInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generic-counter-interface-templates")
    {
        if(generic_counter_interface_templates != nullptr)
        {
            children["generic-counter-interface-templates"] = generic_counter_interface_templates.get();
        }
        else
        {
            generic_counter_interface_templates = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface::GenericCounterInterfaceTemplates>();
            generic_counter_interface_templates->parent = this;
            children["generic-counter-interface-templates"] = generic_counter_interface_templates.get();
        }
        return children.at("generic-counter-interface-templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::GenericCounterInterface::get_children()
{
    if(children.find("generic-counter-interface-templates") == children.end())
    {
        if(generic_counter_interface_templates != nullptr)
        {
            children["generic-counter-interface-templates"] = generic_counter_interface_templates.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::GenericCounterInterface::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsRcvd::AddressWithdrawMsgsRcvd()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "address-withdraw-msgs-rcvd"; yang_parent_name = "ldp-mpls-template";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsRcvd::~AddressWithdrawMsgsRcvd()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsRcvd::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsRcvd::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsRcvd::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "address-withdraw-msgs-rcvd";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsRcvd::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsRcvd::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsRcvd::get_children()
{
    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsRcvd::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsRcvd::LabelWithdrawMsgsRcvd()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "label-withdraw-msgs-rcvd"; yang_parent_name = "ldp-mpls-template";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsRcvd::~LabelWithdrawMsgsRcvd()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsRcvd::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsRcvd::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsRcvd::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "label-withdraw-msgs-rcvd";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsRcvd::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsRcvd::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsRcvd::get_children()
{
    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsRcvd::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsSent::AddressWithdrawMsgsSent()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "address-withdraw-msgs-sent"; yang_parent_name = "ldp-mpls-template";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsSent::~AddressWithdrawMsgsSent()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsSent::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsSent::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsSent::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "address-withdraw-msgs-sent";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsSent::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsSent::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsSent::get_children()
{
    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsSent::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsSent::LabelWithdrawMsgsSent()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "label-withdraw-msgs-sent"; yang_parent_name = "ldp-mpls-template";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsSent::~LabelWithdrawMsgsSent()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsSent::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsSent::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsSent::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "label-withdraw-msgs-sent";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsSent::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsSent::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsSent::get_children()
{
    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsSent::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsRcvd::NotificationMsgsRcvd()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "notification-msgs-rcvd"; yang_parent_name = "ldp-mpls-template";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsRcvd::~NotificationMsgsRcvd()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsRcvd::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsRcvd::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsRcvd::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "notification-msgs-rcvd";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsRcvd::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsRcvd::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsRcvd::get_children()
{
    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsRcvd::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsRcvd::TotalMsgsRcvd()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "total-msgs-rcvd"; yang_parent_name = "ldp-mpls-template";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsRcvd::~TotalMsgsRcvd()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsRcvd::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsRcvd::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsRcvd::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "total-msgs-rcvd";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsRcvd::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsRcvd::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsRcvd::get_children()
{
    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsRcvd::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsSent::NotificationMsgsSent()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "notification-msgs-sent"; yang_parent_name = "ldp-mpls-template";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsSent::~NotificationMsgsSent()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsSent::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsSent::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsSent::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "notification-msgs-sent";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsSent::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsSent::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsSent::get_children()
{
    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsSent::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsSent::TotalMsgsSent()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "total-msgs-sent"; yang_parent_name = "ldp-mpls-template";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsSent::~TotalMsgsSent()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsSent::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsSent::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsSent::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "total-msgs-sent";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsSent::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsSent::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsSent::get_children()
{
    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsSent::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsRcvd::LabelReleaseMsgsRcvd()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "label-release-msgs-rcvd"; yang_parent_name = "ldp-mpls-template";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsRcvd::~LabelReleaseMsgsRcvd()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsRcvd::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsRcvd::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsRcvd::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "label-release-msgs-rcvd";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsRcvd::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsRcvd::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsRcvd::get_children()
{
    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsRcvd::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsRcvd::InitMsgsRcvd()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "init-msgs-rcvd"; yang_parent_name = "ldp-mpls-template";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsRcvd::~InitMsgsRcvd()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsRcvd::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsRcvd::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsRcvd::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "init-msgs-rcvd";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsRcvd::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsRcvd::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsRcvd::get_children()
{
    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsRcvd::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsSent::LabelReleaseMsgsSent()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "label-release-msgs-sent"; yang_parent_name = "ldp-mpls-template";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsSent::~LabelReleaseMsgsSent()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsSent::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsSent::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsSent::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "label-release-msgs-sent";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsSent::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsSent::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsSent::get_children()
{
    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsSent::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsSent::InitMsgsSent()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "init-msgs-sent"; yang_parent_name = "ldp-mpls-template";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsSent::~InitMsgsSent()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsSent::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsSent::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsSent::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "init-msgs-sent";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsSent::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsSent::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsSent::get_children()
{
    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsSent::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsRcvd::LabelMappingMsgsRcvd()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "label-mapping-msgs-rcvd"; yang_parent_name = "ldp-mpls-template";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsRcvd::~LabelMappingMsgsRcvd()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsRcvd::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsRcvd::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsRcvd::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "label-mapping-msgs-rcvd";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsRcvd::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsRcvd::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsRcvd::get_children()
{
    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsRcvd::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsRcvd::KeepaliveMsgsRcvd()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "keepalive-msgs-rcvd"; yang_parent_name = "ldp-mpls-template";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsRcvd::~KeepaliveMsgsRcvd()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsRcvd::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsRcvd::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsRcvd::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "keepalive-msgs-rcvd";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsRcvd::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsRcvd::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsRcvd::get_children()
{
    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsRcvd::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsSent::LabelMappingMsgsSent()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "label-mapping-msgs-sent"; yang_parent_name = "ldp-mpls-template";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsSent::~LabelMappingMsgsSent()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsSent::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsSent::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsSent::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "label-mapping-msgs-sent";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsSent::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsSent::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsSent::get_children()
{
    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsSent::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsSent::KeepaliveMsgsSent()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "keepalive-msgs-sent"; yang_parent_name = "ldp-mpls-template";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsSent::~KeepaliveMsgsSent()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsSent::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsSent::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsSent::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "keepalive-msgs-sent";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsSent::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsSent::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsSent::get_children()
{
    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsSent::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsRcvd::AddressMsgsRcvd()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "address-msgs-rcvd"; yang_parent_name = "ldp-mpls-template";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsRcvd::~AddressMsgsRcvd()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsRcvd::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsRcvd::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsRcvd::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "address-msgs-rcvd";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsRcvd::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsRcvd::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsRcvd::get_children()
{
    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsRcvd::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsSent::AddressMsgsSent()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "address-msgs-sent"; yang_parent_name = "ldp-mpls-template";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsSent::~AddressMsgsSent()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsSent::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsSent::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsSent::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "address-msgs-sent";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsSent::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsSent::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsSent::get_children()
{
    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsSent::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LdpMplsTemplate()
    :
    	template_name{YType::str, "template-name"},
	 sample_interval{YType::uint32, "sample-interval"}
    	,
    address_msgs_rcvd(nullptr) // presence node
	,address_msgs_sent(nullptr) // presence node
	,address_withdraw_msgs_rcvd(nullptr) // presence node
	,address_withdraw_msgs_sent(nullptr) // presence node
	,init_msgs_rcvd(nullptr) // presence node
	,init_msgs_sent(nullptr) // presence node
	,keepalive_msgs_rcvd(nullptr) // presence node
	,keepalive_msgs_sent(nullptr) // presence node
	,label_mapping_msgs_rcvd(nullptr) // presence node
	,label_mapping_msgs_sent(nullptr) // presence node
	,label_release_msgs_rcvd(nullptr) // presence node
	,label_release_msgs_sent(nullptr) // presence node
	,label_withdraw_msgs_rcvd(nullptr) // presence node
	,label_withdraw_msgs_sent(nullptr) // presence node
	,notification_msgs_rcvd(nullptr) // presence node
	,notification_msgs_sent(nullptr) // presence node
	,total_msgs_rcvd(nullptr) // presence node
	,total_msgs_sent(nullptr) // presence node
{
    yang_name = "ldp-mpls-template"; yang_parent_name = "ldp-mpls-templates";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::~LdpMplsTemplate()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::has_data() const
{
    return template_name.is_set
	|| sample_interval.is_set
	|| (address_msgs_rcvd !=  nullptr && address_msgs_rcvd->has_data())
	|| (address_msgs_sent !=  nullptr && address_msgs_sent->has_data())
	|| (address_withdraw_msgs_rcvd !=  nullptr && address_withdraw_msgs_rcvd->has_data())
	|| (address_withdraw_msgs_sent !=  nullptr && address_withdraw_msgs_sent->has_data())
	|| (init_msgs_rcvd !=  nullptr && init_msgs_rcvd->has_data())
	|| (init_msgs_sent !=  nullptr && init_msgs_sent->has_data())
	|| (keepalive_msgs_rcvd !=  nullptr && keepalive_msgs_rcvd->has_data())
	|| (keepalive_msgs_sent !=  nullptr && keepalive_msgs_sent->has_data())
	|| (label_mapping_msgs_rcvd !=  nullptr && label_mapping_msgs_rcvd->has_data())
	|| (label_mapping_msgs_sent !=  nullptr && label_mapping_msgs_sent->has_data())
	|| (label_release_msgs_rcvd !=  nullptr && label_release_msgs_rcvd->has_data())
	|| (label_release_msgs_sent !=  nullptr && label_release_msgs_sent->has_data())
	|| (label_withdraw_msgs_rcvd !=  nullptr && label_withdraw_msgs_rcvd->has_data())
	|| (label_withdraw_msgs_sent !=  nullptr && label_withdraw_msgs_sent->has_data())
	|| (notification_msgs_rcvd !=  nullptr && notification_msgs_rcvd->has_data())
	|| (notification_msgs_sent !=  nullptr && notification_msgs_sent->has_data())
	|| (total_msgs_rcvd !=  nullptr && total_msgs_rcvd->has_data())
	|| (total_msgs_sent !=  nullptr && total_msgs_sent->has_data());
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(sample_interval.operation)
	|| (address_msgs_rcvd !=  nullptr && address_msgs_rcvd->has_operation())
	|| (address_msgs_sent !=  nullptr && address_msgs_sent->has_operation())
	|| (address_withdraw_msgs_rcvd !=  nullptr && address_withdraw_msgs_rcvd->has_operation())
	|| (address_withdraw_msgs_sent !=  nullptr && address_withdraw_msgs_sent->has_operation())
	|| (init_msgs_rcvd !=  nullptr && init_msgs_rcvd->has_operation())
	|| (init_msgs_sent !=  nullptr && init_msgs_sent->has_operation())
	|| (keepalive_msgs_rcvd !=  nullptr && keepalive_msgs_rcvd->has_operation())
	|| (keepalive_msgs_sent !=  nullptr && keepalive_msgs_sent->has_operation())
	|| (label_mapping_msgs_rcvd !=  nullptr && label_mapping_msgs_rcvd->has_operation())
	|| (label_mapping_msgs_sent !=  nullptr && label_mapping_msgs_sent->has_operation())
	|| (label_release_msgs_rcvd !=  nullptr && label_release_msgs_rcvd->has_operation())
	|| (label_release_msgs_sent !=  nullptr && label_release_msgs_sent->has_operation())
	|| (label_withdraw_msgs_rcvd !=  nullptr && label_withdraw_msgs_rcvd->has_operation())
	|| (label_withdraw_msgs_sent !=  nullptr && label_withdraw_msgs_sent->has_operation())
	|| (notification_msgs_rcvd !=  nullptr && notification_msgs_rcvd->has_operation())
	|| (notification_msgs_sent !=  nullptr && notification_msgs_sent->has_operation())
	|| (total_msgs_rcvd !=  nullptr && total_msgs_rcvd->has_operation())
	|| (total_msgs_sent !=  nullptr && total_msgs_sent->has_operation());
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ldp-mpls-template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/ldp-mpls/ldp-mpls-templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "address-msgs-rcvd")
    {
        if(address_msgs_rcvd != nullptr)
        {
            children["address-msgs-rcvd"] = address_msgs_rcvd.get();
        }
        else
        {
            address_msgs_rcvd = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsRcvd>();
            address_msgs_rcvd->parent = this;
            children["address-msgs-rcvd"] = address_msgs_rcvd.get();
        }
        return children.at("address-msgs-rcvd");
    }

    if(child_yang_name == "address-msgs-sent")
    {
        if(address_msgs_sent != nullptr)
        {
            children["address-msgs-sent"] = address_msgs_sent.get();
        }
        else
        {
            address_msgs_sent = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressMsgsSent>();
            address_msgs_sent->parent = this;
            children["address-msgs-sent"] = address_msgs_sent.get();
        }
        return children.at("address-msgs-sent");
    }

    if(child_yang_name == "address-withdraw-msgs-rcvd")
    {
        if(address_withdraw_msgs_rcvd != nullptr)
        {
            children["address-withdraw-msgs-rcvd"] = address_withdraw_msgs_rcvd.get();
        }
        else
        {
            address_withdraw_msgs_rcvd = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsRcvd>();
            address_withdraw_msgs_rcvd->parent = this;
            children["address-withdraw-msgs-rcvd"] = address_withdraw_msgs_rcvd.get();
        }
        return children.at("address-withdraw-msgs-rcvd");
    }

    if(child_yang_name == "address-withdraw-msgs-sent")
    {
        if(address_withdraw_msgs_sent != nullptr)
        {
            children["address-withdraw-msgs-sent"] = address_withdraw_msgs_sent.get();
        }
        else
        {
            address_withdraw_msgs_sent = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::AddressWithdrawMsgsSent>();
            address_withdraw_msgs_sent->parent = this;
            children["address-withdraw-msgs-sent"] = address_withdraw_msgs_sent.get();
        }
        return children.at("address-withdraw-msgs-sent");
    }

    if(child_yang_name == "init-msgs-rcvd")
    {
        if(init_msgs_rcvd != nullptr)
        {
            children["init-msgs-rcvd"] = init_msgs_rcvd.get();
        }
        else
        {
            init_msgs_rcvd = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsRcvd>();
            init_msgs_rcvd->parent = this;
            children["init-msgs-rcvd"] = init_msgs_rcvd.get();
        }
        return children.at("init-msgs-rcvd");
    }

    if(child_yang_name == "init-msgs-sent")
    {
        if(init_msgs_sent != nullptr)
        {
            children["init-msgs-sent"] = init_msgs_sent.get();
        }
        else
        {
            init_msgs_sent = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::InitMsgsSent>();
            init_msgs_sent->parent = this;
            children["init-msgs-sent"] = init_msgs_sent.get();
        }
        return children.at("init-msgs-sent");
    }

    if(child_yang_name == "keepalive-msgs-rcvd")
    {
        if(keepalive_msgs_rcvd != nullptr)
        {
            children["keepalive-msgs-rcvd"] = keepalive_msgs_rcvd.get();
        }
        else
        {
            keepalive_msgs_rcvd = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsRcvd>();
            keepalive_msgs_rcvd->parent = this;
            children["keepalive-msgs-rcvd"] = keepalive_msgs_rcvd.get();
        }
        return children.at("keepalive-msgs-rcvd");
    }

    if(child_yang_name == "keepalive-msgs-sent")
    {
        if(keepalive_msgs_sent != nullptr)
        {
            children["keepalive-msgs-sent"] = keepalive_msgs_sent.get();
        }
        else
        {
            keepalive_msgs_sent = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::KeepaliveMsgsSent>();
            keepalive_msgs_sent->parent = this;
            children["keepalive-msgs-sent"] = keepalive_msgs_sent.get();
        }
        return children.at("keepalive-msgs-sent");
    }

    if(child_yang_name == "label-mapping-msgs-rcvd")
    {
        if(label_mapping_msgs_rcvd != nullptr)
        {
            children["label-mapping-msgs-rcvd"] = label_mapping_msgs_rcvd.get();
        }
        else
        {
            label_mapping_msgs_rcvd = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsRcvd>();
            label_mapping_msgs_rcvd->parent = this;
            children["label-mapping-msgs-rcvd"] = label_mapping_msgs_rcvd.get();
        }
        return children.at("label-mapping-msgs-rcvd");
    }

    if(child_yang_name == "label-mapping-msgs-sent")
    {
        if(label_mapping_msgs_sent != nullptr)
        {
            children["label-mapping-msgs-sent"] = label_mapping_msgs_sent.get();
        }
        else
        {
            label_mapping_msgs_sent = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelMappingMsgsSent>();
            label_mapping_msgs_sent->parent = this;
            children["label-mapping-msgs-sent"] = label_mapping_msgs_sent.get();
        }
        return children.at("label-mapping-msgs-sent");
    }

    if(child_yang_name == "label-release-msgs-rcvd")
    {
        if(label_release_msgs_rcvd != nullptr)
        {
            children["label-release-msgs-rcvd"] = label_release_msgs_rcvd.get();
        }
        else
        {
            label_release_msgs_rcvd = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsRcvd>();
            label_release_msgs_rcvd->parent = this;
            children["label-release-msgs-rcvd"] = label_release_msgs_rcvd.get();
        }
        return children.at("label-release-msgs-rcvd");
    }

    if(child_yang_name == "label-release-msgs-sent")
    {
        if(label_release_msgs_sent != nullptr)
        {
            children["label-release-msgs-sent"] = label_release_msgs_sent.get();
        }
        else
        {
            label_release_msgs_sent = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelReleaseMsgsSent>();
            label_release_msgs_sent->parent = this;
            children["label-release-msgs-sent"] = label_release_msgs_sent.get();
        }
        return children.at("label-release-msgs-sent");
    }

    if(child_yang_name == "label-withdraw-msgs-rcvd")
    {
        if(label_withdraw_msgs_rcvd != nullptr)
        {
            children["label-withdraw-msgs-rcvd"] = label_withdraw_msgs_rcvd.get();
        }
        else
        {
            label_withdraw_msgs_rcvd = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsRcvd>();
            label_withdraw_msgs_rcvd->parent = this;
            children["label-withdraw-msgs-rcvd"] = label_withdraw_msgs_rcvd.get();
        }
        return children.at("label-withdraw-msgs-rcvd");
    }

    if(child_yang_name == "label-withdraw-msgs-sent")
    {
        if(label_withdraw_msgs_sent != nullptr)
        {
            children["label-withdraw-msgs-sent"] = label_withdraw_msgs_sent.get();
        }
        else
        {
            label_withdraw_msgs_sent = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::LabelWithdrawMsgsSent>();
            label_withdraw_msgs_sent->parent = this;
            children["label-withdraw-msgs-sent"] = label_withdraw_msgs_sent.get();
        }
        return children.at("label-withdraw-msgs-sent");
    }

    if(child_yang_name == "notification-msgs-rcvd")
    {
        if(notification_msgs_rcvd != nullptr)
        {
            children["notification-msgs-rcvd"] = notification_msgs_rcvd.get();
        }
        else
        {
            notification_msgs_rcvd = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsRcvd>();
            notification_msgs_rcvd->parent = this;
            children["notification-msgs-rcvd"] = notification_msgs_rcvd.get();
        }
        return children.at("notification-msgs-rcvd");
    }

    if(child_yang_name == "notification-msgs-sent")
    {
        if(notification_msgs_sent != nullptr)
        {
            children["notification-msgs-sent"] = notification_msgs_sent.get();
        }
        else
        {
            notification_msgs_sent = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::NotificationMsgsSent>();
            notification_msgs_sent->parent = this;
            children["notification-msgs-sent"] = notification_msgs_sent.get();
        }
        return children.at("notification-msgs-sent");
    }

    if(child_yang_name == "total-msgs-rcvd")
    {
        if(total_msgs_rcvd != nullptr)
        {
            children["total-msgs-rcvd"] = total_msgs_rcvd.get();
        }
        else
        {
            total_msgs_rcvd = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsRcvd>();
            total_msgs_rcvd->parent = this;
            children["total-msgs-rcvd"] = total_msgs_rcvd.get();
        }
        return children.at("total-msgs-rcvd");
    }

    if(child_yang_name == "total-msgs-sent")
    {
        if(total_msgs_sent != nullptr)
        {
            children["total-msgs-sent"] = total_msgs_sent.get();
        }
        else
        {
            total_msgs_sent = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::TotalMsgsSent>();
            total_msgs_sent->parent = this;
            children["total-msgs-sent"] = total_msgs_sent.get();
        }
        return children.at("total-msgs-sent");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::get_children()
{
    if(children.find("address-msgs-rcvd") == children.end())
    {
        if(address_msgs_rcvd != nullptr)
        {
            children["address-msgs-rcvd"] = address_msgs_rcvd.get();
        }
    }

    if(children.find("address-msgs-sent") == children.end())
    {
        if(address_msgs_sent != nullptr)
        {
            children["address-msgs-sent"] = address_msgs_sent.get();
        }
    }

    if(children.find("address-withdraw-msgs-rcvd") == children.end())
    {
        if(address_withdraw_msgs_rcvd != nullptr)
        {
            children["address-withdraw-msgs-rcvd"] = address_withdraw_msgs_rcvd.get();
        }
    }

    if(children.find("address-withdraw-msgs-sent") == children.end())
    {
        if(address_withdraw_msgs_sent != nullptr)
        {
            children["address-withdraw-msgs-sent"] = address_withdraw_msgs_sent.get();
        }
    }

    if(children.find("init-msgs-rcvd") == children.end())
    {
        if(init_msgs_rcvd != nullptr)
        {
            children["init-msgs-rcvd"] = init_msgs_rcvd.get();
        }
    }

    if(children.find("init-msgs-sent") == children.end())
    {
        if(init_msgs_sent != nullptr)
        {
            children["init-msgs-sent"] = init_msgs_sent.get();
        }
    }

    if(children.find("keepalive-msgs-rcvd") == children.end())
    {
        if(keepalive_msgs_rcvd != nullptr)
        {
            children["keepalive-msgs-rcvd"] = keepalive_msgs_rcvd.get();
        }
    }

    if(children.find("keepalive-msgs-sent") == children.end())
    {
        if(keepalive_msgs_sent != nullptr)
        {
            children["keepalive-msgs-sent"] = keepalive_msgs_sent.get();
        }
    }

    if(children.find("label-mapping-msgs-rcvd") == children.end())
    {
        if(label_mapping_msgs_rcvd != nullptr)
        {
            children["label-mapping-msgs-rcvd"] = label_mapping_msgs_rcvd.get();
        }
    }

    if(children.find("label-mapping-msgs-sent") == children.end())
    {
        if(label_mapping_msgs_sent != nullptr)
        {
            children["label-mapping-msgs-sent"] = label_mapping_msgs_sent.get();
        }
    }

    if(children.find("label-release-msgs-rcvd") == children.end())
    {
        if(label_release_msgs_rcvd != nullptr)
        {
            children["label-release-msgs-rcvd"] = label_release_msgs_rcvd.get();
        }
    }

    if(children.find("label-release-msgs-sent") == children.end())
    {
        if(label_release_msgs_sent != nullptr)
        {
            children["label-release-msgs-sent"] = label_release_msgs_sent.get();
        }
    }

    if(children.find("label-withdraw-msgs-rcvd") == children.end())
    {
        if(label_withdraw_msgs_rcvd != nullptr)
        {
            children["label-withdraw-msgs-rcvd"] = label_withdraw_msgs_rcvd.get();
        }
    }

    if(children.find("label-withdraw-msgs-sent") == children.end())
    {
        if(label_withdraw_msgs_sent != nullptr)
        {
            children["label-withdraw-msgs-sent"] = label_withdraw_msgs_sent.get();
        }
    }

    if(children.find("notification-msgs-rcvd") == children.end())
    {
        if(notification_msgs_rcvd != nullptr)
        {
            children["notification-msgs-rcvd"] = notification_msgs_rcvd.get();
        }
    }

    if(children.find("notification-msgs-sent") == children.end())
    {
        if(notification_msgs_sent != nullptr)
        {
            children["notification-msgs-sent"] = notification_msgs_sent.get();
        }
    }

    if(children.find("total-msgs-rcvd") == children.end())
    {
        if(total_msgs_rcvd != nullptr)
        {
            children["total-msgs-rcvd"] = total_msgs_rcvd.get();
        }
    }

    if(children.find("total-msgs-sent") == children.end())
    {
        if(total_msgs_sent != nullptr)
        {
            children["total-msgs-sent"] = total_msgs_sent.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplates()
{
    yang_name = "ldp-mpls-templates"; yang_parent_name = "ldp-mpls";
}

PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::~LdpMplsTemplates()
{
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::has_data() const
{
    for (std::size_t index=0; index<ldp_mpls_template.size(); index++)
    {
        if(ldp_mpls_template[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::has_operation() const
{
    for (std::size_t index=0; index<ldp_mpls_template.size(); index++)
    {
        if(ldp_mpls_template[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ldp-mpls-templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/ldp-mpls/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ldp-mpls-template")
    {
        for(auto const & c : ldp_mpls_template)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::LdpMplsTemplate>();
        c->parent = this;
        ldp_mpls_template.push_back(std::move(c));
        children[segment_path] = ldp_mpls_template.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::get_children()
{
    for (auto const & c : ldp_mpls_template)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::LdpMpls::LdpMpls()
    :
    ldp_mpls_templates(std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates>())
{
    ldp_mpls_templates->parent = this;
    children["ldp-mpls-templates"] = ldp_mpls_templates.get();

    yang_name = "ldp-mpls"; yang_parent_name = "threshold";
}

PerfMgmt::Threshold::LdpMpls::~LdpMpls()
{
}

bool PerfMgmt::Threshold::LdpMpls::has_data() const
{
    return (ldp_mpls_templates !=  nullptr && ldp_mpls_templates->has_data());
}

bool PerfMgmt::Threshold::LdpMpls::has_operation() const
{
    return is_set(operation)
	|| (ldp_mpls_templates !=  nullptr && ldp_mpls_templates->has_operation());
}

std::string PerfMgmt::Threshold::LdpMpls::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ldp-mpls";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::LdpMpls::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::LdpMpls::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ldp-mpls-templates")
    {
        if(ldp_mpls_templates != nullptr)
        {
            children["ldp-mpls-templates"] = ldp_mpls_templates.get();
        }
        else
        {
            ldp_mpls_templates = std::make_unique<PerfMgmt::Threshold::LdpMpls::LdpMplsTemplates>();
            ldp_mpls_templates->parent = this;
            children["ldp-mpls-templates"] = ldp_mpls_templates.get();
        }
        return children.at("ldp-mpls-templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::LdpMpls::get_children()
{
    if(children.find("ldp-mpls-templates") == children.end())
    {
        if(ldp_mpls_templates != nullptr)
        {
            children["ldp-mpls-templates"] = ldp_mpls_templates.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::LdpMpls::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InOctets::InOctets()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "in-octets"; yang_parent_name = "basic-counter-interface-template";
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InOctets::~InOctets()
{
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InOctets::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InOctets::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InOctets::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "in-octets";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InOctets::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InOctets::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InOctets::get_children()
{
    return children;
}

void PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InOctets::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutOctets::OutOctets()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "out-octets"; yang_parent_name = "basic-counter-interface-template";
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutOctets::~OutOctets()
{
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutOctets::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutOctets::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutOctets::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "out-octets";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutOctets::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutOctets::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutOctets::get_children()
{
    return children;
}

void PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutOctets::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputQueueDrops::OutputQueueDrops()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-queue-drops"; yang_parent_name = "basic-counter-interface-template";
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputQueueDrops::~OutputQueueDrops()
{
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputQueueDrops::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputQueueDrops::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputQueueDrops::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-queue-drops";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputQueueDrops::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputQueueDrops::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputQueueDrops::get_children()
{
    return children;
}

void PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputQueueDrops::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalErrors::InputTotalErrors()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-total-errors"; yang_parent_name = "basic-counter-interface-template";
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalErrors::~InputTotalErrors()
{
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalErrors::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalErrors::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalErrors::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-total-errors";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalErrors::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalErrors::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalErrors::get_children()
{
    return children;
}

void PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalErrors::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalDrops::OutputTotalDrops()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-total-drops"; yang_parent_name = "basic-counter-interface-template";
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalDrops::~OutputTotalDrops()
{
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalDrops::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalDrops::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalDrops::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-total-drops";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalDrops::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalDrops::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalDrops::get_children()
{
    return children;
}

void PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalDrops::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutPackets::OutPackets()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "out-packets"; yang_parent_name = "basic-counter-interface-template";
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutPackets::~OutPackets()
{
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutPackets::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutPackets::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutPackets::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "out-packets";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutPackets::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutPackets::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutPackets::get_children()
{
    return children;
}

void PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutPackets::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalErrors::OutputTotalErrors()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-total-errors"; yang_parent_name = "basic-counter-interface-template";
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalErrors::~OutputTotalErrors()
{
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalErrors::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalErrors::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalErrors::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-total-errors";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalErrors::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalErrors::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalErrors::get_children()
{
    return children;
}

void PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalErrors::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InPackets::InPackets()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "in-packets"; yang_parent_name = "basic-counter-interface-template";
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InPackets::~InPackets()
{
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InPackets::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InPackets::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InPackets::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "in-packets";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InPackets::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InPackets::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InPackets::get_children()
{
    return children;
}

void PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InPackets::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputQueueDrops::InputQueueDrops()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-queue-drops"; yang_parent_name = "basic-counter-interface-template";
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputQueueDrops::~InputQueueDrops()
{
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputQueueDrops::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputQueueDrops::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputQueueDrops::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-queue-drops";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputQueueDrops::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputQueueDrops::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputQueueDrops::get_children()
{
    return children;
}

void PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputQueueDrops::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalDrops::InputTotalDrops()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-total-drops"; yang_parent_name = "basic-counter-interface-template";
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalDrops::~InputTotalDrops()
{
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalDrops::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalDrops::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalDrops::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-total-drops";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalDrops::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalDrops::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalDrops::get_children()
{
    return children;
}

void PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalDrops::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::BasicCounterInterfaceTemplate()
    :
    	template_name{YType::str, "template-name"},
	 reg_exp_group{YType::str, "reg-exp-group"},
	 sample_interval{YType::uint32, "sample-interval"},
	 vrf_group{YType::str, "vrf-group"}
    	,
    in_octets(nullptr) // presence node
	,in_packets(nullptr) // presence node
	,input_queue_drops(nullptr) // presence node
	,input_total_drops(nullptr) // presence node
	,input_total_errors(nullptr) // presence node
	,out_octets(nullptr) // presence node
	,out_packets(nullptr) // presence node
	,output_queue_drops(nullptr) // presence node
	,output_total_drops(nullptr) // presence node
	,output_total_errors(nullptr) // presence node
{
    yang_name = "basic-counter-interface-template"; yang_parent_name = "basic-counter-interface-templates";
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::~BasicCounterInterfaceTemplate()
{
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::has_data() const
{
    return template_name.is_set
	|| reg_exp_group.is_set
	|| sample_interval.is_set
	|| vrf_group.is_set
	|| (in_octets !=  nullptr && in_octets->has_data())
	|| (in_packets !=  nullptr && in_packets->has_data())
	|| (input_queue_drops !=  nullptr && input_queue_drops->has_data())
	|| (input_total_drops !=  nullptr && input_total_drops->has_data())
	|| (input_total_errors !=  nullptr && input_total_errors->has_data())
	|| (out_octets !=  nullptr && out_octets->has_data())
	|| (out_packets !=  nullptr && out_packets->has_data())
	|| (output_queue_drops !=  nullptr && output_queue_drops->has_data())
	|| (output_total_drops !=  nullptr && output_total_drops->has_data())
	|| (output_total_errors !=  nullptr && output_total_errors->has_data());
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(reg_exp_group.operation)
	|| is_set(sample_interval.operation)
	|| is_set(vrf_group.operation)
	|| (in_octets !=  nullptr && in_octets->has_operation())
	|| (in_packets !=  nullptr && in_packets->has_operation())
	|| (input_queue_drops !=  nullptr && input_queue_drops->has_operation())
	|| (input_total_drops !=  nullptr && input_total_drops->has_operation())
	|| (input_total_errors !=  nullptr && input_total_errors->has_operation())
	|| (out_octets !=  nullptr && out_octets->has_operation())
	|| (out_packets !=  nullptr && out_packets->has_operation())
	|| (output_queue_drops !=  nullptr && output_queue_drops->has_operation())
	|| (output_total_drops !=  nullptr && output_total_drops->has_operation())
	|| (output_total_errors !=  nullptr && output_total_errors->has_operation());
}

std::string PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "basic-counter-interface-template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/basic-counter-interface/basic-counter-interface-templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (reg_exp_group.is_set || is_set(reg_exp_group.operation)) leaf_name_data.push_back(reg_exp_group.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());
    if (vrf_group.is_set || is_set(vrf_group.operation)) leaf_name_data.push_back(vrf_group.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "in-octets")
    {
        if(in_octets != nullptr)
        {
            children["in-octets"] = in_octets.get();
        }
        else
        {
            in_octets = std::make_unique<PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InOctets>();
            in_octets->parent = this;
            children["in-octets"] = in_octets.get();
        }
        return children.at("in-octets");
    }

    if(child_yang_name == "in-packets")
    {
        if(in_packets != nullptr)
        {
            children["in-packets"] = in_packets.get();
        }
        else
        {
            in_packets = std::make_unique<PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InPackets>();
            in_packets->parent = this;
            children["in-packets"] = in_packets.get();
        }
        return children.at("in-packets");
    }

    if(child_yang_name == "input-queue-drops")
    {
        if(input_queue_drops != nullptr)
        {
            children["input-queue-drops"] = input_queue_drops.get();
        }
        else
        {
            input_queue_drops = std::make_unique<PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputQueueDrops>();
            input_queue_drops->parent = this;
            children["input-queue-drops"] = input_queue_drops.get();
        }
        return children.at("input-queue-drops");
    }

    if(child_yang_name == "input-total-drops")
    {
        if(input_total_drops != nullptr)
        {
            children["input-total-drops"] = input_total_drops.get();
        }
        else
        {
            input_total_drops = std::make_unique<PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalDrops>();
            input_total_drops->parent = this;
            children["input-total-drops"] = input_total_drops.get();
        }
        return children.at("input-total-drops");
    }

    if(child_yang_name == "input-total-errors")
    {
        if(input_total_errors != nullptr)
        {
            children["input-total-errors"] = input_total_errors.get();
        }
        else
        {
            input_total_errors = std::make_unique<PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::InputTotalErrors>();
            input_total_errors->parent = this;
            children["input-total-errors"] = input_total_errors.get();
        }
        return children.at("input-total-errors");
    }

    if(child_yang_name == "out-octets")
    {
        if(out_octets != nullptr)
        {
            children["out-octets"] = out_octets.get();
        }
        else
        {
            out_octets = std::make_unique<PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutOctets>();
            out_octets->parent = this;
            children["out-octets"] = out_octets.get();
        }
        return children.at("out-octets");
    }

    if(child_yang_name == "out-packets")
    {
        if(out_packets != nullptr)
        {
            children["out-packets"] = out_packets.get();
        }
        else
        {
            out_packets = std::make_unique<PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutPackets>();
            out_packets->parent = this;
            children["out-packets"] = out_packets.get();
        }
        return children.at("out-packets");
    }

    if(child_yang_name == "output-queue-drops")
    {
        if(output_queue_drops != nullptr)
        {
            children["output-queue-drops"] = output_queue_drops.get();
        }
        else
        {
            output_queue_drops = std::make_unique<PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputQueueDrops>();
            output_queue_drops->parent = this;
            children["output-queue-drops"] = output_queue_drops.get();
        }
        return children.at("output-queue-drops");
    }

    if(child_yang_name == "output-total-drops")
    {
        if(output_total_drops != nullptr)
        {
            children["output-total-drops"] = output_total_drops.get();
        }
        else
        {
            output_total_drops = std::make_unique<PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalDrops>();
            output_total_drops->parent = this;
            children["output-total-drops"] = output_total_drops.get();
        }
        return children.at("output-total-drops");
    }

    if(child_yang_name == "output-total-errors")
    {
        if(output_total_errors != nullptr)
        {
            children["output-total-errors"] = output_total_errors.get();
        }
        else
        {
            output_total_errors = std::make_unique<PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::OutputTotalErrors>();
            output_total_errors->parent = this;
            children["output-total-errors"] = output_total_errors.get();
        }
        return children.at("output-total-errors");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::get_children()
{
    if(children.find("in-octets") == children.end())
    {
        if(in_octets != nullptr)
        {
            children["in-octets"] = in_octets.get();
        }
    }

    if(children.find("in-packets") == children.end())
    {
        if(in_packets != nullptr)
        {
            children["in-packets"] = in_packets.get();
        }
    }

    if(children.find("input-queue-drops") == children.end())
    {
        if(input_queue_drops != nullptr)
        {
            children["input-queue-drops"] = input_queue_drops.get();
        }
    }

    if(children.find("input-total-drops") == children.end())
    {
        if(input_total_drops != nullptr)
        {
            children["input-total-drops"] = input_total_drops.get();
        }
    }

    if(children.find("input-total-errors") == children.end())
    {
        if(input_total_errors != nullptr)
        {
            children["input-total-errors"] = input_total_errors.get();
        }
    }

    if(children.find("out-octets") == children.end())
    {
        if(out_octets != nullptr)
        {
            children["out-octets"] = out_octets.get();
        }
    }

    if(children.find("out-packets") == children.end())
    {
        if(out_packets != nullptr)
        {
            children["out-packets"] = out_packets.get();
        }
    }

    if(children.find("output-queue-drops") == children.end())
    {
        if(output_queue_drops != nullptr)
        {
            children["output-queue-drops"] = output_queue_drops.get();
        }
    }

    if(children.find("output-total-drops") == children.end())
    {
        if(output_total_drops != nullptr)
        {
            children["output-total-drops"] = output_total_drops.get();
        }
    }

    if(children.find("output-total-errors") == children.end())
    {
        if(output_total_errors != nullptr)
        {
            children["output-total-errors"] = output_total_errors.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "reg-exp-group")
    {
        reg_exp_group = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
    if(value_path == "vrf-group")
    {
        vrf_group = value;
    }
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplates()
{
    yang_name = "basic-counter-interface-templates"; yang_parent_name = "basic-counter-interface";
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::~BasicCounterInterfaceTemplates()
{
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::has_data() const
{
    for (std::size_t index=0; index<basic_counter_interface_template.size(); index++)
    {
        if(basic_counter_interface_template[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::has_operation() const
{
    for (std::size_t index=0; index<basic_counter_interface_template.size(); index++)
    {
        if(basic_counter_interface_template[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "basic-counter-interface-templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/basic-counter-interface/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "basic-counter-interface-template")
    {
        for(auto const & c : basic_counter_interface_template)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::BasicCounterInterfaceTemplate>();
        c->parent = this;
        basic_counter_interface_template.push_back(std::move(c));
        children[segment_path] = basic_counter_interface_template.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::get_children()
{
    for (auto const & c : basic_counter_interface_template)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterface()
    :
    basic_counter_interface_templates(std::make_unique<PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates>())
{
    basic_counter_interface_templates->parent = this;
    children["basic-counter-interface-templates"] = basic_counter_interface_templates.get();

    yang_name = "basic-counter-interface"; yang_parent_name = "threshold";
}

PerfMgmt::Threshold::BasicCounterInterface::~BasicCounterInterface()
{
}

bool PerfMgmt::Threshold::BasicCounterInterface::has_data() const
{
    return (basic_counter_interface_templates !=  nullptr && basic_counter_interface_templates->has_data());
}

bool PerfMgmt::Threshold::BasicCounterInterface::has_operation() const
{
    return is_set(operation)
	|| (basic_counter_interface_templates !=  nullptr && basic_counter_interface_templates->has_operation());
}

std::string PerfMgmt::Threshold::BasicCounterInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "basic-counter-interface";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::BasicCounterInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::BasicCounterInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "basic-counter-interface-templates")
    {
        if(basic_counter_interface_templates != nullptr)
        {
            children["basic-counter-interface-templates"] = basic_counter_interface_templates.get();
        }
        else
        {
            basic_counter_interface_templates = std::make_unique<PerfMgmt::Threshold::BasicCounterInterface::BasicCounterInterfaceTemplates>();
            basic_counter_interface_templates->parent = this;
            children["basic-counter-interface-templates"] = basic_counter_interface_templates.get();
        }
        return children.at("basic-counter-interface-templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::BasicCounterInterface::get_children()
{
    if(children.find("basic-counter-interface-templates") == children.end())
    {
        if(basic_counter_interface_templates != nullptr)
        {
            children["basic-counter-interface-templates"] = basic_counter_interface_templates.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::BasicCounterInterface::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputUpdateMessages::OutputUpdateMessages()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-update-messages"; yang_parent_name = "bgp-template";
}

PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputUpdateMessages::~OutputUpdateMessages()
{
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputUpdateMessages::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputUpdateMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputUpdateMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-update-messages";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputUpdateMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputUpdateMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputUpdateMessages::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputUpdateMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsReceived::ErrorsReceived()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "errors-received"; yang_parent_name = "bgp-template";
}

PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsReceived::~ErrorsReceived()
{
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsReceived::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsReceived::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsReceived::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "errors-received";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsReceived::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsReceived::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsReceived::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsReceived::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnEstablished::ConnEstablished()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "conn-established"; yang_parent_name = "bgp-template";
}

PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnEstablished::~ConnEstablished()
{
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnEstablished::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnEstablished::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnEstablished::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "conn-established";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnEstablished::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnEstablished::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnEstablished::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnEstablished::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputMessages::OutputMessages()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-messages"; yang_parent_name = "bgp-template";
}

PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputMessages::~OutputMessages()
{
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputMessages::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-messages";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputMessages::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnDropped::ConnDropped()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "conn-dropped"; yang_parent_name = "bgp-template";
}

PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnDropped::~ConnDropped()
{
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnDropped::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnDropped::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnDropped::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "conn-dropped";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnDropped::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnDropped::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnDropped::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnDropped::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputUpdateMessages::InputUpdateMessages()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-update-messages"; yang_parent_name = "bgp-template";
}

PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputUpdateMessages::~InputUpdateMessages()
{
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputUpdateMessages::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputUpdateMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputUpdateMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-update-messages";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputUpdateMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputUpdateMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputUpdateMessages::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputUpdateMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsSent::ErrorsSent()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "errors-sent"; yang_parent_name = "bgp-template";
}

PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsSent::~ErrorsSent()
{
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsSent::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsSent::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsSent::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "errors-sent";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsSent::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsSent::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsSent::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsSent::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputMessages::InputMessages()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-messages"; yang_parent_name = "bgp-template";
}

PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputMessages::~InputMessages()
{
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputMessages::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-messages";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputMessages::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::BgpTemplate()
    :
    	template_name{YType::str, "template-name"},
	 sample_interval{YType::uint32, "sample-interval"}
    	,
    conn_dropped(nullptr) // presence node
	,conn_established(nullptr) // presence node
	,errors_received(nullptr) // presence node
	,errors_sent(nullptr) // presence node
	,input_messages(nullptr) // presence node
	,input_update_messages(nullptr) // presence node
	,output_messages(nullptr) // presence node
	,output_update_messages(nullptr) // presence node
{
    yang_name = "bgp-template"; yang_parent_name = "bgp-templates";
}

PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::~BgpTemplate()
{
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::has_data() const
{
    return template_name.is_set
	|| sample_interval.is_set
	|| (conn_dropped !=  nullptr && conn_dropped->has_data())
	|| (conn_established !=  nullptr && conn_established->has_data())
	|| (errors_received !=  nullptr && errors_received->has_data())
	|| (errors_sent !=  nullptr && errors_sent->has_data())
	|| (input_messages !=  nullptr && input_messages->has_data())
	|| (input_update_messages !=  nullptr && input_update_messages->has_data())
	|| (output_messages !=  nullptr && output_messages->has_data())
	|| (output_update_messages !=  nullptr && output_update_messages->has_data());
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(sample_interval.operation)
	|| (conn_dropped !=  nullptr && conn_dropped->has_operation())
	|| (conn_established !=  nullptr && conn_established->has_operation())
	|| (errors_received !=  nullptr && errors_received->has_operation())
	|| (errors_sent !=  nullptr && errors_sent->has_operation())
	|| (input_messages !=  nullptr && input_messages->has_operation())
	|| (input_update_messages !=  nullptr && input_update_messages->has_operation())
	|| (output_messages !=  nullptr && output_messages->has_operation())
	|| (output_update_messages !=  nullptr && output_update_messages->has_operation());
}

std::string PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bgp-template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/bgp/bgp-templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "conn-dropped")
    {
        if(conn_dropped != nullptr)
        {
            children["conn-dropped"] = conn_dropped.get();
        }
        else
        {
            conn_dropped = std::make_unique<PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnDropped>();
            conn_dropped->parent = this;
            children["conn-dropped"] = conn_dropped.get();
        }
        return children.at("conn-dropped");
    }

    if(child_yang_name == "conn-established")
    {
        if(conn_established != nullptr)
        {
            children["conn-established"] = conn_established.get();
        }
        else
        {
            conn_established = std::make_unique<PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ConnEstablished>();
            conn_established->parent = this;
            children["conn-established"] = conn_established.get();
        }
        return children.at("conn-established");
    }

    if(child_yang_name == "errors-received")
    {
        if(errors_received != nullptr)
        {
            children["errors-received"] = errors_received.get();
        }
        else
        {
            errors_received = std::make_unique<PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsReceived>();
            errors_received->parent = this;
            children["errors-received"] = errors_received.get();
        }
        return children.at("errors-received");
    }

    if(child_yang_name == "errors-sent")
    {
        if(errors_sent != nullptr)
        {
            children["errors-sent"] = errors_sent.get();
        }
        else
        {
            errors_sent = std::make_unique<PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::ErrorsSent>();
            errors_sent->parent = this;
            children["errors-sent"] = errors_sent.get();
        }
        return children.at("errors-sent");
    }

    if(child_yang_name == "input-messages")
    {
        if(input_messages != nullptr)
        {
            children["input-messages"] = input_messages.get();
        }
        else
        {
            input_messages = std::make_unique<PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputMessages>();
            input_messages->parent = this;
            children["input-messages"] = input_messages.get();
        }
        return children.at("input-messages");
    }

    if(child_yang_name == "input-update-messages")
    {
        if(input_update_messages != nullptr)
        {
            children["input-update-messages"] = input_update_messages.get();
        }
        else
        {
            input_update_messages = std::make_unique<PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::InputUpdateMessages>();
            input_update_messages->parent = this;
            children["input-update-messages"] = input_update_messages.get();
        }
        return children.at("input-update-messages");
    }

    if(child_yang_name == "output-messages")
    {
        if(output_messages != nullptr)
        {
            children["output-messages"] = output_messages.get();
        }
        else
        {
            output_messages = std::make_unique<PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputMessages>();
            output_messages->parent = this;
            children["output-messages"] = output_messages.get();
        }
        return children.at("output-messages");
    }

    if(child_yang_name == "output-update-messages")
    {
        if(output_update_messages != nullptr)
        {
            children["output-update-messages"] = output_update_messages.get();
        }
        else
        {
            output_update_messages = std::make_unique<PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::OutputUpdateMessages>();
            output_update_messages->parent = this;
            children["output-update-messages"] = output_update_messages.get();
        }
        return children.at("output-update-messages");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::get_children()
{
    if(children.find("conn-dropped") == children.end())
    {
        if(conn_dropped != nullptr)
        {
            children["conn-dropped"] = conn_dropped.get();
        }
    }

    if(children.find("conn-established") == children.end())
    {
        if(conn_established != nullptr)
        {
            children["conn-established"] = conn_established.get();
        }
    }

    if(children.find("errors-received") == children.end())
    {
        if(errors_received != nullptr)
        {
            children["errors-received"] = errors_received.get();
        }
    }

    if(children.find("errors-sent") == children.end())
    {
        if(errors_sent != nullptr)
        {
            children["errors-sent"] = errors_sent.get();
        }
    }

    if(children.find("input-messages") == children.end())
    {
        if(input_messages != nullptr)
        {
            children["input-messages"] = input_messages.get();
        }
    }

    if(children.find("input-update-messages") == children.end())
    {
        if(input_update_messages != nullptr)
        {
            children["input-update-messages"] = input_update_messages.get();
        }
    }

    if(children.find("output-messages") == children.end())
    {
        if(output_messages != nullptr)
        {
            children["output-messages"] = output_messages.get();
        }
    }

    if(children.find("output-update-messages") == children.end())
    {
        if(output_update_messages != nullptr)
        {
            children["output-update-messages"] = output_update_messages.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
}

PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplates()
{
    yang_name = "bgp-templates"; yang_parent_name = "bgp";
}

PerfMgmt::Threshold::Bgp::BgpTemplates::~BgpTemplates()
{
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::has_data() const
{
    for (std::size_t index=0; index<bgp_template.size(); index++)
    {
        if(bgp_template[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Threshold::Bgp::BgpTemplates::has_operation() const
{
    for (std::size_t index=0; index<bgp_template.size(); index++)
    {
        if(bgp_template[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Threshold::Bgp::BgpTemplates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bgp-templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Bgp::BgpTemplates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/bgp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Bgp::BgpTemplates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "bgp-template")
    {
        for(auto const & c : bgp_template)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Threshold::Bgp::BgpTemplates::BgpTemplate>();
        c->parent = this;
        bgp_template.push_back(std::move(c));
        children[segment_path] = bgp_template.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Bgp::BgpTemplates::get_children()
{
    for (auto const & c : bgp_template)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::Bgp::BgpTemplates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::Bgp::Bgp()
    :
    bgp_templates(std::make_unique<PerfMgmt::Threshold::Bgp::BgpTemplates>())
{
    bgp_templates->parent = this;
    children["bgp-templates"] = bgp_templates.get();

    yang_name = "bgp"; yang_parent_name = "threshold";
}

PerfMgmt::Threshold::Bgp::~Bgp()
{
}

bool PerfMgmt::Threshold::Bgp::has_data() const
{
    return (bgp_templates !=  nullptr && bgp_templates->has_data());
}

bool PerfMgmt::Threshold::Bgp::has_operation() const
{
    return is_set(operation)
	|| (bgp_templates !=  nullptr && bgp_templates->has_operation());
}

std::string PerfMgmt::Threshold::Bgp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bgp";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Bgp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Bgp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "bgp-templates")
    {
        if(bgp_templates != nullptr)
        {
            children["bgp-templates"] = bgp_templates.get();
        }
        else
        {
            bgp_templates = std::make_unique<PerfMgmt::Threshold::Bgp::BgpTemplates>();
            bgp_templates->parent = this;
            children["bgp-templates"] = bgp_templates.get();
        }
        return children.at("bgp-templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Bgp::get_children()
{
    if(children.find("bgp-templates") == children.end())
    {
        if(bgp_templates != nullptr)
        {
            children["bgp-templates"] = bgp_templates.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::Bgp::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::ChecksumErrors::ChecksumErrors()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "checksum-errors"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::ChecksumErrors::~ChecksumErrors()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::ChecksumErrors::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::ChecksumErrors::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::ChecksumErrors::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "checksum-errors";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::ChecksumErrors::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::ChecksumErrors::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::ChecksumErrors::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::ChecksumErrors::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcksLsa::InputLsaAcksLsa()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-lsa-acks-lsa"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcksLsa::~InputLsaAcksLsa()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcksLsa::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcksLsa::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcksLsa::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-lsa-acks-lsa";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcksLsa::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcksLsa::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcksLsa::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcksLsa::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDsLsa::OutputDbDsLsa()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-db-ds-lsa"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDsLsa::~OutputDbDsLsa()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDsLsa::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDsLsa::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDsLsa::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-db-ds-lsa";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDsLsa::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDsLsa::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDsLsa::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDsLsa::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDsLsa::InputDbDsLsa()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-db-ds-lsa"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDsLsa::~InputDbDsLsa()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDsLsa::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDsLsa::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDsLsa::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-db-ds-lsa";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDsLsa::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDsLsa::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDsLsa::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDsLsa::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdates::InputLsaUpdates()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-lsa-updates"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdates::~InputLsaUpdates()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdates::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdates::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-lsa-updates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdates::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdates::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDs::OutputDbDs()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-db-ds"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDs::~OutputDbDs()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDs::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDs::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-db-ds";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDs::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDs::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdatesLsa::OutputLsaUpdatesLsa()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-lsa-updates-lsa"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdatesLsa::~OutputLsaUpdatesLsa()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdatesLsa::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdatesLsa::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdatesLsa::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-lsa-updates-lsa";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdatesLsa::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdatesLsa::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdatesLsa::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdatesLsa::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDs::InputDbDs()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-db-ds"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDs::~InputDbDs()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDs::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDs::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-db-ds";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDs::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDs::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdatesLsa::InputLsaUpdatesLsa()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-lsa-updates-lsa"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdatesLsa::~InputLsaUpdatesLsa()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdatesLsa::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdatesLsa::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdatesLsa::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-lsa-updates-lsa";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdatesLsa::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdatesLsa::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdatesLsa::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdatesLsa::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputPackets::OutputPackets()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-packets"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputPackets::~OutputPackets()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputPackets::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputPackets::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputPackets::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-packets";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputPackets::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputPackets::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputPackets::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputPackets::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputPackets::InputPackets()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-packets"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputPackets::~InputPackets()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputPackets::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputPackets::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputPackets::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-packets";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputPackets::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputPackets::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputPackets::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputPackets::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputHelloPackets::OutputHelloPackets()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-hello-packets"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputHelloPackets::~OutputHelloPackets()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputHelloPackets::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputHelloPackets::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputHelloPackets::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-hello-packets";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputHelloPackets::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputHelloPackets::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputHelloPackets::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputHelloPackets::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputHelloPackets::InputHelloPackets()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-hello-packets"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputHelloPackets::~InputHelloPackets()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputHelloPackets::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputHelloPackets::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputHelloPackets::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-hello-packets";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputHelloPackets::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputHelloPackets::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputHelloPackets::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputHelloPackets::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequests::OutputLsRequests()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-ls-requests"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequests::~OutputLsRequests()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequests::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequests::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequests::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-ls-requests";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequests::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequests::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequests::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequests::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcksLsa::OutputLsaAcksLsa()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-lsa-acks-lsa"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcksLsa::~OutputLsaAcksLsa()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcksLsa::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcksLsa::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcksLsa::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-lsa-acks-lsa";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcksLsa::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcksLsa::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcksLsa::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcksLsa::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcks::OutputLsaAcks()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-lsa-acks"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcks::~OutputLsaAcks()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcks::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcks::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcks::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-lsa-acks";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcks::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcks::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcks::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcks::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcks::InputLsaAcks()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-lsa-acks"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcks::~InputLsaAcks()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcks::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcks::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcks::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-lsa-acks";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcks::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcks::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcks::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcks::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdates::OutputLsaUpdates()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-lsa-updates"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdates::~OutputLsaUpdates()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdates::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdates::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-lsa-updates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdates::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdates::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequestsLsa::OutputLsRequestsLsa()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-ls-requests-lsa"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequestsLsa::~OutputLsRequestsLsa()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequestsLsa::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequestsLsa::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequestsLsa::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-ls-requests-lsa";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequestsLsa::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequestsLsa::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequestsLsa::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequestsLsa::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequestsLsa::InputLsRequestsLsa()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-ls-requests-lsa"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequestsLsa::~InputLsRequestsLsa()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequestsLsa::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequestsLsa::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequestsLsa::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-ls-requests-lsa";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequestsLsa::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequestsLsa::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequestsLsa::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequestsLsa::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequests::InputLsRequests()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-ls-requests"; yang_parent_name = "ospfv2-protocol-template";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequests::~InputLsRequests()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequests::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequests::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequests::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-ls-requests";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequests::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequests::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequests::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequests::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::Ospfv2ProtocolTemplate()
    :
    	template_name{YType::str, "template-name"},
	 sample_interval{YType::uint32, "sample-interval"}
    	,
    checksum_errors(nullptr) // presence node
	,input_db_ds(nullptr) // presence node
	,input_db_ds_lsa(nullptr) // presence node
	,input_hello_packets(nullptr) // presence node
	,input_ls_requests(nullptr) // presence node
	,input_ls_requests_lsa(nullptr) // presence node
	,input_lsa_acks(nullptr) // presence node
	,input_lsa_acks_lsa(nullptr) // presence node
	,input_lsa_updates(nullptr) // presence node
	,input_lsa_updates_lsa(nullptr) // presence node
	,input_packets(nullptr) // presence node
	,output_db_ds(nullptr) // presence node
	,output_db_ds_lsa(nullptr) // presence node
	,output_hello_packets(nullptr) // presence node
	,output_ls_requests(nullptr) // presence node
	,output_ls_requests_lsa(nullptr) // presence node
	,output_lsa_acks(nullptr) // presence node
	,output_lsa_acks_lsa(nullptr) // presence node
	,output_lsa_updates(nullptr) // presence node
	,output_lsa_updates_lsa(nullptr) // presence node
	,output_packets(nullptr) // presence node
{
    yang_name = "ospfv2-protocol-template"; yang_parent_name = "ospfv2-protocol-templates";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::~Ospfv2ProtocolTemplate()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::has_data() const
{
    return template_name.is_set
	|| sample_interval.is_set
	|| (checksum_errors !=  nullptr && checksum_errors->has_data())
	|| (input_db_ds !=  nullptr && input_db_ds->has_data())
	|| (input_db_ds_lsa !=  nullptr && input_db_ds_lsa->has_data())
	|| (input_hello_packets !=  nullptr && input_hello_packets->has_data())
	|| (input_ls_requests !=  nullptr && input_ls_requests->has_data())
	|| (input_ls_requests_lsa !=  nullptr && input_ls_requests_lsa->has_data())
	|| (input_lsa_acks !=  nullptr && input_lsa_acks->has_data())
	|| (input_lsa_acks_lsa !=  nullptr && input_lsa_acks_lsa->has_data())
	|| (input_lsa_updates !=  nullptr && input_lsa_updates->has_data())
	|| (input_lsa_updates_lsa !=  nullptr && input_lsa_updates_lsa->has_data())
	|| (input_packets !=  nullptr && input_packets->has_data())
	|| (output_db_ds !=  nullptr && output_db_ds->has_data())
	|| (output_db_ds_lsa !=  nullptr && output_db_ds_lsa->has_data())
	|| (output_hello_packets !=  nullptr && output_hello_packets->has_data())
	|| (output_ls_requests !=  nullptr && output_ls_requests->has_data())
	|| (output_ls_requests_lsa !=  nullptr && output_ls_requests_lsa->has_data())
	|| (output_lsa_acks !=  nullptr && output_lsa_acks->has_data())
	|| (output_lsa_acks_lsa !=  nullptr && output_lsa_acks_lsa->has_data())
	|| (output_lsa_updates !=  nullptr && output_lsa_updates->has_data())
	|| (output_lsa_updates_lsa !=  nullptr && output_lsa_updates_lsa->has_data())
	|| (output_packets !=  nullptr && output_packets->has_data());
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(sample_interval.operation)
	|| (checksum_errors !=  nullptr && checksum_errors->has_operation())
	|| (input_db_ds !=  nullptr && input_db_ds->has_operation())
	|| (input_db_ds_lsa !=  nullptr && input_db_ds_lsa->has_operation())
	|| (input_hello_packets !=  nullptr && input_hello_packets->has_operation())
	|| (input_ls_requests !=  nullptr && input_ls_requests->has_operation())
	|| (input_ls_requests_lsa !=  nullptr && input_ls_requests_lsa->has_operation())
	|| (input_lsa_acks !=  nullptr && input_lsa_acks->has_operation())
	|| (input_lsa_acks_lsa !=  nullptr && input_lsa_acks_lsa->has_operation())
	|| (input_lsa_updates !=  nullptr && input_lsa_updates->has_operation())
	|| (input_lsa_updates_lsa !=  nullptr && input_lsa_updates_lsa->has_operation())
	|| (input_packets !=  nullptr && input_packets->has_operation())
	|| (output_db_ds !=  nullptr && output_db_ds->has_operation())
	|| (output_db_ds_lsa !=  nullptr && output_db_ds_lsa->has_operation())
	|| (output_hello_packets !=  nullptr && output_hello_packets->has_operation())
	|| (output_ls_requests !=  nullptr && output_ls_requests->has_operation())
	|| (output_ls_requests_lsa !=  nullptr && output_ls_requests_lsa->has_operation())
	|| (output_lsa_acks !=  nullptr && output_lsa_acks->has_operation())
	|| (output_lsa_acks_lsa !=  nullptr && output_lsa_acks_lsa->has_operation())
	|| (output_lsa_updates !=  nullptr && output_lsa_updates->has_operation())
	|| (output_lsa_updates_lsa !=  nullptr && output_lsa_updates_lsa->has_operation())
	|| (output_packets !=  nullptr && output_packets->has_operation());
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ospfv2-protocol-template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/ospfv2-protocol/ospfv2-protocol-templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "checksum-errors")
    {
        if(checksum_errors != nullptr)
        {
            children["checksum-errors"] = checksum_errors.get();
        }
        else
        {
            checksum_errors = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::ChecksumErrors>();
            checksum_errors->parent = this;
            children["checksum-errors"] = checksum_errors.get();
        }
        return children.at("checksum-errors");
    }

    if(child_yang_name == "input-db-ds")
    {
        if(input_db_ds != nullptr)
        {
            children["input-db-ds"] = input_db_ds.get();
        }
        else
        {
            input_db_ds = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDs>();
            input_db_ds->parent = this;
            children["input-db-ds"] = input_db_ds.get();
        }
        return children.at("input-db-ds");
    }

    if(child_yang_name == "input-db-ds-lsa")
    {
        if(input_db_ds_lsa != nullptr)
        {
            children["input-db-ds-lsa"] = input_db_ds_lsa.get();
        }
        else
        {
            input_db_ds_lsa = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputDbDsLsa>();
            input_db_ds_lsa->parent = this;
            children["input-db-ds-lsa"] = input_db_ds_lsa.get();
        }
        return children.at("input-db-ds-lsa");
    }

    if(child_yang_name == "input-hello-packets")
    {
        if(input_hello_packets != nullptr)
        {
            children["input-hello-packets"] = input_hello_packets.get();
        }
        else
        {
            input_hello_packets = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputHelloPackets>();
            input_hello_packets->parent = this;
            children["input-hello-packets"] = input_hello_packets.get();
        }
        return children.at("input-hello-packets");
    }

    if(child_yang_name == "input-ls-requests")
    {
        if(input_ls_requests != nullptr)
        {
            children["input-ls-requests"] = input_ls_requests.get();
        }
        else
        {
            input_ls_requests = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequests>();
            input_ls_requests->parent = this;
            children["input-ls-requests"] = input_ls_requests.get();
        }
        return children.at("input-ls-requests");
    }

    if(child_yang_name == "input-ls-requests-lsa")
    {
        if(input_ls_requests_lsa != nullptr)
        {
            children["input-ls-requests-lsa"] = input_ls_requests_lsa.get();
        }
        else
        {
            input_ls_requests_lsa = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsRequestsLsa>();
            input_ls_requests_lsa->parent = this;
            children["input-ls-requests-lsa"] = input_ls_requests_lsa.get();
        }
        return children.at("input-ls-requests-lsa");
    }

    if(child_yang_name == "input-lsa-acks")
    {
        if(input_lsa_acks != nullptr)
        {
            children["input-lsa-acks"] = input_lsa_acks.get();
        }
        else
        {
            input_lsa_acks = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcks>();
            input_lsa_acks->parent = this;
            children["input-lsa-acks"] = input_lsa_acks.get();
        }
        return children.at("input-lsa-acks");
    }

    if(child_yang_name == "input-lsa-acks-lsa")
    {
        if(input_lsa_acks_lsa != nullptr)
        {
            children["input-lsa-acks-lsa"] = input_lsa_acks_lsa.get();
        }
        else
        {
            input_lsa_acks_lsa = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaAcksLsa>();
            input_lsa_acks_lsa->parent = this;
            children["input-lsa-acks-lsa"] = input_lsa_acks_lsa.get();
        }
        return children.at("input-lsa-acks-lsa");
    }

    if(child_yang_name == "input-lsa-updates")
    {
        if(input_lsa_updates != nullptr)
        {
            children["input-lsa-updates"] = input_lsa_updates.get();
        }
        else
        {
            input_lsa_updates = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdates>();
            input_lsa_updates->parent = this;
            children["input-lsa-updates"] = input_lsa_updates.get();
        }
        return children.at("input-lsa-updates");
    }

    if(child_yang_name == "input-lsa-updates-lsa")
    {
        if(input_lsa_updates_lsa != nullptr)
        {
            children["input-lsa-updates-lsa"] = input_lsa_updates_lsa.get();
        }
        else
        {
            input_lsa_updates_lsa = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputLsaUpdatesLsa>();
            input_lsa_updates_lsa->parent = this;
            children["input-lsa-updates-lsa"] = input_lsa_updates_lsa.get();
        }
        return children.at("input-lsa-updates-lsa");
    }

    if(child_yang_name == "input-packets")
    {
        if(input_packets != nullptr)
        {
            children["input-packets"] = input_packets.get();
        }
        else
        {
            input_packets = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::InputPackets>();
            input_packets->parent = this;
            children["input-packets"] = input_packets.get();
        }
        return children.at("input-packets");
    }

    if(child_yang_name == "output-db-ds")
    {
        if(output_db_ds != nullptr)
        {
            children["output-db-ds"] = output_db_ds.get();
        }
        else
        {
            output_db_ds = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDs>();
            output_db_ds->parent = this;
            children["output-db-ds"] = output_db_ds.get();
        }
        return children.at("output-db-ds");
    }

    if(child_yang_name == "output-db-ds-lsa")
    {
        if(output_db_ds_lsa != nullptr)
        {
            children["output-db-ds-lsa"] = output_db_ds_lsa.get();
        }
        else
        {
            output_db_ds_lsa = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputDbDsLsa>();
            output_db_ds_lsa->parent = this;
            children["output-db-ds-lsa"] = output_db_ds_lsa.get();
        }
        return children.at("output-db-ds-lsa");
    }

    if(child_yang_name == "output-hello-packets")
    {
        if(output_hello_packets != nullptr)
        {
            children["output-hello-packets"] = output_hello_packets.get();
        }
        else
        {
            output_hello_packets = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputHelloPackets>();
            output_hello_packets->parent = this;
            children["output-hello-packets"] = output_hello_packets.get();
        }
        return children.at("output-hello-packets");
    }

    if(child_yang_name == "output-ls-requests")
    {
        if(output_ls_requests != nullptr)
        {
            children["output-ls-requests"] = output_ls_requests.get();
        }
        else
        {
            output_ls_requests = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequests>();
            output_ls_requests->parent = this;
            children["output-ls-requests"] = output_ls_requests.get();
        }
        return children.at("output-ls-requests");
    }

    if(child_yang_name == "output-ls-requests-lsa")
    {
        if(output_ls_requests_lsa != nullptr)
        {
            children["output-ls-requests-lsa"] = output_ls_requests_lsa.get();
        }
        else
        {
            output_ls_requests_lsa = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsRequestsLsa>();
            output_ls_requests_lsa->parent = this;
            children["output-ls-requests-lsa"] = output_ls_requests_lsa.get();
        }
        return children.at("output-ls-requests-lsa");
    }

    if(child_yang_name == "output-lsa-acks")
    {
        if(output_lsa_acks != nullptr)
        {
            children["output-lsa-acks"] = output_lsa_acks.get();
        }
        else
        {
            output_lsa_acks = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcks>();
            output_lsa_acks->parent = this;
            children["output-lsa-acks"] = output_lsa_acks.get();
        }
        return children.at("output-lsa-acks");
    }

    if(child_yang_name == "output-lsa-acks-lsa")
    {
        if(output_lsa_acks_lsa != nullptr)
        {
            children["output-lsa-acks-lsa"] = output_lsa_acks_lsa.get();
        }
        else
        {
            output_lsa_acks_lsa = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaAcksLsa>();
            output_lsa_acks_lsa->parent = this;
            children["output-lsa-acks-lsa"] = output_lsa_acks_lsa.get();
        }
        return children.at("output-lsa-acks-lsa");
    }

    if(child_yang_name == "output-lsa-updates")
    {
        if(output_lsa_updates != nullptr)
        {
            children["output-lsa-updates"] = output_lsa_updates.get();
        }
        else
        {
            output_lsa_updates = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdates>();
            output_lsa_updates->parent = this;
            children["output-lsa-updates"] = output_lsa_updates.get();
        }
        return children.at("output-lsa-updates");
    }

    if(child_yang_name == "output-lsa-updates-lsa")
    {
        if(output_lsa_updates_lsa != nullptr)
        {
            children["output-lsa-updates-lsa"] = output_lsa_updates_lsa.get();
        }
        else
        {
            output_lsa_updates_lsa = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputLsaUpdatesLsa>();
            output_lsa_updates_lsa->parent = this;
            children["output-lsa-updates-lsa"] = output_lsa_updates_lsa.get();
        }
        return children.at("output-lsa-updates-lsa");
    }

    if(child_yang_name == "output-packets")
    {
        if(output_packets != nullptr)
        {
            children["output-packets"] = output_packets.get();
        }
        else
        {
            output_packets = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::OutputPackets>();
            output_packets->parent = this;
            children["output-packets"] = output_packets.get();
        }
        return children.at("output-packets");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::get_children()
{
    if(children.find("checksum-errors") == children.end())
    {
        if(checksum_errors != nullptr)
        {
            children["checksum-errors"] = checksum_errors.get();
        }
    }

    if(children.find("input-db-ds") == children.end())
    {
        if(input_db_ds != nullptr)
        {
            children["input-db-ds"] = input_db_ds.get();
        }
    }

    if(children.find("input-db-ds-lsa") == children.end())
    {
        if(input_db_ds_lsa != nullptr)
        {
            children["input-db-ds-lsa"] = input_db_ds_lsa.get();
        }
    }

    if(children.find("input-hello-packets") == children.end())
    {
        if(input_hello_packets != nullptr)
        {
            children["input-hello-packets"] = input_hello_packets.get();
        }
    }

    if(children.find("input-ls-requests") == children.end())
    {
        if(input_ls_requests != nullptr)
        {
            children["input-ls-requests"] = input_ls_requests.get();
        }
    }

    if(children.find("input-ls-requests-lsa") == children.end())
    {
        if(input_ls_requests_lsa != nullptr)
        {
            children["input-ls-requests-lsa"] = input_ls_requests_lsa.get();
        }
    }

    if(children.find("input-lsa-acks") == children.end())
    {
        if(input_lsa_acks != nullptr)
        {
            children["input-lsa-acks"] = input_lsa_acks.get();
        }
    }

    if(children.find("input-lsa-acks-lsa") == children.end())
    {
        if(input_lsa_acks_lsa != nullptr)
        {
            children["input-lsa-acks-lsa"] = input_lsa_acks_lsa.get();
        }
    }

    if(children.find("input-lsa-updates") == children.end())
    {
        if(input_lsa_updates != nullptr)
        {
            children["input-lsa-updates"] = input_lsa_updates.get();
        }
    }

    if(children.find("input-lsa-updates-lsa") == children.end())
    {
        if(input_lsa_updates_lsa != nullptr)
        {
            children["input-lsa-updates-lsa"] = input_lsa_updates_lsa.get();
        }
    }

    if(children.find("input-packets") == children.end())
    {
        if(input_packets != nullptr)
        {
            children["input-packets"] = input_packets.get();
        }
    }

    if(children.find("output-db-ds") == children.end())
    {
        if(output_db_ds != nullptr)
        {
            children["output-db-ds"] = output_db_ds.get();
        }
    }

    if(children.find("output-db-ds-lsa") == children.end())
    {
        if(output_db_ds_lsa != nullptr)
        {
            children["output-db-ds-lsa"] = output_db_ds_lsa.get();
        }
    }

    if(children.find("output-hello-packets") == children.end())
    {
        if(output_hello_packets != nullptr)
        {
            children["output-hello-packets"] = output_hello_packets.get();
        }
    }

    if(children.find("output-ls-requests") == children.end())
    {
        if(output_ls_requests != nullptr)
        {
            children["output-ls-requests"] = output_ls_requests.get();
        }
    }

    if(children.find("output-ls-requests-lsa") == children.end())
    {
        if(output_ls_requests_lsa != nullptr)
        {
            children["output-ls-requests-lsa"] = output_ls_requests_lsa.get();
        }
    }

    if(children.find("output-lsa-acks") == children.end())
    {
        if(output_lsa_acks != nullptr)
        {
            children["output-lsa-acks"] = output_lsa_acks.get();
        }
    }

    if(children.find("output-lsa-acks-lsa") == children.end())
    {
        if(output_lsa_acks_lsa != nullptr)
        {
            children["output-lsa-acks-lsa"] = output_lsa_acks_lsa.get();
        }
    }

    if(children.find("output-lsa-updates") == children.end())
    {
        if(output_lsa_updates != nullptr)
        {
            children["output-lsa-updates"] = output_lsa_updates.get();
        }
    }

    if(children.find("output-lsa-updates-lsa") == children.end())
    {
        if(output_lsa_updates_lsa != nullptr)
        {
            children["output-lsa-updates-lsa"] = output_lsa_updates_lsa.get();
        }
    }

    if(children.find("output-packets") == children.end())
    {
        if(output_packets != nullptr)
        {
            children["output-packets"] = output_packets.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplates()
{
    yang_name = "ospfv2-protocol-templates"; yang_parent_name = "ospfv2-protocol";
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::~Ospfv2ProtocolTemplates()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::has_data() const
{
    for (std::size_t index=0; index<ospfv2_protocol_template.size(); index++)
    {
        if(ospfv2_protocol_template[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::has_operation() const
{
    for (std::size_t index=0; index<ospfv2_protocol_template.size(); index++)
    {
        if(ospfv2_protocol_template[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ospfv2-protocol-templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/ospfv2-protocol/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ospfv2-protocol-template")
    {
        for(auto const & c : ospfv2_protocol_template)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::Ospfv2ProtocolTemplate>();
        c->parent = this;
        ospfv2_protocol_template.push_back(std::move(c));
        children[segment_path] = ospfv2_protocol_template.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::get_children()
{
    for (auto const & c : ospfv2_protocol_template)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2Protocol()
    :
    ospfv2_protocol_templates(std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates>())
{
    ospfv2_protocol_templates->parent = this;
    children["ospfv2-protocol-templates"] = ospfv2_protocol_templates.get();

    yang_name = "ospfv2-protocol"; yang_parent_name = "threshold";
}

PerfMgmt::Threshold::Ospfv2Protocol::~Ospfv2Protocol()
{
}

bool PerfMgmt::Threshold::Ospfv2Protocol::has_data() const
{
    return (ospfv2_protocol_templates !=  nullptr && ospfv2_protocol_templates->has_data());
}

bool PerfMgmt::Threshold::Ospfv2Protocol::has_operation() const
{
    return is_set(operation)
	|| (ospfv2_protocol_templates !=  nullptr && ospfv2_protocol_templates->has_operation());
}

std::string PerfMgmt::Threshold::Ospfv2Protocol::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ospfv2-protocol";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv2Protocol::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv2Protocol::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ospfv2-protocol-templates")
    {
        if(ospfv2_protocol_templates != nullptr)
        {
            children["ospfv2-protocol-templates"] = ospfv2_protocol_templates.get();
        }
        else
        {
            ospfv2_protocol_templates = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol::Ospfv2ProtocolTemplates>();
            ospfv2_protocol_templates->parent = this;
            children["ospfv2-protocol-templates"] = ospfv2_protocol_templates.get();
        }
        return children.at("ospfv2-protocol-templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv2Protocol::get_children()
{
    if(children.find("ospfv2-protocol-templates") == children.end())
    {
        if(ospfv2_protocol_templates != nullptr)
        {
            children["ospfv2-protocol-templates"] = ospfv2_protocol_templates.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::Ospfv2Protocol::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::AverageCpuUsed::AverageCpuUsed()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "average-cpu-used"; yang_parent_name = "cpu-node-template";
}

PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::AverageCpuUsed::~AverageCpuUsed()
{
}

bool PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::AverageCpuUsed::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::AverageCpuUsed::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::AverageCpuUsed::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "average-cpu-used";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::AverageCpuUsed::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::AverageCpuUsed::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::AverageCpuUsed::get_children()
{
    return children;
}

void PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::AverageCpuUsed::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::NoProcesses::NoProcesses()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "no-processes"; yang_parent_name = "cpu-node-template";
}

PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::NoProcesses::~NoProcesses()
{
}

bool PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::NoProcesses::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::NoProcesses::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::NoProcesses::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "no-processes";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::NoProcesses::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::NoProcesses::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::NoProcesses::get_children()
{
    return children;
}

void PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::NoProcesses::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::CpuNodeTemplate()
    :
    	template_name{YType::str, "template-name"},
	 sample_interval{YType::uint32, "sample-interval"}
    	,
    average_cpu_used(nullptr) // presence node
	,no_processes(nullptr) // presence node
{
    yang_name = "cpu-node-template"; yang_parent_name = "cpu-node-templates";
}

PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::~CpuNodeTemplate()
{
}

bool PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::has_data() const
{
    return template_name.is_set
	|| sample_interval.is_set
	|| (average_cpu_used !=  nullptr && average_cpu_used->has_data())
	|| (no_processes !=  nullptr && no_processes->has_data());
}

bool PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(sample_interval.operation)
	|| (average_cpu_used !=  nullptr && average_cpu_used->has_operation())
	|| (no_processes !=  nullptr && no_processes->has_operation());
}

std::string PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "cpu-node-template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/cpu-node/cpu-node-templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "average-cpu-used")
    {
        if(average_cpu_used != nullptr)
        {
            children["average-cpu-used"] = average_cpu_used.get();
        }
        else
        {
            average_cpu_used = std::make_unique<PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::AverageCpuUsed>();
            average_cpu_used->parent = this;
            children["average-cpu-used"] = average_cpu_used.get();
        }
        return children.at("average-cpu-used");
    }

    if(child_yang_name == "no-processes")
    {
        if(no_processes != nullptr)
        {
            children["no-processes"] = no_processes.get();
        }
        else
        {
            no_processes = std::make_unique<PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::NoProcesses>();
            no_processes->parent = this;
            children["no-processes"] = no_processes.get();
        }
        return children.at("no-processes");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::get_children()
{
    if(children.find("average-cpu-used") == children.end())
    {
        if(average_cpu_used != nullptr)
        {
            children["average-cpu-used"] = average_cpu_used.get();
        }
    }

    if(children.find("no-processes") == children.end())
    {
        if(no_processes != nullptr)
        {
            children["no-processes"] = no_processes.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
}

PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplates()
{
    yang_name = "cpu-node-templates"; yang_parent_name = "cpu-node";
}

PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::~CpuNodeTemplates()
{
}

bool PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::has_data() const
{
    for (std::size_t index=0; index<cpu_node_template.size(); index++)
    {
        if(cpu_node_template[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::has_operation() const
{
    for (std::size_t index=0; index<cpu_node_template.size(); index++)
    {
        if(cpu_node_template[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "cpu-node-templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/cpu-node/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "cpu-node-template")
    {
        for(auto const & c : cpu_node_template)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::CpuNodeTemplate>();
        c->parent = this;
        cpu_node_template.push_back(std::move(c));
        children[segment_path] = cpu_node_template.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::get_children()
{
    for (auto const & c : cpu_node_template)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::CpuNode::CpuNodeTemplates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::CpuNode::CpuNode()
    :
    cpu_node_templates(std::make_unique<PerfMgmt::Threshold::CpuNode::CpuNodeTemplates>())
{
    cpu_node_templates->parent = this;
    children["cpu-node-templates"] = cpu_node_templates.get();

    yang_name = "cpu-node"; yang_parent_name = "threshold";
}

PerfMgmt::Threshold::CpuNode::~CpuNode()
{
}

bool PerfMgmt::Threshold::CpuNode::has_data() const
{
    return (cpu_node_templates !=  nullptr && cpu_node_templates->has_data());
}

bool PerfMgmt::Threshold::CpuNode::has_operation() const
{
    return is_set(operation)
	|| (cpu_node_templates !=  nullptr && cpu_node_templates->has_operation());
}

std::string PerfMgmt::Threshold::CpuNode::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "cpu-node";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::CpuNode::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::CpuNode::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "cpu-node-templates")
    {
        if(cpu_node_templates != nullptr)
        {
            children["cpu-node-templates"] = cpu_node_templates.get();
        }
        else
        {
            cpu_node_templates = std::make_unique<PerfMgmt::Threshold::CpuNode::CpuNodeTemplates>();
            cpu_node_templates->parent = this;
            children["cpu-node-templates"] = cpu_node_templates.get();
        }
        return children.at("cpu-node-templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::CpuNode::get_children()
{
    if(children.find("cpu-node-templates") == children.end())
    {
        if(cpu_node_templates != nullptr)
        {
            children["cpu-node-templates"] = cpu_node_templates.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::CpuNode::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputDataRate::InputDataRate()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-data-rate"; yang_parent_name = "data-rate-interface-template";
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputDataRate::~InputDataRate()
{
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputDataRate::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputDataRate::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputDataRate::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-data-rate";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputDataRate::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputDataRate::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputDataRate::get_children()
{
    return children;
}

void PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputDataRate::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::Bandwidth::Bandwidth()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "bandwidth"; yang_parent_name = "data-rate-interface-template";
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::Bandwidth::~Bandwidth()
{
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::Bandwidth::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::Bandwidth::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::Bandwidth::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bandwidth";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::Bandwidth::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::Bandwidth::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::Bandwidth::get_children()
{
    return children;
}

void PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::Bandwidth::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPacketRate::OutputPacketRate()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-packet-rate"; yang_parent_name = "data-rate-interface-template";
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPacketRate::~OutputPacketRate()
{
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPacketRate::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPacketRate::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPacketRate::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-packet-rate";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPacketRate::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPacketRate::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPacketRate::get_children()
{
    return children;
}

void PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPacketRate::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakPkts::InputPeakPkts()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-peak-pkts"; yang_parent_name = "data-rate-interface-template";
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakPkts::~InputPeakPkts()
{
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakPkts::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakPkts::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakPkts::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-peak-pkts";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakPkts::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakPkts::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakPkts::get_children()
{
    return children;
}

void PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakPkts::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakRate::OutputPeakRate()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-peak-rate"; yang_parent_name = "data-rate-interface-template";
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakRate::~OutputPeakRate()
{
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakRate::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakRate::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakRate::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-peak-rate";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakRate::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakRate::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakRate::get_children()
{
    return children;
}

void PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakRate::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputDataRate::OutputDataRate()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-data-rate"; yang_parent_name = "data-rate-interface-template";
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputDataRate::~OutputDataRate()
{
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputDataRate::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputDataRate::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputDataRate::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-data-rate";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputDataRate::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputDataRate::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputDataRate::get_children()
{
    return children;
}

void PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputDataRate::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPacketRate::InputPacketRate()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-packet-rate"; yang_parent_name = "data-rate-interface-template";
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPacketRate::~InputPacketRate()
{
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPacketRate::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPacketRate::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPacketRate::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-packet-rate";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPacketRate::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPacketRate::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPacketRate::get_children()
{
    return children;
}

void PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPacketRate::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakPkts::OutputPeakPkts()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-peak-pkts"; yang_parent_name = "data-rate-interface-template";
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakPkts::~OutputPeakPkts()
{
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakPkts::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakPkts::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakPkts::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-peak-pkts";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakPkts::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakPkts::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakPkts::get_children()
{
    return children;
}

void PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakPkts::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakRate::InputPeakRate()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-peak-rate"; yang_parent_name = "data-rate-interface-template";
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakRate::~InputPeakRate()
{
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakRate::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakRate::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakRate::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-peak-rate";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakRate::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakRate::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakRate::get_children()
{
    return children;
}

void PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakRate::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::DataRateInterfaceTemplate()
    :
    	template_name{YType::str, "template-name"},
	 reg_exp_group{YType::str, "reg-exp-group"},
	 sample_interval{YType::uint32, "sample-interval"},
	 vrf_group{YType::str, "vrf-group"}
    	,
    bandwidth(nullptr) // presence node
	,input_data_rate(nullptr) // presence node
	,input_packet_rate(nullptr) // presence node
	,input_peak_pkts(nullptr) // presence node
	,input_peak_rate(nullptr) // presence node
	,output_data_rate(nullptr) // presence node
	,output_packet_rate(nullptr) // presence node
	,output_peak_pkts(nullptr) // presence node
	,output_peak_rate(nullptr) // presence node
{
    yang_name = "data-rate-interface-template"; yang_parent_name = "data-rate-interface-templates";
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::~DataRateInterfaceTemplate()
{
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::has_data() const
{
    return template_name.is_set
	|| reg_exp_group.is_set
	|| sample_interval.is_set
	|| vrf_group.is_set
	|| (bandwidth !=  nullptr && bandwidth->has_data())
	|| (input_data_rate !=  nullptr && input_data_rate->has_data())
	|| (input_packet_rate !=  nullptr && input_packet_rate->has_data())
	|| (input_peak_pkts !=  nullptr && input_peak_pkts->has_data())
	|| (input_peak_rate !=  nullptr && input_peak_rate->has_data())
	|| (output_data_rate !=  nullptr && output_data_rate->has_data())
	|| (output_packet_rate !=  nullptr && output_packet_rate->has_data())
	|| (output_peak_pkts !=  nullptr && output_peak_pkts->has_data())
	|| (output_peak_rate !=  nullptr && output_peak_rate->has_data());
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(reg_exp_group.operation)
	|| is_set(sample_interval.operation)
	|| is_set(vrf_group.operation)
	|| (bandwidth !=  nullptr && bandwidth->has_operation())
	|| (input_data_rate !=  nullptr && input_data_rate->has_operation())
	|| (input_packet_rate !=  nullptr && input_packet_rate->has_operation())
	|| (input_peak_pkts !=  nullptr && input_peak_pkts->has_operation())
	|| (input_peak_rate !=  nullptr && input_peak_rate->has_operation())
	|| (output_data_rate !=  nullptr && output_data_rate->has_operation())
	|| (output_packet_rate !=  nullptr && output_packet_rate->has_operation())
	|| (output_peak_pkts !=  nullptr && output_peak_pkts->has_operation())
	|| (output_peak_rate !=  nullptr && output_peak_rate->has_operation());
}

std::string PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "data-rate-interface-template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/data-rate-interface/data-rate-interface-templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (reg_exp_group.is_set || is_set(reg_exp_group.operation)) leaf_name_data.push_back(reg_exp_group.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());
    if (vrf_group.is_set || is_set(vrf_group.operation)) leaf_name_data.push_back(vrf_group.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "bandwidth")
    {
        if(bandwidth != nullptr)
        {
            children["bandwidth"] = bandwidth.get();
        }
        else
        {
            bandwidth = std::make_unique<PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::Bandwidth>();
            bandwidth->parent = this;
            children["bandwidth"] = bandwidth.get();
        }
        return children.at("bandwidth");
    }

    if(child_yang_name == "input-data-rate")
    {
        if(input_data_rate != nullptr)
        {
            children["input-data-rate"] = input_data_rate.get();
        }
        else
        {
            input_data_rate = std::make_unique<PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputDataRate>();
            input_data_rate->parent = this;
            children["input-data-rate"] = input_data_rate.get();
        }
        return children.at("input-data-rate");
    }

    if(child_yang_name == "input-packet-rate")
    {
        if(input_packet_rate != nullptr)
        {
            children["input-packet-rate"] = input_packet_rate.get();
        }
        else
        {
            input_packet_rate = std::make_unique<PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPacketRate>();
            input_packet_rate->parent = this;
            children["input-packet-rate"] = input_packet_rate.get();
        }
        return children.at("input-packet-rate");
    }

    if(child_yang_name == "input-peak-pkts")
    {
        if(input_peak_pkts != nullptr)
        {
            children["input-peak-pkts"] = input_peak_pkts.get();
        }
        else
        {
            input_peak_pkts = std::make_unique<PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakPkts>();
            input_peak_pkts->parent = this;
            children["input-peak-pkts"] = input_peak_pkts.get();
        }
        return children.at("input-peak-pkts");
    }

    if(child_yang_name == "input-peak-rate")
    {
        if(input_peak_rate != nullptr)
        {
            children["input-peak-rate"] = input_peak_rate.get();
        }
        else
        {
            input_peak_rate = std::make_unique<PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::InputPeakRate>();
            input_peak_rate->parent = this;
            children["input-peak-rate"] = input_peak_rate.get();
        }
        return children.at("input-peak-rate");
    }

    if(child_yang_name == "output-data-rate")
    {
        if(output_data_rate != nullptr)
        {
            children["output-data-rate"] = output_data_rate.get();
        }
        else
        {
            output_data_rate = std::make_unique<PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputDataRate>();
            output_data_rate->parent = this;
            children["output-data-rate"] = output_data_rate.get();
        }
        return children.at("output-data-rate");
    }

    if(child_yang_name == "output-packet-rate")
    {
        if(output_packet_rate != nullptr)
        {
            children["output-packet-rate"] = output_packet_rate.get();
        }
        else
        {
            output_packet_rate = std::make_unique<PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPacketRate>();
            output_packet_rate->parent = this;
            children["output-packet-rate"] = output_packet_rate.get();
        }
        return children.at("output-packet-rate");
    }

    if(child_yang_name == "output-peak-pkts")
    {
        if(output_peak_pkts != nullptr)
        {
            children["output-peak-pkts"] = output_peak_pkts.get();
        }
        else
        {
            output_peak_pkts = std::make_unique<PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakPkts>();
            output_peak_pkts->parent = this;
            children["output-peak-pkts"] = output_peak_pkts.get();
        }
        return children.at("output-peak-pkts");
    }

    if(child_yang_name == "output-peak-rate")
    {
        if(output_peak_rate != nullptr)
        {
            children["output-peak-rate"] = output_peak_rate.get();
        }
        else
        {
            output_peak_rate = std::make_unique<PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::OutputPeakRate>();
            output_peak_rate->parent = this;
            children["output-peak-rate"] = output_peak_rate.get();
        }
        return children.at("output-peak-rate");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::get_children()
{
    if(children.find("bandwidth") == children.end())
    {
        if(bandwidth != nullptr)
        {
            children["bandwidth"] = bandwidth.get();
        }
    }

    if(children.find("input-data-rate") == children.end())
    {
        if(input_data_rate != nullptr)
        {
            children["input-data-rate"] = input_data_rate.get();
        }
    }

    if(children.find("input-packet-rate") == children.end())
    {
        if(input_packet_rate != nullptr)
        {
            children["input-packet-rate"] = input_packet_rate.get();
        }
    }

    if(children.find("input-peak-pkts") == children.end())
    {
        if(input_peak_pkts != nullptr)
        {
            children["input-peak-pkts"] = input_peak_pkts.get();
        }
    }

    if(children.find("input-peak-rate") == children.end())
    {
        if(input_peak_rate != nullptr)
        {
            children["input-peak-rate"] = input_peak_rate.get();
        }
    }

    if(children.find("output-data-rate") == children.end())
    {
        if(output_data_rate != nullptr)
        {
            children["output-data-rate"] = output_data_rate.get();
        }
    }

    if(children.find("output-packet-rate") == children.end())
    {
        if(output_packet_rate != nullptr)
        {
            children["output-packet-rate"] = output_packet_rate.get();
        }
    }

    if(children.find("output-peak-pkts") == children.end())
    {
        if(output_peak_pkts != nullptr)
        {
            children["output-peak-pkts"] = output_peak_pkts.get();
        }
    }

    if(children.find("output-peak-rate") == children.end())
    {
        if(output_peak_rate != nullptr)
        {
            children["output-peak-rate"] = output_peak_rate.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "reg-exp-group")
    {
        reg_exp_group = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
    if(value_path == "vrf-group")
    {
        vrf_group = value;
    }
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplates()
{
    yang_name = "data-rate-interface-templates"; yang_parent_name = "data-rate-interface";
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::~DataRateInterfaceTemplates()
{
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::has_data() const
{
    for (std::size_t index=0; index<data_rate_interface_template.size(); index++)
    {
        if(data_rate_interface_template[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::has_operation() const
{
    for (std::size_t index=0; index<data_rate_interface_template.size(); index++)
    {
        if(data_rate_interface_template[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "data-rate-interface-templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/data-rate-interface/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "data-rate-interface-template")
    {
        for(auto const & c : data_rate_interface_template)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::DataRateInterfaceTemplate>();
        c->parent = this;
        data_rate_interface_template.push_back(std::move(c));
        children[segment_path] = data_rate_interface_template.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::get_children()
{
    for (auto const & c : data_rate_interface_template)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::DataRateInterface::DataRateInterface()
    :
    data_rate_interface_templates(std::make_unique<PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates>())
{
    data_rate_interface_templates->parent = this;
    children["data-rate-interface-templates"] = data_rate_interface_templates.get();

    yang_name = "data-rate-interface"; yang_parent_name = "threshold";
}

PerfMgmt::Threshold::DataRateInterface::~DataRateInterface()
{
}

bool PerfMgmt::Threshold::DataRateInterface::has_data() const
{
    return (data_rate_interface_templates !=  nullptr && data_rate_interface_templates->has_data());
}

bool PerfMgmt::Threshold::DataRateInterface::has_operation() const
{
    return is_set(operation)
	|| (data_rate_interface_templates !=  nullptr && data_rate_interface_templates->has_operation());
}

std::string PerfMgmt::Threshold::DataRateInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "data-rate-interface";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::DataRateInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::DataRateInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "data-rate-interface-templates")
    {
        if(data_rate_interface_templates != nullptr)
        {
            children["data-rate-interface-templates"] = data_rate_interface_templates.get();
        }
        else
        {
            data_rate_interface_templates = std::make_unique<PerfMgmt::Threshold::DataRateInterface::DataRateInterfaceTemplates>();
            data_rate_interface_templates->parent = this;
            children["data-rate-interface-templates"] = data_rate_interface_templates.get();
        }
        return children.at("data-rate-interface-templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::DataRateInterface::get_children()
{
    if(children.find("data-rate-interface-templates") == children.end())
    {
        if(data_rate_interface_templates != nullptr)
        {
            children["data-rate-interface-templates"] = data_rate_interface_templates.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::DataRateInterface::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::AverageCpuUsed::AverageCpuUsed()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "average-cpu-used"; yang_parent_name = "process-node-template";
}

PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::AverageCpuUsed::~AverageCpuUsed()
{
}

bool PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::AverageCpuUsed::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::AverageCpuUsed::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::AverageCpuUsed::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "average-cpu-used";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::AverageCpuUsed::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::AverageCpuUsed::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::AverageCpuUsed::get_children()
{
    return children;
}

void PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::AverageCpuUsed::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::PeakMemory::PeakMemory()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "peak-memory"; yang_parent_name = "process-node-template";
}

PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::PeakMemory::~PeakMemory()
{
}

bool PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::PeakMemory::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::PeakMemory::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::PeakMemory::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "peak-memory";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::PeakMemory::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::PeakMemory::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::PeakMemory::get_children()
{
    return children;
}

void PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::PeakMemory::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::NoThreads::NoThreads()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "no-threads"; yang_parent_name = "process-node-template";
}

PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::NoThreads::~NoThreads()
{
}

bool PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::NoThreads::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::NoThreads::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::NoThreads::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "no-threads";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::NoThreads::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::NoThreads::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::NoThreads::get_children()
{
    return children;
}

void PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::NoThreads::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::ProcessNodeTemplate()
    :
    	template_name{YType::str, "template-name"},
	 sample_interval{YType::uint32, "sample-interval"}
    	,
    average_cpu_used(nullptr) // presence node
	,no_threads(nullptr) // presence node
	,peak_memory(nullptr) // presence node
{
    yang_name = "process-node-template"; yang_parent_name = "process-node-templates";
}

PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::~ProcessNodeTemplate()
{
}

bool PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::has_data() const
{
    return template_name.is_set
	|| sample_interval.is_set
	|| (average_cpu_used !=  nullptr && average_cpu_used->has_data())
	|| (no_threads !=  nullptr && no_threads->has_data())
	|| (peak_memory !=  nullptr && peak_memory->has_data());
}

bool PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(sample_interval.operation)
	|| (average_cpu_used !=  nullptr && average_cpu_used->has_operation())
	|| (no_threads !=  nullptr && no_threads->has_operation())
	|| (peak_memory !=  nullptr && peak_memory->has_operation());
}

std::string PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "process-node-template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/process-node/process-node-templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "average-cpu-used")
    {
        if(average_cpu_used != nullptr)
        {
            children["average-cpu-used"] = average_cpu_used.get();
        }
        else
        {
            average_cpu_used = std::make_unique<PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::AverageCpuUsed>();
            average_cpu_used->parent = this;
            children["average-cpu-used"] = average_cpu_used.get();
        }
        return children.at("average-cpu-used");
    }

    if(child_yang_name == "no-threads")
    {
        if(no_threads != nullptr)
        {
            children["no-threads"] = no_threads.get();
        }
        else
        {
            no_threads = std::make_unique<PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::NoThreads>();
            no_threads->parent = this;
            children["no-threads"] = no_threads.get();
        }
        return children.at("no-threads");
    }

    if(child_yang_name == "peak-memory")
    {
        if(peak_memory != nullptr)
        {
            children["peak-memory"] = peak_memory.get();
        }
        else
        {
            peak_memory = std::make_unique<PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::PeakMemory>();
            peak_memory->parent = this;
            children["peak-memory"] = peak_memory.get();
        }
        return children.at("peak-memory");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::get_children()
{
    if(children.find("average-cpu-used") == children.end())
    {
        if(average_cpu_used != nullptr)
        {
            children["average-cpu-used"] = average_cpu_used.get();
        }
    }

    if(children.find("no-threads") == children.end())
    {
        if(no_threads != nullptr)
        {
            children["no-threads"] = no_threads.get();
        }
    }

    if(children.find("peak-memory") == children.end())
    {
        if(peak_memory != nullptr)
        {
            children["peak-memory"] = peak_memory.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
}

PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplates()
{
    yang_name = "process-node-templates"; yang_parent_name = "process-node";
}

PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::~ProcessNodeTemplates()
{
}

bool PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::has_data() const
{
    for (std::size_t index=0; index<process_node_template.size(); index++)
    {
        if(process_node_template[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::has_operation() const
{
    for (std::size_t index=0; index<process_node_template.size(); index++)
    {
        if(process_node_template[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "process-node-templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/process-node/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "process-node-template")
    {
        for(auto const & c : process_node_template)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::ProcessNodeTemplate>();
        c->parent = this;
        process_node_template.push_back(std::move(c));
        children[segment_path] = process_node_template.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::get_children()
{
    for (auto const & c : process_node_template)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::ProcessNode::ProcessNode()
    :
    process_node_templates(std::make_unique<PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates>())
{
    process_node_templates->parent = this;
    children["process-node-templates"] = process_node_templates.get();

    yang_name = "process-node"; yang_parent_name = "threshold";
}

PerfMgmt::Threshold::ProcessNode::~ProcessNode()
{
}

bool PerfMgmt::Threshold::ProcessNode::has_data() const
{
    return (process_node_templates !=  nullptr && process_node_templates->has_data());
}

bool PerfMgmt::Threshold::ProcessNode::has_operation() const
{
    return is_set(operation)
	|| (process_node_templates !=  nullptr && process_node_templates->has_operation());
}

std::string PerfMgmt::Threshold::ProcessNode::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "process-node";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::ProcessNode::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::ProcessNode::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "process-node-templates")
    {
        if(process_node_templates != nullptr)
        {
            children["process-node-templates"] = process_node_templates.get();
        }
        else
        {
            process_node_templates = std::make_unique<PerfMgmt::Threshold::ProcessNode::ProcessNodeTemplates>();
            process_node_templates->parent = this;
            children["process-node-templates"] = process_node_templates.get();
        }
        return children.at("process-node-templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::ProcessNode::get_children()
{
    if(children.find("process-node-templates") == children.end())
    {
        if(process_node_templates != nullptr)
        {
            children["process-node-templates"] = process_node_templates.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::ProcessNode::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::PeakMemory::PeakMemory()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "peak-memory"; yang_parent_name = "memory-node-template";
}

PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::PeakMemory::~PeakMemory()
{
}

bool PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::PeakMemory::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::PeakMemory::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::PeakMemory::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "peak-memory";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::PeakMemory::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::PeakMemory::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::PeakMemory::get_children()
{
    return children;
}

void PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::PeakMemory::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::CurrMemory::CurrMemory()
    :
    	end_range_value{YType::int32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::int32, "value"}
{
    yang_name = "curr-memory"; yang_parent_name = "memory-node-template";
}

PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::CurrMemory::~CurrMemory()
{
}

bool PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::CurrMemory::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::CurrMemory::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::CurrMemory::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "curr-memory";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::CurrMemory::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::CurrMemory::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::CurrMemory::get_children()
{
    return children;
}

void PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::CurrMemory::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::MemoryNodeTemplate()
    :
    	template_name{YType::str, "template-name"},
	 sample_interval{YType::uint32, "sample-interval"}
    	,
    curr_memory(nullptr) // presence node
	,peak_memory(nullptr) // presence node
{
    yang_name = "memory-node-template"; yang_parent_name = "memory-node-templates";
}

PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::~MemoryNodeTemplate()
{
}

bool PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::has_data() const
{
    return template_name.is_set
	|| sample_interval.is_set
	|| (curr_memory !=  nullptr && curr_memory->has_data())
	|| (peak_memory !=  nullptr && peak_memory->has_data());
}

bool PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(sample_interval.operation)
	|| (curr_memory !=  nullptr && curr_memory->has_operation())
	|| (peak_memory !=  nullptr && peak_memory->has_operation());
}

std::string PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "memory-node-template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/memory-node/memory-node-templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "curr-memory")
    {
        if(curr_memory != nullptr)
        {
            children["curr-memory"] = curr_memory.get();
        }
        else
        {
            curr_memory = std::make_unique<PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::CurrMemory>();
            curr_memory->parent = this;
            children["curr-memory"] = curr_memory.get();
        }
        return children.at("curr-memory");
    }

    if(child_yang_name == "peak-memory")
    {
        if(peak_memory != nullptr)
        {
            children["peak-memory"] = peak_memory.get();
        }
        else
        {
            peak_memory = std::make_unique<PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::PeakMemory>();
            peak_memory->parent = this;
            children["peak-memory"] = peak_memory.get();
        }
        return children.at("peak-memory");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::get_children()
{
    if(children.find("curr-memory") == children.end())
    {
        if(curr_memory != nullptr)
        {
            children["curr-memory"] = curr_memory.get();
        }
    }

    if(children.find("peak-memory") == children.end())
    {
        if(peak_memory != nullptr)
        {
            children["peak-memory"] = peak_memory.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
}

PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplates()
{
    yang_name = "memory-node-templates"; yang_parent_name = "memory-node";
}

PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::~MemoryNodeTemplates()
{
}

bool PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::has_data() const
{
    for (std::size_t index=0; index<memory_node_template.size(); index++)
    {
        if(memory_node_template[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::has_operation() const
{
    for (std::size_t index=0; index<memory_node_template.size(); index++)
    {
        if(memory_node_template[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "memory-node-templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/memory-node/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "memory-node-template")
    {
        for(auto const & c : memory_node_template)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::MemoryNodeTemplate>();
        c->parent = this;
        memory_node_template.push_back(std::move(c));
        children[segment_path] = memory_node_template.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::get_children()
{
    for (auto const & c : memory_node_template)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::MemoryNode::MemoryNode()
    :
    memory_node_templates(std::make_unique<PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates>())
{
    memory_node_templates->parent = this;
    children["memory-node-templates"] = memory_node_templates.get();

    yang_name = "memory-node"; yang_parent_name = "threshold";
}

PerfMgmt::Threshold::MemoryNode::~MemoryNode()
{
}

bool PerfMgmt::Threshold::MemoryNode::has_data() const
{
    return (memory_node_templates !=  nullptr && memory_node_templates->has_data());
}

bool PerfMgmt::Threshold::MemoryNode::has_operation() const
{
    return is_set(operation)
	|| (memory_node_templates !=  nullptr && memory_node_templates->has_operation());
}

std::string PerfMgmt::Threshold::MemoryNode::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "memory-node";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::MemoryNode::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::MemoryNode::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "memory-node-templates")
    {
        if(memory_node_templates != nullptr)
        {
            children["memory-node-templates"] = memory_node_templates.get();
        }
        else
        {
            memory_node_templates = std::make_unique<PerfMgmt::Threshold::MemoryNode::MemoryNodeTemplates>();
            memory_node_templates->parent = this;
            children["memory-node-templates"] = memory_node_templates.get();
        }
        return children.at("memory-node-templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::MemoryNode::get_children()
{
    if(children.find("memory-node-templates") == children.end())
    {
        if(memory_node_templates != nullptr)
        {
            children["memory-node-templates"] = memory_node_templates.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::MemoryNode::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcksLsa::InputLsaAcksLsa()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-lsa-acks-lsa"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcksLsa::~InputLsaAcksLsa()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcksLsa::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcksLsa::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcksLsa::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-lsa-acks-lsa";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcksLsa::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcksLsa::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcksLsa::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcksLsa::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDsLsa::OutputDbDsLsa()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-db-ds-lsa"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDsLsa::~OutputDbDsLsa()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDsLsa::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDsLsa::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDsLsa::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-db-ds-lsa";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDsLsa::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDsLsa::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDsLsa::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDsLsa::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDsLsa::InputDbDsLsa()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-db-ds-lsa"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDsLsa::~InputDbDsLsa()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDsLsa::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDsLsa::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDsLsa::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-db-ds-lsa";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDsLsa::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDsLsa::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDsLsa::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDsLsa::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdates::InputLsaUpdates()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-lsa-updates"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdates::~InputLsaUpdates()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdates::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdates::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-lsa-updates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdates::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdates::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDs::OutputDbDs()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-db-ds"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDs::~OutputDbDs()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDs::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDs::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-db-ds";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDs::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDs::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdatesLsa::OutputLsaUpdatesLsa()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-lsa-updates-lsa"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdatesLsa::~OutputLsaUpdatesLsa()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdatesLsa::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdatesLsa::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdatesLsa::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-lsa-updates-lsa";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdatesLsa::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdatesLsa::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdatesLsa::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdatesLsa::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDs::InputDbDs()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-db-ds"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDs::~InputDbDs()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDs::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDs::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-db-ds";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDs::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDs::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdatesLsa::InputLsaUpdatesLsa()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-lsa-updates-lsa"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdatesLsa::~InputLsaUpdatesLsa()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdatesLsa::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdatesLsa::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdatesLsa::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-lsa-updates-lsa";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdatesLsa::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdatesLsa::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdatesLsa::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdatesLsa::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputPackets::OutputPackets()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-packets"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputPackets::~OutputPackets()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputPackets::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputPackets::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputPackets::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-packets";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputPackets::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputPackets::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputPackets::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputPackets::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputPackets::InputPackets()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-packets"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputPackets::~InputPackets()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputPackets::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputPackets::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputPackets::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-packets";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputPackets::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputPackets::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputPackets::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputPackets::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputHelloPackets::OutputHelloPackets()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-hello-packets"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputHelloPackets::~OutputHelloPackets()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputHelloPackets::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputHelloPackets::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputHelloPackets::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-hello-packets";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputHelloPackets::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputHelloPackets::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputHelloPackets::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputHelloPackets::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputHelloPackets::InputHelloPackets()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-hello-packets"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputHelloPackets::~InputHelloPackets()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputHelloPackets::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputHelloPackets::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputHelloPackets::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-hello-packets";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputHelloPackets::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputHelloPackets::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputHelloPackets::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputHelloPackets::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequests::OutputLsRequests()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-ls-requests"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequests::~OutputLsRequests()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequests::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequests::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequests::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-ls-requests";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequests::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequests::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequests::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequests::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcksLsa::OutputLsaAcksLsa()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-lsa-acks-lsa"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcksLsa::~OutputLsaAcksLsa()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcksLsa::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcksLsa::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcksLsa::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-lsa-acks-lsa";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcksLsa::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcksLsa::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcksLsa::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcksLsa::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcks::OutputLsaAcks()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-lsa-acks"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcks::~OutputLsaAcks()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcks::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcks::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcks::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-lsa-acks";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcks::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcks::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcks::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcks::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcks::InputLsaAcks()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-lsa-acks"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcks::~InputLsaAcks()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcks::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcks::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcks::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-lsa-acks";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcks::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcks::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcks::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcks::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdates::OutputLsaUpdates()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-lsa-updates"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdates::~OutputLsaUpdates()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdates::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdates::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-lsa-updates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdates::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdates::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequestsLsa::OutputLsRequestsLsa()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "output-ls-requests-lsa"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequestsLsa::~OutputLsRequestsLsa()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequestsLsa::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequestsLsa::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequestsLsa::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "output-ls-requests-lsa";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequestsLsa::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequestsLsa::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequestsLsa::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequestsLsa::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequestsLsa::InputLsRequestsLsa()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-ls-requests-lsa"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequestsLsa::~InputLsRequestsLsa()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequestsLsa::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequestsLsa::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequestsLsa::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-ls-requests-lsa";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequestsLsa::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequestsLsa::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequestsLsa::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequestsLsa::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequests::InputLsRequests()
    :
    	end_range_value{YType::uint32, "end-range-value"},
	 operator_{YType::enumeration, "operator"},
	 percent{YType::boolean, "percent"},
	 rearm_type{YType::enumeration, "rearm-type"},
	 rearm_window{YType::uint32, "rearm-window"},
	 value_{YType::uint32, "value"}
{
    yang_name = "input-ls-requests"; yang_parent_name = "ospfv3-protocol-template";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequests::~InputLsRequests()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequests::has_data() const
{
    return end_range_value.is_set
	|| operator_.is_set
	|| percent.is_set
	|| rearm_type.is_set
	|| rearm_window.is_set
	|| value_.is_set;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequests::has_operation() const
{
    return is_set(operation)
	|| is_set(end_range_value.operation)
	|| is_set(operator_.operation)
	|| is_set(percent.operation)
	|| is_set(rearm_type.operation)
	|| is_set(rearm_window.operation)
	|| is_set(value_.operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequests::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "input-ls-requests";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequests::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (end_range_value.is_set || is_set(end_range_value.operation)) leaf_name_data.push_back(end_range_value.get_name_leafdata());
    if (operator_.is_set || is_set(operator_.operation)) leaf_name_data.push_back(operator_.get_name_leafdata());
    if (percent.is_set || is_set(percent.operation)) leaf_name_data.push_back(percent.get_name_leafdata());
    if (rearm_type.is_set || is_set(rearm_type.operation)) leaf_name_data.push_back(rearm_type.get_name_leafdata());
    if (rearm_window.is_set || is_set(rearm_window.operation)) leaf_name_data.push_back(rearm_window.get_name_leafdata());
    if (value_.is_set || is_set(value_.operation)) leaf_name_data.push_back(value_.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequests::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequests::get_children()
{
    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequests::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "end-range-value")
    {
        end_range_value = value;
    }
    if(value_path == "operator")
    {
        operator_ = value;
    }
    if(value_path == "percent")
    {
        percent = value;
    }
    if(value_path == "rearm-type")
    {
        rearm_type = value;
    }
    if(value_path == "rearm-window")
    {
        rearm_window = value;
    }
    if(value_path == "value")
    {
        value_ = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::Ospfv3ProtocolTemplate()
    :
    	template_name{YType::str, "template-name"},
	 sample_interval{YType::uint32, "sample-interval"}
    	,
    input_db_ds(nullptr) // presence node
	,input_db_ds_lsa(nullptr) // presence node
	,input_hello_packets(nullptr) // presence node
	,input_ls_requests(nullptr) // presence node
	,input_ls_requests_lsa(nullptr) // presence node
	,input_lsa_acks(nullptr) // presence node
	,input_lsa_acks_lsa(nullptr) // presence node
	,input_lsa_updates(nullptr) // presence node
	,input_lsa_updates_lsa(nullptr) // presence node
	,input_packets(nullptr) // presence node
	,output_db_ds(nullptr) // presence node
	,output_db_ds_lsa(nullptr) // presence node
	,output_hello_packets(nullptr) // presence node
	,output_ls_requests(nullptr) // presence node
	,output_ls_requests_lsa(nullptr) // presence node
	,output_lsa_acks(nullptr) // presence node
	,output_lsa_acks_lsa(nullptr) // presence node
	,output_lsa_updates(nullptr) // presence node
	,output_lsa_updates_lsa(nullptr) // presence node
	,output_packets(nullptr) // presence node
{
    yang_name = "ospfv3-protocol-template"; yang_parent_name = "ospfv3-protocol-templates";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::~Ospfv3ProtocolTemplate()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::has_data() const
{
    return template_name.is_set
	|| sample_interval.is_set
	|| (input_db_ds !=  nullptr && input_db_ds->has_data())
	|| (input_db_ds_lsa !=  nullptr && input_db_ds_lsa->has_data())
	|| (input_hello_packets !=  nullptr && input_hello_packets->has_data())
	|| (input_ls_requests !=  nullptr && input_ls_requests->has_data())
	|| (input_ls_requests_lsa !=  nullptr && input_ls_requests_lsa->has_data())
	|| (input_lsa_acks !=  nullptr && input_lsa_acks->has_data())
	|| (input_lsa_acks_lsa !=  nullptr && input_lsa_acks_lsa->has_data())
	|| (input_lsa_updates !=  nullptr && input_lsa_updates->has_data())
	|| (input_lsa_updates_lsa !=  nullptr && input_lsa_updates_lsa->has_data())
	|| (input_packets !=  nullptr && input_packets->has_data())
	|| (output_db_ds !=  nullptr && output_db_ds->has_data())
	|| (output_db_ds_lsa !=  nullptr && output_db_ds_lsa->has_data())
	|| (output_hello_packets !=  nullptr && output_hello_packets->has_data())
	|| (output_ls_requests !=  nullptr && output_ls_requests->has_data())
	|| (output_ls_requests_lsa !=  nullptr && output_ls_requests_lsa->has_data())
	|| (output_lsa_acks !=  nullptr && output_lsa_acks->has_data())
	|| (output_lsa_acks_lsa !=  nullptr && output_lsa_acks_lsa->has_data())
	|| (output_lsa_updates !=  nullptr && output_lsa_updates->has_data())
	|| (output_lsa_updates_lsa !=  nullptr && output_lsa_updates_lsa->has_data())
	|| (output_packets !=  nullptr && output_packets->has_data());
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::has_operation() const
{
    return is_set(operation)
	|| is_set(template_name.operation)
	|| is_set(sample_interval.operation)
	|| (input_db_ds !=  nullptr && input_db_ds->has_operation())
	|| (input_db_ds_lsa !=  nullptr && input_db_ds_lsa->has_operation())
	|| (input_hello_packets !=  nullptr && input_hello_packets->has_operation())
	|| (input_ls_requests !=  nullptr && input_ls_requests->has_operation())
	|| (input_ls_requests_lsa !=  nullptr && input_ls_requests_lsa->has_operation())
	|| (input_lsa_acks !=  nullptr && input_lsa_acks->has_operation())
	|| (input_lsa_acks_lsa !=  nullptr && input_lsa_acks_lsa->has_operation())
	|| (input_lsa_updates !=  nullptr && input_lsa_updates->has_operation())
	|| (input_lsa_updates_lsa !=  nullptr && input_lsa_updates_lsa->has_operation())
	|| (input_packets !=  nullptr && input_packets->has_operation())
	|| (output_db_ds !=  nullptr && output_db_ds->has_operation())
	|| (output_db_ds_lsa !=  nullptr && output_db_ds_lsa->has_operation())
	|| (output_hello_packets !=  nullptr && output_hello_packets->has_operation())
	|| (output_ls_requests !=  nullptr && output_ls_requests->has_operation())
	|| (output_ls_requests_lsa !=  nullptr && output_ls_requests_lsa->has_operation())
	|| (output_lsa_acks !=  nullptr && output_lsa_acks->has_operation())
	|| (output_lsa_acks_lsa !=  nullptr && output_lsa_acks_lsa->has_operation())
	|| (output_lsa_updates !=  nullptr && output_lsa_updates->has_operation())
	|| (output_lsa_updates_lsa !=  nullptr && output_lsa_updates_lsa->has_operation())
	|| (output_packets !=  nullptr && output_packets->has_operation());
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ospfv3-protocol-template" <<"[template-name='" <<template_name.get() <<"']";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/ospfv3-protocol/ospfv3-protocol-templates/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (template_name.is_set || is_set(template_name.operation)) leaf_name_data.push_back(template_name.get_name_leafdata());
    if (sample_interval.is_set || is_set(sample_interval.operation)) leaf_name_data.push_back(sample_interval.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "input-db-ds")
    {
        if(input_db_ds != nullptr)
        {
            children["input-db-ds"] = input_db_ds.get();
        }
        else
        {
            input_db_ds = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDs>();
            input_db_ds->parent = this;
            children["input-db-ds"] = input_db_ds.get();
        }
        return children.at("input-db-ds");
    }

    if(child_yang_name == "input-db-ds-lsa")
    {
        if(input_db_ds_lsa != nullptr)
        {
            children["input-db-ds-lsa"] = input_db_ds_lsa.get();
        }
        else
        {
            input_db_ds_lsa = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputDbDsLsa>();
            input_db_ds_lsa->parent = this;
            children["input-db-ds-lsa"] = input_db_ds_lsa.get();
        }
        return children.at("input-db-ds-lsa");
    }

    if(child_yang_name == "input-hello-packets")
    {
        if(input_hello_packets != nullptr)
        {
            children["input-hello-packets"] = input_hello_packets.get();
        }
        else
        {
            input_hello_packets = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputHelloPackets>();
            input_hello_packets->parent = this;
            children["input-hello-packets"] = input_hello_packets.get();
        }
        return children.at("input-hello-packets");
    }

    if(child_yang_name == "input-ls-requests")
    {
        if(input_ls_requests != nullptr)
        {
            children["input-ls-requests"] = input_ls_requests.get();
        }
        else
        {
            input_ls_requests = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequests>();
            input_ls_requests->parent = this;
            children["input-ls-requests"] = input_ls_requests.get();
        }
        return children.at("input-ls-requests");
    }

    if(child_yang_name == "input-ls-requests-lsa")
    {
        if(input_ls_requests_lsa != nullptr)
        {
            children["input-ls-requests-lsa"] = input_ls_requests_lsa.get();
        }
        else
        {
            input_ls_requests_lsa = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsRequestsLsa>();
            input_ls_requests_lsa->parent = this;
            children["input-ls-requests-lsa"] = input_ls_requests_lsa.get();
        }
        return children.at("input-ls-requests-lsa");
    }

    if(child_yang_name == "input-lsa-acks")
    {
        if(input_lsa_acks != nullptr)
        {
            children["input-lsa-acks"] = input_lsa_acks.get();
        }
        else
        {
            input_lsa_acks = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcks>();
            input_lsa_acks->parent = this;
            children["input-lsa-acks"] = input_lsa_acks.get();
        }
        return children.at("input-lsa-acks");
    }

    if(child_yang_name == "input-lsa-acks-lsa")
    {
        if(input_lsa_acks_lsa != nullptr)
        {
            children["input-lsa-acks-lsa"] = input_lsa_acks_lsa.get();
        }
        else
        {
            input_lsa_acks_lsa = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaAcksLsa>();
            input_lsa_acks_lsa->parent = this;
            children["input-lsa-acks-lsa"] = input_lsa_acks_lsa.get();
        }
        return children.at("input-lsa-acks-lsa");
    }

    if(child_yang_name == "input-lsa-updates")
    {
        if(input_lsa_updates != nullptr)
        {
            children["input-lsa-updates"] = input_lsa_updates.get();
        }
        else
        {
            input_lsa_updates = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdates>();
            input_lsa_updates->parent = this;
            children["input-lsa-updates"] = input_lsa_updates.get();
        }
        return children.at("input-lsa-updates");
    }

    if(child_yang_name == "input-lsa-updates-lsa")
    {
        if(input_lsa_updates_lsa != nullptr)
        {
            children["input-lsa-updates-lsa"] = input_lsa_updates_lsa.get();
        }
        else
        {
            input_lsa_updates_lsa = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputLsaUpdatesLsa>();
            input_lsa_updates_lsa->parent = this;
            children["input-lsa-updates-lsa"] = input_lsa_updates_lsa.get();
        }
        return children.at("input-lsa-updates-lsa");
    }

    if(child_yang_name == "input-packets")
    {
        if(input_packets != nullptr)
        {
            children["input-packets"] = input_packets.get();
        }
        else
        {
            input_packets = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::InputPackets>();
            input_packets->parent = this;
            children["input-packets"] = input_packets.get();
        }
        return children.at("input-packets");
    }

    if(child_yang_name == "output-db-ds")
    {
        if(output_db_ds != nullptr)
        {
            children["output-db-ds"] = output_db_ds.get();
        }
        else
        {
            output_db_ds = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDs>();
            output_db_ds->parent = this;
            children["output-db-ds"] = output_db_ds.get();
        }
        return children.at("output-db-ds");
    }

    if(child_yang_name == "output-db-ds-lsa")
    {
        if(output_db_ds_lsa != nullptr)
        {
            children["output-db-ds-lsa"] = output_db_ds_lsa.get();
        }
        else
        {
            output_db_ds_lsa = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputDbDsLsa>();
            output_db_ds_lsa->parent = this;
            children["output-db-ds-lsa"] = output_db_ds_lsa.get();
        }
        return children.at("output-db-ds-lsa");
    }

    if(child_yang_name == "output-hello-packets")
    {
        if(output_hello_packets != nullptr)
        {
            children["output-hello-packets"] = output_hello_packets.get();
        }
        else
        {
            output_hello_packets = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputHelloPackets>();
            output_hello_packets->parent = this;
            children["output-hello-packets"] = output_hello_packets.get();
        }
        return children.at("output-hello-packets");
    }

    if(child_yang_name == "output-ls-requests")
    {
        if(output_ls_requests != nullptr)
        {
            children["output-ls-requests"] = output_ls_requests.get();
        }
        else
        {
            output_ls_requests = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequests>();
            output_ls_requests->parent = this;
            children["output-ls-requests"] = output_ls_requests.get();
        }
        return children.at("output-ls-requests");
    }

    if(child_yang_name == "output-ls-requests-lsa")
    {
        if(output_ls_requests_lsa != nullptr)
        {
            children["output-ls-requests-lsa"] = output_ls_requests_lsa.get();
        }
        else
        {
            output_ls_requests_lsa = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsRequestsLsa>();
            output_ls_requests_lsa->parent = this;
            children["output-ls-requests-lsa"] = output_ls_requests_lsa.get();
        }
        return children.at("output-ls-requests-lsa");
    }

    if(child_yang_name == "output-lsa-acks")
    {
        if(output_lsa_acks != nullptr)
        {
            children["output-lsa-acks"] = output_lsa_acks.get();
        }
        else
        {
            output_lsa_acks = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcks>();
            output_lsa_acks->parent = this;
            children["output-lsa-acks"] = output_lsa_acks.get();
        }
        return children.at("output-lsa-acks");
    }

    if(child_yang_name == "output-lsa-acks-lsa")
    {
        if(output_lsa_acks_lsa != nullptr)
        {
            children["output-lsa-acks-lsa"] = output_lsa_acks_lsa.get();
        }
        else
        {
            output_lsa_acks_lsa = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaAcksLsa>();
            output_lsa_acks_lsa->parent = this;
            children["output-lsa-acks-lsa"] = output_lsa_acks_lsa.get();
        }
        return children.at("output-lsa-acks-lsa");
    }

    if(child_yang_name == "output-lsa-updates")
    {
        if(output_lsa_updates != nullptr)
        {
            children["output-lsa-updates"] = output_lsa_updates.get();
        }
        else
        {
            output_lsa_updates = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdates>();
            output_lsa_updates->parent = this;
            children["output-lsa-updates"] = output_lsa_updates.get();
        }
        return children.at("output-lsa-updates");
    }

    if(child_yang_name == "output-lsa-updates-lsa")
    {
        if(output_lsa_updates_lsa != nullptr)
        {
            children["output-lsa-updates-lsa"] = output_lsa_updates_lsa.get();
        }
        else
        {
            output_lsa_updates_lsa = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputLsaUpdatesLsa>();
            output_lsa_updates_lsa->parent = this;
            children["output-lsa-updates-lsa"] = output_lsa_updates_lsa.get();
        }
        return children.at("output-lsa-updates-lsa");
    }

    if(child_yang_name == "output-packets")
    {
        if(output_packets != nullptr)
        {
            children["output-packets"] = output_packets.get();
        }
        else
        {
            output_packets = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::OutputPackets>();
            output_packets->parent = this;
            children["output-packets"] = output_packets.get();
        }
        return children.at("output-packets");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::get_children()
{
    if(children.find("input-db-ds") == children.end())
    {
        if(input_db_ds != nullptr)
        {
            children["input-db-ds"] = input_db_ds.get();
        }
    }

    if(children.find("input-db-ds-lsa") == children.end())
    {
        if(input_db_ds_lsa != nullptr)
        {
            children["input-db-ds-lsa"] = input_db_ds_lsa.get();
        }
    }

    if(children.find("input-hello-packets") == children.end())
    {
        if(input_hello_packets != nullptr)
        {
            children["input-hello-packets"] = input_hello_packets.get();
        }
    }

    if(children.find("input-ls-requests") == children.end())
    {
        if(input_ls_requests != nullptr)
        {
            children["input-ls-requests"] = input_ls_requests.get();
        }
    }

    if(children.find("input-ls-requests-lsa") == children.end())
    {
        if(input_ls_requests_lsa != nullptr)
        {
            children["input-ls-requests-lsa"] = input_ls_requests_lsa.get();
        }
    }

    if(children.find("input-lsa-acks") == children.end())
    {
        if(input_lsa_acks != nullptr)
        {
            children["input-lsa-acks"] = input_lsa_acks.get();
        }
    }

    if(children.find("input-lsa-acks-lsa") == children.end())
    {
        if(input_lsa_acks_lsa != nullptr)
        {
            children["input-lsa-acks-lsa"] = input_lsa_acks_lsa.get();
        }
    }

    if(children.find("input-lsa-updates") == children.end())
    {
        if(input_lsa_updates != nullptr)
        {
            children["input-lsa-updates"] = input_lsa_updates.get();
        }
    }

    if(children.find("input-lsa-updates-lsa") == children.end())
    {
        if(input_lsa_updates_lsa != nullptr)
        {
            children["input-lsa-updates-lsa"] = input_lsa_updates_lsa.get();
        }
    }

    if(children.find("input-packets") == children.end())
    {
        if(input_packets != nullptr)
        {
            children["input-packets"] = input_packets.get();
        }
    }

    if(children.find("output-db-ds") == children.end())
    {
        if(output_db_ds != nullptr)
        {
            children["output-db-ds"] = output_db_ds.get();
        }
    }

    if(children.find("output-db-ds-lsa") == children.end())
    {
        if(output_db_ds_lsa != nullptr)
        {
            children["output-db-ds-lsa"] = output_db_ds_lsa.get();
        }
    }

    if(children.find("output-hello-packets") == children.end())
    {
        if(output_hello_packets != nullptr)
        {
            children["output-hello-packets"] = output_hello_packets.get();
        }
    }

    if(children.find("output-ls-requests") == children.end())
    {
        if(output_ls_requests != nullptr)
        {
            children["output-ls-requests"] = output_ls_requests.get();
        }
    }

    if(children.find("output-ls-requests-lsa") == children.end())
    {
        if(output_ls_requests_lsa != nullptr)
        {
            children["output-ls-requests-lsa"] = output_ls_requests_lsa.get();
        }
    }

    if(children.find("output-lsa-acks") == children.end())
    {
        if(output_lsa_acks != nullptr)
        {
            children["output-lsa-acks"] = output_lsa_acks.get();
        }
    }

    if(children.find("output-lsa-acks-lsa") == children.end())
    {
        if(output_lsa_acks_lsa != nullptr)
        {
            children["output-lsa-acks-lsa"] = output_lsa_acks_lsa.get();
        }
    }

    if(children.find("output-lsa-updates") == children.end())
    {
        if(output_lsa_updates != nullptr)
        {
            children["output-lsa-updates"] = output_lsa_updates.get();
        }
    }

    if(children.find("output-lsa-updates-lsa") == children.end())
    {
        if(output_lsa_updates_lsa != nullptr)
        {
            children["output-lsa-updates-lsa"] = output_lsa_updates_lsa.get();
        }
    }

    if(children.find("output-packets") == children.end())
    {
        if(output_packets != nullptr)
        {
            children["output-packets"] = output_packets.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "template-name")
    {
        template_name = value;
    }
    if(value_path == "sample-interval")
    {
        sample_interval = value;
    }
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplates()
{
    yang_name = "ospfv3-protocol-templates"; yang_parent_name = "ospfv3-protocol";
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::~Ospfv3ProtocolTemplates()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::has_data() const
{
    for (std::size_t index=0; index<ospfv3_protocol_template.size(); index++)
    {
        if(ospfv3_protocol_template[index]->has_data())
            return true;
    }
    return false;
}

bool PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::has_operation() const
{
    for (std::size_t index=0; index<ospfv3_protocol_template.size(); index++)
    {
        if(ospfv3_protocol_template[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ospfv3-protocol-templates";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/ospfv3-protocol/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ospfv3-protocol-template")
    {
        for(auto const & c : ospfv3_protocol_template)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::Ospfv3ProtocolTemplate>();
        c->parent = this;
        ospfv3_protocol_template.push_back(std::move(c));
        children[segment_path] = ospfv3_protocol_template.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::get_children()
{
    for (auto const & c : ospfv3_protocol_template)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3Protocol()
    :
    ospfv3_protocol_templates(std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates>())
{
    ospfv3_protocol_templates->parent = this;
    children["ospfv3-protocol-templates"] = ospfv3_protocol_templates.get();

    yang_name = "ospfv3-protocol"; yang_parent_name = "threshold";
}

PerfMgmt::Threshold::Ospfv3Protocol::~Ospfv3Protocol()
{
}

bool PerfMgmt::Threshold::Ospfv3Protocol::has_data() const
{
    return (ospfv3_protocol_templates !=  nullptr && ospfv3_protocol_templates->has_data());
}

bool PerfMgmt::Threshold::Ospfv3Protocol::has_operation() const
{
    return is_set(operation)
	|| (ospfv3_protocol_templates !=  nullptr && ospfv3_protocol_templates->has_operation());
}

std::string PerfMgmt::Threshold::Ospfv3Protocol::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ospfv3-protocol";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::Ospfv3Protocol::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/threshold/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::Ospfv3Protocol::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ospfv3-protocol-templates")
    {
        if(ospfv3_protocol_templates != nullptr)
        {
            children["ospfv3-protocol-templates"] = ospfv3_protocol_templates.get();
        }
        else
        {
            ospfv3_protocol_templates = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol::Ospfv3ProtocolTemplates>();
            ospfv3_protocol_templates->parent = this;
            children["ospfv3-protocol-templates"] = ospfv3_protocol_templates.get();
        }
        return children.at("ospfv3-protocol-templates");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::Ospfv3Protocol::get_children()
{
    if(children.find("ospfv3-protocol-templates") == children.end())
    {
        if(ospfv3_protocol_templates != nullptr)
        {
            children["ospfv3-protocol-templates"] = ospfv3_protocol_templates.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::Ospfv3Protocol::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::Threshold::Threshold()
    :
    basic_counter_interface(std::make_unique<PerfMgmt::Threshold::BasicCounterInterface>())
	,bgp(std::make_unique<PerfMgmt::Threshold::Bgp>())
	,cpu_node(std::make_unique<PerfMgmt::Threshold::CpuNode>())
	,data_rate_interface(std::make_unique<PerfMgmt::Threshold::DataRateInterface>())
	,generic_counter_interface(std::make_unique<PerfMgmt::Threshold::GenericCounterInterface>())
	,ldp_mpls(std::make_unique<PerfMgmt::Threshold::LdpMpls>())
	,memory_node(std::make_unique<PerfMgmt::Threshold::MemoryNode>())
	,ospfv2_protocol(std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol>())
	,ospfv3_protocol(std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol>())
	,process_node(std::make_unique<PerfMgmt::Threshold::ProcessNode>())
{
    basic_counter_interface->parent = this;
    children["basic-counter-interface"] = basic_counter_interface.get();

    bgp->parent = this;
    children["bgp"] = bgp.get();

    cpu_node->parent = this;
    children["cpu-node"] = cpu_node.get();

    data_rate_interface->parent = this;
    children["data-rate-interface"] = data_rate_interface.get();

    generic_counter_interface->parent = this;
    children["generic-counter-interface"] = generic_counter_interface.get();

    ldp_mpls->parent = this;
    children["ldp-mpls"] = ldp_mpls.get();

    memory_node->parent = this;
    children["memory-node"] = memory_node.get();

    ospfv2_protocol->parent = this;
    children["ospfv2-protocol"] = ospfv2_protocol.get();

    ospfv3_protocol->parent = this;
    children["ospfv3-protocol"] = ospfv3_protocol.get();

    process_node->parent = this;
    children["process-node"] = process_node.get();

    yang_name = "threshold"; yang_parent_name = "perf-mgmt";
}

PerfMgmt::Threshold::~Threshold()
{
}

bool PerfMgmt::Threshold::has_data() const
{
    return (basic_counter_interface !=  nullptr && basic_counter_interface->has_data())
	|| (bgp !=  nullptr && bgp->has_data())
	|| (cpu_node !=  nullptr && cpu_node->has_data())
	|| (data_rate_interface !=  nullptr && data_rate_interface->has_data())
	|| (generic_counter_interface !=  nullptr && generic_counter_interface->has_data())
	|| (ldp_mpls !=  nullptr && ldp_mpls->has_data())
	|| (memory_node !=  nullptr && memory_node->has_data())
	|| (ospfv2_protocol !=  nullptr && ospfv2_protocol->has_data())
	|| (ospfv3_protocol !=  nullptr && ospfv3_protocol->has_data())
	|| (process_node !=  nullptr && process_node->has_data());
}

bool PerfMgmt::Threshold::has_operation() const
{
    return is_set(operation)
	|| (basic_counter_interface !=  nullptr && basic_counter_interface->has_operation())
	|| (bgp !=  nullptr && bgp->has_operation())
	|| (cpu_node !=  nullptr && cpu_node->has_operation())
	|| (data_rate_interface !=  nullptr && data_rate_interface->has_operation())
	|| (generic_counter_interface !=  nullptr && generic_counter_interface->has_operation())
	|| (ldp_mpls !=  nullptr && ldp_mpls->has_operation())
	|| (memory_node !=  nullptr && memory_node->has_operation())
	|| (ospfv2_protocol !=  nullptr && ospfv2_protocol->has_operation())
	|| (ospfv3_protocol !=  nullptr && ospfv3_protocol->has_operation())
	|| (process_node !=  nullptr && process_node->has_operation());
}

std::string PerfMgmt::Threshold::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "threshold";

    return path_buffer.str();

}

EntityPath PerfMgmt::Threshold::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::Threshold::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "basic-counter-interface")
    {
        if(basic_counter_interface != nullptr)
        {
            children["basic-counter-interface"] = basic_counter_interface.get();
        }
        else
        {
            basic_counter_interface = std::make_unique<PerfMgmt::Threshold::BasicCounterInterface>();
            basic_counter_interface->parent = this;
            children["basic-counter-interface"] = basic_counter_interface.get();
        }
        return children.at("basic-counter-interface");
    }

    if(child_yang_name == "bgp")
    {
        if(bgp != nullptr)
        {
            children["bgp"] = bgp.get();
        }
        else
        {
            bgp = std::make_unique<PerfMgmt::Threshold::Bgp>();
            bgp->parent = this;
            children["bgp"] = bgp.get();
        }
        return children.at("bgp");
    }

    if(child_yang_name == "cpu-node")
    {
        if(cpu_node != nullptr)
        {
            children["cpu-node"] = cpu_node.get();
        }
        else
        {
            cpu_node = std::make_unique<PerfMgmt::Threshold::CpuNode>();
            cpu_node->parent = this;
            children["cpu-node"] = cpu_node.get();
        }
        return children.at("cpu-node");
    }

    if(child_yang_name == "data-rate-interface")
    {
        if(data_rate_interface != nullptr)
        {
            children["data-rate-interface"] = data_rate_interface.get();
        }
        else
        {
            data_rate_interface = std::make_unique<PerfMgmt::Threshold::DataRateInterface>();
            data_rate_interface->parent = this;
            children["data-rate-interface"] = data_rate_interface.get();
        }
        return children.at("data-rate-interface");
    }

    if(child_yang_name == "generic-counter-interface")
    {
        if(generic_counter_interface != nullptr)
        {
            children["generic-counter-interface"] = generic_counter_interface.get();
        }
        else
        {
            generic_counter_interface = std::make_unique<PerfMgmt::Threshold::GenericCounterInterface>();
            generic_counter_interface->parent = this;
            children["generic-counter-interface"] = generic_counter_interface.get();
        }
        return children.at("generic-counter-interface");
    }

    if(child_yang_name == "ldp-mpls")
    {
        if(ldp_mpls != nullptr)
        {
            children["ldp-mpls"] = ldp_mpls.get();
        }
        else
        {
            ldp_mpls = std::make_unique<PerfMgmt::Threshold::LdpMpls>();
            ldp_mpls->parent = this;
            children["ldp-mpls"] = ldp_mpls.get();
        }
        return children.at("ldp-mpls");
    }

    if(child_yang_name == "memory-node")
    {
        if(memory_node != nullptr)
        {
            children["memory-node"] = memory_node.get();
        }
        else
        {
            memory_node = std::make_unique<PerfMgmt::Threshold::MemoryNode>();
            memory_node->parent = this;
            children["memory-node"] = memory_node.get();
        }
        return children.at("memory-node");
    }

    if(child_yang_name == "ospfv2-protocol")
    {
        if(ospfv2_protocol != nullptr)
        {
            children["ospfv2-protocol"] = ospfv2_protocol.get();
        }
        else
        {
            ospfv2_protocol = std::make_unique<PerfMgmt::Threshold::Ospfv2Protocol>();
            ospfv2_protocol->parent = this;
            children["ospfv2-protocol"] = ospfv2_protocol.get();
        }
        return children.at("ospfv2-protocol");
    }

    if(child_yang_name == "ospfv3-protocol")
    {
        if(ospfv3_protocol != nullptr)
        {
            children["ospfv3-protocol"] = ospfv3_protocol.get();
        }
        else
        {
            ospfv3_protocol = std::make_unique<PerfMgmt::Threshold::Ospfv3Protocol>();
            ospfv3_protocol->parent = this;
            children["ospfv3-protocol"] = ospfv3_protocol.get();
        }
        return children.at("ospfv3-protocol");
    }

    if(child_yang_name == "process-node")
    {
        if(process_node != nullptr)
        {
            children["process-node"] = process_node.get();
        }
        else
        {
            process_node = std::make_unique<PerfMgmt::Threshold::ProcessNode>();
            process_node->parent = this;
            children["process-node"] = process_node.get();
        }
        return children.at("process-node");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::Threshold::get_children()
{
    if(children.find("basic-counter-interface") == children.end())
    {
        if(basic_counter_interface != nullptr)
        {
            children["basic-counter-interface"] = basic_counter_interface.get();
        }
    }

    if(children.find("bgp") == children.end())
    {
        if(bgp != nullptr)
        {
            children["bgp"] = bgp.get();
        }
    }

    if(children.find("cpu-node") == children.end())
    {
        if(cpu_node != nullptr)
        {
            children["cpu-node"] = cpu_node.get();
        }
    }

    if(children.find("data-rate-interface") == children.end())
    {
        if(data_rate_interface != nullptr)
        {
            children["data-rate-interface"] = data_rate_interface.get();
        }
    }

    if(children.find("generic-counter-interface") == children.end())
    {
        if(generic_counter_interface != nullptr)
        {
            children["generic-counter-interface"] = generic_counter_interface.get();
        }
    }

    if(children.find("ldp-mpls") == children.end())
    {
        if(ldp_mpls != nullptr)
        {
            children["ldp-mpls"] = ldp_mpls.get();
        }
    }

    if(children.find("memory-node") == children.end())
    {
        if(memory_node != nullptr)
        {
            children["memory-node"] = memory_node.get();
        }
    }

    if(children.find("ospfv2-protocol") == children.end())
    {
        if(ospfv2_protocol != nullptr)
        {
            children["ospfv2-protocol"] = ospfv2_protocol.get();
        }
    }

    if(children.find("ospfv3-protocol") == children.end())
    {
        if(ospfv3_protocol != nullptr)
        {
            children["ospfv3-protocol"] = ospfv3_protocol.get();
        }
    }

    if(children.find("process-node") == children.end())
    {
        if(process_node != nullptr)
        {
            children["process-node"] = process_node.get();
        }
    }

    return children;
}

void PerfMgmt::Threshold::set_value(const std::string & value_path, std::string value)
{
}

PerfMgmt::PerfMgmt()
    :
    enable(std::make_unique<PerfMgmt::Enable>())
	,reg_exp_groups(std::make_unique<PerfMgmt::RegExpGroups>())
	,resources(std::make_unique<PerfMgmt::Resources>())
	,statistics(std::make_unique<PerfMgmt::Statistics>())
	,threshold(std::make_unique<PerfMgmt::Threshold>())
{
    enable->parent = this;
    children["enable"] = enable.get();

    reg_exp_groups->parent = this;
    children["reg-exp-groups"] = reg_exp_groups.get();

    resources->parent = this;
    children["resources"] = resources.get();

    statistics->parent = this;
    children["statistics"] = statistics.get();

    threshold->parent = this;
    children["threshold"] = threshold.get();

    yang_name = "perf-mgmt"; yang_parent_name = "Cisco-IOS-XR-manageability-perfmgmt-cfg";
}

PerfMgmt::~PerfMgmt()
{
}

bool PerfMgmt::has_data() const
{
    return (enable !=  nullptr && enable->has_data())
	|| (reg_exp_groups !=  nullptr && reg_exp_groups->has_data())
	|| (resources !=  nullptr && resources->has_data())
	|| (statistics !=  nullptr && statistics->has_data())
	|| (threshold !=  nullptr && threshold->has_data());
}

bool PerfMgmt::has_operation() const
{
    return is_set(operation)
	|| (enable !=  nullptr && enable->has_operation())
	|| (reg_exp_groups !=  nullptr && reg_exp_groups->has_operation())
	|| (resources !=  nullptr && resources->has_operation())
	|| (statistics !=  nullptr && statistics->has_operation())
	|| (threshold !=  nullptr && threshold->has_operation());
}

std::string PerfMgmt::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-manageability-perfmgmt-cfg:perf-mgmt";

    return path_buffer.str();

}

EntityPath PerfMgmt::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor != nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor has to be nullptr for top-level node"});
    }

    path_buffer << get_segment_path();
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* PerfMgmt::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "enable")
    {
        if(enable != nullptr)
        {
            children["enable"] = enable.get();
        }
        else
        {
            enable = std::make_unique<PerfMgmt::Enable>();
            enable->parent = this;
            children["enable"] = enable.get();
        }
        return children.at("enable");
    }

    if(child_yang_name == "reg-exp-groups")
    {
        if(reg_exp_groups != nullptr)
        {
            children["reg-exp-groups"] = reg_exp_groups.get();
        }
        else
        {
            reg_exp_groups = std::make_unique<PerfMgmt::RegExpGroups>();
            reg_exp_groups->parent = this;
            children["reg-exp-groups"] = reg_exp_groups.get();
        }
        return children.at("reg-exp-groups");
    }

    if(child_yang_name == "resources")
    {
        if(resources != nullptr)
        {
            children["resources"] = resources.get();
        }
        else
        {
            resources = std::make_unique<PerfMgmt::Resources>();
            resources->parent = this;
            children["resources"] = resources.get();
        }
        return children.at("resources");
    }

    if(child_yang_name == "statistics")
    {
        if(statistics != nullptr)
        {
            children["statistics"] = statistics.get();
        }
        else
        {
            statistics = std::make_unique<PerfMgmt::Statistics>();
            statistics->parent = this;
            children["statistics"] = statistics.get();
        }
        return children.at("statistics");
    }

    if(child_yang_name == "threshold")
    {
        if(threshold != nullptr)
        {
            children["threshold"] = threshold.get();
        }
        else
        {
            threshold = std::make_unique<PerfMgmt::Threshold>();
            threshold->parent = this;
            children["threshold"] = threshold.get();
        }
        return children.at("threshold");
    }

    return nullptr;
}

std::map<std::string, Entity*> & PerfMgmt::get_children()
{
    if(children.find("enable") == children.end())
    {
        if(enable != nullptr)
        {
            children["enable"] = enable.get();
        }
    }

    if(children.find("reg-exp-groups") == children.end())
    {
        if(reg_exp_groups != nullptr)
        {
            children["reg-exp-groups"] = reg_exp_groups.get();
        }
    }

    if(children.find("resources") == children.end())
    {
        if(resources != nullptr)
        {
            children["resources"] = resources.get();
        }
    }

    if(children.find("statistics") == children.end())
    {
        if(statistics != nullptr)
        {
            children["statistics"] = statistics.get();
        }
    }

    if(children.find("threshold") == children.end())
    {
        if(threshold != nullptr)
        {
            children["threshold"] = threshold.get();
        }
    }

    return children;
}

void PerfMgmt::set_value(const std::string & value_path, std::string value)
{
}

std::unique_ptr<Entity> PerfMgmt::clone_ptr()
{
    return std::make_unique<PerfMgmt>();
}

const Enum::YLeaf PmThresholdOpEnum::eq {1, "eq"};
const Enum::YLeaf PmThresholdOpEnum::ne {2, "ne"};
const Enum::YLeaf PmThresholdOpEnum::lt {3, "lt"};
const Enum::YLeaf PmThresholdOpEnum::le {4, "le"};
const Enum::YLeaf PmThresholdOpEnum::gt {5, "gt"};
const Enum::YLeaf PmThresholdOpEnum::ge {6, "ge"};
const Enum::YLeaf PmThresholdOpEnum::rg {7, "rg"};

const Enum::YLeaf PmThresholdRearmEnum::always {0, "always"};
const Enum::YLeaf PmThresholdRearmEnum::window {1, "window"};
const Enum::YLeaf PmThresholdRearmEnum::toggle {2, "toggle"};


}
}

