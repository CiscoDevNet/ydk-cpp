#ifndef _CISCO_IOS_XR_IPV4_OSPF_OPER_
#define _CISCO_IOS_XR_IPV4_OSPF_OPER_

#include <memory>
#include <vector>
#include <string>
#include "ydk/types.hpp"
#include "ydk/errors.hpp"

namespace ydk {
namespace Cisco_IOS_XR_ipv4_ospf_oper {

class Ospf : public Entity
{
    public:
        Ospf();
        ~Ospf();

        bool has_data() const override;
        bool has_operation() const override;
        EntityPath get_entity_path(Entity* parent) const override;
        std::string get_segment_path() const override;
        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
        void set_value(const std::string & value_path, std::string value) override;
        std::map<std::string, Entity*> & get_children() override;
        std::unique_ptr<Entity> clone_ptr() override;



    class Processes : public Entity
    {
        public:
            Processes();
            ~Processes();

            bool has_data() const override;
            bool has_operation() const override;
            EntityPath get_entity_path(Entity* parent) const override;
            std::string get_segment_path() const override;
            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
            void set_value(const std::string & value_path, std::string value) override;
            std::map<std::string, Entity*> & get_children() override;



        class Process : public Entity
        {
            public:
                Process();
                ~Process();

                bool has_data() const override;
                bool has_operation() const override;
                EntityPath get_entity_path(Entity* parent) const override;
                std::string get_segment_path() const override;
                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                void set_value(const std::string & value_path, std::string value) override;
                std::map<std::string, Entity*> & get_children() override;


                YLeaf process_name; //type: string

            class Vrfs : public Entity
            {
                public:
                    Vrfs();
                    ~Vrfs();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;



                class Vrf : public Entity
                {
                    public:
                        Vrf();
                        ~Vrf();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                        YLeaf vrf_name; //type: string

                    class InterfaceVrfInformation : public Entity
                    {
                        public:
                            InterfaceVrfInformation();
                            ~InterfaceVrfInformation();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class ShamLinks : public Entity
                        {
                            public:
                                ShamLinks();
                                ~ShamLinks();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class ShamLink : public Entity
                            {
                                public:
                                    ShamLink();
                                    ~ShamLink();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf sham_link_name; //type: string
                                    YLeaf sham_link_name_xr; //type: string
                                    YLeaf sham_link_neighbor_id; //type: string
                                    YLeaf sham_link_source_address; //type: string
                                    YLeaf sham_link_dest_address; //type: string
                                    YLeaf sham_link_state; //type: OspfInterfaceStateEnum
                                    YLeaf sham_link_demand_circuit; //type: boolean
                                    YLeaf sham_link_dc_bitless_lsa; //type: uint32
                                    YLeaf sham_link_ifindex; //type: uint32
                                    YLeaf sham_link_area; //type: string
                                    YLeaf sham_link_cost; //type: uint16
                                    YLeaf sham_link_transmission_delay; //type: uint16
                                    YLeaf sham_link_hello_interval; //type: uint32
                                    YLeaf sham_link_hello_interval_ms; //type: uint32
                                    YLeaf sham_link_dead_interval; //type: uint32
                                    YLeaf sham_link_wait_interval; //type: uint32
                                    YLeaf sham_link_retransmission_interval; //type: uint32
                                    YLeaf sham_link_next_hello; //type: uint32
                                    YLeaf sham_link_next_hello_ms; //type: uint32
                                    YLeaf sham_link_passive; //type: boolean
                                    YLeaf sham_link_authentication_type; //type: AuthenticationEnum
                                    YLeaf sham_link_youngest_md_key; //type: boolean
                                    YLeaf sham_link_youngest_md_key_id; //type: uint16
                                    YLeaf sham_link_old_md_key_count; //type: uint32
                                    YLeaf sham_link_keychain_id; //type: uint64
                                    YLeaf sham_link_nsf_enabled; //type: boolean
                                    YLeaf sham_link_nsf; //type: boolean
                                    YLeaf sham_link_last_nsf; //type: uint32
                                    YLeafList sham_link_md_key; //type: list of  uint16

                                class ShamLinkNeighbor : public Entity
                                {
                                    public:
                                        ShamLinkNeighbor();
                                        ~ShamLinkNeighbor();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf sham_link_suppress_hello; //type: boolean
                                        YLeaf sham_link_state; //type: NeighborStateEnum

                                    class ShamLinkRetransmissoin : public Entity
                                    {
                                        public:
                                            ShamLinkRetransmissoin();
                                            ~ShamLinkRetransmissoin();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf dbd_retransmission_count; //type: uint32
                                            YLeaf dbd_retransmission_total_count; //type: uint32
                                            YLeaf area_flooding_index; //type: uint32
                                            YLeaf as_flood_index; //type: uint32
                                            YLeaf neighbor_retransmission_count; //type: uint32
                                            YLeaf number_of_retransmissions; //type: uint32
                                            YLeaf area_first_flood_information; //type: uint32
                                            YLeaf area_first_flood_information_index; //type: uint32
                                            YLeaf as_first_flood_information; //type: uint32
                                            YLeaf as_first_flood_information_index; //type: uint32
                                            YLeaf area_next_flood_information; //type: uint32
                                            YLeaf area_next_flood_information_index; //type: uint32
                                            YLeaf as_next_flood_information; //type: uint32
                                            YLeaf as_next_flood_information_index; //type: uint32
                                            YLeaf last_retransmission_length; //type: uint32
                                            YLeaf maximum_retransmission_length; //type: uint32
                                            YLeaf last_retransmission_time; //type: uint32
                                            YLeaf maximum_retransmission_time; //type: uint32
                                            YLeaf lsa_retransmission_timer; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceVrfInformation::ShamLinks::ShamLink::ShamLinkNeighbor::ShamLinkRetransmissoin


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceVrfInformation::ShamLinks::ShamLink::ShamLinkNeighbor::ShamLinkRetransmissoin> sham_link_retransmissoin;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceVrfInformation::ShamLinks::ShamLink::ShamLinkNeighbor


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceVrfInformation::ShamLinks::ShamLink::ShamLinkNeighbor> sham_link_neighbor;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceVrfInformation::ShamLinks::ShamLink


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceVrfInformation::ShamLinks::ShamLink> > sham_link;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceVrfInformation::ShamLinks


                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceVrfInformation::ShamLinks> sham_links;


                    }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceVrfInformation


                    class FloodListTable : public Entity
                    {
                        public:
                            FloodListTable();
                            ~FloodListTable();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Flood : public Entity
                        {
                            public:
                                Flood();
                                ~Flood();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf interface_name; //type: string
                                YLeaf flood_interface_name; //type: string
                                YLeaf flood_pacing_timer; //type: uint32
                                YLeaf flood_lsa_count; //type: uint32

                            class AreaFlood : public Entity
                            {
                                public:
                                    AreaFlood();
                                    ~AreaFlood();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf header_lsa_type; //type: LsaEnum
                                    YLeaf header_lsa_age; //type: uint16
                                    YLeaf header_ls_id; //type: string
                                    YLeaf header_advertising_router; //type: string
                                    YLeaf header_sequence_number; //type: uint32
                                    YLeaf header_lsa_checksum; //type: uint16



                            }; // Ospf::Processes::Process::Vrfs::Vrf::FloodListTable::Flood::AreaFlood


                            class AsFlood : public Entity
                            {
                                public:
                                    AsFlood();
                                    ~AsFlood();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf header_lsa_type; //type: LsaEnum
                                    YLeaf header_lsa_age; //type: uint16
                                    YLeaf header_ls_id; //type: string
                                    YLeaf header_advertising_router; //type: string
                                    YLeaf header_sequence_number; //type: uint32
                                    YLeaf header_lsa_checksum; //type: uint16



                            }; // Ospf::Processes::Process::Vrfs::Vrf::FloodListTable::Flood::AsFlood


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::FloodListTable::Flood::AreaFlood> > area_flood;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::FloodListTable::Flood::AsFlood> > as_flood;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::FloodListTable::Flood


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::FloodListTable::Flood> > flood;


                    }; // Ospf::Processes::Process::Vrfs::Vrf::FloodListTable


                    class MplsTe : public Entity
                    {
                        public:
                            MplsTe();
                            ~MplsTe();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class MplsTeLinks : public Entity
                        {
                            public:
                                MplsTeLinks();
                                ~MplsTeLinks();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class MplsTeLink : public Entity
                            {
                                public:
                                    MplsTeLink();
                                    ~MplsTeLink();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf area_id; //type: int32
                                    YLeaf mpls_te_router_id; //type: string
                                    YLeaf mpls_te_enabled; //type: boolean
                                    YLeaf mpls_te_initialized; //type: boolean
                                    YLeaf mpls_te_area_id; //type: string
                                    YLeaf mpls_te_area_instance; //type: uint32
                                    YLeaf mpls_te_router_address; //type: string
                                    YLeaf mpls_te_next_fragment_id; //type: uint32
                                    YLeaf spacious_fragment; //type: boolean

                                class MplsTeLink_ : public Entity
                                {
                                    public:
                                        MplsTeLink_();
                                        ~MplsTeLink_();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf new_link; //type: boolean
                                        YLeaf fragment_id; //type: uint32
                                        YLeaf mpls_link_instance; //type: uint32
                                        YLeaf mpls_link_type; //type: LinkSubnetEnum
                                        YLeaf neighbor_system_id; //type: string
                                        YLeaf link_address; //type: string
                                        YLeaf neighbor_ip_address; //type: string
                                        YLeaf igp_metric; //type: uint32
                                        YLeaf te_metric; //type: uint32
                                        YLeaf maximum_link_bw; //type: uint32
                                        YLeaf maximum_link_reservable_bw; //type: uint32
                                        YLeaf maximum_link_sub_reservable_bw; //type: uint32
                                        YLeaf priority_count; //type: int32
                                        YLeaf affinity; //type: uint32
                                        YLeaf output_interface_id; //type: uint32
                                        YLeaf input_interface_id; //type: uint32
                                        YLeaf dste_in_use; //type: boolean
                                        YLeaf dste_allocation_model_id; //type: IgpteLibBwModelEnum
                                        YLeaf number_of_optional_tl_vs; //type: uint8

                                    class GlobalUnreserveBwPerPriority : public Entity
                                    {
                                        public:
                                            GlobalUnreserveBwPerPriority();
                                            ~GlobalUnreserveBwPerPriority();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeafList bw_per_priority; //type: list of  uint64



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::GlobalUnreserveBwPerPriority


                                    class SubPoolUnreserveBwPerPriority : public Entity
                                    {
                                        public:
                                            SubPoolUnreserveBwPerPriority();
                                            ~SubPoolUnreserveBwPerPriority();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeafList bw_per_priority; //type: list of  uint64



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::SubPoolUnreserveBwPerPriority


                                    class LinkProtocolPriorityCapability : public Entity
                                    {
                                        public:
                                            LinkProtocolPriorityCapability();
                                            ~LinkProtocolPriorityCapability();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf link_protocol_capability; //type: uint8
                                            YLeaf link_protocol_priority; //type: uint8



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::LinkProtocolPriorityCapability


                                    class LinkSwCapability : public Entity
                                    {
                                        public:
                                            LinkSwCapability();
                                            ~LinkSwCapability();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf link_switching_capability; //type: uint8
                                            YLeaf link_encoding; //type: uint8
                                            YLeaf minimum_lsp_bw; //type: uint64
                                            YLeaf link_mtu; //type: uint16
                                            YLeafList maximum_lsp_bw_per_priority; //type: list of  uint64



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::LinkSwCapability


                                    class ExtendedAdminGroupList : public Entity
                                    {
                                        public:
                                            ExtendedAdminGroupList();
                                            ~ExtendedAdminGroupList();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf extended_admin_size; //type: uint32
                                            YLeafList ext_admin_data; //type: list of  uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::ExtendedAdminGroupList


                                    class MplsteLinkOptTlv : public Entity
                                    {
                                        public:
                                            MplsteLinkOptTlv();
                                            ~MplsteLinkOptTlv();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf mplste_link_opt_tlv_type; //type: MplsTeOptTlvEnum
                                            YLeaf mplste_link_opt_tlv_len; //type: uint16

                                        class MplsteLinkOptTlvValue : public Entity
                                        {
                                            public:
                                                MplsteLinkOptTlvValue();
                                                ~MplsteLinkOptTlvValue();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf opaque_tlv_type; //type: MplsTeOptTlvEnum

                                            class BctlvValue : public Entity
                                            {
                                                public:
                                                    BctlvValue();
                                                    ~BctlvValue();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf model_id; //type: uint8
                                                    YLeaf num_b_cs; //type: uint32
                                                    YLeafList mplste_link_bc_bandwidth; //type: list of  uint64



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::BctlvValue


                                            class SrlgtlvValue : public Entity
                                            {
                                                public:
                                                    SrlgtlvValue();
                                                    ~SrlgtlvValue();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf srlg_len; //type: uint32
                                                    YLeaf num_srl_gs; //type: uint32
                                                    YLeafList mplste_link_srlg_data; //type: list of  uint32



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::SrlgtlvValue


                                            class IxcdtlvValue : public Entity
                                            {
                                                public:
                                                    IxcdtlvValue();
                                                    ~IxcdtlvValue();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf switching_cap; //type: uint8
                                                    YLeaf rile_len_code; //type: uint8
                                                    YLeaf fixed_scsi_count; //type: uint32
                                                    YLeaf flex_scsi_count; //type: uint32
                                                    YLeafList max_lspbw; //type: list of  int64

                                                class IxcdSwitchingCapType : public Entity
                                                {
                                                    public:
                                                        IxcdSwitchingCapType();
                                                        ~IxcdSwitchingCapType();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf switching_cap_type; //type: uint8

                                                    class IxcdpscInfo : public Entity
                                                    {
                                                        public:
                                                            IxcdpscInfo();
                                                            ~IxcdpscInfo();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf min_lsp_bandwidth; //type: uint64
                                                            YLeaf psc_interface_mtu; //type: uint16



                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdpscInfo


                                                    class IxcdbwSubTlv : public Entity
                                                    {
                                                        public:
                                                            IxcdbwSubTlv();
                                                            ~IxcdbwSubTlv();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;



                                                        class ArrBwSubTlv : public Entity
                                                        {
                                                            public:
                                                                ArrBwSubTlv();
                                                                ~ArrBwSubTlv();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;


                                                                YLeaf bw_sub_tlv_type; //type: uint16
                                                                YLeaf bw_sub_tlv_length; //type: uint16

                                                            class BwSubTlvValue : public Entity
                                                            {
                                                                public:
                                                                    BwSubTlvValue();
                                                                    ~BwSubTlvValue();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                    YLeaf ixcdbw_sub_tlv_type; //type: uint16

                                                                class FixedBwSubTlvValue : public Entity
                                                                {
                                                                    public:
                                                                        FixedBwSubTlvValue();
                                                                        ~FixedBwSubTlvValue();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                        YLeafList unres_oduj_prio; //type: list of  uint32

                                                                    class FixedSubTlvValue : public Entity
                                                                    {
                                                                        public:
                                                                            FixedSubTlvValue();
                                                                            ~FixedSubTlvValue();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                            YLeaf signal_type; //type: uint8
                                                                            YLeaf num_stages; //type: uint8
                                                                            YLeaf tbit; //type: uint8
                                                                            YLeaf sbit; //type: uint8
                                                                            YLeaf tsg; //type: uint8
                                                                            YLeaf res; //type: uint8
                                                                            YLeaf priority_bit0; //type: uint8
                                                                            YLeaf priority_bit1; //type: uint8
                                                                            YLeaf priority_bit2; //type: uint8
                                                                            YLeaf priority_bit3; //type: uint8
                                                                            YLeaf priority_bit4; //type: uint8
                                                                            YLeaf priority_bit5; //type: uint8
                                                                            YLeaf priority_bit6; //type: uint8
                                                                            YLeaf priority_bit7; //type: uint8
                                                                            YLeaf stage; //type: string



                                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue::FixedSubTlvValue


                                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue::FixedSubTlvValue> fixed_sub_tlv_value;


                                                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue


                                                                class FlexBwSubTlvValue : public Entity
                                                                {
                                                                    public:
                                                                        FlexBwSubTlvValue();
                                                                        ~FlexBwSubTlvValue();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                        YLeafList unres_lspbw; //type: list of  uint64
                                                                        YLeafList max_lspbw; //type: list of  uint64

                                                                    class FlexSubTlvValueCommon : public Entity
                                                                    {
                                                                        public:
                                                                            FlexSubTlvValueCommon();
                                                                            ~FlexSubTlvValueCommon();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                            YLeaf signal_type; //type: uint8
                                                                            YLeaf num_stages; //type: uint8
                                                                            YLeaf tbit; //type: uint8
                                                                            YLeaf sbit; //type: uint8
                                                                            YLeaf tsg; //type: uint8
                                                                            YLeaf res; //type: uint8
                                                                            YLeaf priority_bit0; //type: uint8
                                                                            YLeaf priority_bit1; //type: uint8
                                                                            YLeaf priority_bit2; //type: uint8
                                                                            YLeaf priority_bit3; //type: uint8
                                                                            YLeaf priority_bit4; //type: uint8
                                                                            YLeaf priority_bit5; //type: uint8
                                                                            YLeaf priority_bit6; //type: uint8
                                                                            YLeaf priority_bit7; //type: uint8
                                                                            YLeaf stage; //type: string



                                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue::FlexSubTlvValueCommon


                                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue::FlexSubTlvValueCommon> flex_sub_tlv_value_common;


                                                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue


                                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue> fixed_bw_sub_tlv_value;
                                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue> flex_bw_sub_tlv_value;


                                                            }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue


                                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue> bw_sub_tlv_value;


                                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv


                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv> > arr_bw_sub_tlv;


                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv


                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv> ixcdbw_sub_tlv;
                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdpscInfo> ixcdpsc_info;


                                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType


                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType> ixcd_switching_cap_type;


                                            }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue


                                            class UnidtlvValue : public Entity
                                            {
                                                public:
                                                    UnidtlvValue();
                                                    ~UnidtlvValue();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf uni_dir_delay; //type: uint32



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::UnidtlvValue


                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::BctlvValue> bctlv_value;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue> ixcdtlv_value;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::SrlgtlvValue> srlgtlv_value;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::UnidtlvValue> unidtlv_value;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue> > mplste_link_opt_tlv_value;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::ExtendedAdminGroupList> extended_admin_group_list;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::GlobalUnreserveBwPerPriority> global_unreserve_bw_per_priority;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::LinkProtocolPriorityCapability> link_protocol_priority_capability;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::LinkSwCapability> link_sw_capability;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv> > mplste_link_opt_tlv;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::SubPoolUnreserveBwPerPriority> sub_pool_unreserve_bw_per_priority;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_


                                class MplsTeFragment : public Entity
                                {
                                    public:
                                        MplsTeFragment();
                                        ~MplsTeFragment();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf fragment_instance; //type: uint32
                                        YLeaf fragment_id; //type: uint32
                                        YLeaf dste_model_id; //type: uint8
                                        YLeaf same_fragment_count; //type: uint8

                                    class MplsTeLink_ : public Entity
                                    {
                                        public:
                                            MplsTeLink_();
                                            ~MplsTeLink_();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf new_link; //type: boolean
                                            YLeaf fragment_id; //type: uint32
                                            YLeaf mpls_link_instance; //type: uint32
                                            YLeaf mpls_link_type; //type: LinkSubnetEnum
                                            YLeaf neighbor_system_id; //type: string
                                            YLeaf link_address; //type: string
                                            YLeaf neighbor_ip_address; //type: string
                                            YLeaf igp_metric; //type: uint32
                                            YLeaf te_metric; //type: uint32
                                            YLeaf maximum_link_bw; //type: uint32
                                            YLeaf maximum_link_reservable_bw; //type: uint32
                                            YLeaf maximum_link_sub_reservable_bw; //type: uint32
                                            YLeaf priority_count; //type: int32
                                            YLeaf affinity; //type: uint32
                                            YLeaf output_interface_id; //type: uint32
                                            YLeaf input_interface_id; //type: uint32
                                            YLeaf dste_in_use; //type: boolean
                                            YLeaf dste_allocation_model_id; //type: IgpteLibBwModelEnum
                                            YLeaf number_of_optional_tl_vs; //type: uint8

                                        class GlobalUnreserveBwPerPriority : public Entity
                                        {
                                            public:
                                                GlobalUnreserveBwPerPriority();
                                                ~GlobalUnreserveBwPerPriority();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeafList bw_per_priority; //type: list of  uint64



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::GlobalUnreserveBwPerPriority


                                        class SubPoolUnreserveBwPerPriority : public Entity
                                        {
                                            public:
                                                SubPoolUnreserveBwPerPriority();
                                                ~SubPoolUnreserveBwPerPriority();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeafList bw_per_priority; //type: list of  uint64



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::SubPoolUnreserveBwPerPriority


                                        class LinkProtocolPriorityCapability : public Entity
                                        {
                                            public:
                                                LinkProtocolPriorityCapability();
                                                ~LinkProtocolPriorityCapability();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf link_protocol_capability; //type: uint8
                                                YLeaf link_protocol_priority; //type: uint8



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::LinkProtocolPriorityCapability


                                        class LinkSwCapability : public Entity
                                        {
                                            public:
                                                LinkSwCapability();
                                                ~LinkSwCapability();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf link_switching_capability; //type: uint8
                                                YLeaf link_encoding; //type: uint8
                                                YLeaf minimum_lsp_bw; //type: uint64
                                                YLeaf link_mtu; //type: uint16
                                                YLeafList maximum_lsp_bw_per_priority; //type: list of  uint64



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::LinkSwCapability


                                        class ExtendedAdminGroupList : public Entity
                                        {
                                            public:
                                                ExtendedAdminGroupList();
                                                ~ExtendedAdminGroupList();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf extended_admin_size; //type: uint32
                                                YLeafList ext_admin_data; //type: list of  uint32



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::ExtendedAdminGroupList


                                        class MplsteLinkOptTlv : public Entity
                                        {
                                            public:
                                                MplsteLinkOptTlv();
                                                ~MplsteLinkOptTlv();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf mplste_link_opt_tlv_type; //type: MplsTeOptTlvEnum
                                                YLeaf mplste_link_opt_tlv_len; //type: uint16

                                            class MplsteLinkOptTlvValue : public Entity
                                            {
                                                public:
                                                    MplsteLinkOptTlvValue();
                                                    ~MplsteLinkOptTlvValue();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf opaque_tlv_type; //type: MplsTeOptTlvEnum

                                                class BctlvValue : public Entity
                                                {
                                                    public:
                                                        BctlvValue();
                                                        ~BctlvValue();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf model_id; //type: uint8
                                                        YLeaf num_b_cs; //type: uint32
                                                        YLeafList mplste_link_bc_bandwidth; //type: list of  uint64



                                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::BctlvValue


                                                class SrlgtlvValue : public Entity
                                                {
                                                    public:
                                                        SrlgtlvValue();
                                                        ~SrlgtlvValue();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf srlg_len; //type: uint32
                                                        YLeaf num_srl_gs; //type: uint32
                                                        YLeafList mplste_link_srlg_data; //type: list of  uint32



                                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::SrlgtlvValue


                                                class IxcdtlvValue : public Entity
                                                {
                                                    public:
                                                        IxcdtlvValue();
                                                        ~IxcdtlvValue();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf switching_cap; //type: uint8
                                                        YLeaf rile_len_code; //type: uint8
                                                        YLeaf fixed_scsi_count; //type: uint32
                                                        YLeaf flex_scsi_count; //type: uint32
                                                        YLeafList max_lspbw; //type: list of  int64

                                                    class IxcdSwitchingCapType : public Entity
                                                    {
                                                        public:
                                                            IxcdSwitchingCapType();
                                                            ~IxcdSwitchingCapType();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf switching_cap_type; //type: uint8

                                                        class IxcdpscInfo : public Entity
                                                        {
                                                            public:
                                                                IxcdpscInfo();
                                                                ~IxcdpscInfo();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;


                                                                YLeaf min_lsp_bandwidth; //type: uint64
                                                                YLeaf psc_interface_mtu; //type: uint16



                                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdpscInfo


                                                        class IxcdbwSubTlv : public Entity
                                                        {
                                                            public:
                                                                IxcdbwSubTlv();
                                                                ~IxcdbwSubTlv();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;



                                                            class ArrBwSubTlv : public Entity
                                                            {
                                                                public:
                                                                    ArrBwSubTlv();
                                                                    ~ArrBwSubTlv();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                    YLeaf bw_sub_tlv_type; //type: uint16
                                                                    YLeaf bw_sub_tlv_length; //type: uint16

                                                                class BwSubTlvValue : public Entity
                                                                {
                                                                    public:
                                                                        BwSubTlvValue();
                                                                        ~BwSubTlvValue();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                        YLeaf ixcdbw_sub_tlv_type; //type: uint16

                                                                    class FixedBwSubTlvValue : public Entity
                                                                    {
                                                                        public:
                                                                            FixedBwSubTlvValue();
                                                                            ~FixedBwSubTlvValue();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                            YLeafList unres_oduj_prio; //type: list of  uint32

                                                                        class FixedSubTlvValue : public Entity
                                                                        {
                                                                            public:
                                                                                FixedSubTlvValue();
                                                                                ~FixedSubTlvValue();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;


                                                                                YLeaf signal_type; //type: uint8
                                                                                YLeaf num_stages; //type: uint8
                                                                                YLeaf tbit; //type: uint8
                                                                                YLeaf sbit; //type: uint8
                                                                                YLeaf tsg; //type: uint8
                                                                                YLeaf res; //type: uint8
                                                                                YLeaf priority_bit0; //type: uint8
                                                                                YLeaf priority_bit1; //type: uint8
                                                                                YLeaf priority_bit2; //type: uint8
                                                                                YLeaf priority_bit3; //type: uint8
                                                                                YLeaf priority_bit4; //type: uint8
                                                                                YLeaf priority_bit5; //type: uint8
                                                                                YLeaf priority_bit6; //type: uint8
                                                                                YLeaf priority_bit7; //type: uint8
                                                                                YLeaf stage; //type: string



                                                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue::FixedSubTlvValue


                                                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue::FixedSubTlvValue> fixed_sub_tlv_value;


                                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue


                                                                    class FlexBwSubTlvValue : public Entity
                                                                    {
                                                                        public:
                                                                            FlexBwSubTlvValue();
                                                                            ~FlexBwSubTlvValue();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                            YLeafList unres_lspbw; //type: list of  uint64
                                                                            YLeafList max_lspbw; //type: list of  uint64

                                                                        class FlexSubTlvValueCommon : public Entity
                                                                        {
                                                                            public:
                                                                                FlexSubTlvValueCommon();
                                                                                ~FlexSubTlvValueCommon();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;


                                                                                YLeaf signal_type; //type: uint8
                                                                                YLeaf num_stages; //type: uint8
                                                                                YLeaf tbit; //type: uint8
                                                                                YLeaf sbit; //type: uint8
                                                                                YLeaf tsg; //type: uint8
                                                                                YLeaf res; //type: uint8
                                                                                YLeaf priority_bit0; //type: uint8
                                                                                YLeaf priority_bit1; //type: uint8
                                                                                YLeaf priority_bit2; //type: uint8
                                                                                YLeaf priority_bit3; //type: uint8
                                                                                YLeaf priority_bit4; //type: uint8
                                                                                YLeaf priority_bit5; //type: uint8
                                                                                YLeaf priority_bit6; //type: uint8
                                                                                YLeaf priority_bit7; //type: uint8
                                                                                YLeaf stage; //type: string



                                                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue::FlexSubTlvValueCommon


                                                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue::FlexSubTlvValueCommon> flex_sub_tlv_value_common;


                                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue


                                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue> fixed_bw_sub_tlv_value;
                                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue> flex_bw_sub_tlv_value;


                                                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue


                                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue> bw_sub_tlv_value;


                                                            }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv


                                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv> > arr_bw_sub_tlv;


                                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv


                                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv> ixcdbw_sub_tlv;
                                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdpscInfo> ixcdpsc_info;


                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType


                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType> ixcd_switching_cap_type;


                                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue


                                                class UnidtlvValue : public Entity
                                                {
                                                    public:
                                                        UnidtlvValue();
                                                        ~UnidtlvValue();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf uni_dir_delay; //type: uint32



                                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::UnidtlvValue


                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::BctlvValue> bctlv_value;
                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue> ixcdtlv_value;
                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::SrlgtlvValue> srlgtlv_value;
                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::UnidtlvValue> unidtlv_value;


                                            }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue> > mplste_link_opt_tlv_value;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::ExtendedAdminGroupList> extended_admin_group_list;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::GlobalUnreserveBwPerPriority> global_unreserve_bw_per_priority;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::LinkProtocolPriorityCapability> link_protocol_priority_capability;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::LinkSwCapability> link_sw_capability;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv> > mplste_link_opt_tlv;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::SubPoolUnreserveBwPerPriority> sub_pool_unreserve_bw_per_priority;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_> > mpls_te_link;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment> > mpls_te_fragment;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_> > mpls_te_link;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks::MplsTeLink> > mpls_te_link;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks


                        class MplsTeFragments : public Entity
                        {
                            public:
                                MplsTeFragments();
                                ~MplsTeFragments();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class MplsTeFragment : public Entity
                            {
                                public:
                                    MplsTeFragment();
                                    ~MplsTeFragment();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf area_id; //type: int32
                                    YLeaf mpls_te_router_id; //type: string
                                    YLeaf mpls_te_enabled; //type: boolean
                                    YLeaf mpls_te_initialized; //type: boolean
                                    YLeaf mpls_te_area_id; //type: string
                                    YLeaf mpls_te_area_instance; //type: uint32
                                    YLeaf mpls_te_router_address; //type: string
                                    YLeaf mpls_te_next_fragment_id; //type: uint32
                                    YLeaf spacious_fragment; //type: boolean

                                class MplsTeLink : public Entity
                                {
                                    public:
                                        MplsTeLink();
                                        ~MplsTeLink();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf new_link; //type: boolean
                                        YLeaf fragment_id; //type: uint32
                                        YLeaf mpls_link_instance; //type: uint32
                                        YLeaf mpls_link_type; //type: LinkSubnetEnum
                                        YLeaf neighbor_system_id; //type: string
                                        YLeaf link_address; //type: string
                                        YLeaf neighbor_ip_address; //type: string
                                        YLeaf igp_metric; //type: uint32
                                        YLeaf te_metric; //type: uint32
                                        YLeaf maximum_link_bw; //type: uint32
                                        YLeaf maximum_link_reservable_bw; //type: uint32
                                        YLeaf maximum_link_sub_reservable_bw; //type: uint32
                                        YLeaf priority_count; //type: int32
                                        YLeaf affinity; //type: uint32
                                        YLeaf output_interface_id; //type: uint32
                                        YLeaf input_interface_id; //type: uint32
                                        YLeaf dste_in_use; //type: boolean
                                        YLeaf dste_allocation_model_id; //type: IgpteLibBwModelEnum
                                        YLeaf number_of_optional_tl_vs; //type: uint8

                                    class GlobalUnreserveBwPerPriority : public Entity
                                    {
                                        public:
                                            GlobalUnreserveBwPerPriority();
                                            ~GlobalUnreserveBwPerPriority();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeafList bw_per_priority; //type: list of  uint64



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::GlobalUnreserveBwPerPriority


                                    class SubPoolUnreserveBwPerPriority : public Entity
                                    {
                                        public:
                                            SubPoolUnreserveBwPerPriority();
                                            ~SubPoolUnreserveBwPerPriority();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeafList bw_per_priority; //type: list of  uint64



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::SubPoolUnreserveBwPerPriority


                                    class LinkProtocolPriorityCapability : public Entity
                                    {
                                        public:
                                            LinkProtocolPriorityCapability();
                                            ~LinkProtocolPriorityCapability();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf link_protocol_capability; //type: uint8
                                            YLeaf link_protocol_priority; //type: uint8



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::LinkProtocolPriorityCapability


                                    class LinkSwCapability : public Entity
                                    {
                                        public:
                                            LinkSwCapability();
                                            ~LinkSwCapability();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf link_switching_capability; //type: uint8
                                            YLeaf link_encoding; //type: uint8
                                            YLeaf minimum_lsp_bw; //type: uint64
                                            YLeaf link_mtu; //type: uint16
                                            YLeafList maximum_lsp_bw_per_priority; //type: list of  uint64



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::LinkSwCapability


                                    class ExtendedAdminGroupList : public Entity
                                    {
                                        public:
                                            ExtendedAdminGroupList();
                                            ~ExtendedAdminGroupList();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf extended_admin_size; //type: uint32
                                            YLeafList ext_admin_data; //type: list of  uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::ExtendedAdminGroupList


                                    class MplsteLinkOptTlv : public Entity
                                    {
                                        public:
                                            MplsteLinkOptTlv();
                                            ~MplsteLinkOptTlv();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf mplste_link_opt_tlv_type; //type: MplsTeOptTlvEnum
                                            YLeaf mplste_link_opt_tlv_len; //type: uint16

                                        class MplsteLinkOptTlvValue : public Entity
                                        {
                                            public:
                                                MplsteLinkOptTlvValue();
                                                ~MplsteLinkOptTlvValue();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf opaque_tlv_type; //type: MplsTeOptTlvEnum

                                            class BctlvValue : public Entity
                                            {
                                                public:
                                                    BctlvValue();
                                                    ~BctlvValue();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf model_id; //type: uint8
                                                    YLeaf num_b_cs; //type: uint32
                                                    YLeafList mplste_link_bc_bandwidth; //type: list of  uint64



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::BctlvValue


                                            class SrlgtlvValue : public Entity
                                            {
                                                public:
                                                    SrlgtlvValue();
                                                    ~SrlgtlvValue();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf srlg_len; //type: uint32
                                                    YLeaf num_srl_gs; //type: uint32
                                                    YLeafList mplste_link_srlg_data; //type: list of  uint32



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::SrlgtlvValue


                                            class IxcdtlvValue : public Entity
                                            {
                                                public:
                                                    IxcdtlvValue();
                                                    ~IxcdtlvValue();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf switching_cap; //type: uint8
                                                    YLeaf rile_len_code; //type: uint8
                                                    YLeaf fixed_scsi_count; //type: uint32
                                                    YLeaf flex_scsi_count; //type: uint32
                                                    YLeafList max_lspbw; //type: list of  int64

                                                class IxcdSwitchingCapType : public Entity
                                                {
                                                    public:
                                                        IxcdSwitchingCapType();
                                                        ~IxcdSwitchingCapType();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf switching_cap_type; //type: uint8

                                                    class IxcdpscInfo : public Entity
                                                    {
                                                        public:
                                                            IxcdpscInfo();
                                                            ~IxcdpscInfo();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf min_lsp_bandwidth; //type: uint64
                                                            YLeaf psc_interface_mtu; //type: uint16



                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdpscInfo


                                                    class IxcdbwSubTlv : public Entity
                                                    {
                                                        public:
                                                            IxcdbwSubTlv();
                                                            ~IxcdbwSubTlv();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;



                                                        class ArrBwSubTlv : public Entity
                                                        {
                                                            public:
                                                                ArrBwSubTlv();
                                                                ~ArrBwSubTlv();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;


                                                                YLeaf bw_sub_tlv_type; //type: uint16
                                                                YLeaf bw_sub_tlv_length; //type: uint16

                                                            class BwSubTlvValue : public Entity
                                                            {
                                                                public:
                                                                    BwSubTlvValue();
                                                                    ~BwSubTlvValue();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                    YLeaf ixcdbw_sub_tlv_type; //type: uint16

                                                                class FixedBwSubTlvValue : public Entity
                                                                {
                                                                    public:
                                                                        FixedBwSubTlvValue();
                                                                        ~FixedBwSubTlvValue();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                        YLeafList unres_oduj_prio; //type: list of  uint32

                                                                    class FixedSubTlvValue : public Entity
                                                                    {
                                                                        public:
                                                                            FixedSubTlvValue();
                                                                            ~FixedSubTlvValue();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                            YLeaf signal_type; //type: uint8
                                                                            YLeaf num_stages; //type: uint8
                                                                            YLeaf tbit; //type: uint8
                                                                            YLeaf sbit; //type: uint8
                                                                            YLeaf tsg; //type: uint8
                                                                            YLeaf res; //type: uint8
                                                                            YLeaf priority_bit0; //type: uint8
                                                                            YLeaf priority_bit1; //type: uint8
                                                                            YLeaf priority_bit2; //type: uint8
                                                                            YLeaf priority_bit3; //type: uint8
                                                                            YLeaf priority_bit4; //type: uint8
                                                                            YLeaf priority_bit5; //type: uint8
                                                                            YLeaf priority_bit6; //type: uint8
                                                                            YLeaf priority_bit7; //type: uint8
                                                                            YLeaf stage; //type: string



                                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue::FixedSubTlvValue


                                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue::FixedSubTlvValue> fixed_sub_tlv_value;


                                                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue


                                                                class FlexBwSubTlvValue : public Entity
                                                                {
                                                                    public:
                                                                        FlexBwSubTlvValue();
                                                                        ~FlexBwSubTlvValue();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                        YLeafList unres_lspbw; //type: list of  uint64
                                                                        YLeafList max_lspbw; //type: list of  uint64

                                                                    class FlexSubTlvValueCommon : public Entity
                                                                    {
                                                                        public:
                                                                            FlexSubTlvValueCommon();
                                                                            ~FlexSubTlvValueCommon();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                            YLeaf signal_type; //type: uint8
                                                                            YLeaf num_stages; //type: uint8
                                                                            YLeaf tbit; //type: uint8
                                                                            YLeaf sbit; //type: uint8
                                                                            YLeaf tsg; //type: uint8
                                                                            YLeaf res; //type: uint8
                                                                            YLeaf priority_bit0; //type: uint8
                                                                            YLeaf priority_bit1; //type: uint8
                                                                            YLeaf priority_bit2; //type: uint8
                                                                            YLeaf priority_bit3; //type: uint8
                                                                            YLeaf priority_bit4; //type: uint8
                                                                            YLeaf priority_bit5; //type: uint8
                                                                            YLeaf priority_bit6; //type: uint8
                                                                            YLeaf priority_bit7; //type: uint8
                                                                            YLeaf stage; //type: string



                                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue::FlexSubTlvValueCommon


                                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue::FlexSubTlvValueCommon> flex_sub_tlv_value_common;


                                                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue


                                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue> fixed_bw_sub_tlv_value;
                                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue> flex_bw_sub_tlv_value;


                                                            }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue


                                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue> bw_sub_tlv_value;


                                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv


                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv> > arr_bw_sub_tlv;


                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv


                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv> ixcdbw_sub_tlv;
                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdpscInfo> ixcdpsc_info;


                                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType


                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType> ixcd_switching_cap_type;


                                            }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue


                                            class UnidtlvValue : public Entity
                                            {
                                                public:
                                                    UnidtlvValue();
                                                    ~UnidtlvValue();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf uni_dir_delay; //type: uint32



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::UnidtlvValue


                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::BctlvValue> bctlv_value;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue> ixcdtlv_value;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::SrlgtlvValue> srlgtlv_value;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::UnidtlvValue> unidtlv_value;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue> > mplste_link_opt_tlv_value;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::ExtendedAdminGroupList> extended_admin_group_list;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::GlobalUnreserveBwPerPriority> global_unreserve_bw_per_priority;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::LinkProtocolPriorityCapability> link_protocol_priority_capability;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::LinkSwCapability> link_sw_capability;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv> > mplste_link_opt_tlv;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::SubPoolUnreserveBwPerPriority> sub_pool_unreserve_bw_per_priority;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink


                                class MplsTeFragment_ : public Entity
                                {
                                    public:
                                        MplsTeFragment_();
                                        ~MplsTeFragment_();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf fragment_instance; //type: uint32
                                        YLeaf fragment_id; //type: uint32
                                        YLeaf dste_model_id; //type: uint8
                                        YLeaf same_fragment_count; //type: uint8

                                    class MplsTeLink : public Entity
                                    {
                                        public:
                                            MplsTeLink();
                                            ~MplsTeLink();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf new_link; //type: boolean
                                            YLeaf fragment_id; //type: uint32
                                            YLeaf mpls_link_instance; //type: uint32
                                            YLeaf mpls_link_type; //type: LinkSubnetEnum
                                            YLeaf neighbor_system_id; //type: string
                                            YLeaf link_address; //type: string
                                            YLeaf neighbor_ip_address; //type: string
                                            YLeaf igp_metric; //type: uint32
                                            YLeaf te_metric; //type: uint32
                                            YLeaf maximum_link_bw; //type: uint32
                                            YLeaf maximum_link_reservable_bw; //type: uint32
                                            YLeaf maximum_link_sub_reservable_bw; //type: uint32
                                            YLeaf priority_count; //type: int32
                                            YLeaf affinity; //type: uint32
                                            YLeaf output_interface_id; //type: uint32
                                            YLeaf input_interface_id; //type: uint32
                                            YLeaf dste_in_use; //type: boolean
                                            YLeaf dste_allocation_model_id; //type: IgpteLibBwModelEnum
                                            YLeaf number_of_optional_tl_vs; //type: uint8

                                        class GlobalUnreserveBwPerPriority : public Entity
                                        {
                                            public:
                                                GlobalUnreserveBwPerPriority();
                                                ~GlobalUnreserveBwPerPriority();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeafList bw_per_priority; //type: list of  uint64



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::GlobalUnreserveBwPerPriority


                                        class SubPoolUnreserveBwPerPriority : public Entity
                                        {
                                            public:
                                                SubPoolUnreserveBwPerPriority();
                                                ~SubPoolUnreserveBwPerPriority();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeafList bw_per_priority; //type: list of  uint64



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::SubPoolUnreserveBwPerPriority


                                        class LinkProtocolPriorityCapability : public Entity
                                        {
                                            public:
                                                LinkProtocolPriorityCapability();
                                                ~LinkProtocolPriorityCapability();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf link_protocol_capability; //type: uint8
                                                YLeaf link_protocol_priority; //type: uint8



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::LinkProtocolPriorityCapability


                                        class LinkSwCapability : public Entity
                                        {
                                            public:
                                                LinkSwCapability();
                                                ~LinkSwCapability();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf link_switching_capability; //type: uint8
                                                YLeaf link_encoding; //type: uint8
                                                YLeaf minimum_lsp_bw; //type: uint64
                                                YLeaf link_mtu; //type: uint16
                                                YLeafList maximum_lsp_bw_per_priority; //type: list of  uint64



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::LinkSwCapability


                                        class ExtendedAdminGroupList : public Entity
                                        {
                                            public:
                                                ExtendedAdminGroupList();
                                                ~ExtendedAdminGroupList();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf extended_admin_size; //type: uint32
                                                YLeafList ext_admin_data; //type: list of  uint32



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::ExtendedAdminGroupList


                                        class MplsteLinkOptTlv : public Entity
                                        {
                                            public:
                                                MplsteLinkOptTlv();
                                                ~MplsteLinkOptTlv();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf mplste_link_opt_tlv_type; //type: MplsTeOptTlvEnum
                                                YLeaf mplste_link_opt_tlv_len; //type: uint16

                                            class MplsteLinkOptTlvValue : public Entity
                                            {
                                                public:
                                                    MplsteLinkOptTlvValue();
                                                    ~MplsteLinkOptTlvValue();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf opaque_tlv_type; //type: MplsTeOptTlvEnum

                                                class BctlvValue : public Entity
                                                {
                                                    public:
                                                        BctlvValue();
                                                        ~BctlvValue();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf model_id; //type: uint8
                                                        YLeaf num_b_cs; //type: uint32
                                                        YLeafList mplste_link_bc_bandwidth; //type: list of  uint64



                                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::BctlvValue


                                                class SrlgtlvValue : public Entity
                                                {
                                                    public:
                                                        SrlgtlvValue();
                                                        ~SrlgtlvValue();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf srlg_len; //type: uint32
                                                        YLeaf num_srl_gs; //type: uint32
                                                        YLeafList mplste_link_srlg_data; //type: list of  uint32



                                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::SrlgtlvValue


                                                class IxcdtlvValue : public Entity
                                                {
                                                    public:
                                                        IxcdtlvValue();
                                                        ~IxcdtlvValue();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf switching_cap; //type: uint8
                                                        YLeaf rile_len_code; //type: uint8
                                                        YLeaf fixed_scsi_count; //type: uint32
                                                        YLeaf flex_scsi_count; //type: uint32
                                                        YLeafList max_lspbw; //type: list of  int64

                                                    class IxcdSwitchingCapType : public Entity
                                                    {
                                                        public:
                                                            IxcdSwitchingCapType();
                                                            ~IxcdSwitchingCapType();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf switching_cap_type; //type: uint8

                                                        class IxcdpscInfo : public Entity
                                                        {
                                                            public:
                                                                IxcdpscInfo();
                                                                ~IxcdpscInfo();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;


                                                                YLeaf min_lsp_bandwidth; //type: uint64
                                                                YLeaf psc_interface_mtu; //type: uint16



                                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdpscInfo


                                                        class IxcdbwSubTlv : public Entity
                                                        {
                                                            public:
                                                                IxcdbwSubTlv();
                                                                ~IxcdbwSubTlv();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;



                                                            class ArrBwSubTlv : public Entity
                                                            {
                                                                public:
                                                                    ArrBwSubTlv();
                                                                    ~ArrBwSubTlv();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                    YLeaf bw_sub_tlv_type; //type: uint16
                                                                    YLeaf bw_sub_tlv_length; //type: uint16

                                                                class BwSubTlvValue : public Entity
                                                                {
                                                                    public:
                                                                        BwSubTlvValue();
                                                                        ~BwSubTlvValue();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                        YLeaf ixcdbw_sub_tlv_type; //type: uint16

                                                                    class FixedBwSubTlvValue : public Entity
                                                                    {
                                                                        public:
                                                                            FixedBwSubTlvValue();
                                                                            ~FixedBwSubTlvValue();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                            YLeafList unres_oduj_prio; //type: list of  uint32

                                                                        class FixedSubTlvValue : public Entity
                                                                        {
                                                                            public:
                                                                                FixedSubTlvValue();
                                                                                ~FixedSubTlvValue();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;


                                                                                YLeaf signal_type; //type: uint8
                                                                                YLeaf num_stages; //type: uint8
                                                                                YLeaf tbit; //type: uint8
                                                                                YLeaf sbit; //type: uint8
                                                                                YLeaf tsg; //type: uint8
                                                                                YLeaf res; //type: uint8
                                                                                YLeaf priority_bit0; //type: uint8
                                                                                YLeaf priority_bit1; //type: uint8
                                                                                YLeaf priority_bit2; //type: uint8
                                                                                YLeaf priority_bit3; //type: uint8
                                                                                YLeaf priority_bit4; //type: uint8
                                                                                YLeaf priority_bit5; //type: uint8
                                                                                YLeaf priority_bit6; //type: uint8
                                                                                YLeaf priority_bit7; //type: uint8
                                                                                YLeaf stage; //type: string



                                                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue::FixedSubTlvValue


                                                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue::FixedSubTlvValue> fixed_sub_tlv_value;


                                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue


                                                                    class FlexBwSubTlvValue : public Entity
                                                                    {
                                                                        public:
                                                                            FlexBwSubTlvValue();
                                                                            ~FlexBwSubTlvValue();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                            YLeafList unres_lspbw; //type: list of  uint64
                                                                            YLeafList max_lspbw; //type: list of  uint64

                                                                        class FlexSubTlvValueCommon : public Entity
                                                                        {
                                                                            public:
                                                                                FlexSubTlvValueCommon();
                                                                                ~FlexSubTlvValueCommon();

                                                                                bool has_data() const override;
                                                                                bool has_operation() const override;
                                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                                std::string get_segment_path() const override;
                                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                                std::map<std::string, Entity*> & get_children() override;


                                                                                YLeaf signal_type; //type: uint8
                                                                                YLeaf num_stages; //type: uint8
                                                                                YLeaf tbit; //type: uint8
                                                                                YLeaf sbit; //type: uint8
                                                                                YLeaf tsg; //type: uint8
                                                                                YLeaf res; //type: uint8
                                                                                YLeaf priority_bit0; //type: uint8
                                                                                YLeaf priority_bit1; //type: uint8
                                                                                YLeaf priority_bit2; //type: uint8
                                                                                YLeaf priority_bit3; //type: uint8
                                                                                YLeaf priority_bit4; //type: uint8
                                                                                YLeaf priority_bit5; //type: uint8
                                                                                YLeaf priority_bit6; //type: uint8
                                                                                YLeaf priority_bit7; //type: uint8
                                                                                YLeaf stage; //type: string



                                                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue::FlexSubTlvValueCommon


                                                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue::FlexSubTlvValueCommon> flex_sub_tlv_value_common;


                                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue


                                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue> fixed_bw_sub_tlv_value;
                                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue> flex_bw_sub_tlv_value;


                                                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue


                                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue> bw_sub_tlv_value;


                                                            }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv


                                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv> > arr_bw_sub_tlv;


                                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv


                                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv> ixcdbw_sub_tlv;
                                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdpscInfo> ixcdpsc_info;


                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType


                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType> ixcd_switching_cap_type;


                                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue


                                                class UnidtlvValue : public Entity
                                                {
                                                    public:
                                                        UnidtlvValue();
                                                        ~UnidtlvValue();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf uni_dir_delay; //type: uint32



                                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::UnidtlvValue


                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::BctlvValue> bctlv_value;
                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue> ixcdtlv_value;
                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::SrlgtlvValue> srlgtlv_value;
                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::UnidtlvValue> unidtlv_value;


                                            }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue> > mplste_link_opt_tlv_value;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::ExtendedAdminGroupList> extended_admin_group_list;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::GlobalUnreserveBwPerPriority> global_unreserve_bw_per_priority;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::LinkProtocolPriorityCapability> link_protocol_priority_capability;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::LinkSwCapability> link_sw_capability;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv> > mplste_link_opt_tlv;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::SubPoolUnreserveBwPerPriority> sub_pool_unreserve_bw_per_priority;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink> > mpls_te_link;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_> > mpls_te_fragment;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink> > mpls_te_link;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments::MplsTeFragment> > mpls_te_fragment;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments


                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeFragments> mpls_te_fragments;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe::MplsTeLinks> mpls_te_links;


                    }; // Ospf::Processes::Process::Vrfs::Vrf::MplsTe


                    class AdjacencyInformation : public Entity
                    {
                        public:
                            AdjacencyInformation();
                            ~AdjacencyInformation();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Neighbors : public Entity
                        {
                            public:
                                Neighbors();
                                ~Neighbors();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class Neighbor : public Entity
                            {
                                public:
                                    Neighbor();
                                    ~Neighbor();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf interface_name; //type: string
                                    YLeaf neighbor_address; //type: string
                                    YLeaf neighbor_id; //type: string
                                    YLeaf neighbor_address_xr; //type: string
                                    YLeaf neighbor_interface_name; //type: string
                                    YLeaf neighbor_dr_priority; //type: uint8
                                    YLeaf neighbor_state; //type: NeighborStateEnum
                                    YLeaf dr_bdr_state; //type: DrBdrStateEnum
                                    YLeaf neighbor_dead_timer; //type: uint32
                                    YLeaf neighbor_up_time; //type: uint32
                                    YLeaf neighbor_madj_interface; //type: boolean

                                class NeighborBfdInformation : public Entity
                                {
                                    public:
                                        NeighborBfdInformation();
                                        ~NeighborBfdInformation();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf bfd_intf_enable_mode; //type: uint32
                                        YLeaf bfd_status_flag; //type: uint8



                                }; // Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Neighbors::Neighbor::NeighborBfdInformation


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Neighbors::Neighbor::NeighborBfdInformation> neighbor_bfd_information;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Neighbors::Neighbor


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Neighbors::Neighbor> > neighbor;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Neighbors


                        class Requests : public Entity
                        {
                            public:
                                Requests();
                                ~Requests();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class Request : public Entity
                            {
                                public:
                                    Request();
                                    ~Request();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf interface_name; //type: string
                                    YLeaf neighbor_address; //type: string
                                    YLeaf request_neighbor_id; //type: string
                                    YLeaf request_neighbor_address; //type: string
                                    YLeaf request_interface_name; //type: string

                                class Request_ : public Entity
                                {
                                    public:
                                        Request_();
                                        ~Request_();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf header_lsa_type; //type: LsaEnum
                                        YLeaf header_lsa_age; //type: uint16
                                        YLeaf header_ls_id; //type: string
                                        YLeaf header_advertising_router; //type: string
                                        YLeaf header_sequence_number; //type: uint32
                                        YLeaf header_lsa_checksum; //type: uint16



                                }; // Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Requests::Request::Request_


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Requests::Request::Request_> > request;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Requests::Request


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Requests::Request> > request;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Requests


                        class Retransmissions : public Entity
                        {
                            public:
                                Retransmissions();
                                ~Retransmissions();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class Retransmission : public Entity
                            {
                                public:
                                    Retransmission();
                                    ~Retransmission();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf interface_name; //type: string
                                    YLeaf neighbor_address; //type: string
                                    YLeaf retransmission_neighbor_id; //type: string
                                    YLeaf retransmission_neighbor_ip_address; //type: string
                                    YLeaf retransmission_interface_name; //type: string
                                    YLeaf retransmission_timer; //type: uint32
                                    YLeaf retransmission_count; //type: uint32

                                class RetransmissionAreaDb : public Entity
                                {
                                    public:
                                        RetransmissionAreaDb();
                                        ~RetransmissionAreaDb();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf header_lsa_type; //type: LsaEnum
                                        YLeaf header_lsa_age; //type: uint16
                                        YLeaf header_ls_id; //type: string
                                        YLeaf header_advertising_router; //type: string
                                        YLeaf header_sequence_number; //type: uint32
                                        YLeaf header_lsa_checksum; //type: uint16



                                }; // Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Retransmissions::Retransmission::RetransmissionAreaDb


                                class RetransmissionAsdb : public Entity
                                {
                                    public:
                                        RetransmissionAsdb();
                                        ~RetransmissionAsdb();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf header_lsa_type; //type: LsaEnum
                                        YLeaf header_lsa_age; //type: uint16
                                        YLeaf header_ls_id; //type: string
                                        YLeaf header_advertising_router; //type: string
                                        YLeaf header_sequence_number; //type: uint32
                                        YLeaf header_lsa_checksum; //type: uint16



                                }; // Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Retransmissions::Retransmission::RetransmissionAsdb


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Retransmissions::Retransmission::RetransmissionAreaDb> > retransmission_area_db;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Retransmissions::Retransmission::RetransmissionAsdb> > retransmission_asdb;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Retransmissions::Retransmission


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Retransmissions::Retransmission> > retransmission;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Retransmissions


                        class NeighborDetails : public Entity
                        {
                            public:
                                NeighborDetails();
                                ~NeighborDetails();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class NeighborDetail : public Entity
                            {
                                public:
                                    NeighborDetail();
                                    ~NeighborDetail();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf interface_name; //type: string
                                    YLeaf neighbor_address; //type: string
                                    YLeaf neighbor_area_id; //type: string
                                    YLeaf state_change_count; //type: uint16
                                    YLeaf neighbor_cost; //type: uint16
                                    YLeaf neighbor_filter; //type: boolean
                                    YLeaf neighbor_designated_router_address; //type: string
                                    YLeaf neighbor_backup_designated_router_address; //type: string
                                    YLeaf interface_type; //type: InterfaceEnum
                                    YLeaf poll_interval; //type: uint32
                                    YLeaf next_poll_interval; //type: uint32
                                    YLeaf neighbor_option; //type: uint8
                                    YLeaf pending_events; //type: uint16
                                    YLeaf neighbor_lls_option; //type: uint16
                                    YLeaf oob_resynchronization; //type: boolean
                                    YLeaf nsf_router_state; //type: NsfRtrEnum
                                    YLeaf last_oob_time; //type: uint32
                                    YLeaf lfa_interface; //type: string
                                    YLeaf lfa_next_hop; //type: string
                                    YLeaf lfa_neighbor_id; //type: string
                                    YLeaf lfa_neighbor_revision; //type: uint32
                                    YLeaf neighbor_ack_list_count; //type: uint32
                                    YLeaf neighbor_ack_list_high_watermark; //type: uint32
                                    YLeaf adjacency_sid_label; //type: uint32
                                    YLeaf adjacency_sid_protected; //type: boolean
                                    YLeaf adjacency_sid_unprotected_label; //type: uint32

                                class NeighborSummary : public Entity
                                {
                                    public:
                                        NeighborSummary();
                                        ~NeighborSummary();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf neighbor_id; //type: string
                                        YLeaf neighbor_address_xr; //type: string
                                        YLeaf neighbor_interface_name; //type: string
                                        YLeaf neighbor_dr_priority; //type: uint8
                                        YLeaf neighbor_state; //type: NeighborStateEnum
                                        YLeaf dr_bdr_state; //type: DrBdrStateEnum
                                        YLeaf neighbor_dead_timer; //type: uint32
                                        YLeaf neighbor_up_time; //type: uint32
                                        YLeaf neighbor_madj_interface; //type: boolean

                                    class NeighborBfdInformation : public Entity
                                    {
                                        public:
                                            NeighborBfdInformation();
                                            ~NeighborBfdInformation();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf bfd_intf_enable_mode; //type: uint32
                                            YLeaf bfd_status_flag; //type: uint8



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::NeighborDetails::NeighborDetail::NeighborSummary::NeighborBfdInformation


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::NeighborDetails::NeighborDetail::NeighborSummary::NeighborBfdInformation> neighbor_bfd_information;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::NeighborDetails::NeighborDetail::NeighborSummary


                                class NeighborBfdInformation : public Entity
                                {
                                    public:
                                        NeighborBfdInformation();
                                        ~NeighborBfdInformation();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf bfd_intf_enable_mode; //type: uint32
                                        YLeaf bfd_status_flag; //type: uint8



                                }; // Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::NeighborDetails::NeighborDetail::NeighborBfdInformation


                                class NeighborRetransmissionInformation : public Entity
                                {
                                    public:
                                        NeighborRetransmissionInformation();
                                        ~NeighborRetransmissionInformation();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf dbd_retransmission_count; //type: uint32
                                        YLeaf dbd_retransmission_total_count; //type: uint32
                                        YLeaf area_flooding_index; //type: uint32
                                        YLeaf as_flood_index; //type: uint32
                                        YLeaf neighbor_retransmission_count; //type: uint32
                                        YLeaf number_of_retransmissions; //type: uint32
                                        YLeaf area_first_flood_information; //type: uint32
                                        YLeaf area_first_flood_information_index; //type: uint32
                                        YLeaf as_first_flood_information; //type: uint32
                                        YLeaf as_first_flood_information_index; //type: uint32
                                        YLeaf area_next_flood_information; //type: uint32
                                        YLeaf area_next_flood_information_index; //type: uint32
                                        YLeaf as_next_flood_information; //type: uint32
                                        YLeaf as_next_flood_information_index; //type: uint32
                                        YLeaf last_retransmission_length; //type: uint32
                                        YLeaf maximum_retransmission_length; //type: uint32
                                        YLeaf last_retransmission_time; //type: uint32
                                        YLeaf maximum_retransmission_time; //type: uint32
                                        YLeaf lsa_retransmission_timer; //type: uint32



                                }; // Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::NeighborDetails::NeighborDetail::NeighborRetransmissionInformation


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::NeighborDetails::NeighborDetail::NeighborBfdInformation> neighbor_bfd_information;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::NeighborDetails::NeighborDetail::NeighborRetransmissionInformation> neighbor_retransmission_information;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::NeighborDetails::NeighborDetail::NeighborSummary> neighbor_summary;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::NeighborDetails::NeighborDetail


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::NeighborDetails::NeighborDetail> > neighbor_detail;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::NeighborDetails


                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::NeighborDetails> neighbor_details;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Neighbors> neighbors;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Requests> requests;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation::Retransmissions> retransmissions;


                    }; // Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation


                    class RouteInformation : public Entity
                    {
                        public:
                            RouteInformation();
                            ~RouteInformation();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class BackupRoutes : public Entity
                        {
                            public:
                                BackupRoutes();
                                ~BackupRoutes();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class BackupRoute : public Entity
                            {
                                public:
                                    BackupRoute();
                                    ~BackupRoute();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf prefix; //type: string
                                    YLeaf prefix_length; //type: uint32
                                    YLeaf route_prefix; //type: string
                                    YLeaf route_prefix_length; //type: uint32
                                    YLeaf route_metric; //type: uint32
                                    YLeaf route_type; //type: OspfRouteEnum
                                    YLeaf route_connected; //type: boolean

                                class RouteInfo : public Entity
                                {
                                    public:
                                        RouteInfo();
                                        ~RouteInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf route_area_id; //type: uint32
                                        YLeaf route_te_metric; //type: uint32
                                        YLeaf route_rib_version; //type: uint32
                                        YLeaf route_spf_version; //type: uint64
                                        YLeaf route_forward_distance; //type: uint32
                                        YLeaf route_source; //type: uint16
                                        YLeaf route_spf_priority; //type: uint8
                                        YLeaf route_auto_excluded; //type: boolean
                                        YLeaf route_srte_prefix_registered; //type: boolean
                                        YLeaf route_srte_nbr_registered; //type: uint16

                                    class RouteUpdateTime : public Entity
                                    {
                                        public:
                                            RouteUpdateTime();
                                            ~RouteUpdateTime();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf second; //type: uint32
                                            YLeaf nanosecond; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::BackupRoutes::BackupRoute::RouteInfo::RouteUpdateTime


                                    class RouteFailTime : public Entity
                                    {
                                        public:
                                            RouteFailTime();
                                            ~RouteFailTime();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf second; //type: uint32
                                            YLeaf nanosecond; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::BackupRoutes::BackupRoute::RouteInfo::RouteFailTime


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::BackupRoutes::BackupRoute::RouteInfo::RouteFailTime> route_fail_time;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::BackupRoutes::BackupRoute::RouteInfo::RouteUpdateTime> route_update_time;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::BackupRoutes::BackupRoute::RouteInfo


                                class RoutePath : public Entity
                                {
                                    public:
                                        RoutePath();
                                        ~RoutePath();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf route_interface_name; //type: string
                                        YLeaf route_next_hop_address; //type: string
                                        YLeaf route_source; //type: string
                                        YLeaf route_lsaid; //type: string
                                        YLeaf route_path_is_mcast_intact; //type: boolean
                                        YLeaf route_path_is_ucmp_path; //type: boolean
                                        YLeaf route_metric; //type: uint32
                                        YLeaf route_path_id; //type: uint16
                                        YLeaf lsa_type; //type: uint8

                                    class RouteBackupPath : public Entity
                                    {
                                        public:
                                            RouteBackupPath();
                                            ~RouteBackupPath();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf backup_route_interface_name; //type: string
                                            YLeaf backup_route_next_hop_address; //type: string
                                            YLeaf backup_route_source; //type: string
                                            YLeaf backup_metric; //type: uint32
                                            YLeaf primary_path; //type: boolean
                                            YLeaf line_card_disjoint; //type: boolean
                                            YLeaf downstream; //type: boolean
                                            YLeaf node_protect; //type: boolean
                                            YLeaf srlg_disjoint; //type: boolean
                                            YLeaf backup_remote_lfa; //type: string
                                            YLeaf backup_repair_list_sizei; //type: uint32
                                            YLeaf backup_tunnel_interface_name; //type: string

                                        class BackupRepair : public Entity
                                        {
                                            public:
                                                BackupRepair();
                                                ~BackupRepair();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf repair_element_id; //type: string
                                                YLeaf repair_label; //type: uint32
                                                YLeaf repair_element_type; //type: uint32



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::BackupRoutes::BackupRoute::RoutePath::RouteBackupPath::BackupRepair


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::BackupRoutes::BackupRoute::RoutePath::RouteBackupPath::BackupRepair> > backup_repair;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::BackupRoutes::BackupRoute::RoutePath::RouteBackupPath


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::BackupRoutes::BackupRoute::RoutePath::RouteBackupPath> route_backup_path;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::BackupRoutes::BackupRoute::RoutePath


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::BackupRoutes::BackupRoute::RouteInfo> route_info;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::BackupRoutes::BackupRoute::RoutePath> > route_path;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::BackupRoutes::BackupRoute


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::BackupRoutes::BackupRoute> > backup_route;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::BackupRoutes


                        class MulticastIntactRouteTable : public Entity
                        {
                            public:
                                MulticastIntactRouteTable();
                                ~MulticastIntactRouteTable();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class Route : public Entity
                            {
                                public:
                                    Route();
                                    ~Route();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf prefix; //type: string
                                    YLeaf prefix_length; //type: uint32
                                    YLeaf route_prefix; //type: string
                                    YLeaf route_prefix_length; //type: uint32
                                    YLeaf route_metric; //type: uint32
                                    YLeaf route_type; //type: OspfRouteEnum
                                    YLeaf route_connected; //type: boolean

                                class RouteInfo : public Entity
                                {
                                    public:
                                        RouteInfo();
                                        ~RouteInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf route_area_id; //type: uint32
                                        YLeaf route_te_metric; //type: uint32
                                        YLeaf route_rib_version; //type: uint32
                                        YLeaf route_spf_version; //type: uint64
                                        YLeaf route_forward_distance; //type: uint32
                                        YLeaf route_source; //type: uint16
                                        YLeaf route_spf_priority; //type: uint8
                                        YLeaf route_auto_excluded; //type: boolean
                                        YLeaf route_srte_prefix_registered; //type: boolean
                                        YLeaf route_srte_nbr_registered; //type: uint16

                                    class RouteUpdateTime : public Entity
                                    {
                                        public:
                                            RouteUpdateTime();
                                            ~RouteUpdateTime();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf second; //type: uint32
                                            YLeaf nanosecond; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactRouteTable::Route::RouteInfo::RouteUpdateTime


                                    class RouteFailTime : public Entity
                                    {
                                        public:
                                            RouteFailTime();
                                            ~RouteFailTime();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf second; //type: uint32
                                            YLeaf nanosecond; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactRouteTable::Route::RouteInfo::RouteFailTime


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactRouteTable::Route::RouteInfo::RouteFailTime> route_fail_time;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactRouteTable::Route::RouteInfo::RouteUpdateTime> route_update_time;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactRouteTable::Route::RouteInfo


                                class RoutePath : public Entity
                                {
                                    public:
                                        RoutePath();
                                        ~RoutePath();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf route_interface_name; //type: string
                                        YLeaf route_next_hop_address; //type: string
                                        YLeaf route_source; //type: string
                                        YLeaf route_lsaid; //type: string
                                        YLeaf route_path_is_mcast_intact; //type: boolean
                                        YLeaf route_path_is_ucmp_path; //type: boolean
                                        YLeaf route_metric; //type: uint32
                                        YLeaf lsa_type; //type: uint8
                                        YLeaf area_id; //type: uint32
                                        YLeaf area_format; //type: boolean



                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactRouteTable::Route::RoutePath


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactRouteTable::Route::RouteInfo> route_info;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactRouteTable::Route::RoutePath> > route_path;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactRouteTable::Route


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactRouteTable::Route> > route;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactRouteTable


                        class MulticastIntactBackupRoutes : public Entity
                        {
                            public:
                                MulticastIntactBackupRoutes();
                                ~MulticastIntactBackupRoutes();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class MulticastIntactBackupRoute : public Entity
                            {
                                public:
                                    MulticastIntactBackupRoute();
                                    ~MulticastIntactBackupRoute();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf prefix; //type: string
                                    YLeaf prefix_length; //type: uint32
                                    YLeaf route_prefix; //type: string
                                    YLeaf route_prefix_length; //type: uint32
                                    YLeaf route_metric; //type: uint32
                                    YLeaf route_type; //type: OspfRouteEnum
                                    YLeaf route_connected; //type: boolean

                                class RouteInfo : public Entity
                                {
                                    public:
                                        RouteInfo();
                                        ~RouteInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf route_area_id; //type: uint32
                                        YLeaf route_te_metric; //type: uint32
                                        YLeaf route_rib_version; //type: uint32
                                        YLeaf route_spf_version; //type: uint64
                                        YLeaf route_forward_distance; //type: uint32
                                        YLeaf route_source; //type: uint16
                                        YLeaf route_spf_priority; //type: uint8
                                        YLeaf route_auto_excluded; //type: boolean
                                        YLeaf route_srte_prefix_registered; //type: boolean
                                        YLeaf route_srte_nbr_registered; //type: uint16

                                    class RouteUpdateTime : public Entity
                                    {
                                        public:
                                            RouteUpdateTime();
                                            ~RouteUpdateTime();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf second; //type: uint32
                                            YLeaf nanosecond; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RouteInfo::RouteUpdateTime


                                    class RouteFailTime : public Entity
                                    {
                                        public:
                                            RouteFailTime();
                                            ~RouteFailTime();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf second; //type: uint32
                                            YLeaf nanosecond; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RouteInfo::RouteFailTime


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RouteInfo::RouteFailTime> route_fail_time;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RouteInfo::RouteUpdateTime> route_update_time;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RouteInfo


                                class RoutePath : public Entity
                                {
                                    public:
                                        RoutePath();
                                        ~RoutePath();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf route_interface_name; //type: string
                                        YLeaf route_next_hop_address; //type: string
                                        YLeaf route_source; //type: string
                                        YLeaf route_lsaid; //type: string
                                        YLeaf route_path_is_mcast_intact; //type: boolean
                                        YLeaf route_path_is_ucmp_path; //type: boolean
                                        YLeaf route_metric; //type: uint32
                                        YLeaf route_path_id; //type: uint16
                                        YLeaf lsa_type; //type: uint8

                                    class RouteBackupPath : public Entity
                                    {
                                        public:
                                            RouteBackupPath();
                                            ~RouteBackupPath();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf backup_route_interface_name; //type: string
                                            YLeaf backup_route_next_hop_address; //type: string
                                            YLeaf backup_route_source; //type: string
                                            YLeaf backup_metric; //type: uint32
                                            YLeaf primary_path; //type: boolean
                                            YLeaf line_card_disjoint; //type: boolean
                                            YLeaf downstream; //type: boolean
                                            YLeaf node_protect; //type: boolean
                                            YLeaf srlg_disjoint; //type: boolean
                                            YLeaf backup_remote_lfa; //type: string
                                            YLeaf backup_repair_list_sizei; //type: uint32
                                            YLeaf backup_tunnel_interface_name; //type: string

                                        class BackupRepair : public Entity
                                        {
                                            public:
                                                BackupRepair();
                                                ~BackupRepair();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf repair_element_id; //type: string
                                                YLeaf repair_label; //type: uint32
                                                YLeaf repair_element_type; //type: uint32



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RoutePath::RouteBackupPath::BackupRepair


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RoutePath::RouteBackupPath::BackupRepair> > backup_repair;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RoutePath::RouteBackupPath


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RoutePath::RouteBackupPath> route_backup_path;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RoutePath


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RouteInfo> route_info;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RoutePath> > route_path;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute> > multicast_intact_backup_route;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactBackupRoutes


                        class SummaryInformation : public Entity
                        {
                            public:
                                SummaryInformation();
                                ~SummaryInformation();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf failures; //type: uint32
                                YLeaf failure_address; //type: string

                            class FailureTime : public Entity
                            {
                                public:
                                    FailureTime();
                                    ~FailureTime();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf second; //type: uint32
                                    YLeaf nanosecond; //type: uint32



                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::SummaryInformation::FailureTime


                            class Common : public Entity
                            {
                                public:
                                    Common();
                                    ~Common();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf external_type1s; //type: uint32
                                    YLeaf external_type2s; //type: uint32
                                    YLeaf external_nssa_type1s; //type: uint32
                                    YLeaf external_nssa_type2s; //type: uint32
                                    YLeaf inter_areas; //type: uint32
                                    YLeaf intra_areas; //type: uint32
                                    YLeaf total; //type: uint32



                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::SummaryInformation::Common


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::SummaryInformation::Common> common;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::SummaryInformation::FailureTime> failure_time;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::SummaryInformation


                        class ConnectedRoutes : public Entity
                        {
                            public:
                                ConnectedRoutes();
                                ~ConnectedRoutes();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class ConnectedRoute : public Entity
                            {
                                public:
                                    ConnectedRoute();
                                    ~ConnectedRoute();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf prefix; //type: string
                                    YLeaf prefix_length; //type: uint32
                                    YLeaf route_prefix; //type: string
                                    YLeaf route_prefix_length; //type: uint32
                                    YLeaf route_metric; //type: uint32
                                    YLeaf route_type; //type: OspfRouteEnum
                                    YLeaf route_connected; //type: boolean

                                class RouteInfo : public Entity
                                {
                                    public:
                                        RouteInfo();
                                        ~RouteInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf route_area_id; //type: uint32
                                        YLeaf route_te_metric; //type: uint32
                                        YLeaf route_rib_version; //type: uint32
                                        YLeaf route_spf_version; //type: uint64
                                        YLeaf route_forward_distance; //type: uint32
                                        YLeaf route_source; //type: uint16
                                        YLeaf route_spf_priority; //type: uint8
                                        YLeaf route_auto_excluded; //type: boolean
                                        YLeaf route_srte_prefix_registered; //type: boolean
                                        YLeaf route_srte_nbr_registered; //type: uint16

                                    class RouteUpdateTime : public Entity
                                    {
                                        public:
                                            RouteUpdateTime();
                                            ~RouteUpdateTime();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf second; //type: uint32
                                            YLeaf nanosecond; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ConnectedRoutes::ConnectedRoute::RouteInfo::RouteUpdateTime


                                    class RouteFailTime : public Entity
                                    {
                                        public:
                                            RouteFailTime();
                                            ~RouteFailTime();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf second; //type: uint32
                                            YLeaf nanosecond; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ConnectedRoutes::ConnectedRoute::RouteInfo::RouteFailTime


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ConnectedRoutes::ConnectedRoute::RouteInfo::RouteFailTime> route_fail_time;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ConnectedRoutes::ConnectedRoute::RouteInfo::RouteUpdateTime> route_update_time;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ConnectedRoutes::ConnectedRoute::RouteInfo


                                class RoutePath : public Entity
                                {
                                    public:
                                        RoutePath();
                                        ~RoutePath();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf route_interface_name; //type: string
                                        YLeaf route_next_hop_address; //type: string
                                        YLeaf route_source; //type: string
                                        YLeaf route_lsaid; //type: string
                                        YLeaf route_path_is_mcast_intact; //type: boolean
                                        YLeaf route_path_is_ucmp_path; //type: boolean
                                        YLeaf route_metric; //type: uint32
                                        YLeaf lsa_type; //type: uint8
                                        YLeaf area_id; //type: uint32
                                        YLeaf area_format; //type: boolean



                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ConnectedRoutes::ConnectedRoute::RoutePath


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ConnectedRoutes::ConnectedRoute::RouteInfo> route_info;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ConnectedRoutes::ConnectedRoute::RoutePath> > route_path;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ConnectedRoutes::ConnectedRoute


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ConnectedRoutes::ConnectedRoute> > connected_route;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ConnectedRoutes


                        class LocalRoutes : public Entity
                        {
                            public:
                                LocalRoutes();
                                ~LocalRoutes();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class LocalRoute : public Entity
                            {
                                public:
                                    LocalRoute();
                                    ~LocalRoute();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf prefix; //type: string
                                    YLeaf prefix_length; //type: uint32
                                    YLeaf route_prefix; //type: string
                                    YLeaf route_prefix_length; //type: uint32
                                    YLeaf route_metric; //type: uint32
                                    YLeaf route_type; //type: OspfRouteEnum
                                    YLeaf route_connected; //type: boolean

                                class RouteInfo : public Entity
                                {
                                    public:
                                        RouteInfo();
                                        ~RouteInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf route_area_id; //type: uint32
                                        YLeaf route_te_metric; //type: uint32
                                        YLeaf route_rib_version; //type: uint32
                                        YLeaf route_spf_version; //type: uint64
                                        YLeaf route_forward_distance; //type: uint32
                                        YLeaf route_source; //type: uint16
                                        YLeaf route_spf_priority; //type: uint8
                                        YLeaf route_auto_excluded; //type: boolean
                                        YLeaf route_srte_prefix_registered; //type: boolean
                                        YLeaf route_srte_nbr_registered; //type: uint16

                                    class RouteUpdateTime : public Entity
                                    {
                                        public:
                                            RouteUpdateTime();
                                            ~RouteUpdateTime();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf second; //type: uint32
                                            YLeaf nanosecond; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::LocalRoutes::LocalRoute::RouteInfo::RouteUpdateTime


                                    class RouteFailTime : public Entity
                                    {
                                        public:
                                            RouteFailTime();
                                            ~RouteFailTime();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf second; //type: uint32
                                            YLeaf nanosecond; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::LocalRoutes::LocalRoute::RouteInfo::RouteFailTime


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::LocalRoutes::LocalRoute::RouteInfo::RouteFailTime> route_fail_time;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::LocalRoutes::LocalRoute::RouteInfo::RouteUpdateTime> route_update_time;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::LocalRoutes::LocalRoute::RouteInfo


                                class RoutePath : public Entity
                                {
                                    public:
                                        RoutePath();
                                        ~RoutePath();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf route_interface_name; //type: string
                                        YLeaf route_next_hop_address; //type: string
                                        YLeaf route_source; //type: string
                                        YLeaf route_lsaid; //type: string
                                        YLeaf route_path_is_mcast_intact; //type: boolean
                                        YLeaf route_path_is_ucmp_path; //type: boolean
                                        YLeaf route_metric; //type: uint32
                                        YLeaf lsa_type; //type: uint8
                                        YLeaf area_id; //type: uint32
                                        YLeaf area_format; //type: boolean



                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::LocalRoutes::LocalRoute::RoutePath


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::LocalRoutes::LocalRoute::RouteInfo> route_info;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::LocalRoutes::LocalRoute::RoutePath> > route_path;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::LocalRoutes::LocalRoute


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::LocalRoutes::LocalRoute> > local_route;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::LocalRoutes


                        class RouteAreas : public Entity
                        {
                            public:
                                RouteAreas();
                                ~RouteAreas();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class RouteArea : public Entity
                            {
                                public:
                                    RouteArea();
                                    ~RouteArea();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf area_id; //type: int32

                                class MulticastIntactBackupRouteAreas : public Entity
                                {
                                    public:
                                        MulticastIntactBackupRouteAreas();
                                        ~MulticastIntactBackupRouteAreas();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class MulticastIntactBackupRouteArea : public Entity
                                    {
                                        public:
                                            MulticastIntactBackupRouteArea();
                                            ~MulticastIntactBackupRouteArea();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf prefix; //type: string
                                            YLeaf prefix_length; //type: uint32
                                            YLeaf route_prefix; //type: string
                                            YLeaf route_prefix_length; //type: uint32
                                            YLeaf route_metric; //type: uint32
                                            YLeaf route_type; //type: OspfRouteEnum
                                            YLeaf route_connected; //type: boolean

                                        class RouteInfo : public Entity
                                        {
                                            public:
                                                RouteInfo();
                                                ~RouteInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf route_area_id; //type: uint32
                                                YLeaf route_te_metric; //type: uint32
                                                YLeaf route_rib_version; //type: uint32
                                                YLeaf route_spf_version; //type: uint64
                                                YLeaf route_forward_distance; //type: uint32
                                                YLeaf route_source; //type: uint16
                                                YLeaf route_spf_priority; //type: uint8
                                                YLeaf route_auto_excluded; //type: boolean
                                                YLeaf route_srte_prefix_registered; //type: boolean
                                                YLeaf route_srte_nbr_registered; //type: uint16

                                            class RouteUpdateTime : public Entity
                                            {
                                                public:
                                                    RouteUpdateTime();
                                                    ~RouteUpdateTime();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf second; //type: uint32
                                                    YLeaf nanosecond; //type: uint32



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RouteInfo::RouteUpdateTime


                                            class RouteFailTime : public Entity
                                            {
                                                public:
                                                    RouteFailTime();
                                                    ~RouteFailTime();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf second; //type: uint32
                                                    YLeaf nanosecond; //type: uint32



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RouteInfo::RouteFailTime


                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RouteInfo::RouteFailTime> route_fail_time;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RouteInfo::RouteUpdateTime> route_update_time;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RouteInfo


                                        class RoutePath : public Entity
                                        {
                                            public:
                                                RoutePath();
                                                ~RoutePath();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf route_interface_name; //type: string
                                                YLeaf route_next_hop_address; //type: string
                                                YLeaf route_source; //type: string
                                                YLeaf route_lsaid; //type: string
                                                YLeaf route_path_is_mcast_intact; //type: boolean
                                                YLeaf route_path_is_ucmp_path; //type: boolean
                                                YLeaf route_metric; //type: uint32
                                                YLeaf route_path_id; //type: uint16
                                                YLeaf lsa_type; //type: uint8

                                            class RouteBackupPath : public Entity
                                            {
                                                public:
                                                    RouteBackupPath();
                                                    ~RouteBackupPath();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf backup_route_interface_name; //type: string
                                                    YLeaf backup_route_next_hop_address; //type: string
                                                    YLeaf backup_route_source; //type: string
                                                    YLeaf backup_metric; //type: uint32
                                                    YLeaf primary_path; //type: boolean
                                                    YLeaf line_card_disjoint; //type: boolean
                                                    YLeaf downstream; //type: boolean
                                                    YLeaf node_protect; //type: boolean
                                                    YLeaf srlg_disjoint; //type: boolean
                                                    YLeaf backup_remote_lfa; //type: string
                                                    YLeaf backup_repair_list_sizei; //type: uint32
                                                    YLeaf backup_tunnel_interface_name; //type: string

                                                class BackupRepair : public Entity
                                                {
                                                    public:
                                                        BackupRepair();
                                                        ~BackupRepair();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf repair_element_id; //type: string
                                                        YLeaf repair_label; //type: uint32
                                                        YLeaf repair_element_type; //type: uint32



                                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RoutePath::RouteBackupPath::BackupRepair


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RoutePath::RouteBackupPath::BackupRepair> > backup_repair;


                                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RoutePath::RouteBackupPath


                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RoutePath::RouteBackupPath> route_backup_path;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RoutePath


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RouteInfo> route_info;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RoutePath> > route_path;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea> > multicast_intact_backup_route_area;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas


                                class ConnectedRouteAreas : public Entity
                                {
                                    public:
                                        ConnectedRouteAreas();
                                        ~ConnectedRouteAreas();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class ConnectedRouteArea : public Entity
                                    {
                                        public:
                                            ConnectedRouteArea();
                                            ~ConnectedRouteArea();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf prefix; //type: string
                                            YLeaf prefix_length; //type: uint32
                                            YLeaf route_prefix; //type: string
                                            YLeaf route_prefix_length; //type: uint32
                                            YLeaf route_metric; //type: uint32
                                            YLeaf route_type; //type: OspfRouteEnum
                                            YLeaf route_connected; //type: boolean

                                        class RouteInfo : public Entity
                                        {
                                            public:
                                                RouteInfo();
                                                ~RouteInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf route_area_id; //type: uint32
                                                YLeaf route_te_metric; //type: uint32
                                                YLeaf route_rib_version; //type: uint32
                                                YLeaf route_spf_version; //type: uint64
                                                YLeaf route_forward_distance; //type: uint32
                                                YLeaf route_source; //type: uint16
                                                YLeaf route_spf_priority; //type: uint8
                                                YLeaf route_auto_excluded; //type: boolean
                                                YLeaf route_srte_prefix_registered; //type: boolean
                                                YLeaf route_srte_nbr_registered; //type: uint16

                                            class RouteUpdateTime : public Entity
                                            {
                                                public:
                                                    RouteUpdateTime();
                                                    ~RouteUpdateTime();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf second; //type: uint32
                                                    YLeaf nanosecond; //type: uint32



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea::RouteInfo::RouteUpdateTime


                                            class RouteFailTime : public Entity
                                            {
                                                public:
                                                    RouteFailTime();
                                                    ~RouteFailTime();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf second; //type: uint32
                                                    YLeaf nanosecond; //type: uint32



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea::RouteInfo::RouteFailTime


                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea::RouteInfo::RouteFailTime> route_fail_time;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea::RouteInfo::RouteUpdateTime> route_update_time;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea::RouteInfo


                                        class RoutePath : public Entity
                                        {
                                            public:
                                                RoutePath();
                                                ~RoutePath();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf route_interface_name; //type: string
                                                YLeaf route_next_hop_address; //type: string
                                                YLeaf route_source; //type: string
                                                YLeaf route_lsaid; //type: string
                                                YLeaf route_path_is_mcast_intact; //type: boolean
                                                YLeaf route_path_is_ucmp_path; //type: boolean
                                                YLeaf route_metric; //type: uint32
                                                YLeaf lsa_type; //type: uint8
                                                YLeaf area_id; //type: uint32
                                                YLeaf area_format; //type: boolean



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea::RoutePath


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea::RouteInfo> route_info;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea::RoutePath> > route_path;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea> > connected_route_area;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas


                                class BackupRouteAreas : public Entity
                                {
                                    public:
                                        BackupRouteAreas();
                                        ~BackupRouteAreas();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class BackupRouteArea : public Entity
                                    {
                                        public:
                                            BackupRouteArea();
                                            ~BackupRouteArea();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf prefix; //type: string
                                            YLeaf prefix_length; //type: uint32
                                            YLeaf route_prefix; //type: string
                                            YLeaf route_prefix_length; //type: uint32
                                            YLeaf route_metric; //type: uint32
                                            YLeaf route_type; //type: OspfRouteEnum
                                            YLeaf route_connected; //type: boolean

                                        class RouteInfo : public Entity
                                        {
                                            public:
                                                RouteInfo();
                                                ~RouteInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf route_area_id; //type: uint32
                                                YLeaf route_te_metric; //type: uint32
                                                YLeaf route_rib_version; //type: uint32
                                                YLeaf route_spf_version; //type: uint64
                                                YLeaf route_forward_distance; //type: uint32
                                                YLeaf route_source; //type: uint16
                                                YLeaf route_spf_priority; //type: uint8
                                                YLeaf route_auto_excluded; //type: boolean
                                                YLeaf route_srte_prefix_registered; //type: boolean
                                                YLeaf route_srte_nbr_registered; //type: uint16

                                            class RouteUpdateTime : public Entity
                                            {
                                                public:
                                                    RouteUpdateTime();
                                                    ~RouteUpdateTime();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf second; //type: uint32
                                                    YLeaf nanosecond; //type: uint32



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RouteInfo::RouteUpdateTime


                                            class RouteFailTime : public Entity
                                            {
                                                public:
                                                    RouteFailTime();
                                                    ~RouteFailTime();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf second; //type: uint32
                                                    YLeaf nanosecond; //type: uint32



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RouteInfo::RouteFailTime


                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RouteInfo::RouteFailTime> route_fail_time;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RouteInfo::RouteUpdateTime> route_update_time;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RouteInfo


                                        class RoutePath : public Entity
                                        {
                                            public:
                                                RoutePath();
                                                ~RoutePath();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf route_interface_name; //type: string
                                                YLeaf route_next_hop_address; //type: string
                                                YLeaf route_source; //type: string
                                                YLeaf route_lsaid; //type: string
                                                YLeaf route_path_is_mcast_intact; //type: boolean
                                                YLeaf route_path_is_ucmp_path; //type: boolean
                                                YLeaf route_metric; //type: uint32
                                                YLeaf route_path_id; //type: uint16
                                                YLeaf lsa_type; //type: uint8

                                            class RouteBackupPath : public Entity
                                            {
                                                public:
                                                    RouteBackupPath();
                                                    ~RouteBackupPath();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf backup_route_interface_name; //type: string
                                                    YLeaf backup_route_next_hop_address; //type: string
                                                    YLeaf backup_route_source; //type: string
                                                    YLeaf backup_metric; //type: uint32
                                                    YLeaf primary_path; //type: boolean
                                                    YLeaf line_card_disjoint; //type: boolean
                                                    YLeaf downstream; //type: boolean
                                                    YLeaf node_protect; //type: boolean
                                                    YLeaf srlg_disjoint; //type: boolean
                                                    YLeaf backup_remote_lfa; //type: string
                                                    YLeaf backup_repair_list_sizei; //type: uint32
                                                    YLeaf backup_tunnel_interface_name; //type: string

                                                class BackupRepair : public Entity
                                                {
                                                    public:
                                                        BackupRepair();
                                                        ~BackupRepair();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf repair_element_id; //type: string
                                                        YLeaf repair_label; //type: uint32
                                                        YLeaf repair_element_type; //type: uint32



                                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RoutePath::RouteBackupPath::BackupRepair


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RoutePath::RouteBackupPath::BackupRepair> > backup_repair;


                                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RoutePath::RouteBackupPath


                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RoutePath::RouteBackupPath> route_backup_path;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RoutePath


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RouteInfo> route_info;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RoutePath> > route_path;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea> > backup_route_area;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas


                                class RouteAreaInformations : public Entity
                                {
                                    public:
                                        RouteAreaInformations();
                                        ~RouteAreaInformations();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class RouteAreaInformation : public Entity
                                    {
                                        public:
                                            RouteAreaInformation();
                                            ~RouteAreaInformation();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf prefix; //type: string
                                            YLeaf prefix_length; //type: uint32
                                            YLeaf route_prefix; //type: string
                                            YLeaf route_prefix_length; //type: uint32
                                            YLeaf route_metric; //type: uint32
                                            YLeaf route_type; //type: OspfRouteEnum
                                            YLeaf route_connected; //type: boolean

                                        class RouteInfo : public Entity
                                        {
                                            public:
                                                RouteInfo();
                                                ~RouteInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf route_area_id; //type: uint32
                                                YLeaf route_te_metric; //type: uint32
                                                YLeaf route_rib_version; //type: uint32
                                                YLeaf route_spf_version; //type: uint64
                                                YLeaf route_forward_distance; //type: uint32
                                                YLeaf route_source; //type: uint16
                                                YLeaf route_spf_priority; //type: uint8
                                                YLeaf route_auto_excluded; //type: boolean
                                                YLeaf route_srte_prefix_registered; //type: boolean
                                                YLeaf route_srte_nbr_registered; //type: uint16

                                            class RouteUpdateTime : public Entity
                                            {
                                                public:
                                                    RouteUpdateTime();
                                                    ~RouteUpdateTime();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf second; //type: uint32
                                                    YLeaf nanosecond; //type: uint32



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation::RouteInfo::RouteUpdateTime


                                            class RouteFailTime : public Entity
                                            {
                                                public:
                                                    RouteFailTime();
                                                    ~RouteFailTime();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf second; //type: uint32
                                                    YLeaf nanosecond; //type: uint32



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation::RouteInfo::RouteFailTime


                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation::RouteInfo::RouteFailTime> route_fail_time;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation::RouteInfo::RouteUpdateTime> route_update_time;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation::RouteInfo


                                        class RoutePath : public Entity
                                        {
                                            public:
                                                RoutePath();
                                                ~RoutePath();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf route_interface_name; //type: string
                                                YLeaf route_next_hop_address; //type: string
                                                YLeaf route_source; //type: string
                                                YLeaf route_lsaid; //type: string
                                                YLeaf route_path_is_mcast_intact; //type: boolean
                                                YLeaf route_path_is_ucmp_path; //type: boolean
                                                YLeaf route_metric; //type: uint32
                                                YLeaf lsa_type; //type: uint8
                                                YLeaf area_id; //type: uint32
                                                YLeaf area_format; //type: boolean



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation::RoutePath


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation::RouteInfo> route_info;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation::RoutePath> > route_path;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation> > route_area_information;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations


                                class MulticastIntactRouteAreas : public Entity
                                {
                                    public:
                                        MulticastIntactRouteAreas();
                                        ~MulticastIntactRouteAreas();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class MulticastIntactRouteArea : public Entity
                                    {
                                        public:
                                            MulticastIntactRouteArea();
                                            ~MulticastIntactRouteArea();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf prefix; //type: string
                                            YLeaf prefix_length; //type: uint32
                                            YLeaf route_prefix; //type: string
                                            YLeaf route_prefix_length; //type: uint32
                                            YLeaf route_metric; //type: uint32
                                            YLeaf route_type; //type: OspfRouteEnum
                                            YLeaf route_connected; //type: boolean

                                        class RouteInfo : public Entity
                                        {
                                            public:
                                                RouteInfo();
                                                ~RouteInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf route_area_id; //type: uint32
                                                YLeaf route_te_metric; //type: uint32
                                                YLeaf route_rib_version; //type: uint32
                                                YLeaf route_spf_version; //type: uint64
                                                YLeaf route_forward_distance; //type: uint32
                                                YLeaf route_source; //type: uint16
                                                YLeaf route_spf_priority; //type: uint8
                                                YLeaf route_auto_excluded; //type: boolean
                                                YLeaf route_srte_prefix_registered; //type: boolean
                                                YLeaf route_srte_nbr_registered; //type: uint16

                                            class RouteUpdateTime : public Entity
                                            {
                                                public:
                                                    RouteUpdateTime();
                                                    ~RouteUpdateTime();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf second; //type: uint32
                                                    YLeaf nanosecond; //type: uint32



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea::RouteInfo::RouteUpdateTime


                                            class RouteFailTime : public Entity
                                            {
                                                public:
                                                    RouteFailTime();
                                                    ~RouteFailTime();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf second; //type: uint32
                                                    YLeaf nanosecond; //type: uint32



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea::RouteInfo::RouteFailTime


                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea::RouteInfo::RouteFailTime> route_fail_time;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea::RouteInfo::RouteUpdateTime> route_update_time;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea::RouteInfo


                                        class RoutePath : public Entity
                                        {
                                            public:
                                                RoutePath();
                                                ~RoutePath();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf route_interface_name; //type: string
                                                YLeaf route_next_hop_address; //type: string
                                                YLeaf route_source; //type: string
                                                YLeaf route_lsaid; //type: string
                                                YLeaf route_path_is_mcast_intact; //type: boolean
                                                YLeaf route_path_is_ucmp_path; //type: boolean
                                                YLeaf route_metric; //type: uint32
                                                YLeaf lsa_type; //type: uint8
                                                YLeaf area_id; //type: uint32
                                                YLeaf area_format; //type: boolean



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea::RoutePath


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea::RouteInfo> route_info;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea::RoutePath> > route_path;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea> > multicast_intact_route_area;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas


                                class SummaryAreaInformation : public Entity
                                {
                                    public:
                                        SummaryAreaInformation();
                                        ~SummaryAreaInformation();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf failures; //type: uint32
                                        YLeaf failure_address; //type: string

                                    class FailureTime : public Entity
                                    {
                                        public:
                                            FailureTime();
                                            ~FailureTime();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf second; //type: uint32
                                            YLeaf nanosecond; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::SummaryAreaInformation::FailureTime


                                    class Common : public Entity
                                    {
                                        public:
                                            Common();
                                            ~Common();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf external_type1s; //type: uint32
                                            YLeaf external_type2s; //type: uint32
                                            YLeaf external_nssa_type1s; //type: uint32
                                            YLeaf external_nssa_type2s; //type: uint32
                                            YLeaf inter_areas; //type: uint32
                                            YLeaf intra_areas; //type: uint32
                                            YLeaf total; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::SummaryAreaInformation::Common


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::SummaryAreaInformation::Common> common;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::SummaryAreaInformation::FailureTime> failure_time;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::SummaryAreaInformation


                                class LocalRouteAreas : public Entity
                                {
                                    public:
                                        LocalRouteAreas();
                                        ~LocalRouteAreas();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class LocalRouteArea : public Entity
                                    {
                                        public:
                                            LocalRouteArea();
                                            ~LocalRouteArea();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf prefix; //type: string
                                            YLeaf prefix_length; //type: uint32
                                            YLeaf route_prefix; //type: string
                                            YLeaf route_prefix_length; //type: uint32
                                            YLeaf route_metric; //type: uint32
                                            YLeaf route_type; //type: OspfRouteEnum
                                            YLeaf route_connected; //type: boolean

                                        class RouteInfo : public Entity
                                        {
                                            public:
                                                RouteInfo();
                                                ~RouteInfo();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf route_area_id; //type: uint32
                                                YLeaf route_te_metric; //type: uint32
                                                YLeaf route_rib_version; //type: uint32
                                                YLeaf route_spf_version; //type: uint64
                                                YLeaf route_forward_distance; //type: uint32
                                                YLeaf route_source; //type: uint16
                                                YLeaf route_spf_priority; //type: uint8
                                                YLeaf route_auto_excluded; //type: boolean
                                                YLeaf route_srte_prefix_registered; //type: boolean
                                                YLeaf route_srte_nbr_registered; //type: uint16

                                            class RouteUpdateTime : public Entity
                                            {
                                                public:
                                                    RouteUpdateTime();
                                                    ~RouteUpdateTime();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf second; //type: uint32
                                                    YLeaf nanosecond; //type: uint32



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea::RouteInfo::RouteUpdateTime


                                            class RouteFailTime : public Entity
                                            {
                                                public:
                                                    RouteFailTime();
                                                    ~RouteFailTime();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf second; //type: uint32
                                                    YLeaf nanosecond; //type: uint32



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea::RouteInfo::RouteFailTime


                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea::RouteInfo::RouteFailTime> route_fail_time;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea::RouteInfo::RouteUpdateTime> route_update_time;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea::RouteInfo


                                        class RoutePath : public Entity
                                        {
                                            public:
                                                RoutePath();
                                                ~RoutePath();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf route_interface_name; //type: string
                                                YLeaf route_next_hop_address; //type: string
                                                YLeaf route_source; //type: string
                                                YLeaf route_lsaid; //type: string
                                                YLeaf route_path_is_mcast_intact; //type: boolean
                                                YLeaf route_path_is_ucmp_path; //type: boolean
                                                YLeaf route_metric; //type: uint32
                                                YLeaf lsa_type; //type: uint8
                                                YLeaf area_id; //type: uint32
                                                YLeaf area_format; //type: boolean



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea::RoutePath


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea::RouteInfo> route_info;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea::RoutePath> > route_path;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea> > local_route_area;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas> backup_route_areas;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas> connected_route_areas;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas> local_route_areas;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas> multicast_intact_backup_route_areas;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas> multicast_intact_route_areas;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations> route_area_informations;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea::SummaryAreaInformation> summary_area_information;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas::RouteArea> > route_area;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas


                        class RouteTable : public Entity
                        {
                            public:
                                RouteTable();
                                ~RouteTable();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class Route : public Entity
                            {
                                public:
                                    Route();
                                    ~Route();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf prefix; //type: string
                                    YLeaf prefix_length; //type: uint32
                                    YLeaf route_prefix; //type: string
                                    YLeaf route_prefix_length; //type: uint32
                                    YLeaf route_metric; //type: uint32
                                    YLeaf route_type; //type: OspfRouteEnum
                                    YLeaf route_connected; //type: boolean

                                class RouteInfo : public Entity
                                {
                                    public:
                                        RouteInfo();
                                        ~RouteInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf route_area_id; //type: uint32
                                        YLeaf route_te_metric; //type: uint32
                                        YLeaf route_rib_version; //type: uint32
                                        YLeaf route_spf_version; //type: uint64
                                        YLeaf route_forward_distance; //type: uint32
                                        YLeaf route_source; //type: uint16
                                        YLeaf route_spf_priority; //type: uint8
                                        YLeaf route_auto_excluded; //type: boolean
                                        YLeaf route_srte_prefix_registered; //type: boolean
                                        YLeaf route_srte_nbr_registered; //type: uint16

                                    class RouteUpdateTime : public Entity
                                    {
                                        public:
                                            RouteUpdateTime();
                                            ~RouteUpdateTime();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf second; //type: uint32
                                            YLeaf nanosecond; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteTable::Route::RouteInfo::RouteUpdateTime


                                    class RouteFailTime : public Entity
                                    {
                                        public:
                                            RouteFailTime();
                                            ~RouteFailTime();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf second; //type: uint32
                                            YLeaf nanosecond; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteTable::Route::RouteInfo::RouteFailTime


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteTable::Route::RouteInfo::RouteFailTime> route_fail_time;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteTable::Route::RouteInfo::RouteUpdateTime> route_update_time;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteTable::Route::RouteInfo


                                class RoutePath : public Entity
                                {
                                    public:
                                        RoutePath();
                                        ~RoutePath();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf route_interface_name; //type: string
                                        YLeaf route_next_hop_address; //type: string
                                        YLeaf route_source; //type: string
                                        YLeaf route_lsaid; //type: string
                                        YLeaf route_path_is_mcast_intact; //type: boolean
                                        YLeaf route_path_is_ucmp_path; //type: boolean
                                        YLeaf route_metric; //type: uint32
                                        YLeaf lsa_type; //type: uint8
                                        YLeaf area_id; //type: uint32
                                        YLeaf area_format; //type: boolean



                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteTable::Route::RoutePath


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteTable::Route::RouteInfo> route_info;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteTable::Route::RoutePath> > route_path;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteTable::Route


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteTable::Route> > route;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteTable


                        class ExternalRoutes : public Entity
                        {
                            public:
                                ExternalRoutes();
                                ~ExternalRoutes();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class ExternalRoute : public Entity
                            {
                                public:
                                    ExternalRoute();
                                    ~ExternalRoute();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf prefix; //type: string
                                    YLeaf prefix_length; //type: uint32

                                class RouteInformation_ : public Entity
                                {
                                    public:
                                        RouteInformation_();
                                        ~RouteInformation_();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf route_prefix; //type: string
                                        YLeaf route_prefix_length; //type: uint32
                                        YLeaf route_metric; //type: uint32
                                        YLeaf route_type; //type: OspfRouteEnum
                                        YLeaf route_connected; //type: boolean

                                    class RouteInfo : public Entity
                                    {
                                        public:
                                            RouteInfo();
                                            ~RouteInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf route_area_id; //type: uint32
                                            YLeaf route_te_metric; //type: uint32
                                            YLeaf route_rib_version; //type: uint32
                                            YLeaf route_spf_version; //type: uint64
                                            YLeaf route_forward_distance; //type: uint32
                                            YLeaf route_source; //type: uint16
                                            YLeaf route_spf_priority; //type: uint8
                                            YLeaf route_auto_excluded; //type: boolean
                                            YLeaf route_srte_prefix_registered; //type: boolean
                                            YLeaf route_srte_nbr_registered; //type: uint16

                                        class RouteUpdateTime : public Entity
                                        {
                                            public:
                                                RouteUpdateTime();
                                                ~RouteUpdateTime();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf second; //type: uint32
                                                YLeaf nanosecond; //type: uint32



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_::RouteInfo::RouteUpdateTime


                                        class RouteFailTime : public Entity
                                        {
                                            public:
                                                RouteFailTime();
                                                ~RouteFailTime();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf second; //type: uint32
                                                YLeaf nanosecond; //type: uint32



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_::RouteInfo::RouteFailTime


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_::RouteInfo::RouteFailTime> route_fail_time;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_::RouteInfo::RouteUpdateTime> route_update_time;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_::RouteInfo


                                    class RoutePath : public Entity
                                    {
                                        public:
                                            RoutePath();
                                            ~RoutePath();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf route_interface_name; //type: string
                                            YLeaf route_next_hop_address; //type: string
                                            YLeaf route_source; //type: string
                                            YLeaf route_lsaid; //type: string
                                            YLeaf route_path_is_mcast_intact; //type: boolean
                                            YLeaf route_path_is_ucmp_path; //type: boolean
                                            YLeaf route_metric; //type: uint32
                                            YLeaf lsa_type; //type: uint8
                                            YLeaf area_id; //type: uint32
                                            YLeaf area_format; //type: boolean



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_::RoutePath


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_::RouteInfo> route_info;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_::RoutePath> > route_path;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_


                                class ProtocolName : public Entity
                                {
                                    public:
                                        ProtocolName();
                                        ~ProtocolName();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf protocol_type; //type: RedistProtocolEnum
                                        YLeaf isis_instance_id; //type: string
                                        YLeaf ospf_process_id; //type: string
                                        YLeaf bgp_as_number; //type: string
                                        YLeaf eigrp_as_number; //type: string
                                        YLeaf connected_instance; //type: string



                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ExternalRoutes::ExternalRoute::ProtocolName


                                class RouteExtendedCommunity : public Entity
                                {
                                    public:
                                        RouteExtendedCommunity();
                                        ~RouteExtendedCommunity();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf extended_community_domain_id_value; //type: string
                                        YLeaf extended_communityl_domain_id_type; //type: uint16
                                        YLeaf extended_community_area_id; //type: uint32
                                        YLeaf extended_community_router_id; //type: string
                                        YLeaf extended_community_route_type; //type: uint8
                                        YLeaf extended_community_options; //type: uint8



                                }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteExtendedCommunity


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ExternalRoutes::ExternalRoute::ProtocolName> protocol_name;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteExtendedCommunity> route_extended_community;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_> route_information;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ExternalRoutes::ExternalRoute


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ExternalRoutes::ExternalRoute> > external_route;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ExternalRoutes


                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::BackupRoutes> backup_routes;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ConnectedRoutes> connected_routes;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::ExternalRoutes> external_routes;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::LocalRoutes> local_routes;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactBackupRoutes> multicast_intact_backup_routes;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::MulticastIntactRouteTable> multicast_intact_route_table;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteAreas> route_areas;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::RouteTable> route_table;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation::SummaryInformation> summary_information;


                    }; // Ospf::Processes::Process::Vrfs::Vrf::RouteInformation


                    class InterfaceInformation : public Entity
                    {
                        public:
                            InterfaceInformation();
                            ~InterfaceInformation();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class VirtualLinks : public Entity
                        {
                            public:
                                VirtualLinks();
                                ~VirtualLinks();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class VirtualLink : public Entity
                            {
                                public:
                                    VirtualLink();
                                    ~VirtualLink();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf virtual_link_name; //type: string
                                    YLeaf virtual_link_name_xr; //type: string
                                    YLeaf virtual_link_neighbor_id; //type: string
                                    YLeaf virtual_link_state; //type: OspfInterfaceStateEnum
                                    YLeaf virtual_link_demand_circuit; //type: boolean
                                    YLeaf virtual_link_dc_bitless_lsa; //type: uint32
                                    YLeaf transit_area; //type: string
                                    YLeaf virtual_link_interface_name; //type: string
                                    YLeaf virtual_link_cost; //type: uint16
                                    YLeaf virual_link_transmission_delay; //type: uint16
                                    YLeaf virtual_link_hello_interval; //type: uint32
                                    YLeaf virtual_link_hello_interval_ms; //type: uint32
                                    YLeaf virtual_link_dead_interval; //type: uint32
                                    YLeaf virtual_link_wait_interval; //type: uint32
                                    YLeaf virtaul_link_retransmission_interval; //type: uint32
                                    YLeaf virtual_link_next_hello; //type: uint32
                                    YLeaf virtual_link_next_hello_ms; //type: uint32
                                    YLeaf virtual_link_passive; //type: boolean
                                    YLeaf virtual_link_authentication_type; //type: AuthenticationEnum
                                    YLeaf virtual_link_youngest_md_key; //type: boolean
                                    YLeaf virtual_link_youngest_md_key_id; //type: uint16
                                    YLeaf virtual_link_old_md_key_count; //type: uint32
                                    YLeaf virtual_link_keychain_id; //type: uint64
                                    YLeaf virtual_link_nsf_enabled; //type: boolean
                                    YLeaf virtual_link_nsf; //type: boolean
                                    YLeaf virtual_link_last_nsf; //type: uint32
                                    YLeafList virtual_link_md_key; //type: list of  uint16

                                class VirtualLinkNeighbor : public Entity
                                {
                                    public:
                                        VirtualLinkNeighbor();
                                        ~VirtualLinkNeighbor();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf virtual_link_suppress_hello; //type: boolean
                                        YLeaf virtual_link_state; //type: NeighborStateEnum

                                    class VirtualLinkRetransmissoin : public Entity
                                    {
                                        public:
                                            VirtualLinkRetransmissoin();
                                            ~VirtualLinkRetransmissoin();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf dbd_retransmission_count; //type: uint32
                                            YLeaf dbd_retransmission_total_count; //type: uint32
                                            YLeaf area_flooding_index; //type: uint32
                                            YLeaf as_flood_index; //type: uint32
                                            YLeaf neighbor_retransmission_count; //type: uint32
                                            YLeaf number_of_retransmissions; //type: uint32
                                            YLeaf area_first_flood_information; //type: uint32
                                            YLeaf area_first_flood_information_index; //type: uint32
                                            YLeaf as_first_flood_information; //type: uint32
                                            YLeaf as_first_flood_information_index; //type: uint32
                                            YLeaf area_next_flood_information; //type: uint32
                                            YLeaf area_next_flood_information_index; //type: uint32
                                            YLeaf as_next_flood_information; //type: uint32
                                            YLeaf as_next_flood_information_index; //type: uint32
                                            YLeaf last_retransmission_length; //type: uint32
                                            YLeaf maximum_retransmission_length; //type: uint32
                                            YLeaf last_retransmission_time; //type: uint32
                                            YLeaf maximum_retransmission_time; //type: uint32
                                            YLeaf lsa_retransmission_timer; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::VirtualLinks::VirtualLink::VirtualLinkNeighbor::VirtualLinkRetransmissoin


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::VirtualLinks::VirtualLink::VirtualLinkNeighbor::VirtualLinkRetransmissoin> virtual_link_retransmissoin;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::VirtualLinks::VirtualLink::VirtualLinkNeighbor


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::VirtualLinks::VirtualLink::VirtualLinkNeighbor> virtual_link_neighbor;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::VirtualLinks::VirtualLink


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::VirtualLinks::VirtualLink> > virtual_link;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::VirtualLinks


                        class InterfaceBriefs : public Entity
                        {
                            public:
                                InterfaceBriefs();
                                ~InterfaceBriefs();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class InterfaceBrief : public Entity
                            {
                                public:
                                    InterfaceBrief();
                                    ~InterfaceBrief();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf interface_name; //type: string
                                    YLeaf interface_name_xr; //type: string
                                    YLeaf interface_area; //type: string
                                    YLeaf interface_address; //type: string
                                    YLeaf interface_mask; //type: uint32
                                    YLeaf interface_link_cost; //type: uint16
                                    YLeaf ospf_interface_state; //type: OspfInterfaceStateEnum
                                    YLeaf interface_fast_detect_hold_down; //type: boolean
                                    YLeaf interface_neighbor_count; //type: uint16
                                    YLeaf interface_adj_neighbor_count; //type: uint16
                                    YLeaf interfaceis_madj; //type: boolean
                                    YLeaf interface_madj_count; //type: uint16

                                class InterfaceMadj : public Entity
                                {
                                    public:
                                        InterfaceMadj();
                                        ~InterfaceMadj();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf interface_area; //type: string
                                        YLeaf madj_area_id; //type: uint32
                                        YLeaf interface_neighbor_count; //type: uint16
                                        YLeaf interface_adj_neighbor_count; //type: uint16
                                        YLeaf interface_link_cost; //type: uint16
                                        YLeaf ospf_interface_state; //type: OspfInterfaceStateEnum



                                }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::InterfaceBriefs::InterfaceBrief::InterfaceMadj


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::InterfaceBriefs::InterfaceBrief::InterfaceMadj> > interface_madj;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::InterfaceBriefs::InterfaceBrief


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::InterfaceBriefs::InterfaceBrief> > interface_brief;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::InterfaceBriefs


                        class Interfaces : public Entity
                        {
                            public:
                                Interfaces();
                                ~Interfaces();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class Interface : public Entity
                            {
                                public:
                                    Interface();
                                    ~Interface();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf interface_name; //type: string
                                    YLeaf interface_name_xr; //type: string
                                    YLeaf interface_state; //type: InterfaceStateEnum
                                    YLeaf interface_line_state; //type: boolean
                                    YLeaf interface_address; //type: string
                                    YLeaf interface_mask; //type: uint32
                                    YLeaf interface_area; //type: string
                                    YLeaf interface_sid; //type: uint32
                                    YLeaf interface_sid_php_off; //type: boolean
                                    YLeaf interface_sid_n_flag_clear; //type: boolean
                                    YLeaf interface_strict_spf_sid; //type: uint32
                                    YLeaf interface_strict_spf_sid_php_off; //type: boolean
                                    YLeaf interface_strict_spf_sid_n_flag_clear; //type: boolean
                                    YLeaf interface_router_id; //type: string
                                    YLeaf network_type; //type: InterfaceEnum
                                    YLeaf ip_mtu; //type: uint16
                                    YLeaf maximum_packet_size; //type: uint16
                                    YLeaf interface_tunnel_flags; //type: uint32
                                    YLeaf interface_link_cost; //type: uint16
                                    YLeaf interface_bandwidth; //type: uint32
                                    YLeaf cfg_cost_fallback; //type: boolean
                                    YLeaf interface_cost_fallback; //type: uint16
                                    YLeaf cost_fallback_active; //type: boolean
                                    YLeaf configured_ldp_sync; //type: boolean
                                    YLeaf configured_ldp_sync_igp_shortcuts; //type: boolean
                                    YLeaf interface_ldp_sync; //type: boolean
                                    YLeaf configured_demand_circuit; //type: boolean
                                    YLeaf interface_demand_circuit; //type: boolean
                                    YLeaf interface_dc_bitless_lsa_count; //type: uint32
                                    YLeaf transmission_delay; //type: uint16
                                    YLeaf ospf_interface_state; //type: OspfInterfaceStateEnum
                                    YLeaf interface_priority; //type: uint8
                                    YLeaf designated_router; //type: boolean
                                    YLeaf designated_router_id; //type: string
                                    YLeaf designated_router_address; //type: string
                                    YLeaf backup_designated_router; //type: boolean
                                    YLeaf backup_designated_router_id; //type: string
                                    YLeaf backup_designated_router_address; //type: string
                                    YLeaf network_lsa_flush_timer; //type: uint32
                                    YLeaf interface_lsa_filter; //type: boolean
                                    YLeaf hello_interval; //type: uint32
                                    YLeaf hello_interval_ms; //type: uint32
                                    YLeaf dead_interval; //type: uint32
                                    YLeaf wait_interval; //type: uint32
                                    YLeaf interface_retransmission_interrval; //type: uint32
                                    YLeaf interface_nsf_enabled; //type: boolean
                                    YLeaf interface_nsf; //type: boolean
                                    YLeaf interface_last_nsf; //type: uint32
                                    YLeaf passive_interface; //type: boolean
                                    YLeaf next_hello_time; //type: uint32
                                    YLeaf next_hello_time_ms; //type: uint32
                                    YLeaf ttl_security_enabled; //type: boolean
                                    YLeaf ttl_security_hop_count; //type: uint32
                                    YLeaf interfaceis_madj; //type: boolean
                                    YLeaf interface_madj_count; //type: uint16
                                    YLeaf prefix_suppress_primary_addresses; //type: boolean
                                    YLeaf prefix_suppress_secondary_addresses; //type: boolean
                                    YLeaf is_loopback_stub_network; //type: boolean
                                    YLeaf interface_ack_list_count; //type: uint32
                                    YLeaf interface_ack_list_high_watermark; //type: uint32
                                    YLeaf registered_for_link_down_fast_detection; //type: boolean
                                    YLeaf fast_detect_hold_down_time; //type: uint32
                                    YLeaf interface_fast_detect_hold_down; //type: boolean
                                    YLeaf fast_detect_hold_down_time_remaining; //type: uint32
                                    YLeaf fast_reroute_type; //type: IpfrrEnum
                                    YLeaf fast_reroute_topology_independent_lfa; //type: boolean
                                    YLeafList srlg; //type: list of  uint32

                                class InterfaceBfdInformation : public Entity
                                {
                                    public:
                                        InterfaceBfdInformation();
                                        ~InterfaceBfdInformation();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf bfd_intf_enable_mode; //type: uint32
                                        YLeaf interval; //type: uint32
                                        YLeaf detection_multiplier; //type: uint32



                                }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::Interfaces::Interface::InterfaceBfdInformation


                                class ActiveInterface : public Entity
                                {
                                    public:
                                        ActiveInterface();
                                        ~ActiveInterface();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf wait_time; //type: uint32
                                        YLeaf interface_area_flood_index; //type: uint32
                                        YLeaf interface_as_flood_index; //type: uint32
                                        YLeaf interface_flood_length; //type: uint32
                                        YLeaf interface_area_next_flood; //type: uint32
                                        YLeaf interface_area_next_flood_index; //type: uint32
                                        YLeaf interface_as_next_flood; //type: uint32
                                        YLeaf interface_as_next_flood_index; //type: uint32
                                        YLeaf flood_scan_length; //type: uint32
                                        YLeaf maximum_flood_length; //type: uint32
                                        YLeaf last_flood_time; //type: uint32
                                        YLeaf maximum_flood_time; //type: uint32
                                        YLeaf interface_flood_pacing_timer; //type: uint32
                                        YLeaf interface_neighbor_count; //type: uint16
                                        YLeaf suppress_hello_count; //type: uint16
                                        YLeaf interface_authentication_type; //type: AuthenticationEnum
                                        YLeaf youngest_md_key; //type: boolean
                                        YLeaf old_md5_key_neighbor_count; //type: uint32
                                        YLeaf youngest_md_key_id; //type: uint16
                                        YLeaf keychain_id; //type: uint64
                                        YLeafList md_keys; //type: list of  uint16



                                }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::Interfaces::Interface::ActiveInterface


                                class InterfaceNeighbor : public Entity
                                {
                                    public:
                                        InterfaceNeighbor();
                                        ~InterfaceNeighbor();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf interface_neighbor_id; //type: string
                                        YLeaf interface_neighbor_cost; //type: uint32
                                        YLeaf neighbor_dr; //type: boolean
                                        YLeaf neighbor_bdr; //type: boolean
                                        YLeaf suppress_hello; //type: boolean



                                }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::Interfaces::Interface::InterfaceNeighbor


                                class InterfaceMadj : public Entity
                                {
                                    public:
                                        InterfaceMadj();
                                        ~InterfaceMadj();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf interface_area; //type: string
                                        YLeaf madj_area_id; //type: uint32
                                        YLeaf interface_neighbor_count; //type: uint16
                                        YLeaf interface_adj_neighbor_count; //type: uint16
                                        YLeaf interface_link_cost; //type: uint16
                                        YLeaf ospf_interface_state; //type: OspfInterfaceStateEnum



                                }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::Interfaces::Interface::InterfaceMadj


                                class IpfrrTiebreakers : public Entity
                                {
                                    public:
                                        IpfrrTiebreakers();
                                        ~IpfrrTiebreakers();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf tiebreaker_type; //type: IpfrrTbrkrEnum
                                        YLeaf tiebreaker_index; //type: uint32



                                }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::Interfaces::Interface::IpfrrTiebreakers


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::Interfaces::Interface::ActiveInterface> active_interface;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::Interfaces::Interface::InterfaceBfdInformation> interface_bfd_information;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::Interfaces::Interface::InterfaceMadj> > interface_madj;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::Interfaces::Interface::InterfaceNeighbor> > interface_neighbor;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::Interfaces::Interface::IpfrrTiebreakers> > ipfrr_tiebreakers;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::Interfaces::Interface


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::Interfaces::Interface> > interface;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::Interfaces


                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::InterfaceBriefs> interface_briefs;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::Interfaces> interfaces;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation::VirtualLinks> virtual_links;


                    }; // Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation


                    class BorderRouters : public Entity
                    {
                        public:
                            BorderRouters();
                            ~BorderRouters();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class BorderRouter : public Entity
                        {
                            public:
                                BorderRouter();
                                ~BorderRouter();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf border_router_id; //type: string
                                YLeaf border_router_id_xr; //type: string

                            class BorderRouterPath : public Entity
                            {
                                public:
                                    BorderRouterPath();
                                    ~BorderRouterPath();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf border_router_route_type; //type: OspfRouteEnum
                                    YLeaf border_router_route_metric; //type: uint32
                                    YLeaf border_router_next_hop; //type: string
                                    YLeaf border_router_next_hop_interface_name; //type: string
                                    YLeaf border_router_type; //type: OspfBrEnum
                                    YLeaf border_router_area_id; //type: string
                                    YLeaf spf_version; //type: uint64



                            }; // Ospf::Processes::Process::Vrfs::Vrf::BorderRouters::BorderRouter::BorderRouterPath


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::BorderRouters::BorderRouter::BorderRouterPath> > border_router_path;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::BorderRouters::BorderRouter


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::BorderRouters::BorderRouter> > border_router;


                    }; // Ospf::Processes::Process::Vrfs::Vrf::BorderRouters


                    class ProcessInformation : public Entity
                    {
                        public:
                            ProcessInformation();
                            ~ProcessInformation();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class ProtocolAreas : public Entity
                        {
                            public:
                                ProtocolAreas();
                                ~ProtocolAreas();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class ProtocolArea : public Entity
                            {
                                public:
                                    ProtocolArea();
                                    ~ProtocolArea();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf area_id; //type: int32
                                    YLeaf address; //type: string
                                    YLeaf protcol_area; //type: string
                                    YLeaf protocol_mpls; //type: boolean
                                    YLeaf protocol_area_dist_list_in; //type: string

                                class ProtocolInterface : public Entity
                                {
                                    public:
                                        ProtocolInterface();
                                        ~ProtocolInterface();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf protocol_interface_name; //type: string
                                        YLeaf protocol_authentication_type; //type: AuthenticationEnum
                                        YLeaf protocol_interface_dist_list_in; //type: string



                                }; // Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProtocolAreas::ProtocolArea::ProtocolInterface


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProtocolAreas::ProtocolArea::ProtocolInterface> > protocol_interface;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProtocolAreas::ProtocolArea


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProtocolAreas::ProtocolArea> > protocol_area;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProtocolAreas


                        class ProtocolSummary : public Entity
                        {
                            public:
                                ProtocolSummary();
                                ~ProtocolSummary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf protocol_router_id; //type: string
                                YLeaf protocol_distance; //type: uint32
                                YLeaf administrative_distance_inter_area; //type: uint32
                                YLeaf administrative_distance_external; //type: uint32
                                YLeaf protocol_nsf; //type: boolean
                                YLeaf dist_list_in; //type: string



                        }; // Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProtocolSummary


                        class Redistributions : public Entity
                        {
                            public:
                                Redistributions();
                                ~Redistributions();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class Redistribution : public Entity
                            {
                                public:
                                    Redistribution();
                                    ~Redistribution();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf protocol_name; //type: string
                                    YLeaf process_name; //type: string
                                    YLeaf metric_flag; //type: boolean
                                    YLeaf metric; //type: uint32
                                    YLeaf classless; //type: boolean
                                    YLeaf nssa_only; //type: boolean

                                class RedistributionProtocol : public Entity
                                {
                                    public:
                                        RedistributionProtocol();
                                        ~RedistributionProtocol();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf protocol_type; //type: RedistProtocolEnum
                                        YLeaf isis_instance_id; //type: string
                                        YLeaf ospf_process_id; //type: string
                                        YLeaf bgp_as_number; //type: string
                                        YLeaf eigrp_as_number; //type: string
                                        YLeaf connected_instance; //type: string



                                }; // Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::Redistributions::Redistribution::RedistributionProtocol


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::Redistributions::Redistribution::RedistributionProtocol> redistribution_protocol;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::Redistributions::Redistribution


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::Redistributions::Redistribution> > redistribution;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::Redistributions


                        class ProcessAreas : public Entity
                        {
                            public:
                                ProcessAreas();
                                ~ProcessAreas();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class ProcessArea : public Entity
                            {
                                public:
                                    ProcessArea();
                                    ~ProcessArea();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf area_id; //type: int32
                                    YLeaf address; //type: string
                                    YLeaf area_id_string; //type: string
                                    YLeaf backbone_area_active; //type: boolean
                                    YLeaf area_interface_count; //type: uint16
                                    YLeaf area_stub; //type: boolean
                                    YLeaf area_total_stub; //type: boolean
                                    YLeaf stub_default_cost; //type: uint16
                                    YLeaf area_nssa; //type: boolean
                                    YLeaf nssa_no_redistribution; //type: boolean
                                    YLeaf nssa_translate; //type: boolean
                                    YLeaf nssa_default; //type: boolean
                                    YLeaf te_enabled; //type: boolean
                                    YLeaf te_topology_version; //type: uint32
                                    YLeaf external_out; //type: boolean
                                    YLeaf summary_in; //type: boolean
                                    YLeaf segment_routing; //type: uint32
                                    YLeaf sr_strict_spf_cap; //type: boolean
                                    YLeaf sr_strict_spfsids_available; //type: boolean
                                    YLeaf authentication_type; //type: AuthenticationEnum
                                    YLeaf spf_count; //type: uint32
                                    YLeaf area_policy_in; //type: boolean
                                    YLeaf area_policy_in_name; //type: string
                                    YLeaf area_policy_out; //type: boolean
                                    YLeaf area_policy_out_name; //type: string
                                    YLeaf area_lsa_count; //type: uint32
                                    YLeaf area_lsa_checksum; //type: uint32
                                    YLeaf area_opaque_lsa_count; //type: uint32
                                    YLeaf area_opaque_lsa_checksum; //type: uint32
                                    YLeaf area_dc_bitless_lsa_count; //type: uint32
                                    YLeaf indication_lsa_count; //type: uint32
                                    YLeaf dna_lsa_count; //type: uint32
                                    YLeaf flood_list_length; //type: uint32
                                    YLeaf area_lfa_interface_count; //type: uint32
                                    YLeaf area_per_prefix_lfa_interface_count; //type: uint32
                                    YLeaf area_lfa_revision; //type: uint32
                                    YLeaf area_adj_stag_num_nbr_forming; //type: uint16
                                    YLeaf area_num_nbr_full; //type: uint16

                                class AreaRange : public Entity
                                {
                                    public:
                                        AreaRange();
                                        ~AreaRange();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf range_prefix; //type: string
                                        YLeaf range_mask; //type: string
                                        YLeaf cost; //type: uint32
                                        YLeaf advertise_flag; //type: boolean



                                }; // Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessAreas::ProcessArea::AreaRange


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessAreas::ProcessArea::AreaRange> > area_range;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessAreas::ProcessArea


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessAreas::ProcessArea> > process_area;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessAreas


                        class ProcessSummary : public Entity
                        {
                            public:
                                ProcessSummary();
                                ~ProcessSummary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf role_standby; //type: boolean
                                YLeaf role; //type: uint32
                                YLeaf nsr_enabled; //type: boolean
                                YLeaf nsr_switchover_on_restart; //type: boolean
                                YLeaf igp_intact_on; //type: boolean
                                YLeaf router_id; //type: string
                                YLeaf tos_options; //type: uint8
                                YLeaf opaque_capable; //type: boolean
                                YLeaf area_border_router; //type: boolean
                                YLeaf as_border_router; //type: boolean
                                YLeaf vrf_lite_enabled; //type: boolean
                                YLeaf maximum_metric_start; //type: boolean
                                YLeaf maximum_metric_start_timer; //type: uint32
                                YLeaf maximum_metric_set_reason; //type: MaxMetricSetReasonEnum
                                YLeaf maximum_metric_abr_off_mode; //type: boolean
                                YLeaf maximum_metric_abr_off_reasons; //type: OspfMaxMetricAbrOffReasonsEnum
                                YLeaf maximum_metric_abr_off_buffer_time; //type: uint32
                                YLeaf spf_start_time; //type: uint16
                                YLeaf spf_hold_time; //type: uint16
                                YLeaf spf_maximum_time; //type: uint16
                                YLeaf spf_start_time_u32; //type: uint32
                                YLeaf spf_hold_time_u32; //type: uint32
                                YLeaf spf_maximum_time_u32; //type: uint32
                                YLeaf spf_prefix_priority; //type: boolean
                                YLeaf spf_prefix_priority_route_policy; //type: string
                                YLeaf lsa_start_time; //type: int32
                                YLeaf lsa_hold_time; //type: uint32
                                YLeaf lsa_maximum_time; //type: uint32
                                YLeaf minimum_lsa_interval; //type: uint16
                                YLeaf minimum_lsa_interval_u32; //type: uint32
                                YLeaf lsa_refresh_interval; //type: uint32
                                YLeaf minimum_lsa_arrival_interval; //type: uint16
                                YLeaf minimum_lsa_arrival_interval_u32; //type: uint32
                                YLeaf if_flood_pacing_interval; //type: uint16
                                YLeaf if_retrans_pacing_interval; //type: uint16
                                YLeaf adj_stag_init_num_nbr; //type: uint16
                                YLeaf adj_stag_max_num_nbr; //type: uint16
                                YLeaf adj_stagger_enabled; //type: boolean
                                YLeaf adj_stag_num_nbr_forming; //type: uint16
                                YLeaf number_nbrs_full; //type: uint16
                                YLeaf as_lsa_count; //type: uint32
                                YLeaf as_lsa_checksum; //type: uint32
                                YLeaf opaque_lsa_count; //type: uint32
                                YLeaf opaque_lsa_checksum; //type: uint32
                                YLeaf as_dc_bitless_lsa_count; //type: uint32
                                YLeaf as_dna_lsa_count; //type: uint32
                                YLeaf area_count; //type: uint16
                                YLeaf normal_area_count; //type: uint16
                                YLeaf stub_area_count; //type: uint16
                                YLeaf nssa_area_count; //type: uint16
                                YLeaf maximum_interfaces; //type: uint32
                                YLeaf as_lsa_flood_list_length; //type: uint32
                                YLeaf nsf_enabled; //type: boolean
                                YLeaf last_nsf_time; //type: uint32
                                YLeaf nsf_time; //type: uint32
                                YLeaf redistribution_limit; //type: uint32
                                YLeaf redistribution_threshold; //type: uint32
                                YLeaf redistribution_limit_warn; //type: boolean
                                YLeaf graceful_shutdown_retention_time; //type: uint32
                                YLeaf graceful_shutdown_state; //type: GsStateEnum
                                YLeaf table_prefix_limit_reached; //type: boolean
                                YLeaf non_self_lsa_count; //type: uint32
                                YLeaf max_lsa_enabled; //type: boolean
                                YLeaf max_lsa_limit; //type: uint32
                                YLeaf max_lsa_treshold; //type: uint32
                                YLeaf max_lsa_warning_only; //type: boolean
                                YLeaf max_lsa_ignore_time; //type: uint32
                                YLeaf max_lsa_reset_time; //type: uint32
                                YLeaf max_lsa_ignore_limit; //type: uint32
                                YLeaf max_lsa_ignore_count; //type: uint32
                                YLeaf max_lsa_ignore_timer; //type: uint32
                                YLeaf max_lsa_reset_timer; //type: uint32
                                YLeaf context_name; //type: string
                                YLeaf snmp_trap_enabled; //type: boolean
                                YLeaf ucmp; //type: boolean
                                YLeaf ucmp_prefix_list; //type: string
                                YLeaf ucmp_variance; //type: int32
                                YLeaf ucmp_delay; //type: uint32
                                YLeaf lsd_connected; //type: boolean
                                YLeaf lsd_registered; //type: boolean
                                YLeaf lsd_bound; //type: boolean
                                YLeaf lsd_connection_revision; //type: uint32
                                YLeaf srgb_configured; //type: boolean
                                YLeaf srgb_start; //type: uint32
                                YLeaf srgb_end; //type: uint32
                                YLeaf srgb_status; //type: OspfSrgbStatusEnum
                                YLeaf sr_strict_spf_cap; //type: boolean

                            class DomainId : public Entity
                            {
                                public:
                                    DomainId();
                                    ~DomainId();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class PrimaryDomainId : public Entity
                                {
                                    public:
                                        PrimaryDomainId();
                                        ~PrimaryDomainId();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf domain_id_type; //type: uint16
                                        YLeaf domain_id_value; //type: string



                                }; // Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessSummary::DomainId::PrimaryDomainId


                                class SecondaryDomainId : public Entity
                                {
                                    public:
                                        SecondaryDomainId();
                                        ~SecondaryDomainId();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf domain_id_type; //type: uint16
                                        YLeaf domain_id_value; //type: string



                                }; // Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessSummary::DomainId::SecondaryDomainId


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessSummary::DomainId::PrimaryDomainId> primary_domain_id;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessSummary::DomainId::SecondaryDomainId> > secondary_domain_id;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessSummary::DomainId


                            class MaximumMetric : public Entity
                            {
                                public:
                                    MaximumMetric();
                                    ~MaximumMetric();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf max_metric_reason; //type: uint8
                                    YLeaf max_metric_enabled; //type: boolean
                                    YLeaf unset_maximum_metric; //type: boolean
                                    YLeaf saved_unset_maximum_metric; //type: boolean
                                    YLeaf maximum_metric_start_time; //type: uint32
                                    YLeaf saved_startup_time; //type: uint32
                                    YLeaf maximum_metric_include_stubs; //type: boolean
                                    YLeaf maximum_metric_summary_lsa; //type: boolean
                                    YLeaf maximum_metric_summary_lsa_metric; //type: uint32
                                    YLeaf maximum_metric_external_lsa; //type: boolean
                                    YLeaf maximum_metric_external_lsa_metric; //type: uint32
                                    YLeaf maximum_metric_originated_for; //type: uint32
                                    YLeaf maximum_metric_unset_reason; //type: MaxMetricUnsetReasonEnum

                                class MaximumMetricTimeUnset : public Entity
                                {
                                    public:
                                        MaximumMetricTimeUnset();
                                        ~MaximumMetricTimeUnset();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf second; //type: uint32
                                        YLeaf nanosecond; //type: uint32



                                }; // Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessSummary::MaximumMetric::MaximumMetricTimeUnset


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessSummary::MaximumMetric::MaximumMetricTimeUnset> maximum_metric_time_unset;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessSummary::MaximumMetric


                            class Redistribution : public Entity
                            {
                                public:
                                    Redistribution();
                                    ~Redistribution();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf metric_flag; //type: boolean
                                    YLeaf metric; //type: uint32
                                    YLeaf classless; //type: boolean
                                    YLeaf nssa_only; //type: boolean

                                class RedistributionProtocol : public Entity
                                {
                                    public:
                                        RedistributionProtocol();
                                        ~RedistributionProtocol();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf protocol_type; //type: RedistProtocolEnum
                                        YLeaf isis_instance_id; //type: string
                                        YLeaf ospf_process_id; //type: string
                                        YLeaf bgp_as_number; //type: string
                                        YLeaf eigrp_as_number; //type: string
                                        YLeaf connected_instance; //type: string



                                }; // Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessSummary::Redistribution::RedistributionProtocol


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessSummary::Redistribution::RedistributionProtocol> redistribution_protocol;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessSummary::Redistribution


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessSummary::DomainId> domain_id;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessSummary::MaximumMetric> > maximum_metric;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessSummary::Redistribution> > redistribution;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessSummary


                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessAreas> process_areas;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProcessSummary> process_summary;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProtocolAreas> protocol_areas;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::ProtocolSummary> protocol_summary;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation::Redistributions> redistributions;


                    }; // Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation


                    class Areas : public Entity
                    {
                        public:
                            Areas();
                            ~Areas();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Area : public Entity
                        {
                            public:
                                Area();
                                ~Area();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf area_id; //type: int32

                            class FloodListAreaTable : public Entity
                            {
                                public:
                                    FloodListAreaTable();
                                    ~FloodListAreaTable();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class Flood : public Entity
                                {
                                    public:
                                        Flood();
                                        ~Flood();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf interface_name; //type: string
                                        YLeaf flood_interface_name; //type: string
                                        YLeaf flood_pacing_timer; //type: uint32
                                        YLeaf flood_lsa_count; //type: uint32

                                    class AreaFlood : public Entity
                                    {
                                        public:
                                            AreaFlood();
                                            ~AreaFlood();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf header_lsa_type; //type: LsaEnum
                                            YLeaf header_lsa_age; //type: uint16
                                            YLeaf header_ls_id; //type: string
                                            YLeaf header_advertising_router; //type: string
                                            YLeaf header_sequence_number; //type: uint32
                                            YLeaf header_lsa_checksum; //type: uint16



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::FloodListAreaTable::Flood::AreaFlood


                                    class AsFlood : public Entity
                                    {
                                        public:
                                            AsFlood();
                                            ~AsFlood();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf header_lsa_type; //type: LsaEnum
                                            YLeaf header_lsa_age; //type: uint16
                                            YLeaf header_ls_id; //type: string
                                            YLeaf header_advertising_router; //type: string
                                            YLeaf header_sequence_number; //type: uint32
                                            YLeaf header_lsa_checksum; //type: uint16



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::FloodListAreaTable::Flood::AsFlood


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::FloodListAreaTable::Flood::AreaFlood> > area_flood;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::FloodListAreaTable::Flood::AsFlood> > as_flood;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::FloodListAreaTable::Flood


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::FloodListAreaTable::Flood> > flood;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::FloodListAreaTable


                            class Neighbors : public Entity
                            {
                                public:
                                    Neighbors();
                                    ~Neighbors();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class Neighbor : public Entity
                                {
                                    public:
                                        Neighbor();
                                        ~Neighbor();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf interface_name; //type: string
                                        YLeaf neighbor_address; //type: string
                                        YLeaf neighbor_id; //type: string
                                        YLeaf neighbor_address_xr; //type: string
                                        YLeaf neighbor_interface_name; //type: string
                                        YLeaf neighbor_dr_priority; //type: uint8
                                        YLeaf neighbor_state; //type: NeighborStateEnum
                                        YLeaf dr_bdr_state; //type: DrBdrStateEnum
                                        YLeaf neighbor_dead_timer; //type: uint32
                                        YLeaf neighbor_up_time; //type: uint32
                                        YLeaf neighbor_madj_interface; //type: boolean

                                    class NeighborBfdInformation : public Entity
                                    {
                                        public:
                                            NeighborBfdInformation();
                                            ~NeighborBfdInformation();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf bfd_intf_enable_mode; //type: uint32
                                            YLeaf bfd_status_flag; //type: uint8



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Neighbors::Neighbor::NeighborBfdInformation


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Neighbors::Neighbor::NeighborBfdInformation> neighbor_bfd_information;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Neighbors::Neighbor


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Neighbors::Neighbor> > neighbor;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Neighbors


                            class InterfaceBriefs : public Entity
                            {
                                public:
                                    InterfaceBriefs();
                                    ~InterfaceBriefs();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class InterfaceBrief : public Entity
                                {
                                    public:
                                        InterfaceBrief();
                                        ~InterfaceBrief();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf interface_name; //type: string
                                        YLeaf interface_name_xr; //type: string
                                        YLeaf interface_area; //type: string
                                        YLeaf interface_address; //type: string
                                        YLeaf interface_mask; //type: uint32
                                        YLeaf interface_link_cost; //type: uint16
                                        YLeaf ospf_interface_state; //type: OspfInterfaceStateEnum
                                        YLeaf interface_fast_detect_hold_down; //type: boolean
                                        YLeaf interface_neighbor_count; //type: uint16
                                        YLeaf interface_adj_neighbor_count; //type: uint16
                                        YLeaf interfaceis_madj; //type: boolean
                                        YLeaf interface_madj_count; //type: uint16

                                    class InterfaceMadj : public Entity
                                    {
                                        public:
                                            InterfaceMadj();
                                            ~InterfaceMadj();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf interface_area; //type: string
                                            YLeaf madj_area_id; //type: uint32
                                            YLeaf interface_neighbor_count; //type: uint16
                                            YLeaf interface_adj_neighbor_count; //type: uint16
                                            YLeaf interface_link_cost; //type: uint16
                                            YLeaf ospf_interface_state; //type: OspfInterfaceStateEnum



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::InterfaceBriefs::InterfaceBrief::InterfaceMadj


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::InterfaceBriefs::InterfaceBrief::InterfaceMadj> > interface_madj;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::InterfaceBriefs::InterfaceBrief


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::InterfaceBriefs::InterfaceBrief> > interface_brief;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::InterfaceBriefs


                            class Requests : public Entity
                            {
                                public:
                                    Requests();
                                    ~Requests();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class Request : public Entity
                                {
                                    public:
                                        Request();
                                        ~Request();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf interface_name; //type: string
                                        YLeaf neighbor_address; //type: string
                                        YLeaf request_neighbor_id; //type: string
                                        YLeaf request_neighbor_address; //type: string
                                        YLeaf request_interface_name; //type: string

                                    class Request_ : public Entity
                                    {
                                        public:
                                            Request_();
                                            ~Request_();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf header_lsa_type; //type: LsaEnum
                                            YLeaf header_lsa_age; //type: uint16
                                            YLeaf header_ls_id; //type: string
                                            YLeaf header_advertising_router; //type: string
                                            YLeaf header_sequence_number; //type: uint32
                                            YLeaf header_lsa_checksum; //type: uint16



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Requests::Request::Request_


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Requests::Request::Request_> > request;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Requests::Request


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Requests::Request> > request;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Requests


                            class Retransmissions : public Entity
                            {
                                public:
                                    Retransmissions();
                                    ~Retransmissions();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class Retransmission : public Entity
                                {
                                    public:
                                        Retransmission();
                                        ~Retransmission();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf interface_name; //type: string
                                        YLeaf neighbor_address; //type: string
                                        YLeaf retransmission_neighbor_id; //type: string
                                        YLeaf retransmission_neighbor_ip_address; //type: string
                                        YLeaf retransmission_interface_name; //type: string
                                        YLeaf retransmission_timer; //type: uint32
                                        YLeaf retransmission_count; //type: uint32

                                    class RetransmissionAreaDb : public Entity
                                    {
                                        public:
                                            RetransmissionAreaDb();
                                            ~RetransmissionAreaDb();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf header_lsa_type; //type: LsaEnum
                                            YLeaf header_lsa_age; //type: uint16
                                            YLeaf header_ls_id; //type: string
                                            YLeaf header_advertising_router; //type: string
                                            YLeaf header_sequence_number; //type: uint32
                                            YLeaf header_lsa_checksum; //type: uint16



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Retransmissions::Retransmission::RetransmissionAreaDb


                                    class RetransmissionAsdb : public Entity
                                    {
                                        public:
                                            RetransmissionAsdb();
                                            ~RetransmissionAsdb();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf header_lsa_type; //type: LsaEnum
                                            YLeaf header_lsa_age; //type: uint16
                                            YLeaf header_ls_id; //type: string
                                            YLeaf header_advertising_router; //type: string
                                            YLeaf header_sequence_number; //type: uint32
                                            YLeaf header_lsa_checksum; //type: uint16



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Retransmissions::Retransmission::RetransmissionAsdb


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Retransmissions::Retransmission::RetransmissionAreaDb> > retransmission_area_db;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Retransmissions::Retransmission::RetransmissionAsdb> > retransmission_asdb;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Retransmissions::Retransmission


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Retransmissions::Retransmission> > retransmission;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Retransmissions


                            class NeighborDetails : public Entity
                            {
                                public:
                                    NeighborDetails();
                                    ~NeighborDetails();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class NeighborDetail : public Entity
                                {
                                    public:
                                        NeighborDetail();
                                        ~NeighborDetail();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf interface_name; //type: string
                                        YLeaf neighbor_address; //type: string
                                        YLeaf neighbor_area_id; //type: string
                                        YLeaf state_change_count; //type: uint16
                                        YLeaf neighbor_cost; //type: uint16
                                        YLeaf neighbor_filter; //type: boolean
                                        YLeaf neighbor_designated_router_address; //type: string
                                        YLeaf neighbor_backup_designated_router_address; //type: string
                                        YLeaf interface_type; //type: InterfaceEnum
                                        YLeaf poll_interval; //type: uint32
                                        YLeaf next_poll_interval; //type: uint32
                                        YLeaf neighbor_option; //type: uint8
                                        YLeaf pending_events; //type: uint16
                                        YLeaf neighbor_lls_option; //type: uint16
                                        YLeaf oob_resynchronization; //type: boolean
                                        YLeaf nsf_router_state; //type: NsfRtrEnum
                                        YLeaf last_oob_time; //type: uint32
                                        YLeaf lfa_interface; //type: string
                                        YLeaf lfa_next_hop; //type: string
                                        YLeaf lfa_neighbor_id; //type: string
                                        YLeaf lfa_neighbor_revision; //type: uint32
                                        YLeaf neighbor_ack_list_count; //type: uint32
                                        YLeaf neighbor_ack_list_high_watermark; //type: uint32
                                        YLeaf adjacency_sid_label; //type: uint32
                                        YLeaf adjacency_sid_protected; //type: boolean
                                        YLeaf adjacency_sid_unprotected_label; //type: uint32

                                    class NeighborSummary : public Entity
                                    {
                                        public:
                                            NeighborSummary();
                                            ~NeighborSummary();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf neighbor_id; //type: string
                                            YLeaf neighbor_address_xr; //type: string
                                            YLeaf neighbor_interface_name; //type: string
                                            YLeaf neighbor_dr_priority; //type: uint8
                                            YLeaf neighbor_state; //type: NeighborStateEnum
                                            YLeaf dr_bdr_state; //type: DrBdrStateEnum
                                            YLeaf neighbor_dead_timer; //type: uint32
                                            YLeaf neighbor_up_time; //type: uint32
                                            YLeaf neighbor_madj_interface; //type: boolean

                                        class NeighborBfdInformation : public Entity
                                        {
                                            public:
                                                NeighborBfdInformation();
                                                ~NeighborBfdInformation();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf bfd_intf_enable_mode; //type: uint32
                                                YLeaf bfd_status_flag; //type: uint8



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::NeighborDetails::NeighborDetail::NeighborSummary::NeighborBfdInformation


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::NeighborDetails::NeighborDetail::NeighborSummary::NeighborBfdInformation> neighbor_bfd_information;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::NeighborDetails::NeighborDetail::NeighborSummary


                                    class NeighborBfdInformation : public Entity
                                    {
                                        public:
                                            NeighborBfdInformation();
                                            ~NeighborBfdInformation();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf bfd_intf_enable_mode; //type: uint32
                                            YLeaf bfd_status_flag; //type: uint8



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::NeighborDetails::NeighborDetail::NeighborBfdInformation


                                    class NeighborRetransmissionInformation : public Entity
                                    {
                                        public:
                                            NeighborRetransmissionInformation();
                                            ~NeighborRetransmissionInformation();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf dbd_retransmission_count; //type: uint32
                                            YLeaf dbd_retransmission_total_count; //type: uint32
                                            YLeaf area_flooding_index; //type: uint32
                                            YLeaf as_flood_index; //type: uint32
                                            YLeaf neighbor_retransmission_count; //type: uint32
                                            YLeaf number_of_retransmissions; //type: uint32
                                            YLeaf area_first_flood_information; //type: uint32
                                            YLeaf area_first_flood_information_index; //type: uint32
                                            YLeaf as_first_flood_information; //type: uint32
                                            YLeaf as_first_flood_information_index; //type: uint32
                                            YLeaf area_next_flood_information; //type: uint32
                                            YLeaf area_next_flood_information_index; //type: uint32
                                            YLeaf as_next_flood_information; //type: uint32
                                            YLeaf as_next_flood_information_index; //type: uint32
                                            YLeaf last_retransmission_length; //type: uint32
                                            YLeaf maximum_retransmission_length; //type: uint32
                                            YLeaf last_retransmission_time; //type: uint32
                                            YLeaf maximum_retransmission_time; //type: uint32
                                            YLeaf lsa_retransmission_timer; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::NeighborDetails::NeighborDetail::NeighborRetransmissionInformation


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::NeighborDetails::NeighborDetail::NeighborBfdInformation> neighbor_bfd_information;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::NeighborDetails::NeighborDetail::NeighborRetransmissionInformation> neighbor_retransmission_information;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::NeighborDetails::NeighborDetail::NeighborSummary> neighbor_summary;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::NeighborDetails::NeighborDetail


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::NeighborDetails::NeighborDetail> > neighbor_detail;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::NeighborDetails


                            class Interfaces : public Entity
                            {
                                public:
                                    Interfaces();
                                    ~Interfaces();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class Interface : public Entity
                                {
                                    public:
                                        Interface();
                                        ~Interface();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf interface_name; //type: string
                                        YLeaf interface_name_xr; //type: string
                                        YLeaf interface_state; //type: InterfaceStateEnum
                                        YLeaf interface_line_state; //type: boolean
                                        YLeaf interface_address; //type: string
                                        YLeaf interface_mask; //type: uint32
                                        YLeaf interface_area; //type: string
                                        YLeaf interface_sid; //type: uint32
                                        YLeaf interface_sid_php_off; //type: boolean
                                        YLeaf interface_sid_n_flag_clear; //type: boolean
                                        YLeaf interface_strict_spf_sid; //type: uint32
                                        YLeaf interface_strict_spf_sid_php_off; //type: boolean
                                        YLeaf interface_strict_spf_sid_n_flag_clear; //type: boolean
                                        YLeaf interface_router_id; //type: string
                                        YLeaf network_type; //type: InterfaceEnum
                                        YLeaf ip_mtu; //type: uint16
                                        YLeaf maximum_packet_size; //type: uint16
                                        YLeaf interface_tunnel_flags; //type: uint32
                                        YLeaf interface_link_cost; //type: uint16
                                        YLeaf interface_bandwidth; //type: uint32
                                        YLeaf cfg_cost_fallback; //type: boolean
                                        YLeaf interface_cost_fallback; //type: uint16
                                        YLeaf cost_fallback_active; //type: boolean
                                        YLeaf configured_ldp_sync; //type: boolean
                                        YLeaf configured_ldp_sync_igp_shortcuts; //type: boolean
                                        YLeaf interface_ldp_sync; //type: boolean
                                        YLeaf configured_demand_circuit; //type: boolean
                                        YLeaf interface_demand_circuit; //type: boolean
                                        YLeaf interface_dc_bitless_lsa_count; //type: uint32
                                        YLeaf transmission_delay; //type: uint16
                                        YLeaf ospf_interface_state; //type: OspfInterfaceStateEnum
                                        YLeaf interface_priority; //type: uint8
                                        YLeaf designated_router; //type: boolean
                                        YLeaf designated_router_id; //type: string
                                        YLeaf designated_router_address; //type: string
                                        YLeaf backup_designated_router; //type: boolean
                                        YLeaf backup_designated_router_id; //type: string
                                        YLeaf backup_designated_router_address; //type: string
                                        YLeaf network_lsa_flush_timer; //type: uint32
                                        YLeaf interface_lsa_filter; //type: boolean
                                        YLeaf hello_interval; //type: uint32
                                        YLeaf hello_interval_ms; //type: uint32
                                        YLeaf dead_interval; //type: uint32
                                        YLeaf wait_interval; //type: uint32
                                        YLeaf interface_retransmission_interrval; //type: uint32
                                        YLeaf interface_nsf_enabled; //type: boolean
                                        YLeaf interface_nsf; //type: boolean
                                        YLeaf interface_last_nsf; //type: uint32
                                        YLeaf passive_interface; //type: boolean
                                        YLeaf next_hello_time; //type: uint32
                                        YLeaf next_hello_time_ms; //type: uint32
                                        YLeaf ttl_security_enabled; //type: boolean
                                        YLeaf ttl_security_hop_count; //type: uint32
                                        YLeaf interfaceis_madj; //type: boolean
                                        YLeaf interface_madj_count; //type: uint16
                                        YLeaf prefix_suppress_primary_addresses; //type: boolean
                                        YLeaf prefix_suppress_secondary_addresses; //type: boolean
                                        YLeaf is_loopback_stub_network; //type: boolean
                                        YLeaf interface_ack_list_count; //type: uint32
                                        YLeaf interface_ack_list_high_watermark; //type: uint32
                                        YLeaf registered_for_link_down_fast_detection; //type: boolean
                                        YLeaf fast_detect_hold_down_time; //type: uint32
                                        YLeaf interface_fast_detect_hold_down; //type: boolean
                                        YLeaf fast_detect_hold_down_time_remaining; //type: uint32
                                        YLeaf fast_reroute_type; //type: IpfrrEnum
                                        YLeaf fast_reroute_topology_independent_lfa; //type: boolean
                                        YLeafList srlg; //type: list of  uint32

                                    class InterfaceBfdInformation : public Entity
                                    {
                                        public:
                                            InterfaceBfdInformation();
                                            ~InterfaceBfdInformation();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf bfd_intf_enable_mode; //type: uint32
                                            YLeaf interval; //type: uint32
                                            YLeaf detection_multiplier; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Interfaces::Interface::InterfaceBfdInformation


                                    class ActiveInterface : public Entity
                                    {
                                        public:
                                            ActiveInterface();
                                            ~ActiveInterface();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf wait_time; //type: uint32
                                            YLeaf interface_area_flood_index; //type: uint32
                                            YLeaf interface_as_flood_index; //type: uint32
                                            YLeaf interface_flood_length; //type: uint32
                                            YLeaf interface_area_next_flood; //type: uint32
                                            YLeaf interface_area_next_flood_index; //type: uint32
                                            YLeaf interface_as_next_flood; //type: uint32
                                            YLeaf interface_as_next_flood_index; //type: uint32
                                            YLeaf flood_scan_length; //type: uint32
                                            YLeaf maximum_flood_length; //type: uint32
                                            YLeaf last_flood_time; //type: uint32
                                            YLeaf maximum_flood_time; //type: uint32
                                            YLeaf interface_flood_pacing_timer; //type: uint32
                                            YLeaf interface_neighbor_count; //type: uint16
                                            YLeaf suppress_hello_count; //type: uint16
                                            YLeaf interface_authentication_type; //type: AuthenticationEnum
                                            YLeaf youngest_md_key; //type: boolean
                                            YLeaf old_md5_key_neighbor_count; //type: uint32
                                            YLeaf youngest_md_key_id; //type: uint16
                                            YLeaf keychain_id; //type: uint64
                                            YLeafList md_keys; //type: list of  uint16



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Interfaces::Interface::ActiveInterface


                                    class InterfaceNeighbor : public Entity
                                    {
                                        public:
                                            InterfaceNeighbor();
                                            ~InterfaceNeighbor();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf interface_neighbor_id; //type: string
                                            YLeaf interface_neighbor_cost; //type: uint32
                                            YLeaf neighbor_dr; //type: boolean
                                            YLeaf neighbor_bdr; //type: boolean
                                            YLeaf suppress_hello; //type: boolean



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Interfaces::Interface::InterfaceNeighbor


                                    class InterfaceMadj : public Entity
                                    {
                                        public:
                                            InterfaceMadj();
                                            ~InterfaceMadj();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf interface_area; //type: string
                                            YLeaf madj_area_id; //type: uint32
                                            YLeaf interface_neighbor_count; //type: uint16
                                            YLeaf interface_adj_neighbor_count; //type: uint16
                                            YLeaf interface_link_cost; //type: uint16
                                            YLeaf ospf_interface_state; //type: OspfInterfaceStateEnum



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Interfaces::Interface::InterfaceMadj


                                    class IpfrrTiebreakers : public Entity
                                    {
                                        public:
                                            IpfrrTiebreakers();
                                            ~IpfrrTiebreakers();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf tiebreaker_type; //type: IpfrrTbrkrEnum
                                            YLeaf tiebreaker_index; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Interfaces::Interface::IpfrrTiebreakers


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Interfaces::Interface::ActiveInterface> active_interface;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Interfaces::Interface::InterfaceBfdInformation> interface_bfd_information;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Interfaces::Interface::InterfaceMadj> > interface_madj;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Interfaces::Interface::InterfaceNeighbor> > interface_neighbor;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Interfaces::Interface::IpfrrTiebreakers> > ipfrr_tiebreakers;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Interfaces::Interface


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Interfaces::Interface> > interface;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Interfaces


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::FloodListAreaTable> flood_list_area_table;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::InterfaceBriefs> interface_briefs;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Interfaces> interfaces;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::NeighborDetails> neighbor_details;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Neighbors> neighbors;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Requests> requests;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area::Retransmissions> retransmissions;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::Areas::Area


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas::Area> > area;


                    }; // Ospf::Processes::Process::Vrfs::Vrf::Areas


                    class Database : public Entity
                    {
                        public:
                            Database();
                            ~Database();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class DatabaseAreas : public Entity
                        {
                            public:
                                DatabaseAreas();
                                ~DatabaseAreas();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class DatabaseArea : public Entity
                            {
                                public:
                                    DatabaseArea();
                                    ~DatabaseArea();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf area_id; //type: int32

                                class Lsas : public Entity
                                {
                                    public:
                                        Lsas();
                                        ~Lsas();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class Lsa : public Entity
                                    {
                                        public:
                                            Lsa();
                                            ~Lsa();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf area_id; //type: int32
                                            YLeaf ls_type; //type: OspfLsEnum
                                            YLeaf ls_id; //type: string
                                            YLeaf advertising_router; //type: string
                                            YLeaf interface_name; //type: string

                                        class LsaHeader : public Entity
                                        {
                                            public:
                                                LsaHeader();
                                                ~LsaHeader();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf ls_type; //type: LsaEnum
                                                YLeaf lsid; //type: string
                                                YLeaf advertising_router; //type: string
                                                YLeaf lsa_area_id; //type: string
                                                YLeaf lsa_age; //type: uint16
                                                YLeaf dn_age_lsa; //type: boolean
                                                YLeaf nsf; //type: boolean
                                                YLeaf sequence_number; //type: uint32
                                                YLeaf checksum; //type: uint16



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaHeader


                                        class LsaDetailData : public Entity
                                        {
                                            public:
                                                LsaDetailData();
                                                ~LsaDetailData();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf tos_capable; //type: boolean
                                                YLeaf nssa_translation; //type: boolean
                                                YLeaf demand_circuit; //type: boolean
                                                YLeaf dn_bit; //type: boolean
                                                YLeaf lsa_rate_limit_due_time; //type: uint32
                                                YLeaf lsadb_base_clock; //type: uint64
                                                YLeaf routing_bit; //type: boolean
                                                YLeaf advertising_router_reachable; //type: boolean
                                                YLeaf length; //type: uint16
                                                YLeaf sum_origin; //type: uint16
                                                YLeaf ase_origin; //type: uint16
                                                YLeaf in_sync; //type: uint8
                                                YLeaf lsa_prefix_priority; //type: uint8
                                                YLeaf new_lsa_prefix_priority; //type: uint8
                                                YLeaf lsa_flood_required_post_fail_over; //type: boolean

                                            class LsaThrottleTimer : public Entity
                                            {
                                                public:
                                                    LsaThrottleTimer();
                                                    ~LsaThrottleTimer();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf timer_location; //type: TimerTableEnum
                                                    YLeaf timer_type; //type: TimerEnum
                                                    YLeaf second_table_index; //type: uint8
                                                    YLeaf minute_table_index; //type: uint8
                                                    YLeaf last_inst_second_table_index; //type: uint8
                                                    YLeaf last_inst_minute_table_index; //type: uint8



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData::LsaThrottleTimer


                                            class LsaLastUpdatedTime : public Entity
                                            {
                                                public:
                                                    LsaLastUpdatedTime();
                                                    ~LsaLastUpdatedTime();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf second; //type: uint32
                                                    YLeaf nanosecond; //type: uint32



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData::LsaLastUpdatedTime


                                            class LsadbBaseTimeStamp : public Entity
                                            {
                                                public:
                                                    LsadbBaseTimeStamp();
                                                    ~LsadbBaseTimeStamp();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf second; //type: uint32
                                                    YLeaf nanosecond; //type: uint32



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData::LsadbBaseTimeStamp


                                            class NotDelete : public Entity
                                            {
                                                public:
                                                    NotDelete();
                                                    ~NotDelete();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf free_time; //type: uint32
                                                    YLeaf no_delete; //type: boolean
                                                    YLeaf neighbor_exchange; //type: boolean
                                                    YLeaf routing_table; //type: boolean
                                                    YLeaf acknowledgement; //type: boolean
                                                    YLeaf maximum_age; //type: boolean
                                                    YLeaf partial_spf; //type: boolean
                                                    YLeaf flood_pending; //type: boolean
                                                    YLeaf rate_limit; //type: boolean
                                                    YLeaf nsr_ack_pending; //type: boolean
                                                    YLeaf sum_orig_pending; //type: boolean
                                                    YLeaf nsr_flood_required; //type: boolean



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData::NotDelete


                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData::LsaLastUpdatedTime> lsa_last_updated_time;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData::LsaThrottleTimer> lsa_throttle_timer;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData::LsadbBaseTimeStamp> lsadb_base_time_stamp;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData::NotDelete> not_delete;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData


                                        class LsaInternalData : public Entity
                                        {
                                            public:
                                                LsaInternalData();
                                                ~LsaInternalData();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf internal_lsa_type; //type: OspfInternalLsaTypesEnum

                                            class RouterLsaType : public Entity
                                            {
                                                public:
                                                    RouterLsaType();
                                                    ~RouterLsaType();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf router_asbr; //type: boolean
                                                    YLeaf router_abr; //type: boolean
                                                    YLeaf internal_lsa; //type: boolean

                                                class Link : public Entity
                                                {
                                                    public:
                                                        Link();
                                                        ~Link();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf link_id; //type: string
                                                        YLeaf link_data; //type: string
                                                        YLeaf link_type; //type: OspfLinkTypesEnum
                                                        YLeaf link_metric; //type: uint16

                                                    class LinkTos : public Entity
                                                    {
                                                        public:
                                                            LinkTos();
                                                            ~LinkTos();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf router_tos; //type: uint16
                                                            YLeaf tos_cost; //type: uint16



                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType::Link::LinkTos


                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType::Link::LinkTos> > link_tos;


                                                }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType::Link


                                                class InternalLink : public Entity
                                                {
                                                    public:
                                                        InternalLink();
                                                        ~InternalLink();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf link_id; //type: string
                                                        YLeaf link_data; //type: string
                                                        YLeaf link_type; //type: OspfLinkTypesEnum
                                                        YLeaf link_metric; //type: uint16

                                                    class LinkTos : public Entity
                                                    {
                                                        public:
                                                            LinkTos();
                                                            ~LinkTos();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf router_tos; //type: uint16
                                                            YLeaf tos_cost; //type: uint16



                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType::InternalLink::LinkTos


                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType::InternalLink::LinkTos> > link_tos;


                                                }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType::InternalLink


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType::InternalLink> > internal_link;
                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType::Link> > link;


                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType


                                            class NetworkLsaType : public Entity
                                            {
                                                public:
                                                    NetworkLsaType();
                                                    ~NetworkLsaType();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf network_prefix_length; //type: uint32
                                                    YLeafList neighbor_router; //type: list of  string



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::NetworkLsaType


                                            class SummaryLsaType : public Entity
                                            {
                                                public:
                                                    SummaryLsaType();
                                                    ~SummaryLsaType();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf summary_prefix_length; //type: uint32
                                                    YLeaf internal_sum_lsa; //type: boolean
                                                    YLeafList summary_lsa_metric; //type: list of  uint32



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::SummaryLsaType


                                            class ExternalLsaType : public Entity
                                            {
                                                public:
                                                    ExternalLsaType();
                                                    ~ExternalLsaType();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf external_prefix_length; //type: uint32
                                                    YLeaf internal_external_lsa; //type: boolean

                                                class ExternalTosMetric : public Entity
                                                {
                                                    public:
                                                        ExternalTosMetric();
                                                        ~ExternalTosMetric();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf external_metric; //type: uint32
                                                        YLeaf external_metric_type; //type: ExMetricEnum
                                                        YLeaf external_tos; //type: uint32
                                                        YLeaf forwarding_address; //type: string
                                                        YLeaf external_tag; //type: uint32



                                                }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::ExternalLsaType::ExternalTosMetric


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::ExternalLsaType::ExternalTosMetric> > external_tos_metric;


                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::ExternalLsaType


                                            class OpaqueLinkLsaType : public Entity
                                            {
                                                public:
                                                    OpaqueLinkLsaType();
                                                    ~OpaqueLinkLsaType();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf opaque_interface_name; //type: string



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueLinkLsaType


                                            class OpaqueMplsTeLsaType : public Entity
                                            {
                                                public:
                                                    OpaqueMplsTeLsaType();
                                                    ~OpaqueMplsTeLsaType();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;



                                                class Tlv : public Entity
                                                {
                                                    public:
                                                        Tlv();
                                                        ~Tlv();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf tlv_type; //type: uint16
                                                        YLeaf tlv_length; //type: uint16
                                                        YLeaf mpls_router_id; //type: uint32
                                                        YLeaf mpls_dste_link; //type: boolean
                                                        YLeaf tlv_data; //type: string

                                                    class TeLinkSubTlv : public Entity
                                                    {
                                                        public:
                                                            TeLinkSubTlv();
                                                            ~TeLinkSubTlv();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf sub_tlv_type; //type: StlvEnum
                                                            YLeaf sub_tlv_length; //type: uint16
                                                            YLeaf sub_tlv_value; //type: string



                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType::Tlv::TeLinkSubTlv


                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType::Tlv::TeLinkSubTlv> > te_link_sub_tlv;


                                                }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType::Tlv


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType::Tlv> > tlv;


                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType


                                            class OpaqueGraceLsa : public Entity
                                            {
                                                public:
                                                    OpaqueGraceLsa();
                                                    ~OpaqueGraceLsa();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf grace_period; //type: uint32
                                                    YLeaf grace_reason; //type: OspfGrReasonEnum
                                                    YLeaf ip_address; //type: string



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueGraceLsa


                                            class OpaqueRouterInfoLsaType : public Entity
                                            {
                                                public:
                                                    OpaqueRouterInfoLsaType();
                                                    ~OpaqueRouterInfoLsaType();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf opaque_rilsa_scope; //type: OspfLsaOpqRiScopeEnum
                                                    YLeaf opaque_ri_interface_name; //type: string

                                                class OpaqueRitlv : public Entity
                                                {
                                                    public:
                                                        OpaqueRitlv();
                                                        ~OpaqueRitlv();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf ritlv_internal_type; //type: OspfShOpqRiTlvTypesEnum

                                                    class UnknownTlv : public Entity
                                                    {
                                                        public:
                                                            UnknownTlv();
                                                            ~UnknownTlv();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf ri_gen_tlv_type; //type: uint16
                                                            YLeaf ri_gen_tlv_length; //type: uint16
                                                            YLeaf ri_genvalue; //type: string



                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::UnknownTlv


                                                    class RtrCapTlv : public Entity
                                                    {
                                                        public:
                                                            RtrCapTlv();
                                                            ~RtrCapTlv();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf rtr_cap_tlv_length; //type: uint16
                                                            YLeaf rtr_cap_graceful_restart; //type: boolean
                                                            YLeaf rtr_cap_graceful_restart_helper; //type: boolean
                                                            YLeaf rtr_cap_stub_rtr; //type: boolean
                                                            YLeaf rtr_cap_area_te; //type: boolean
                                                            YLeaf rtr_cap_p2plan; //type: boolean
                                                            YLeaf rtr_cap_te_exp; //type: boolean
                                                            YLeaf rtr_cap_all_bits; //type: uint32
                                                            YLeaf rtr_cap_additional_info; //type: string



                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::RtrCapTlv


                                                    class Pcedtlv : public Entity
                                                    {
                                                        public:
                                                            Pcedtlv();
                                                            ~Pcedtlv();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf pcedtlv_length; //type: uint16

                                                        class PcedAddr : public Entity
                                                        {
                                                            public:
                                                                PcedAddr();
                                                                ~PcedAddr();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;


                                                                YLeaf pce_addr_type; //type: OspfShOpqRiPceAddrTypesEnum

                                                            class PceAddrUnknownTlv : public Entity
                                                            {
                                                                public:
                                                                    PceAddrUnknownTlv();
                                                                    ~PceAddrUnknownTlv();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                    YLeaf ri_gen_tlv_type; //type: uint16
                                                                    YLeaf ri_gen_tlv_length; //type: uint16
                                                                    YLeaf ri_genvalue; //type: string



                                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::PceAddrUnknownTlv


                                                            class Ipv4PceAddr : public Entity
                                                            {
                                                                public:
                                                                    Ipv4PceAddr();
                                                                    ~Ipv4PceAddr();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                    YLeaf pceipv4_addr; //type: string



                                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::Ipv4PceAddr


                                                            class Ipv6PceAddr : public Entity
                                                            {
                                                                public:
                                                                    Ipv6PceAddr();
                                                                    ~Ipv6PceAddr();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                    YLeaf pceipv6_addr; //type: string



                                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::Ipv6PceAddr


                                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::Ipv4PceAddr> ipv4pce_addr;
                                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::Ipv6PceAddr> ipv6pce_addr;
                                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::PceAddrUnknownTlv> pce_addr_unknown_tlv;


                                                        }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr


                                                        class PcedScope : public Entity
                                                        {
                                                            public:
                                                                PcedScope();
                                                                ~PcedScope();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;


                                                                YLeaf lbit; //type: boolean
                                                                YLeaf rbit; //type: boolean
                                                                YLeaf rd_bit; //type: boolean
                                                                YLeaf sbit; //type: boolean
                                                                YLeaf sd_bit; //type: boolean
                                                                YLeaf ybit; //type: boolean
                                                                YLeaf pref_l; //type: uint8
                                                                YLeaf pref_r; //type: uint8
                                                                YLeaf pref_s; //type: uint8
                                                                YLeaf pref_y; //type: uint8
                                                                YLeaf all_scope_info_bits; //type: uint32



                                                        }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedScope


                                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr> pced_addr;
                                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedScope> pced_scope;


                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv


                                                    class SrAlgoTlv : public Entity
                                                    {
                                                        public:
                                                            SrAlgoTlv();
                                                            ~SrAlgoTlv();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf sr_algo_length; //type: uint16
                                                            YLeaf sr_algo_value; //type: string



                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrAlgoTlv


                                                    class SrRangeTlv : public Entity
                                                    {
                                                        public:
                                                            SrRangeTlv();
                                                            ~SrRangeTlv();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf sr_range_length; //type: uint16
                                                            YLeaf sr_range_size; //type: uint32

                                                        class Sidtlv : public Entity
                                                        {
                                                            public:
                                                                Sidtlv();
                                                                ~Sidtlv();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;


                                                                YLeaf sr_sid_length; //type: uint16
                                                                YLeaf sr_sid_value; //type: uint32



                                                        }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrRangeTlv::Sidtlv


                                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrRangeTlv::Sidtlv> sidtlv;


                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrRangeTlv


                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv> pcedtlv;
                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::RtrCapTlv> rtr_cap_tlv;
                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrAlgoTlv> sr_algo_tlv;
                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrRangeTlv> sr_range_tlv;
                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::UnknownTlv> unknown_tlv;


                                                }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv> > opaque_ritlv;


                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType


                                            class OpaqueEpLsaType : public Entity
                                            {
                                                public:
                                                    OpaqueEpLsaType();
                                                    ~OpaqueEpLsaType();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;



                                                class Tlv : public Entity
                                                {
                                                    public:
                                                        Tlv();
                                                        ~Tlv();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf tlv_type; //type: uint16
                                                        YLeaf tlv_length; //type: uint16
                                                        YLeaf mpls_router_id; //type: uint32
                                                        YLeaf mpls_dste_link; //type: boolean
                                                        YLeaf tlv_data; //type: string

                                                    class TeLinkSubTlv : public Entity
                                                    {
                                                        public:
                                                            TeLinkSubTlv();
                                                            ~TeLinkSubTlv();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf sub_tlv_type; //type: StlvEnum
                                                            YLeaf sub_tlv_length; //type: uint16
                                                            YLeaf sub_tlv_value; //type: string



                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType::Tlv::TeLinkSubTlv


                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType::Tlv::TeLinkSubTlv> > te_link_sub_tlv;


                                                }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType::Tlv


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType::Tlv> > tlv;


                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType


                                            class OpaqueElLsaType : public Entity
                                            {
                                                public:
                                                    OpaqueElLsaType();
                                                    ~OpaqueElLsaType();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;



                                                class Tlv : public Entity
                                                {
                                                    public:
                                                        Tlv();
                                                        ~Tlv();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf tlv_type; //type: uint16
                                                        YLeaf tlv_length; //type: uint16
                                                        YLeaf mpls_router_id; //type: uint32
                                                        YLeaf mpls_dste_link; //type: boolean
                                                        YLeaf tlv_data; //type: string

                                                    class TeLinkSubTlv : public Entity
                                                    {
                                                        public:
                                                            TeLinkSubTlv();
                                                            ~TeLinkSubTlv();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf sub_tlv_type; //type: StlvEnum
                                                            YLeaf sub_tlv_length; //type: uint16
                                                            YLeaf sub_tlv_value; //type: string



                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueElLsaType::Tlv::TeLinkSubTlv


                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueElLsaType::Tlv::TeLinkSubTlv> > te_link_sub_tlv;


                                                }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueElLsaType::Tlv


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueElLsaType::Tlv> > tlv;


                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueElLsaType


                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::ExternalLsaType> external_lsa_type;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::NetworkLsaType> network_lsa_type;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueElLsaType> opaque_el_lsa_type;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType> opaque_ep_lsa_type;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueGraceLsa> opaque_grace_lsa;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueLinkLsaType> opaque_link_lsa_type;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType> opaque_mpls_te_lsa_type;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType> opaque_router_info_lsa_type;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType> router_lsa_type;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::SummaryLsaType> summary_lsa_type;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData> lsa_detail_data;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaHeader> lsa_header;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData> lsa_internal_data;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa> > lsa;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas


                                class LsaSummaries : public Entity
                                {
                                    public:
                                        LsaSummaries();
                                        ~LsaSummaries();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class LsaSummary : public Entity
                                    {
                                        public:
                                            LsaSummary();
                                            ~LsaSummary();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf area_id; //type: int32
                                            YLeaf ls_type; //type: OspfLsEnum
                                            YLeaf ls_id; //type: string
                                            YLeaf advertising_router; //type: string
                                            YLeaf interface_name; //type: string
                                            YLeaf external_tag; //type: uint32
                                            YLeaf link_count; //type: uint16

                                        class LsaHeader : public Entity
                                        {
                                            public:
                                                LsaHeader();
                                                ~LsaHeader();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf ls_type; //type: LsaEnum
                                                YLeaf lsid; //type: string
                                                YLeaf advertising_router; //type: string
                                                YLeaf lsa_area_id; //type: string
                                                YLeaf lsa_age; //type: uint16
                                                YLeaf dn_age_lsa; //type: boolean
                                                YLeaf nsf; //type: boolean
                                                YLeaf sequence_number; //type: uint32
                                                YLeaf checksum; //type: uint16



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::LsaSummaries::LsaSummary::LsaHeader


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::LsaSummaries::LsaSummary::LsaHeader> lsa_header;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::LsaSummaries::LsaSummary


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::LsaSummaries::LsaSummary> > lsa_summary;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::LsaSummaries


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::LsaSummaries> lsa_summaries;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea::Lsas> lsas;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas::DatabaseArea> > database_area;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas


                        class DatabaseSummaries : public Entity
                        {
                            public:
                                DatabaseSummaries();
                                ~DatabaseSummaries();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class DatabaseSummary : public Entity
                            {
                                public:
                                    DatabaseSummary();
                                    ~DatabaseSummary();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf area_id; //type: int32
                                    YLeaf dbase_sum_area_id_string; //type: string

                                class AreaLsaCounter : public Entity
                                {
                                    public:
                                        AreaLsaCounter();
                                        ~AreaLsaCounter();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf lsa_type; //type: LsaEnum
                                        YLeaf lsa_count; //type: int32
                                        YLeaf lsa_delete_count; //type: int32
                                        YLeaf lsa_maxage_count; //type: int32
                                        YLeaf lsa_self_count; //type: int32



                                }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseSummaries::DatabaseSummary::AreaLsaCounter


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseSummaries::DatabaseSummary::AreaLsaCounter> > area_lsa_counter;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseSummaries::DatabaseSummary


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseSummaries::DatabaseSummary> > database_summary;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseSummaries


                        class DatabaseSummaryAs : public Entity
                        {
                            public:
                                DatabaseSummaryAs();
                                ~DatabaseSummaryAs();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class AsLsaCounter : public Entity
                            {
                                public:
                                    AsLsaCounter();
                                    ~AsLsaCounter();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf lsa_type; //type: LsaEnum
                                    YLeaf lsa_count; //type: int32
                                    YLeaf lsa_delete_count; //type: int32
                                    YLeaf lsa_maxage_count; //type: int32
                                    YLeaf lsa_self_count; //type: int32



                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseSummaryAs::AsLsaCounter


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseSummaryAs::AsLsaCounter> > as_lsa_counter;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseSummaryAs


                        class Lsas : public Entity
                        {
                            public:
                                Lsas();
                                ~Lsas();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class Lsa : public Entity
                            {
                                public:
                                    Lsa();
                                    ~Lsa();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf area_id; //type: int32
                                    YLeaf ls_type; //type: OspfLsEnum
                                    YLeaf ls_id; //type: string
                                    YLeaf advertising_router; //type: string
                                    YLeaf interface_name; //type: string

                                class LsaHeader : public Entity
                                {
                                    public:
                                        LsaHeader();
                                        ~LsaHeader();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf ls_type; //type: LsaEnum
                                        YLeaf lsid; //type: string
                                        YLeaf advertising_router; //type: string
                                        YLeaf lsa_area_id; //type: string
                                        YLeaf lsa_age; //type: uint16
                                        YLeaf dn_age_lsa; //type: boolean
                                        YLeaf nsf; //type: boolean
                                        YLeaf sequence_number; //type: uint32
                                        YLeaf checksum; //type: uint16



                                }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaHeader


                                class LsaDetailData : public Entity
                                {
                                    public:
                                        LsaDetailData();
                                        ~LsaDetailData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf tos_capable; //type: boolean
                                        YLeaf nssa_translation; //type: boolean
                                        YLeaf demand_circuit; //type: boolean
                                        YLeaf dn_bit; //type: boolean
                                        YLeaf lsa_rate_limit_due_time; //type: uint32
                                        YLeaf lsadb_base_clock; //type: uint64
                                        YLeaf routing_bit; //type: boolean
                                        YLeaf advertising_router_reachable; //type: boolean
                                        YLeaf length; //type: uint16
                                        YLeaf sum_origin; //type: uint16
                                        YLeaf ase_origin; //type: uint16
                                        YLeaf in_sync; //type: uint8
                                        YLeaf lsa_prefix_priority; //type: uint8
                                        YLeaf new_lsa_prefix_priority; //type: uint8
                                        YLeaf lsa_flood_required_post_fail_over; //type: boolean

                                    class LsaThrottleTimer : public Entity
                                    {
                                        public:
                                            LsaThrottleTimer();
                                            ~LsaThrottleTimer();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf timer_location; //type: TimerTableEnum
                                            YLeaf timer_type; //type: TimerEnum
                                            YLeaf second_table_index; //type: uint8
                                            YLeaf minute_table_index; //type: uint8
                                            YLeaf last_inst_second_table_index; //type: uint8
                                            YLeaf last_inst_minute_table_index; //type: uint8



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaDetailData::LsaThrottleTimer


                                    class LsaLastUpdatedTime : public Entity
                                    {
                                        public:
                                            LsaLastUpdatedTime();
                                            ~LsaLastUpdatedTime();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf second; //type: uint32
                                            YLeaf nanosecond; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaDetailData::LsaLastUpdatedTime


                                    class LsadbBaseTimeStamp : public Entity
                                    {
                                        public:
                                            LsadbBaseTimeStamp();
                                            ~LsadbBaseTimeStamp();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf second; //type: uint32
                                            YLeaf nanosecond; //type: uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaDetailData::LsadbBaseTimeStamp


                                    class NotDelete : public Entity
                                    {
                                        public:
                                            NotDelete();
                                            ~NotDelete();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf free_time; //type: uint32
                                            YLeaf no_delete; //type: boolean
                                            YLeaf neighbor_exchange; //type: boolean
                                            YLeaf routing_table; //type: boolean
                                            YLeaf acknowledgement; //type: boolean
                                            YLeaf maximum_age; //type: boolean
                                            YLeaf partial_spf; //type: boolean
                                            YLeaf flood_pending; //type: boolean
                                            YLeaf rate_limit; //type: boolean
                                            YLeaf nsr_ack_pending; //type: boolean
                                            YLeaf sum_orig_pending; //type: boolean
                                            YLeaf nsr_flood_required; //type: boolean



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaDetailData::NotDelete


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaDetailData::LsaLastUpdatedTime> lsa_last_updated_time;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaDetailData::LsaThrottleTimer> lsa_throttle_timer;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaDetailData::LsadbBaseTimeStamp> lsadb_base_time_stamp;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaDetailData::NotDelete> not_delete;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaDetailData


                                class LsaInternalData : public Entity
                                {
                                    public:
                                        LsaInternalData();
                                        ~LsaInternalData();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf internal_lsa_type; //type: OspfInternalLsaTypesEnum

                                    class RouterLsaType : public Entity
                                    {
                                        public:
                                            RouterLsaType();
                                            ~RouterLsaType();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf router_asbr; //type: boolean
                                            YLeaf router_abr; //type: boolean
                                            YLeaf internal_lsa; //type: boolean

                                        class Link : public Entity
                                        {
                                            public:
                                                Link();
                                                ~Link();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf link_id; //type: string
                                                YLeaf link_data; //type: string
                                                YLeaf link_type; //type: OspfLinkTypesEnum
                                                YLeaf link_metric; //type: uint16

                                            class LinkTos : public Entity
                                            {
                                                public:
                                                    LinkTos();
                                                    ~LinkTos();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf router_tos; //type: uint16
                                                    YLeaf tos_cost; //type: uint16



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType::Link::LinkTos


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType::Link::LinkTos> > link_tos;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType::Link


                                        class InternalLink : public Entity
                                        {
                                            public:
                                                InternalLink();
                                                ~InternalLink();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf link_id; //type: string
                                                YLeaf link_data; //type: string
                                                YLeaf link_type; //type: OspfLinkTypesEnum
                                                YLeaf link_metric; //type: uint16

                                            class LinkTos : public Entity
                                            {
                                                public:
                                                    LinkTos();
                                                    ~LinkTos();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf router_tos; //type: uint16
                                                    YLeaf tos_cost; //type: uint16



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType::InternalLink::LinkTos


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType::InternalLink::LinkTos> > link_tos;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType::InternalLink


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType::InternalLink> > internal_link;
                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType::Link> > link;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType


                                    class NetworkLsaType : public Entity
                                    {
                                        public:
                                            NetworkLsaType();
                                            ~NetworkLsaType();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf network_prefix_length; //type: uint32
                                            YLeafList neighbor_router; //type: list of  string



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::NetworkLsaType


                                    class SummaryLsaType : public Entity
                                    {
                                        public:
                                            SummaryLsaType();
                                            ~SummaryLsaType();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf summary_prefix_length; //type: uint32
                                            YLeaf internal_sum_lsa; //type: boolean
                                            YLeafList summary_lsa_metric; //type: list of  uint32



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::SummaryLsaType


                                    class ExternalLsaType : public Entity
                                    {
                                        public:
                                            ExternalLsaType();
                                            ~ExternalLsaType();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf external_prefix_length; //type: uint32
                                            YLeaf internal_external_lsa; //type: boolean

                                        class ExternalTosMetric : public Entity
                                        {
                                            public:
                                                ExternalTosMetric();
                                                ~ExternalTosMetric();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf external_metric; //type: uint32
                                                YLeaf external_metric_type; //type: ExMetricEnum
                                                YLeaf external_tos; //type: uint32
                                                YLeaf forwarding_address; //type: string
                                                YLeaf external_tag; //type: uint32



                                        }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::ExternalLsaType::ExternalTosMetric


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::ExternalLsaType::ExternalTosMetric> > external_tos_metric;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::ExternalLsaType


                                    class OpaqueLinkLsaType : public Entity
                                    {
                                        public:
                                            OpaqueLinkLsaType();
                                            ~OpaqueLinkLsaType();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf opaque_interface_name; //type: string



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueLinkLsaType


                                    class OpaqueMplsTeLsaType : public Entity
                                    {
                                        public:
                                            OpaqueMplsTeLsaType();
                                            ~OpaqueMplsTeLsaType();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class Tlv : public Entity
                                        {
                                            public:
                                                Tlv();
                                                ~Tlv();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf tlv_type; //type: uint16
                                                YLeaf tlv_length; //type: uint16
                                                YLeaf mpls_router_id; //type: uint32
                                                YLeaf mpls_dste_link; //type: boolean
                                                YLeaf tlv_data; //type: string

                                            class TeLinkSubTlv : public Entity
                                            {
                                                public:
                                                    TeLinkSubTlv();
                                                    ~TeLinkSubTlv();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf sub_tlv_type; //type: StlvEnum
                                                    YLeaf sub_tlv_length; //type: uint16
                                                    YLeaf sub_tlv_value; //type: string



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType::Tlv::TeLinkSubTlv


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType::Tlv::TeLinkSubTlv> > te_link_sub_tlv;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType::Tlv


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType::Tlv> > tlv;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType


                                    class OpaqueGraceLsa : public Entity
                                    {
                                        public:
                                            OpaqueGraceLsa();
                                            ~OpaqueGraceLsa();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf grace_period; //type: uint32
                                            YLeaf grace_reason; //type: OspfGrReasonEnum
                                            YLeaf ip_address; //type: string



                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueGraceLsa


                                    class OpaqueRouterInfoLsaType : public Entity
                                    {
                                        public:
                                            OpaqueRouterInfoLsaType();
                                            ~OpaqueRouterInfoLsaType();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf opaque_rilsa_scope; //type: OspfLsaOpqRiScopeEnum
                                            YLeaf opaque_ri_interface_name; //type: string

                                        class OpaqueRitlv : public Entity
                                        {
                                            public:
                                                OpaqueRitlv();
                                                ~OpaqueRitlv();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf ritlv_internal_type; //type: OspfShOpqRiTlvTypesEnum

                                            class UnknownTlv : public Entity
                                            {
                                                public:
                                                    UnknownTlv();
                                                    ~UnknownTlv();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf ri_gen_tlv_type; //type: uint16
                                                    YLeaf ri_gen_tlv_length; //type: uint16
                                                    YLeaf ri_genvalue; //type: string



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::UnknownTlv


                                            class RtrCapTlv : public Entity
                                            {
                                                public:
                                                    RtrCapTlv();
                                                    ~RtrCapTlv();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf rtr_cap_tlv_length; //type: uint16
                                                    YLeaf rtr_cap_graceful_restart; //type: boolean
                                                    YLeaf rtr_cap_graceful_restart_helper; //type: boolean
                                                    YLeaf rtr_cap_stub_rtr; //type: boolean
                                                    YLeaf rtr_cap_area_te; //type: boolean
                                                    YLeaf rtr_cap_p2plan; //type: boolean
                                                    YLeaf rtr_cap_te_exp; //type: boolean
                                                    YLeaf rtr_cap_all_bits; //type: uint32
                                                    YLeaf rtr_cap_additional_info; //type: string



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::RtrCapTlv


                                            class Pcedtlv : public Entity
                                            {
                                                public:
                                                    Pcedtlv();
                                                    ~Pcedtlv();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf pcedtlv_length; //type: uint16

                                                class PcedAddr : public Entity
                                                {
                                                    public:
                                                        PcedAddr();
                                                        ~PcedAddr();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf pce_addr_type; //type: OspfShOpqRiPceAddrTypesEnum

                                                    class PceAddrUnknownTlv : public Entity
                                                    {
                                                        public:
                                                            PceAddrUnknownTlv();
                                                            ~PceAddrUnknownTlv();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf ri_gen_tlv_type; //type: uint16
                                                            YLeaf ri_gen_tlv_length; //type: uint16
                                                            YLeaf ri_genvalue; //type: string



                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::PceAddrUnknownTlv


                                                    class Ipv4PceAddr : public Entity
                                                    {
                                                        public:
                                                            Ipv4PceAddr();
                                                            ~Ipv4PceAddr();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf pceipv4_addr; //type: string



                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::Ipv4PceAddr


                                                    class Ipv6PceAddr : public Entity
                                                    {
                                                        public:
                                                            Ipv6PceAddr();
                                                            ~Ipv6PceAddr();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf pceipv6_addr; //type: string



                                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::Ipv6PceAddr


                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::Ipv4PceAddr> ipv4pce_addr;
                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::Ipv6PceAddr> ipv6pce_addr;
                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::PceAddrUnknownTlv> pce_addr_unknown_tlv;


                                                }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr


                                                class PcedScope : public Entity
                                                {
                                                    public:
                                                        PcedScope();
                                                        ~PcedScope();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf lbit; //type: boolean
                                                        YLeaf rbit; //type: boolean
                                                        YLeaf rd_bit; //type: boolean
                                                        YLeaf sbit; //type: boolean
                                                        YLeaf sd_bit; //type: boolean
                                                        YLeaf ybit; //type: boolean
                                                        YLeaf pref_l; //type: uint8
                                                        YLeaf pref_r; //type: uint8
                                                        YLeaf pref_s; //type: uint8
                                                        YLeaf pref_y; //type: uint8
                                                        YLeaf all_scope_info_bits; //type: uint32



                                                }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedScope


                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr> pced_addr;
                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedScope> pced_scope;


                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv


                                            class SrAlgoTlv : public Entity
                                            {
                                                public:
                                                    SrAlgoTlv();
                                                    ~SrAlgoTlv();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf sr_algo_length; //type: uint16
                                                    YLeaf sr_algo_value; //type: string



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrAlgoTlv


                                            class SrRangeTlv : public Entity
                                            {
                                                public:
                                                    SrRangeTlv();
                                                    ~SrRangeTlv();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf sr_range_length; //type: uint16
                                                    YLeaf sr_range_size; //type: uint32

                                                class Sidtlv : public Entity
                                                {
                                                    public:
                                                        Sidtlv();
                                                        ~Sidtlv();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf sr_sid_length; //type: uint16
                                                        YLeaf sr_sid_value; //type: uint32



                                                }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrRangeTlv::Sidtlv


                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrRangeTlv::Sidtlv> sidtlv;


                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrRangeTlv


                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv> pcedtlv;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::RtrCapTlv> rtr_cap_tlv;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrAlgoTlv> sr_algo_tlv;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrRangeTlv> sr_range_tlv;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::UnknownTlv> unknown_tlv;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv> > opaque_ritlv;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType


                                    class OpaqueEpLsaType : public Entity
                                    {
                                        public:
                                            OpaqueEpLsaType();
                                            ~OpaqueEpLsaType();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class Tlv : public Entity
                                        {
                                            public:
                                                Tlv();
                                                ~Tlv();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf tlv_type; //type: uint16
                                                YLeaf tlv_length; //type: uint16
                                                YLeaf mpls_router_id; //type: uint32
                                                YLeaf mpls_dste_link; //type: boolean
                                                YLeaf tlv_data; //type: string

                                            class TeLinkSubTlv : public Entity
                                            {
                                                public:
                                                    TeLinkSubTlv();
                                                    ~TeLinkSubTlv();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf sub_tlv_type; //type: StlvEnum
                                                    YLeaf sub_tlv_length; //type: uint16
                                                    YLeaf sub_tlv_value; //type: string



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType::Tlv::TeLinkSubTlv


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType::Tlv::TeLinkSubTlv> > te_link_sub_tlv;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType::Tlv


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType::Tlv> > tlv;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType


                                    class OpaqueElLsaType : public Entity
                                    {
                                        public:
                                            OpaqueElLsaType();
                                            ~OpaqueElLsaType();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;



                                        class Tlv : public Entity
                                        {
                                            public:
                                                Tlv();
                                                ~Tlv();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf tlv_type; //type: uint16
                                                YLeaf tlv_length; //type: uint16
                                                YLeaf mpls_router_id; //type: uint32
                                                YLeaf mpls_dste_link; //type: boolean
                                                YLeaf tlv_data; //type: string

                                            class TeLinkSubTlv : public Entity
                                            {
                                                public:
                                                    TeLinkSubTlv();
                                                    ~TeLinkSubTlv();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf sub_tlv_type; //type: StlvEnum
                                                    YLeaf sub_tlv_length; //type: uint16
                                                    YLeaf sub_tlv_value; //type: string



                                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueElLsaType::Tlv::TeLinkSubTlv


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueElLsaType::Tlv::TeLinkSubTlv> > te_link_sub_tlv;


                                        }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueElLsaType::Tlv


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueElLsaType::Tlv> > tlv;


                                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueElLsaType


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::ExternalLsaType> external_lsa_type;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::NetworkLsaType> network_lsa_type;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueElLsaType> opaque_el_lsa_type;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType> opaque_ep_lsa_type;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueGraceLsa> opaque_grace_lsa;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueLinkLsaType> opaque_link_lsa_type;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType> opaque_mpls_te_lsa_type;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType> opaque_router_info_lsa_type;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType> router_lsa_type;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData::SummaryLsaType> summary_lsa_type;


                                }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaDetailData> lsa_detail_data;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaHeader> lsa_header;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa::LsaInternalData> lsa_internal_data;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas::Lsa> > lsa;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas


                        class LsaSummaries : public Entity
                        {
                            public:
                                LsaSummaries();
                                ~LsaSummaries();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class LsaSummary : public Entity
                            {
                                public:
                                    LsaSummary();
                                    ~LsaSummary();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf area_id; //type: int32
                                    YLeaf ls_type; //type: OspfLsEnum
                                    YLeaf ls_id; //type: string
                                    YLeaf advertising_router; //type: string
                                    YLeaf interface_name; //type: string
                                    YLeaf external_tag; //type: uint32
                                    YLeaf link_count; //type: uint16

                                class LsaHeader : public Entity
                                {
                                    public:
                                        LsaHeader();
                                        ~LsaHeader();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf ls_type; //type: LsaEnum
                                        YLeaf lsid; //type: string
                                        YLeaf advertising_router; //type: string
                                        YLeaf lsa_area_id; //type: string
                                        YLeaf lsa_age; //type: uint16
                                        YLeaf dn_age_lsa; //type: boolean
                                        YLeaf nsf; //type: boolean
                                        YLeaf sequence_number; //type: uint32
                                        YLeaf checksum; //type: uint16



                                }; // Ospf::Processes::Process::Vrfs::Vrf::Database::LsaSummaries::LsaSummary::LsaHeader


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::LsaSummaries::LsaSummary::LsaHeader> lsa_header;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::Database::LsaSummaries::LsaSummary


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::LsaSummaries::LsaSummary> > lsa_summary;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::Database::LsaSummaries


                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseAreas> database_areas;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseSummaries> database_summaries;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::DatabaseSummaryAs> database_summary_as;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::LsaSummaries> lsa_summaries;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database::Lsas> lsas;


                    }; // Ospf::Processes::Process::Vrfs::Vrf::Database


                    class SummaryPrefixes : public Entity
                    {
                        public:
                            SummaryPrefixes();
                            ~SummaryPrefixes();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class SummaryPrefix : public Entity
                        {
                            public:
                                SummaryPrefix();
                                ~SummaryPrefix();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf prefix; //type: string
                                YLeaf netmask; //type: string
                                YLeaf summary_prefix; //type: string
                                YLeaf summary_mask; //type: string
                                YLeaf summary_metric; //type: uint32
                                YLeaf summary_metric_type; //type: ExMetricEnum
                                YLeaf summary_tag; //type: uint32



                        }; // Ospf::Processes::Process::Vrfs::Vrf::SummaryPrefixes::SummaryPrefix


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::SummaryPrefixes::SummaryPrefix> > summary_prefix;


                    }; // Ospf::Processes::Process::Vrfs::Vrf::SummaryPrefixes


                    class OspfSummary : public Entity
                    {
                        public:
                            OspfSummary();
                            ~OspfSummary();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                            YLeaf sa_num_nbrs; //type: uint32
                            YLeaf sa_num_nbrs_up; //type: uint32
                            YLeaf sa_num_intf; //type: uint32
                            YLeaf sa_num_intf_up; //type: uint32
                            YLeaf sa_num_vintf_up; //type: uint32
                            YLeaf sa_num_slintf_up; //type: uint32
                            YLeaf sa_num_areas; //type: uint32
                            YLeaf sa_lsa_cnt_type_rtr; //type: uint32
                            YLeaf sa_lsa_cnt_type_net; //type: uint32
                            YLeaf sa_lsa_cnt_type_sum_net; //type: uint32
                            YLeaf sa_lsa_cnt_type_sum_asb; //type: uint32
                            YLeaf sa_lsa_cnt_type_ase; //type: uint32
                            YLeaf sa_lsa_cnt_type_mospf; //type: uint32
                            YLeaf sa_lsa_cnt_type_7ase; //type: uint32
                            YLeaf sa_lsa_cnt_type_8_ignore; //type: uint32
                            YLeaf sa_lsa_cnt_type_opq_link; //type: uint32
                            YLeaf sa_lsa_cnt_type_opq_area; //type: uint32
                            YLeaf sa_lsa_cnt_type_opq_as; //type: uint32



                    }; // Ospf::Processes::Process::Vrfs::Vrf::OspfSummary


                    class FastReroute : public Entity
                    {
                        public:
                            FastReroute();
                            ~FastReroute();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Topologies : public Entity
                        {
                            public:
                                Topologies();
                                ~Topologies();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class Topology : public Entity
                            {
                                public:
                                    Topology();
                                    ~Topology();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf router_id; //type: string
                                    YLeaf area_id; //type: int32
                                    YLeaf ipfrr_topo_area_id; //type: string
                                    YLeaf ipfrr_router_id; //type: string
                                    YLeaf ipfrr_area_revision; //type: uint32

                                class IpfrrTopo : public Entity
                                {
                                    public:
                                        IpfrrTopo();
                                        ~IpfrrTopo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf node_id; //type: string
                                        YLeaf distance; //type: uint32
                                        YLeaf distance_reverse; //type: uint32
                                        YLeaf type4; //type: boolean
                                        YLeaf revision; //type: uint32
                                        YLeaf neighbor_sourced; //type: boolean
                                        YLeaf dr; //type: boolean
                                        YLeaf poison; //type: boolean



                                }; // Ospf::Processes::Process::Vrfs::Vrf::FastReroute::Topologies::Topology::IpfrrTopo


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::FastReroute::Topologies::Topology::IpfrrTopo> > ipfrr_topo;


                            }; // Ospf::Processes::Process::Vrfs::Vrf::FastReroute::Topologies::Topology


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::FastReroute::Topologies::Topology> > topology;


                        }; // Ospf::Processes::Process::Vrfs::Vrf::FastReroute::Topologies


                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::FastReroute::Topologies> topologies;


                    }; // Ospf::Processes::Process::Vrfs::Vrf::FastReroute


                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::AdjacencyInformation> adjacency_information;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Areas> areas;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::BorderRouters> border_routers;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::Database> database;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::FastReroute> fast_reroute;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::FloodListTable> flood_list_table;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceInformation> interface_information;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::InterfaceVrfInformation> interface_vrf_information;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::MplsTe> mpls_te;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::OspfSummary> ospf_summary;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::ProcessInformation> process_information;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::RouteInformation> route_information;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf::SummaryPrefixes> summary_prefixes;


                }; // Ospf::Processes::Process::Vrfs::Vrf


                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs::Vrf> > vrf;


            }; // Ospf::Processes::Process::Vrfs


            class Srms : public Entity
            {
                public:
                    Srms();
                    ~Srms();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;



                class Policy : public Entity
                {
                    public:
                        Policy();
                        ~Policy();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;



                    class PolicyIpv4 : public Entity
                    {
                        public:
                            PolicyIpv4();
                            ~PolicyIpv4();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class PolicyIpv4Backup : public Entity
                        {
                            public:
                                PolicyIpv4Backup();
                                ~PolicyIpv4Backup();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class PolicyMi : public Entity
                            {
                                public:
                                    PolicyMi();
                                    ~PolicyMi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf mi_id; //type: string
                                    YLeaf src; //type: SrmsMiSrcEBEnum
                                    YLeaf router; //type: string
                                    YLeaf area; //type: string
                                    YLeaf prefix; //type: uint8
                                    YLeaf sid_start; //type: uint32
                                    YLeaf sid_count; //type: uint32
                                    YLeaf last_prefix; //type: string
                                    YLeaf last_sid_index; //type: uint32
                                    YLeaf flag_attached; //type: SrmsMiFlagEBEnum

                                class Addr : public Entity
                                {
                                    public:
                                        Addr();
                                        ~Addr();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf af; //type: SrmsMiAfEBEnum
                                        YLeaf ipv4; //type: string
                                        YLeaf ipv6; //type: string



                                }; // Ospf::Processes::Process::Srms::Policy::PolicyIpv4::PolicyIpv4Backup::PolicyMi::Addr


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Srms::Policy::PolicyIpv4::PolicyIpv4Backup::PolicyMi::Addr> addr;


                            }; // Ospf::Processes::Process::Srms::Policy::PolicyIpv4::PolicyIpv4Backup::PolicyMi


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Srms::Policy::PolicyIpv4::PolicyIpv4Backup::PolicyMi> > policy_mi;


                        }; // Ospf::Processes::Process::Srms::Policy::PolicyIpv4::PolicyIpv4Backup


                        class PolicyIpv4Active : public Entity
                        {
                            public:
                                PolicyIpv4Active();
                                ~PolicyIpv4Active();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class PolicyMi : public Entity
                            {
                                public:
                                    PolicyMi();
                                    ~PolicyMi();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf mi_id; //type: string
                                    YLeaf src; //type: SrmsMiSrcEBEnum
                                    YLeaf router; //type: string
                                    YLeaf area; //type: string
                                    YLeaf prefix; //type: uint8
                                    YLeaf sid_start; //type: uint32
                                    YLeaf sid_count; //type: uint32
                                    YLeaf last_prefix; //type: string
                                    YLeaf last_sid_index; //type: uint32
                                    YLeaf flag_attached; //type: SrmsMiFlagEBEnum

                                class Addr : public Entity
                                {
                                    public:
                                        Addr();
                                        ~Addr();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf af; //type: SrmsMiAfEBEnum
                                        YLeaf ipv4; //type: string
                                        YLeaf ipv6; //type: string



                                }; // Ospf::Processes::Process::Srms::Policy::PolicyIpv4::PolicyIpv4Active::PolicyMi::Addr


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Srms::Policy::PolicyIpv4::PolicyIpv4Active::PolicyMi::Addr> addr;


                            }; // Ospf::Processes::Process::Srms::Policy::PolicyIpv4::PolicyIpv4Active::PolicyMi


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Srms::Policy::PolicyIpv4::PolicyIpv4Active::PolicyMi> > policy_mi;


                        }; // Ospf::Processes::Process::Srms::Policy::PolicyIpv4::PolicyIpv4Active


                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Srms::Policy::PolicyIpv4::PolicyIpv4Active> policy_ipv4_active;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Srms::Policy::PolicyIpv4::PolicyIpv4Backup> policy_ipv4_backup;


                    }; // Ospf::Processes::Process::Srms::Policy::PolicyIpv4


                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Srms::Policy::PolicyIpv4> policy_ipv4;


                }; // Ospf::Processes::Process::Srms::Policy


                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Srms::Policy> policy;


            }; // Ospf::Processes::Process::Srms


            class DefaultVrf : public Entity
            {
                public:
                    DefaultVrf();
                    ~DefaultVrf();

                    bool has_data() const override;
                    bool has_operation() const override;
                    EntityPath get_entity_path(Entity* parent) const override;
                    std::string get_segment_path() const override;
                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                    void set_value(const std::string & value_path, std::string value) override;
                    std::map<std::string, Entity*> & get_children() override;



                class FloodListTable : public Entity
                {
                    public:
                        FloodListTable();
                        ~FloodListTable();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;



                    class Flood : public Entity
                    {
                        public:
                            Flood();
                            ~Flood();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                            YLeaf interface_name; //type: string
                            YLeaf flood_interface_name; //type: string
                            YLeaf flood_pacing_timer; //type: uint32
                            YLeaf flood_lsa_count; //type: uint32

                        class AreaFlood : public Entity
                        {
                            public:
                                AreaFlood();
                                ~AreaFlood();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf header_lsa_type; //type: LsaEnum
                                YLeaf header_lsa_age; //type: uint16
                                YLeaf header_ls_id; //type: string
                                YLeaf header_advertising_router; //type: string
                                YLeaf header_sequence_number; //type: uint32
                                YLeaf header_lsa_checksum; //type: uint16



                        }; // Ospf::Processes::Process::DefaultVrf::FloodListTable::Flood::AreaFlood


                        class AsFlood : public Entity
                        {
                            public:
                                AsFlood();
                                ~AsFlood();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf header_lsa_type; //type: LsaEnum
                                YLeaf header_lsa_age; //type: uint16
                                YLeaf header_ls_id; //type: string
                                YLeaf header_advertising_router; //type: string
                                YLeaf header_sequence_number; //type: uint32
                                YLeaf header_lsa_checksum; //type: uint16



                        }; // Ospf::Processes::Process::DefaultVrf::FloodListTable::Flood::AsFlood


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::FloodListTable::Flood::AreaFlood> > area_flood;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::FloodListTable::Flood::AsFlood> > as_flood;


                    }; // Ospf::Processes::Process::DefaultVrf::FloodListTable::Flood


                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::FloodListTable::Flood> > flood;


                }; // Ospf::Processes::Process::DefaultVrf::FloodListTable


                class MplsTe : public Entity
                {
                    public:
                        MplsTe();
                        ~MplsTe();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;



                    class MplsTeLinks : public Entity
                    {
                        public:
                            MplsTeLinks();
                            ~MplsTeLinks();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class MplsTeLink : public Entity
                        {
                            public:
                                MplsTeLink();
                                ~MplsTeLink();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf area_id; //type: int32
                                YLeaf mpls_te_router_id; //type: string
                                YLeaf mpls_te_enabled; //type: boolean
                                YLeaf mpls_te_initialized; //type: boolean
                                YLeaf mpls_te_area_id; //type: string
                                YLeaf mpls_te_area_instance; //type: uint32
                                YLeaf mpls_te_router_address; //type: string
                                YLeaf mpls_te_next_fragment_id; //type: uint32
                                YLeaf spacious_fragment; //type: boolean

                            class MplsTeLink_ : public Entity
                            {
                                public:
                                    MplsTeLink_();
                                    ~MplsTeLink_();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf new_link; //type: boolean
                                    YLeaf fragment_id; //type: uint32
                                    YLeaf mpls_link_instance; //type: uint32
                                    YLeaf mpls_link_type; //type: LinkSubnetEnum
                                    YLeaf neighbor_system_id; //type: string
                                    YLeaf link_address; //type: string
                                    YLeaf neighbor_ip_address; //type: string
                                    YLeaf igp_metric; //type: uint32
                                    YLeaf te_metric; //type: uint32
                                    YLeaf maximum_link_bw; //type: uint32
                                    YLeaf maximum_link_reservable_bw; //type: uint32
                                    YLeaf maximum_link_sub_reservable_bw; //type: uint32
                                    YLeaf priority_count; //type: int32
                                    YLeaf affinity; //type: uint32
                                    YLeaf output_interface_id; //type: uint32
                                    YLeaf input_interface_id; //type: uint32
                                    YLeaf dste_in_use; //type: boolean
                                    YLeaf dste_allocation_model_id; //type: IgpteLibBwModelEnum
                                    YLeaf number_of_optional_tl_vs; //type: uint8

                                class GlobalUnreserveBwPerPriority : public Entity
                                {
                                    public:
                                        GlobalUnreserveBwPerPriority();
                                        ~GlobalUnreserveBwPerPriority();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeafList bw_per_priority; //type: list of  uint64



                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::GlobalUnreserveBwPerPriority


                                class SubPoolUnreserveBwPerPriority : public Entity
                                {
                                    public:
                                        SubPoolUnreserveBwPerPriority();
                                        ~SubPoolUnreserveBwPerPriority();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeafList bw_per_priority; //type: list of  uint64



                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::SubPoolUnreserveBwPerPriority


                                class LinkProtocolPriorityCapability : public Entity
                                {
                                    public:
                                        LinkProtocolPriorityCapability();
                                        ~LinkProtocolPriorityCapability();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf link_protocol_capability; //type: uint8
                                        YLeaf link_protocol_priority; //type: uint8



                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::LinkProtocolPriorityCapability


                                class LinkSwCapability : public Entity
                                {
                                    public:
                                        LinkSwCapability();
                                        ~LinkSwCapability();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf link_switching_capability; //type: uint8
                                        YLeaf link_encoding; //type: uint8
                                        YLeaf minimum_lsp_bw; //type: uint64
                                        YLeaf link_mtu; //type: uint16
                                        YLeafList maximum_lsp_bw_per_priority; //type: list of  uint64



                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::LinkSwCapability


                                class ExtendedAdminGroupList : public Entity
                                {
                                    public:
                                        ExtendedAdminGroupList();
                                        ~ExtendedAdminGroupList();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf extended_admin_size; //type: uint32
                                        YLeafList ext_admin_data; //type: list of  uint32



                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::ExtendedAdminGroupList


                                class MplsteLinkOptTlv : public Entity
                                {
                                    public:
                                        MplsteLinkOptTlv();
                                        ~MplsteLinkOptTlv();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf mplste_link_opt_tlv_type; //type: MplsTeOptTlvEnum
                                        YLeaf mplste_link_opt_tlv_len; //type: uint16

                                    class MplsteLinkOptTlvValue : public Entity
                                    {
                                        public:
                                            MplsteLinkOptTlvValue();
                                            ~MplsteLinkOptTlvValue();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf opaque_tlv_type; //type: MplsTeOptTlvEnum

                                        class BctlvValue : public Entity
                                        {
                                            public:
                                                BctlvValue();
                                                ~BctlvValue();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf model_id; //type: uint8
                                                YLeaf num_b_cs; //type: uint32
                                                YLeafList mplste_link_bc_bandwidth; //type: list of  uint64



                                        }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::BctlvValue


                                        class SrlgtlvValue : public Entity
                                        {
                                            public:
                                                SrlgtlvValue();
                                                ~SrlgtlvValue();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf srlg_len; //type: uint32
                                                YLeaf num_srl_gs; //type: uint32
                                                YLeafList mplste_link_srlg_data; //type: list of  uint32



                                        }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::SrlgtlvValue


                                        class IxcdtlvValue : public Entity
                                        {
                                            public:
                                                IxcdtlvValue();
                                                ~IxcdtlvValue();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf switching_cap; //type: uint8
                                                YLeaf rile_len_code; //type: uint8
                                                YLeaf fixed_scsi_count; //type: uint32
                                                YLeaf flex_scsi_count; //type: uint32
                                                YLeafList max_lspbw; //type: list of  int64

                                            class IxcdSwitchingCapType : public Entity
                                            {
                                                public:
                                                    IxcdSwitchingCapType();
                                                    ~IxcdSwitchingCapType();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf switching_cap_type; //type: uint8

                                                class IxcdpscInfo : public Entity
                                                {
                                                    public:
                                                        IxcdpscInfo();
                                                        ~IxcdpscInfo();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf min_lsp_bandwidth; //type: uint64
                                                        YLeaf psc_interface_mtu; //type: uint16



                                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdpscInfo


                                                class IxcdbwSubTlv : public Entity
                                                {
                                                    public:
                                                        IxcdbwSubTlv();
                                                        ~IxcdbwSubTlv();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;



                                                    class ArrBwSubTlv : public Entity
                                                    {
                                                        public:
                                                            ArrBwSubTlv();
                                                            ~ArrBwSubTlv();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf bw_sub_tlv_type; //type: uint16
                                                            YLeaf bw_sub_tlv_length; //type: uint16

                                                        class BwSubTlvValue : public Entity
                                                        {
                                                            public:
                                                                BwSubTlvValue();
                                                                ~BwSubTlvValue();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;


                                                                YLeaf ixcdbw_sub_tlv_type; //type: uint16

                                                            class FixedBwSubTlvValue : public Entity
                                                            {
                                                                public:
                                                                    FixedBwSubTlvValue();
                                                                    ~FixedBwSubTlvValue();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                    YLeafList unres_oduj_prio; //type: list of  uint32

                                                                class FixedSubTlvValue : public Entity
                                                                {
                                                                    public:
                                                                        FixedSubTlvValue();
                                                                        ~FixedSubTlvValue();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                        YLeaf signal_type; //type: uint8
                                                                        YLeaf num_stages; //type: uint8
                                                                        YLeaf tbit; //type: uint8
                                                                        YLeaf sbit; //type: uint8
                                                                        YLeaf tsg; //type: uint8
                                                                        YLeaf res; //type: uint8
                                                                        YLeaf priority_bit0; //type: uint8
                                                                        YLeaf priority_bit1; //type: uint8
                                                                        YLeaf priority_bit2; //type: uint8
                                                                        YLeaf priority_bit3; //type: uint8
                                                                        YLeaf priority_bit4; //type: uint8
                                                                        YLeaf priority_bit5; //type: uint8
                                                                        YLeaf priority_bit6; //type: uint8
                                                                        YLeaf priority_bit7; //type: uint8
                                                                        YLeaf stage; //type: string



                                                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue::FixedSubTlvValue


                                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue::FixedSubTlvValue> fixed_sub_tlv_value;


                                                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue


                                                            class FlexBwSubTlvValue : public Entity
                                                            {
                                                                public:
                                                                    FlexBwSubTlvValue();
                                                                    ~FlexBwSubTlvValue();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                    YLeafList unres_lspbw; //type: list of  uint64
                                                                    YLeafList max_lspbw; //type: list of  uint64

                                                                class FlexSubTlvValueCommon : public Entity
                                                                {
                                                                    public:
                                                                        FlexSubTlvValueCommon();
                                                                        ~FlexSubTlvValueCommon();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                        YLeaf signal_type; //type: uint8
                                                                        YLeaf num_stages; //type: uint8
                                                                        YLeaf tbit; //type: uint8
                                                                        YLeaf sbit; //type: uint8
                                                                        YLeaf tsg; //type: uint8
                                                                        YLeaf res; //type: uint8
                                                                        YLeaf priority_bit0; //type: uint8
                                                                        YLeaf priority_bit1; //type: uint8
                                                                        YLeaf priority_bit2; //type: uint8
                                                                        YLeaf priority_bit3; //type: uint8
                                                                        YLeaf priority_bit4; //type: uint8
                                                                        YLeaf priority_bit5; //type: uint8
                                                                        YLeaf priority_bit6; //type: uint8
                                                                        YLeaf priority_bit7; //type: uint8
                                                                        YLeaf stage; //type: string



                                                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue::FlexSubTlvValueCommon


                                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue::FlexSubTlvValueCommon> flex_sub_tlv_value_common;


                                                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue


                                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue> fixed_bw_sub_tlv_value;
                                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue> flex_bw_sub_tlv_value;


                                                        }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue


                                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue> bw_sub_tlv_value;


                                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv


                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv> > arr_bw_sub_tlv;


                                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv


                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv> ixcdbw_sub_tlv;
                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdpscInfo> ixcdpsc_info;


                                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType


                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType> ixcd_switching_cap_type;


                                        }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue


                                        class UnidtlvValue : public Entity
                                        {
                                            public:
                                                UnidtlvValue();
                                                ~UnidtlvValue();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf uni_dir_delay; //type: uint32



                                        }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::UnidtlvValue


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::BctlvValue> bctlv_value;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue> ixcdtlv_value;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::SrlgtlvValue> srlgtlv_value;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::UnidtlvValue> unidtlv_value;


                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue> > mplste_link_opt_tlv_value;


                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::ExtendedAdminGroupList> extended_admin_group_list;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::GlobalUnreserveBwPerPriority> global_unreserve_bw_per_priority;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::LinkProtocolPriorityCapability> link_protocol_priority_capability;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::LinkSwCapability> link_sw_capability;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::MplsteLinkOptTlv> > mplste_link_opt_tlv;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_::SubPoolUnreserveBwPerPriority> sub_pool_unreserve_bw_per_priority;


                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_


                            class MplsTeFragment : public Entity
                            {
                                public:
                                    MplsTeFragment();
                                    ~MplsTeFragment();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf fragment_instance; //type: uint32
                                    YLeaf fragment_id; //type: uint32
                                    YLeaf dste_model_id; //type: uint8
                                    YLeaf same_fragment_count; //type: uint8

                                class MplsTeLink_ : public Entity
                                {
                                    public:
                                        MplsTeLink_();
                                        ~MplsTeLink_();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf new_link; //type: boolean
                                        YLeaf fragment_id; //type: uint32
                                        YLeaf mpls_link_instance; //type: uint32
                                        YLeaf mpls_link_type; //type: LinkSubnetEnum
                                        YLeaf neighbor_system_id; //type: string
                                        YLeaf link_address; //type: string
                                        YLeaf neighbor_ip_address; //type: string
                                        YLeaf igp_metric; //type: uint32
                                        YLeaf te_metric; //type: uint32
                                        YLeaf maximum_link_bw; //type: uint32
                                        YLeaf maximum_link_reservable_bw; //type: uint32
                                        YLeaf maximum_link_sub_reservable_bw; //type: uint32
                                        YLeaf priority_count; //type: int32
                                        YLeaf affinity; //type: uint32
                                        YLeaf output_interface_id; //type: uint32
                                        YLeaf input_interface_id; //type: uint32
                                        YLeaf dste_in_use; //type: boolean
                                        YLeaf dste_allocation_model_id; //type: IgpteLibBwModelEnum
                                        YLeaf number_of_optional_tl_vs; //type: uint8

                                    class GlobalUnreserveBwPerPriority : public Entity
                                    {
                                        public:
                                            GlobalUnreserveBwPerPriority();
                                            ~GlobalUnreserveBwPerPriority();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeafList bw_per_priority; //type: list of  uint64



                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::GlobalUnreserveBwPerPriority


                                    class SubPoolUnreserveBwPerPriority : public Entity
                                    {
                                        public:
                                            SubPoolUnreserveBwPerPriority();
                                            ~SubPoolUnreserveBwPerPriority();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeafList bw_per_priority; //type: list of  uint64



                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::SubPoolUnreserveBwPerPriority


                                    class LinkProtocolPriorityCapability : public Entity
                                    {
                                        public:
                                            LinkProtocolPriorityCapability();
                                            ~LinkProtocolPriorityCapability();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf link_protocol_capability; //type: uint8
                                            YLeaf link_protocol_priority; //type: uint8



                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::LinkProtocolPriorityCapability


                                    class LinkSwCapability : public Entity
                                    {
                                        public:
                                            LinkSwCapability();
                                            ~LinkSwCapability();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf link_switching_capability; //type: uint8
                                            YLeaf link_encoding; //type: uint8
                                            YLeaf minimum_lsp_bw; //type: uint64
                                            YLeaf link_mtu; //type: uint16
                                            YLeafList maximum_lsp_bw_per_priority; //type: list of  uint64



                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::LinkSwCapability


                                    class ExtendedAdminGroupList : public Entity
                                    {
                                        public:
                                            ExtendedAdminGroupList();
                                            ~ExtendedAdminGroupList();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf extended_admin_size; //type: uint32
                                            YLeafList ext_admin_data; //type: list of  uint32



                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::ExtendedAdminGroupList


                                    class MplsteLinkOptTlv : public Entity
                                    {
                                        public:
                                            MplsteLinkOptTlv();
                                            ~MplsteLinkOptTlv();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf mplste_link_opt_tlv_type; //type: MplsTeOptTlvEnum
                                            YLeaf mplste_link_opt_tlv_len; //type: uint16

                                        class MplsteLinkOptTlvValue : public Entity
                                        {
                                            public:
                                                MplsteLinkOptTlvValue();
                                                ~MplsteLinkOptTlvValue();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf opaque_tlv_type; //type: MplsTeOptTlvEnum

                                            class BctlvValue : public Entity
                                            {
                                                public:
                                                    BctlvValue();
                                                    ~BctlvValue();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf model_id; //type: uint8
                                                    YLeaf num_b_cs; //type: uint32
                                                    YLeafList mplste_link_bc_bandwidth; //type: list of  uint64



                                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::BctlvValue


                                            class SrlgtlvValue : public Entity
                                            {
                                                public:
                                                    SrlgtlvValue();
                                                    ~SrlgtlvValue();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf srlg_len; //type: uint32
                                                    YLeaf num_srl_gs; //type: uint32
                                                    YLeafList mplste_link_srlg_data; //type: list of  uint32



                                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::SrlgtlvValue


                                            class IxcdtlvValue : public Entity
                                            {
                                                public:
                                                    IxcdtlvValue();
                                                    ~IxcdtlvValue();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf switching_cap; //type: uint8
                                                    YLeaf rile_len_code; //type: uint8
                                                    YLeaf fixed_scsi_count; //type: uint32
                                                    YLeaf flex_scsi_count; //type: uint32
                                                    YLeafList max_lspbw; //type: list of  int64

                                                class IxcdSwitchingCapType : public Entity
                                                {
                                                    public:
                                                        IxcdSwitchingCapType();
                                                        ~IxcdSwitchingCapType();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf switching_cap_type; //type: uint8

                                                    class IxcdpscInfo : public Entity
                                                    {
                                                        public:
                                                            IxcdpscInfo();
                                                            ~IxcdpscInfo();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf min_lsp_bandwidth; //type: uint64
                                                            YLeaf psc_interface_mtu; //type: uint16



                                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdpscInfo


                                                    class IxcdbwSubTlv : public Entity
                                                    {
                                                        public:
                                                            IxcdbwSubTlv();
                                                            ~IxcdbwSubTlv();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;



                                                        class ArrBwSubTlv : public Entity
                                                        {
                                                            public:
                                                                ArrBwSubTlv();
                                                                ~ArrBwSubTlv();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;


                                                                YLeaf bw_sub_tlv_type; //type: uint16
                                                                YLeaf bw_sub_tlv_length; //type: uint16

                                                            class BwSubTlvValue : public Entity
                                                            {
                                                                public:
                                                                    BwSubTlvValue();
                                                                    ~BwSubTlvValue();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                    YLeaf ixcdbw_sub_tlv_type; //type: uint16

                                                                class FixedBwSubTlvValue : public Entity
                                                                {
                                                                    public:
                                                                        FixedBwSubTlvValue();
                                                                        ~FixedBwSubTlvValue();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                        YLeafList unres_oduj_prio; //type: list of  uint32

                                                                    class FixedSubTlvValue : public Entity
                                                                    {
                                                                        public:
                                                                            FixedSubTlvValue();
                                                                            ~FixedSubTlvValue();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                            YLeaf signal_type; //type: uint8
                                                                            YLeaf num_stages; //type: uint8
                                                                            YLeaf tbit; //type: uint8
                                                                            YLeaf sbit; //type: uint8
                                                                            YLeaf tsg; //type: uint8
                                                                            YLeaf res; //type: uint8
                                                                            YLeaf priority_bit0; //type: uint8
                                                                            YLeaf priority_bit1; //type: uint8
                                                                            YLeaf priority_bit2; //type: uint8
                                                                            YLeaf priority_bit3; //type: uint8
                                                                            YLeaf priority_bit4; //type: uint8
                                                                            YLeaf priority_bit5; //type: uint8
                                                                            YLeaf priority_bit6; //type: uint8
                                                                            YLeaf priority_bit7; //type: uint8
                                                                            YLeaf stage; //type: string



                                                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue::FixedSubTlvValue


                                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue::FixedSubTlvValue> fixed_sub_tlv_value;


                                                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue


                                                                class FlexBwSubTlvValue : public Entity
                                                                {
                                                                    public:
                                                                        FlexBwSubTlvValue();
                                                                        ~FlexBwSubTlvValue();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                        YLeafList unres_lspbw; //type: list of  uint64
                                                                        YLeafList max_lspbw; //type: list of  uint64

                                                                    class FlexSubTlvValueCommon : public Entity
                                                                    {
                                                                        public:
                                                                            FlexSubTlvValueCommon();
                                                                            ~FlexSubTlvValueCommon();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                            YLeaf signal_type; //type: uint8
                                                                            YLeaf num_stages; //type: uint8
                                                                            YLeaf tbit; //type: uint8
                                                                            YLeaf sbit; //type: uint8
                                                                            YLeaf tsg; //type: uint8
                                                                            YLeaf res; //type: uint8
                                                                            YLeaf priority_bit0; //type: uint8
                                                                            YLeaf priority_bit1; //type: uint8
                                                                            YLeaf priority_bit2; //type: uint8
                                                                            YLeaf priority_bit3; //type: uint8
                                                                            YLeaf priority_bit4; //type: uint8
                                                                            YLeaf priority_bit5; //type: uint8
                                                                            YLeaf priority_bit6; //type: uint8
                                                                            YLeaf priority_bit7; //type: uint8
                                                                            YLeaf stage; //type: string



                                                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue::FlexSubTlvValueCommon


                                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue::FlexSubTlvValueCommon> flex_sub_tlv_value_common;


                                                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue


                                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue> fixed_bw_sub_tlv_value;
                                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue> flex_bw_sub_tlv_value;


                                                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue


                                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue> bw_sub_tlv_value;


                                                        }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv


                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv> > arr_bw_sub_tlv;


                                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv


                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv> ixcdbw_sub_tlv;
                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdpscInfo> ixcdpsc_info;


                                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType


                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType> ixcd_switching_cap_type;


                                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue


                                            class UnidtlvValue : public Entity
                                            {
                                                public:
                                                    UnidtlvValue();
                                                    ~UnidtlvValue();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf uni_dir_delay; //type: uint32



                                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::UnidtlvValue


                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::BctlvValue> bctlv_value;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue> ixcdtlv_value;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::SrlgtlvValue> srlgtlv_value;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue::UnidtlvValue> unidtlv_value;


                                        }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv::MplsteLinkOptTlvValue> > mplste_link_opt_tlv_value;


                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::ExtendedAdminGroupList> extended_admin_group_list;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::GlobalUnreserveBwPerPriority> global_unreserve_bw_per_priority;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::LinkProtocolPriorityCapability> link_protocol_priority_capability;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::LinkSwCapability> link_sw_capability;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::MplsteLinkOptTlv> > mplste_link_opt_tlv;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_::SubPoolUnreserveBwPerPriority> sub_pool_unreserve_bw_per_priority;


                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment::MplsTeLink_> > mpls_te_link;


                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeFragment> > mpls_te_fragment;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink::MplsTeLink_> > mpls_te_link;


                        }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks::MplsTeLink> > mpls_te_link;


                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks


                    class MplsTeFragments : public Entity
                    {
                        public:
                            MplsTeFragments();
                            ~MplsTeFragments();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class MplsTeFragment : public Entity
                        {
                            public:
                                MplsTeFragment();
                                ~MplsTeFragment();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf area_id; //type: int32
                                YLeaf mpls_te_router_id; //type: string
                                YLeaf mpls_te_enabled; //type: boolean
                                YLeaf mpls_te_initialized; //type: boolean
                                YLeaf mpls_te_area_id; //type: string
                                YLeaf mpls_te_area_instance; //type: uint32
                                YLeaf mpls_te_router_address; //type: string
                                YLeaf mpls_te_next_fragment_id; //type: uint32
                                YLeaf spacious_fragment; //type: boolean

                            class MplsTeLink : public Entity
                            {
                                public:
                                    MplsTeLink();
                                    ~MplsTeLink();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf new_link; //type: boolean
                                    YLeaf fragment_id; //type: uint32
                                    YLeaf mpls_link_instance; //type: uint32
                                    YLeaf mpls_link_type; //type: LinkSubnetEnum
                                    YLeaf neighbor_system_id; //type: string
                                    YLeaf link_address; //type: string
                                    YLeaf neighbor_ip_address; //type: string
                                    YLeaf igp_metric; //type: uint32
                                    YLeaf te_metric; //type: uint32
                                    YLeaf maximum_link_bw; //type: uint32
                                    YLeaf maximum_link_reservable_bw; //type: uint32
                                    YLeaf maximum_link_sub_reservable_bw; //type: uint32
                                    YLeaf priority_count; //type: int32
                                    YLeaf affinity; //type: uint32
                                    YLeaf output_interface_id; //type: uint32
                                    YLeaf input_interface_id; //type: uint32
                                    YLeaf dste_in_use; //type: boolean
                                    YLeaf dste_allocation_model_id; //type: IgpteLibBwModelEnum
                                    YLeaf number_of_optional_tl_vs; //type: uint8

                                class GlobalUnreserveBwPerPriority : public Entity
                                {
                                    public:
                                        GlobalUnreserveBwPerPriority();
                                        ~GlobalUnreserveBwPerPriority();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeafList bw_per_priority; //type: list of  uint64



                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::GlobalUnreserveBwPerPriority


                                class SubPoolUnreserveBwPerPriority : public Entity
                                {
                                    public:
                                        SubPoolUnreserveBwPerPriority();
                                        ~SubPoolUnreserveBwPerPriority();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeafList bw_per_priority; //type: list of  uint64



                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::SubPoolUnreserveBwPerPriority


                                class LinkProtocolPriorityCapability : public Entity
                                {
                                    public:
                                        LinkProtocolPriorityCapability();
                                        ~LinkProtocolPriorityCapability();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf link_protocol_capability; //type: uint8
                                        YLeaf link_protocol_priority; //type: uint8



                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::LinkProtocolPriorityCapability


                                class LinkSwCapability : public Entity
                                {
                                    public:
                                        LinkSwCapability();
                                        ~LinkSwCapability();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf link_switching_capability; //type: uint8
                                        YLeaf link_encoding; //type: uint8
                                        YLeaf minimum_lsp_bw; //type: uint64
                                        YLeaf link_mtu; //type: uint16
                                        YLeafList maximum_lsp_bw_per_priority; //type: list of  uint64



                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::LinkSwCapability


                                class ExtendedAdminGroupList : public Entity
                                {
                                    public:
                                        ExtendedAdminGroupList();
                                        ~ExtendedAdminGroupList();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf extended_admin_size; //type: uint32
                                        YLeafList ext_admin_data; //type: list of  uint32



                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::ExtendedAdminGroupList


                                class MplsteLinkOptTlv : public Entity
                                {
                                    public:
                                        MplsteLinkOptTlv();
                                        ~MplsteLinkOptTlv();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf mplste_link_opt_tlv_type; //type: MplsTeOptTlvEnum
                                        YLeaf mplste_link_opt_tlv_len; //type: uint16

                                    class MplsteLinkOptTlvValue : public Entity
                                    {
                                        public:
                                            MplsteLinkOptTlvValue();
                                            ~MplsteLinkOptTlvValue();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf opaque_tlv_type; //type: MplsTeOptTlvEnum

                                        class BctlvValue : public Entity
                                        {
                                            public:
                                                BctlvValue();
                                                ~BctlvValue();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf model_id; //type: uint8
                                                YLeaf num_b_cs; //type: uint32
                                                YLeafList mplste_link_bc_bandwidth; //type: list of  uint64



                                        }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::BctlvValue


                                        class SrlgtlvValue : public Entity
                                        {
                                            public:
                                                SrlgtlvValue();
                                                ~SrlgtlvValue();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf srlg_len; //type: uint32
                                                YLeaf num_srl_gs; //type: uint32
                                                YLeafList mplste_link_srlg_data; //type: list of  uint32



                                        }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::SrlgtlvValue


                                        class IxcdtlvValue : public Entity
                                        {
                                            public:
                                                IxcdtlvValue();
                                                ~IxcdtlvValue();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf switching_cap; //type: uint8
                                                YLeaf rile_len_code; //type: uint8
                                                YLeaf fixed_scsi_count; //type: uint32
                                                YLeaf flex_scsi_count; //type: uint32
                                                YLeafList max_lspbw; //type: list of  int64

                                            class IxcdSwitchingCapType : public Entity
                                            {
                                                public:
                                                    IxcdSwitchingCapType();
                                                    ~IxcdSwitchingCapType();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf switching_cap_type; //type: uint8

                                                class IxcdpscInfo : public Entity
                                                {
                                                    public:
                                                        IxcdpscInfo();
                                                        ~IxcdpscInfo();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf min_lsp_bandwidth; //type: uint64
                                                        YLeaf psc_interface_mtu; //type: uint16



                                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdpscInfo


                                                class IxcdbwSubTlv : public Entity
                                                {
                                                    public:
                                                        IxcdbwSubTlv();
                                                        ~IxcdbwSubTlv();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;



                                                    class ArrBwSubTlv : public Entity
                                                    {
                                                        public:
                                                            ArrBwSubTlv();
                                                            ~ArrBwSubTlv();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf bw_sub_tlv_type; //type: uint16
                                                            YLeaf bw_sub_tlv_length; //type: uint16

                                                        class BwSubTlvValue : public Entity
                                                        {
                                                            public:
                                                                BwSubTlvValue();
                                                                ~BwSubTlvValue();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;


                                                                YLeaf ixcdbw_sub_tlv_type; //type: uint16

                                                            class FixedBwSubTlvValue : public Entity
                                                            {
                                                                public:
                                                                    FixedBwSubTlvValue();
                                                                    ~FixedBwSubTlvValue();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                    YLeafList unres_oduj_prio; //type: list of  uint32

                                                                class FixedSubTlvValue : public Entity
                                                                {
                                                                    public:
                                                                        FixedSubTlvValue();
                                                                        ~FixedSubTlvValue();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                        YLeaf signal_type; //type: uint8
                                                                        YLeaf num_stages; //type: uint8
                                                                        YLeaf tbit; //type: uint8
                                                                        YLeaf sbit; //type: uint8
                                                                        YLeaf tsg; //type: uint8
                                                                        YLeaf res; //type: uint8
                                                                        YLeaf priority_bit0; //type: uint8
                                                                        YLeaf priority_bit1; //type: uint8
                                                                        YLeaf priority_bit2; //type: uint8
                                                                        YLeaf priority_bit3; //type: uint8
                                                                        YLeaf priority_bit4; //type: uint8
                                                                        YLeaf priority_bit5; //type: uint8
                                                                        YLeaf priority_bit6; //type: uint8
                                                                        YLeaf priority_bit7; //type: uint8
                                                                        YLeaf stage; //type: string



                                                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue::FixedSubTlvValue


                                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue::FixedSubTlvValue> fixed_sub_tlv_value;


                                                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue


                                                            class FlexBwSubTlvValue : public Entity
                                                            {
                                                                public:
                                                                    FlexBwSubTlvValue();
                                                                    ~FlexBwSubTlvValue();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                    YLeafList unres_lspbw; //type: list of  uint64
                                                                    YLeafList max_lspbw; //type: list of  uint64

                                                                class FlexSubTlvValueCommon : public Entity
                                                                {
                                                                    public:
                                                                        FlexSubTlvValueCommon();
                                                                        ~FlexSubTlvValueCommon();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                        YLeaf signal_type; //type: uint8
                                                                        YLeaf num_stages; //type: uint8
                                                                        YLeaf tbit; //type: uint8
                                                                        YLeaf sbit; //type: uint8
                                                                        YLeaf tsg; //type: uint8
                                                                        YLeaf res; //type: uint8
                                                                        YLeaf priority_bit0; //type: uint8
                                                                        YLeaf priority_bit1; //type: uint8
                                                                        YLeaf priority_bit2; //type: uint8
                                                                        YLeaf priority_bit3; //type: uint8
                                                                        YLeaf priority_bit4; //type: uint8
                                                                        YLeaf priority_bit5; //type: uint8
                                                                        YLeaf priority_bit6; //type: uint8
                                                                        YLeaf priority_bit7; //type: uint8
                                                                        YLeaf stage; //type: string



                                                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue::FlexSubTlvValueCommon


                                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue::FlexSubTlvValueCommon> flex_sub_tlv_value_common;


                                                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue


                                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue> fixed_bw_sub_tlv_value;
                                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue> flex_bw_sub_tlv_value;


                                                        }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue


                                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue> bw_sub_tlv_value;


                                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv


                                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv> > arr_bw_sub_tlv;


                                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv


                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv> ixcdbw_sub_tlv;
                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdpscInfo> ixcdpsc_info;


                                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType


                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType> ixcd_switching_cap_type;


                                        }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue


                                        class UnidtlvValue : public Entity
                                        {
                                            public:
                                                UnidtlvValue();
                                                ~UnidtlvValue();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf uni_dir_delay; //type: uint32



                                        }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::UnidtlvValue


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::BctlvValue> bctlv_value;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue> ixcdtlv_value;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::SrlgtlvValue> srlgtlv_value;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::UnidtlvValue> unidtlv_value;


                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue> > mplste_link_opt_tlv_value;


                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::ExtendedAdminGroupList> extended_admin_group_list;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::GlobalUnreserveBwPerPriority> global_unreserve_bw_per_priority;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::LinkProtocolPriorityCapability> link_protocol_priority_capability;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::LinkSwCapability> link_sw_capability;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::MplsteLinkOptTlv> > mplste_link_opt_tlv;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink::SubPoolUnreserveBwPerPriority> sub_pool_unreserve_bw_per_priority;


                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink


                            class MplsTeFragment_ : public Entity
                            {
                                public:
                                    MplsTeFragment_();
                                    ~MplsTeFragment_();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf fragment_instance; //type: uint32
                                    YLeaf fragment_id; //type: uint32
                                    YLeaf dste_model_id; //type: uint8
                                    YLeaf same_fragment_count; //type: uint8

                                class MplsTeLink : public Entity
                                {
                                    public:
                                        MplsTeLink();
                                        ~MplsTeLink();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf new_link; //type: boolean
                                        YLeaf fragment_id; //type: uint32
                                        YLeaf mpls_link_instance; //type: uint32
                                        YLeaf mpls_link_type; //type: LinkSubnetEnum
                                        YLeaf neighbor_system_id; //type: string
                                        YLeaf link_address; //type: string
                                        YLeaf neighbor_ip_address; //type: string
                                        YLeaf igp_metric; //type: uint32
                                        YLeaf te_metric; //type: uint32
                                        YLeaf maximum_link_bw; //type: uint32
                                        YLeaf maximum_link_reservable_bw; //type: uint32
                                        YLeaf maximum_link_sub_reservable_bw; //type: uint32
                                        YLeaf priority_count; //type: int32
                                        YLeaf affinity; //type: uint32
                                        YLeaf output_interface_id; //type: uint32
                                        YLeaf input_interface_id; //type: uint32
                                        YLeaf dste_in_use; //type: boolean
                                        YLeaf dste_allocation_model_id; //type: IgpteLibBwModelEnum
                                        YLeaf number_of_optional_tl_vs; //type: uint8

                                    class GlobalUnreserveBwPerPriority : public Entity
                                    {
                                        public:
                                            GlobalUnreserveBwPerPriority();
                                            ~GlobalUnreserveBwPerPriority();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeafList bw_per_priority; //type: list of  uint64



                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::GlobalUnreserveBwPerPriority


                                    class SubPoolUnreserveBwPerPriority : public Entity
                                    {
                                        public:
                                            SubPoolUnreserveBwPerPriority();
                                            ~SubPoolUnreserveBwPerPriority();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeafList bw_per_priority; //type: list of  uint64



                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::SubPoolUnreserveBwPerPriority


                                    class LinkProtocolPriorityCapability : public Entity
                                    {
                                        public:
                                            LinkProtocolPriorityCapability();
                                            ~LinkProtocolPriorityCapability();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf link_protocol_capability; //type: uint8
                                            YLeaf link_protocol_priority; //type: uint8



                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::LinkProtocolPriorityCapability


                                    class LinkSwCapability : public Entity
                                    {
                                        public:
                                            LinkSwCapability();
                                            ~LinkSwCapability();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf link_switching_capability; //type: uint8
                                            YLeaf link_encoding; //type: uint8
                                            YLeaf minimum_lsp_bw; //type: uint64
                                            YLeaf link_mtu; //type: uint16
                                            YLeafList maximum_lsp_bw_per_priority; //type: list of  uint64



                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::LinkSwCapability


                                    class ExtendedAdminGroupList : public Entity
                                    {
                                        public:
                                            ExtendedAdminGroupList();
                                            ~ExtendedAdminGroupList();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf extended_admin_size; //type: uint32
                                            YLeafList ext_admin_data; //type: list of  uint32



                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::ExtendedAdminGroupList


                                    class MplsteLinkOptTlv : public Entity
                                    {
                                        public:
                                            MplsteLinkOptTlv();
                                            ~MplsteLinkOptTlv();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf mplste_link_opt_tlv_type; //type: MplsTeOptTlvEnum
                                            YLeaf mplste_link_opt_tlv_len; //type: uint16

                                        class MplsteLinkOptTlvValue : public Entity
                                        {
                                            public:
                                                MplsteLinkOptTlvValue();
                                                ~MplsteLinkOptTlvValue();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf opaque_tlv_type; //type: MplsTeOptTlvEnum

                                            class BctlvValue : public Entity
                                            {
                                                public:
                                                    BctlvValue();
                                                    ~BctlvValue();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf model_id; //type: uint8
                                                    YLeaf num_b_cs; //type: uint32
                                                    YLeafList mplste_link_bc_bandwidth; //type: list of  uint64



                                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::BctlvValue


                                            class SrlgtlvValue : public Entity
                                            {
                                                public:
                                                    SrlgtlvValue();
                                                    ~SrlgtlvValue();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf srlg_len; //type: uint32
                                                    YLeaf num_srl_gs; //type: uint32
                                                    YLeafList mplste_link_srlg_data; //type: list of  uint32



                                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::SrlgtlvValue


                                            class IxcdtlvValue : public Entity
                                            {
                                                public:
                                                    IxcdtlvValue();
                                                    ~IxcdtlvValue();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf switching_cap; //type: uint8
                                                    YLeaf rile_len_code; //type: uint8
                                                    YLeaf fixed_scsi_count; //type: uint32
                                                    YLeaf flex_scsi_count; //type: uint32
                                                    YLeafList max_lspbw; //type: list of  int64

                                                class IxcdSwitchingCapType : public Entity
                                                {
                                                    public:
                                                        IxcdSwitchingCapType();
                                                        ~IxcdSwitchingCapType();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf switching_cap_type; //type: uint8

                                                    class IxcdpscInfo : public Entity
                                                    {
                                                        public:
                                                            IxcdpscInfo();
                                                            ~IxcdpscInfo();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf min_lsp_bandwidth; //type: uint64
                                                            YLeaf psc_interface_mtu; //type: uint16



                                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdpscInfo


                                                    class IxcdbwSubTlv : public Entity
                                                    {
                                                        public:
                                                            IxcdbwSubTlv();
                                                            ~IxcdbwSubTlv();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;



                                                        class ArrBwSubTlv : public Entity
                                                        {
                                                            public:
                                                                ArrBwSubTlv();
                                                                ~ArrBwSubTlv();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;


                                                                YLeaf bw_sub_tlv_type; //type: uint16
                                                                YLeaf bw_sub_tlv_length; //type: uint16

                                                            class BwSubTlvValue : public Entity
                                                            {
                                                                public:
                                                                    BwSubTlvValue();
                                                                    ~BwSubTlvValue();

                                                                    bool has_data() const override;
                                                                    bool has_operation() const override;
                                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                                    std::string get_segment_path() const override;
                                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                    void set_value(const std::string & value_path, std::string value) override;
                                                                    std::map<std::string, Entity*> & get_children() override;


                                                                    YLeaf ixcdbw_sub_tlv_type; //type: uint16

                                                                class FixedBwSubTlvValue : public Entity
                                                                {
                                                                    public:
                                                                        FixedBwSubTlvValue();
                                                                        ~FixedBwSubTlvValue();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                        YLeafList unres_oduj_prio; //type: list of  uint32

                                                                    class FixedSubTlvValue : public Entity
                                                                    {
                                                                        public:
                                                                            FixedSubTlvValue();
                                                                            ~FixedSubTlvValue();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                            YLeaf signal_type; //type: uint8
                                                                            YLeaf num_stages; //type: uint8
                                                                            YLeaf tbit; //type: uint8
                                                                            YLeaf sbit; //type: uint8
                                                                            YLeaf tsg; //type: uint8
                                                                            YLeaf res; //type: uint8
                                                                            YLeaf priority_bit0; //type: uint8
                                                                            YLeaf priority_bit1; //type: uint8
                                                                            YLeaf priority_bit2; //type: uint8
                                                                            YLeaf priority_bit3; //type: uint8
                                                                            YLeaf priority_bit4; //type: uint8
                                                                            YLeaf priority_bit5; //type: uint8
                                                                            YLeaf priority_bit6; //type: uint8
                                                                            YLeaf priority_bit7; //type: uint8
                                                                            YLeaf stage; //type: string



                                                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue::FixedSubTlvValue


                                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue::FixedSubTlvValue> fixed_sub_tlv_value;


                                                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue


                                                                class FlexBwSubTlvValue : public Entity
                                                                {
                                                                    public:
                                                                        FlexBwSubTlvValue();
                                                                        ~FlexBwSubTlvValue();

                                                                        bool has_data() const override;
                                                                        bool has_operation() const override;
                                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                                        std::string get_segment_path() const override;
                                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                        void set_value(const std::string & value_path, std::string value) override;
                                                                        std::map<std::string, Entity*> & get_children() override;


                                                                        YLeafList unres_lspbw; //type: list of  uint64
                                                                        YLeafList max_lspbw; //type: list of  uint64

                                                                    class FlexSubTlvValueCommon : public Entity
                                                                    {
                                                                        public:
                                                                            FlexSubTlvValueCommon();
                                                                            ~FlexSubTlvValueCommon();

                                                                            bool has_data() const override;
                                                                            bool has_operation() const override;
                                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                                            std::string get_segment_path() const override;
                                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                            void set_value(const std::string & value_path, std::string value) override;
                                                                            std::map<std::string, Entity*> & get_children() override;


                                                                            YLeaf signal_type; //type: uint8
                                                                            YLeaf num_stages; //type: uint8
                                                                            YLeaf tbit; //type: uint8
                                                                            YLeaf sbit; //type: uint8
                                                                            YLeaf tsg; //type: uint8
                                                                            YLeaf res; //type: uint8
                                                                            YLeaf priority_bit0; //type: uint8
                                                                            YLeaf priority_bit1; //type: uint8
                                                                            YLeaf priority_bit2; //type: uint8
                                                                            YLeaf priority_bit3; //type: uint8
                                                                            YLeaf priority_bit4; //type: uint8
                                                                            YLeaf priority_bit5; //type: uint8
                                                                            YLeaf priority_bit6; //type: uint8
                                                                            YLeaf priority_bit7; //type: uint8
                                                                            YLeaf stage; //type: string



                                                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue::FlexSubTlvValueCommon


                                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue::FlexSubTlvValueCommon> flex_sub_tlv_value_common;


                                                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue


                                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FixedBwSubTlvValue> fixed_bw_sub_tlv_value;
                                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue::FlexBwSubTlvValue> flex_bw_sub_tlv_value;


                                                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue


                                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv::BwSubTlvValue> bw_sub_tlv_value;


                                                        }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv


                                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv::ArrBwSubTlv> > arr_bw_sub_tlv;


                                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv


                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdbwSubTlv> ixcdbw_sub_tlv;
                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType::IxcdpscInfo> ixcdpsc_info;


                                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType


                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue::IxcdSwitchingCapType> ixcd_switching_cap_type;


                                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue


                                            class UnidtlvValue : public Entity
                                            {
                                                public:
                                                    UnidtlvValue();
                                                    ~UnidtlvValue();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf uni_dir_delay; //type: uint32



                                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::UnidtlvValue


                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::BctlvValue> bctlv_value;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::IxcdtlvValue> ixcdtlv_value;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::SrlgtlvValue> srlgtlv_value;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue::UnidtlvValue> unidtlv_value;


                                        }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv::MplsteLinkOptTlvValue> > mplste_link_opt_tlv_value;


                                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::ExtendedAdminGroupList> extended_admin_group_list;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::GlobalUnreserveBwPerPriority> global_unreserve_bw_per_priority;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::LinkProtocolPriorityCapability> link_protocol_priority_capability;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::LinkSwCapability> link_sw_capability;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::MplsteLinkOptTlv> > mplste_link_opt_tlv;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink::SubPoolUnreserveBwPerPriority> sub_pool_unreserve_bw_per_priority;


                                }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_::MplsTeLink> > mpls_te_link;


                            }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeFragment_> > mpls_te_fragment;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment::MplsTeLink> > mpls_te_link;


                        }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments::MplsTeFragment> > mpls_te_fragment;


                    }; // Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments


                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeFragments> mpls_te_fragments;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe::MplsTeLinks> mpls_te_links;


                }; // Ospf::Processes::Process::DefaultVrf::MplsTe


                class AdjacencyInformation : public Entity
                {
                    public:
                        AdjacencyInformation();
                        ~AdjacencyInformation();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;



                    class Neighbors : public Entity
                    {
                        public:
                            Neighbors();
                            ~Neighbors();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Neighbor : public Entity
                        {
                            public:
                                Neighbor();
                                ~Neighbor();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf interface_name; //type: string
                                YLeaf neighbor_address; //type: string
                                YLeaf neighbor_id; //type: string
                                YLeaf neighbor_address_xr; //type: string
                                YLeaf neighbor_interface_name; //type: string
                                YLeaf neighbor_dr_priority; //type: uint8
                                YLeaf neighbor_state; //type: NeighborStateEnum
                                YLeaf dr_bdr_state; //type: DrBdrStateEnum
                                YLeaf neighbor_dead_timer; //type: uint32
                                YLeaf neighbor_up_time; //type: uint32
                                YLeaf neighbor_madj_interface; //type: boolean

                            class NeighborBfdInformation : public Entity
                            {
                                public:
                                    NeighborBfdInformation();
                                    ~NeighborBfdInformation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf bfd_intf_enable_mode; //type: uint32
                                    YLeaf bfd_status_flag; //type: uint8



                            }; // Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Neighbors::Neighbor::NeighborBfdInformation


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Neighbors::Neighbor::NeighborBfdInformation> neighbor_bfd_information;


                        }; // Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Neighbors::Neighbor


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Neighbors::Neighbor> > neighbor;


                    }; // Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Neighbors


                    class Requests : public Entity
                    {
                        public:
                            Requests();
                            ~Requests();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Request : public Entity
                        {
                            public:
                                Request();
                                ~Request();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf interface_name; //type: string
                                YLeaf neighbor_address; //type: string
                                YLeaf request_neighbor_id; //type: string
                                YLeaf request_neighbor_address; //type: string
                                YLeaf request_interface_name; //type: string

                            class Request_ : public Entity
                            {
                                public:
                                    Request_();
                                    ~Request_();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf header_lsa_type; //type: LsaEnum
                                    YLeaf header_lsa_age; //type: uint16
                                    YLeaf header_ls_id; //type: string
                                    YLeaf header_advertising_router; //type: string
                                    YLeaf header_sequence_number; //type: uint32
                                    YLeaf header_lsa_checksum; //type: uint16



                            }; // Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Requests::Request::Request_


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Requests::Request::Request_> > request;


                        }; // Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Requests::Request


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Requests::Request> > request;


                    }; // Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Requests


                    class Retransmissions : public Entity
                    {
                        public:
                            Retransmissions();
                            ~Retransmissions();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Retransmission : public Entity
                        {
                            public:
                                Retransmission();
                                ~Retransmission();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf interface_name; //type: string
                                YLeaf neighbor_address; //type: string
                                YLeaf retransmission_neighbor_id; //type: string
                                YLeaf retransmission_neighbor_ip_address; //type: string
                                YLeaf retransmission_interface_name; //type: string
                                YLeaf retransmission_timer; //type: uint32
                                YLeaf retransmission_count; //type: uint32

                            class RetransmissionAreaDb : public Entity
                            {
                                public:
                                    RetransmissionAreaDb();
                                    ~RetransmissionAreaDb();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf header_lsa_type; //type: LsaEnum
                                    YLeaf header_lsa_age; //type: uint16
                                    YLeaf header_ls_id; //type: string
                                    YLeaf header_advertising_router; //type: string
                                    YLeaf header_sequence_number; //type: uint32
                                    YLeaf header_lsa_checksum; //type: uint16



                            }; // Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Retransmissions::Retransmission::RetransmissionAreaDb


                            class RetransmissionAsdb : public Entity
                            {
                                public:
                                    RetransmissionAsdb();
                                    ~RetransmissionAsdb();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf header_lsa_type; //type: LsaEnum
                                    YLeaf header_lsa_age; //type: uint16
                                    YLeaf header_ls_id; //type: string
                                    YLeaf header_advertising_router; //type: string
                                    YLeaf header_sequence_number; //type: uint32
                                    YLeaf header_lsa_checksum; //type: uint16



                            }; // Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Retransmissions::Retransmission::RetransmissionAsdb


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Retransmissions::Retransmission::RetransmissionAreaDb> > retransmission_area_db;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Retransmissions::Retransmission::RetransmissionAsdb> > retransmission_asdb;


                        }; // Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Retransmissions::Retransmission


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Retransmissions::Retransmission> > retransmission;


                    }; // Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Retransmissions


                    class NeighborDetails : public Entity
                    {
                        public:
                            NeighborDetails();
                            ~NeighborDetails();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class NeighborDetail : public Entity
                        {
                            public:
                                NeighborDetail();
                                ~NeighborDetail();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf interface_name; //type: string
                                YLeaf neighbor_address; //type: string
                                YLeaf neighbor_area_id; //type: string
                                YLeaf state_change_count; //type: uint16
                                YLeaf neighbor_cost; //type: uint16
                                YLeaf neighbor_filter; //type: boolean
                                YLeaf neighbor_designated_router_address; //type: string
                                YLeaf neighbor_backup_designated_router_address; //type: string
                                YLeaf interface_type; //type: InterfaceEnum
                                YLeaf poll_interval; //type: uint32
                                YLeaf next_poll_interval; //type: uint32
                                YLeaf neighbor_option; //type: uint8
                                YLeaf pending_events; //type: uint16
                                YLeaf neighbor_lls_option; //type: uint16
                                YLeaf oob_resynchronization; //type: boolean
                                YLeaf nsf_router_state; //type: NsfRtrEnum
                                YLeaf last_oob_time; //type: uint32
                                YLeaf lfa_interface; //type: string
                                YLeaf lfa_next_hop; //type: string
                                YLeaf lfa_neighbor_id; //type: string
                                YLeaf lfa_neighbor_revision; //type: uint32
                                YLeaf neighbor_ack_list_count; //type: uint32
                                YLeaf neighbor_ack_list_high_watermark; //type: uint32
                                YLeaf adjacency_sid_label; //type: uint32
                                YLeaf adjacency_sid_protected; //type: boolean
                                YLeaf adjacency_sid_unprotected_label; //type: uint32

                            class NeighborSummary : public Entity
                            {
                                public:
                                    NeighborSummary();
                                    ~NeighborSummary();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf neighbor_id; //type: string
                                    YLeaf neighbor_address_xr; //type: string
                                    YLeaf neighbor_interface_name; //type: string
                                    YLeaf neighbor_dr_priority; //type: uint8
                                    YLeaf neighbor_state; //type: NeighborStateEnum
                                    YLeaf dr_bdr_state; //type: DrBdrStateEnum
                                    YLeaf neighbor_dead_timer; //type: uint32
                                    YLeaf neighbor_up_time; //type: uint32
                                    YLeaf neighbor_madj_interface; //type: boolean

                                class NeighborBfdInformation : public Entity
                                {
                                    public:
                                        NeighborBfdInformation();
                                        ~NeighborBfdInformation();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf bfd_intf_enable_mode; //type: uint32
                                        YLeaf bfd_status_flag; //type: uint8



                                }; // Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::NeighborDetails::NeighborDetail::NeighborSummary::NeighborBfdInformation


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::NeighborDetails::NeighborDetail::NeighborSummary::NeighborBfdInformation> neighbor_bfd_information;


                            }; // Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::NeighborDetails::NeighborDetail::NeighborSummary


                            class NeighborBfdInformation : public Entity
                            {
                                public:
                                    NeighborBfdInformation();
                                    ~NeighborBfdInformation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf bfd_intf_enable_mode; //type: uint32
                                    YLeaf bfd_status_flag; //type: uint8



                            }; // Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::NeighborDetails::NeighborDetail::NeighborBfdInformation


                            class NeighborRetransmissionInformation : public Entity
                            {
                                public:
                                    NeighborRetransmissionInformation();
                                    ~NeighborRetransmissionInformation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf dbd_retransmission_count; //type: uint32
                                    YLeaf dbd_retransmission_total_count; //type: uint32
                                    YLeaf area_flooding_index; //type: uint32
                                    YLeaf as_flood_index; //type: uint32
                                    YLeaf neighbor_retransmission_count; //type: uint32
                                    YLeaf number_of_retransmissions; //type: uint32
                                    YLeaf area_first_flood_information; //type: uint32
                                    YLeaf area_first_flood_information_index; //type: uint32
                                    YLeaf as_first_flood_information; //type: uint32
                                    YLeaf as_first_flood_information_index; //type: uint32
                                    YLeaf area_next_flood_information; //type: uint32
                                    YLeaf area_next_flood_information_index; //type: uint32
                                    YLeaf as_next_flood_information; //type: uint32
                                    YLeaf as_next_flood_information_index; //type: uint32
                                    YLeaf last_retransmission_length; //type: uint32
                                    YLeaf maximum_retransmission_length; //type: uint32
                                    YLeaf last_retransmission_time; //type: uint32
                                    YLeaf maximum_retransmission_time; //type: uint32
                                    YLeaf lsa_retransmission_timer; //type: uint32



                            }; // Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::NeighborDetails::NeighborDetail::NeighborRetransmissionInformation


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::NeighborDetails::NeighborDetail::NeighborBfdInformation> neighbor_bfd_information;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::NeighborDetails::NeighborDetail::NeighborRetransmissionInformation> neighbor_retransmission_information;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::NeighborDetails::NeighborDetail::NeighborSummary> neighbor_summary;


                        }; // Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::NeighborDetails::NeighborDetail


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::NeighborDetails::NeighborDetail> > neighbor_detail;


                    }; // Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::NeighborDetails


                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::NeighborDetails> neighbor_details;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Neighbors> neighbors;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Requests> requests;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::AdjacencyInformation::Retransmissions> retransmissions;


                }; // Ospf::Processes::Process::DefaultVrf::AdjacencyInformation


                class RouteInformation : public Entity
                {
                    public:
                        RouteInformation();
                        ~RouteInformation();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;



                    class BackupRoutes : public Entity
                    {
                        public:
                            BackupRoutes();
                            ~BackupRoutes();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class BackupRoute : public Entity
                        {
                            public:
                                BackupRoute();
                                ~BackupRoute();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf prefix; //type: string
                                YLeaf prefix_length; //type: uint32
                                YLeaf route_prefix; //type: string
                                YLeaf route_prefix_length; //type: uint32
                                YLeaf route_metric; //type: uint32
                                YLeaf route_type; //type: OspfRouteEnum
                                YLeaf route_connected; //type: boolean

                            class RouteInfo : public Entity
                            {
                                public:
                                    RouteInfo();
                                    ~RouteInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf route_area_id; //type: uint32
                                    YLeaf route_te_metric; //type: uint32
                                    YLeaf route_rib_version; //type: uint32
                                    YLeaf route_spf_version; //type: uint64
                                    YLeaf route_forward_distance; //type: uint32
                                    YLeaf route_source; //type: uint16
                                    YLeaf route_spf_priority; //type: uint8
                                    YLeaf route_auto_excluded; //type: boolean
                                    YLeaf route_srte_prefix_registered; //type: boolean
                                    YLeaf route_srte_nbr_registered; //type: uint16

                                class RouteUpdateTime : public Entity
                                {
                                    public:
                                        RouteUpdateTime();
                                        ~RouteUpdateTime();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf second; //type: uint32
                                        YLeaf nanosecond; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::BackupRoutes::BackupRoute::RouteInfo::RouteUpdateTime


                                class RouteFailTime : public Entity
                                {
                                    public:
                                        RouteFailTime();
                                        ~RouteFailTime();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf second; //type: uint32
                                        YLeaf nanosecond; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::BackupRoutes::BackupRoute::RouteInfo::RouteFailTime


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::BackupRoutes::BackupRoute::RouteInfo::RouteFailTime> route_fail_time;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::BackupRoutes::BackupRoute::RouteInfo::RouteUpdateTime> route_update_time;


                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::BackupRoutes::BackupRoute::RouteInfo


                            class RoutePath : public Entity
                            {
                                public:
                                    RoutePath();
                                    ~RoutePath();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf route_interface_name; //type: string
                                    YLeaf route_next_hop_address; //type: string
                                    YLeaf route_source; //type: string
                                    YLeaf route_lsaid; //type: string
                                    YLeaf route_path_is_mcast_intact; //type: boolean
                                    YLeaf route_path_is_ucmp_path; //type: boolean
                                    YLeaf route_metric; //type: uint32
                                    YLeaf route_path_id; //type: uint16
                                    YLeaf lsa_type; //type: uint8

                                class RouteBackupPath : public Entity
                                {
                                    public:
                                        RouteBackupPath();
                                        ~RouteBackupPath();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf backup_route_interface_name; //type: string
                                        YLeaf backup_route_next_hop_address; //type: string
                                        YLeaf backup_route_source; //type: string
                                        YLeaf backup_metric; //type: uint32
                                        YLeaf primary_path; //type: boolean
                                        YLeaf line_card_disjoint; //type: boolean
                                        YLeaf downstream; //type: boolean
                                        YLeaf node_protect; //type: boolean
                                        YLeaf srlg_disjoint; //type: boolean
                                        YLeaf backup_remote_lfa; //type: string
                                        YLeaf backup_repair_list_sizei; //type: uint32
                                        YLeaf backup_tunnel_interface_name; //type: string

                                    class BackupRepair : public Entity
                                    {
                                        public:
                                            BackupRepair();
                                            ~BackupRepair();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf repair_element_id; //type: string
                                            YLeaf repair_label; //type: uint32
                                            YLeaf repair_element_type; //type: uint32



                                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::BackupRoutes::BackupRoute::RoutePath::RouteBackupPath::BackupRepair


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::BackupRoutes::BackupRoute::RoutePath::RouteBackupPath::BackupRepair> > backup_repair;


                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::BackupRoutes::BackupRoute::RoutePath::RouteBackupPath


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::BackupRoutes::BackupRoute::RoutePath::RouteBackupPath> route_backup_path;


                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::BackupRoutes::BackupRoute::RoutePath


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::BackupRoutes::BackupRoute::RouteInfo> route_info;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::BackupRoutes::BackupRoute::RoutePath> > route_path;


                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::BackupRoutes::BackupRoute


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::BackupRoutes::BackupRoute> > backup_route;


                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::BackupRoutes


                    class MulticastIntactRouteTable : public Entity
                    {
                        public:
                            MulticastIntactRouteTable();
                            ~MulticastIntactRouteTable();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Route : public Entity
                        {
                            public:
                                Route();
                                ~Route();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf prefix; //type: string
                                YLeaf prefix_length; //type: uint32
                                YLeaf route_prefix; //type: string
                                YLeaf route_prefix_length; //type: uint32
                                YLeaf route_metric; //type: uint32
                                YLeaf route_type; //type: OspfRouteEnum
                                YLeaf route_connected; //type: boolean

                            class RouteInfo : public Entity
                            {
                                public:
                                    RouteInfo();
                                    ~RouteInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf route_area_id; //type: uint32
                                    YLeaf route_te_metric; //type: uint32
                                    YLeaf route_rib_version; //type: uint32
                                    YLeaf route_spf_version; //type: uint64
                                    YLeaf route_forward_distance; //type: uint32
                                    YLeaf route_source; //type: uint16
                                    YLeaf route_spf_priority; //type: uint8
                                    YLeaf route_auto_excluded; //type: boolean
                                    YLeaf route_srte_prefix_registered; //type: boolean
                                    YLeaf route_srte_nbr_registered; //type: uint16

                                class RouteUpdateTime : public Entity
                                {
                                    public:
                                        RouteUpdateTime();
                                        ~RouteUpdateTime();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf second; //type: uint32
                                        YLeaf nanosecond; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactRouteTable::Route::RouteInfo::RouteUpdateTime


                                class RouteFailTime : public Entity
                                {
                                    public:
                                        RouteFailTime();
                                        ~RouteFailTime();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf second; //type: uint32
                                        YLeaf nanosecond; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactRouteTable::Route::RouteInfo::RouteFailTime


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactRouteTable::Route::RouteInfo::RouteFailTime> route_fail_time;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactRouteTable::Route::RouteInfo::RouteUpdateTime> route_update_time;


                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactRouteTable::Route::RouteInfo


                            class RoutePath : public Entity
                            {
                                public:
                                    RoutePath();
                                    ~RoutePath();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf route_interface_name; //type: string
                                    YLeaf route_next_hop_address; //type: string
                                    YLeaf route_source; //type: string
                                    YLeaf route_lsaid; //type: string
                                    YLeaf route_path_is_mcast_intact; //type: boolean
                                    YLeaf route_path_is_ucmp_path; //type: boolean
                                    YLeaf route_metric; //type: uint32
                                    YLeaf lsa_type; //type: uint8
                                    YLeaf area_id; //type: uint32
                                    YLeaf area_format; //type: boolean



                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactRouteTable::Route::RoutePath


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactRouteTable::Route::RouteInfo> route_info;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactRouteTable::Route::RoutePath> > route_path;


                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactRouteTable::Route


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactRouteTable::Route> > route;


                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactRouteTable


                    class MulticastIntactBackupRoutes : public Entity
                    {
                        public:
                            MulticastIntactBackupRoutes();
                            ~MulticastIntactBackupRoutes();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class MulticastIntactBackupRoute : public Entity
                        {
                            public:
                                MulticastIntactBackupRoute();
                                ~MulticastIntactBackupRoute();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf prefix; //type: string
                                YLeaf prefix_length; //type: uint32
                                YLeaf route_prefix; //type: string
                                YLeaf route_prefix_length; //type: uint32
                                YLeaf route_metric; //type: uint32
                                YLeaf route_type; //type: OspfRouteEnum
                                YLeaf route_connected; //type: boolean

                            class RouteInfo : public Entity
                            {
                                public:
                                    RouteInfo();
                                    ~RouteInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf route_area_id; //type: uint32
                                    YLeaf route_te_metric; //type: uint32
                                    YLeaf route_rib_version; //type: uint32
                                    YLeaf route_spf_version; //type: uint64
                                    YLeaf route_forward_distance; //type: uint32
                                    YLeaf route_source; //type: uint16
                                    YLeaf route_spf_priority; //type: uint8
                                    YLeaf route_auto_excluded; //type: boolean
                                    YLeaf route_srte_prefix_registered; //type: boolean
                                    YLeaf route_srte_nbr_registered; //type: uint16

                                class RouteUpdateTime : public Entity
                                {
                                    public:
                                        RouteUpdateTime();
                                        ~RouteUpdateTime();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf second; //type: uint32
                                        YLeaf nanosecond; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RouteInfo::RouteUpdateTime


                                class RouteFailTime : public Entity
                                {
                                    public:
                                        RouteFailTime();
                                        ~RouteFailTime();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf second; //type: uint32
                                        YLeaf nanosecond; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RouteInfo::RouteFailTime


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RouteInfo::RouteFailTime> route_fail_time;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RouteInfo::RouteUpdateTime> route_update_time;


                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RouteInfo


                            class RoutePath : public Entity
                            {
                                public:
                                    RoutePath();
                                    ~RoutePath();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf route_interface_name; //type: string
                                    YLeaf route_next_hop_address; //type: string
                                    YLeaf route_source; //type: string
                                    YLeaf route_lsaid; //type: string
                                    YLeaf route_path_is_mcast_intact; //type: boolean
                                    YLeaf route_path_is_ucmp_path; //type: boolean
                                    YLeaf route_metric; //type: uint32
                                    YLeaf route_path_id; //type: uint16
                                    YLeaf lsa_type; //type: uint8

                                class RouteBackupPath : public Entity
                                {
                                    public:
                                        RouteBackupPath();
                                        ~RouteBackupPath();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf backup_route_interface_name; //type: string
                                        YLeaf backup_route_next_hop_address; //type: string
                                        YLeaf backup_route_source; //type: string
                                        YLeaf backup_metric; //type: uint32
                                        YLeaf primary_path; //type: boolean
                                        YLeaf line_card_disjoint; //type: boolean
                                        YLeaf downstream; //type: boolean
                                        YLeaf node_protect; //type: boolean
                                        YLeaf srlg_disjoint; //type: boolean
                                        YLeaf backup_remote_lfa; //type: string
                                        YLeaf backup_repair_list_sizei; //type: uint32
                                        YLeaf backup_tunnel_interface_name; //type: string

                                    class BackupRepair : public Entity
                                    {
                                        public:
                                            BackupRepair();
                                            ~BackupRepair();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf repair_element_id; //type: string
                                            YLeaf repair_label; //type: uint32
                                            YLeaf repair_element_type; //type: uint32



                                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RoutePath::RouteBackupPath::BackupRepair


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RoutePath::RouteBackupPath::BackupRepair> > backup_repair;


                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RoutePath::RouteBackupPath


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RoutePath::RouteBackupPath> route_backup_path;


                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RoutePath


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RouteInfo> route_info;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute::RoutePath> > route_path;


                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactBackupRoutes::MulticastIntactBackupRoute> > multicast_intact_backup_route;


                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactBackupRoutes


                    class SummaryInformation : public Entity
                    {
                        public:
                            SummaryInformation();
                            ~SummaryInformation();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                            YLeaf failures; //type: uint32
                            YLeaf failure_address; //type: string

                        class FailureTime : public Entity
                        {
                            public:
                                FailureTime();
                                ~FailureTime();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf second; //type: uint32
                                YLeaf nanosecond; //type: uint32



                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::SummaryInformation::FailureTime


                        class Common : public Entity
                        {
                            public:
                                Common();
                                ~Common();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf external_type1s; //type: uint32
                                YLeaf external_type2s; //type: uint32
                                YLeaf external_nssa_type1s; //type: uint32
                                YLeaf external_nssa_type2s; //type: uint32
                                YLeaf inter_areas; //type: uint32
                                YLeaf intra_areas; //type: uint32
                                YLeaf total; //type: uint32



                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::SummaryInformation::Common


                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::SummaryInformation::Common> common;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::SummaryInformation::FailureTime> failure_time;


                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::SummaryInformation


                    class ConnectedRoutes : public Entity
                    {
                        public:
                            ConnectedRoutes();
                            ~ConnectedRoutes();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class ConnectedRoute : public Entity
                        {
                            public:
                                ConnectedRoute();
                                ~ConnectedRoute();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf prefix; //type: string
                                YLeaf prefix_length; //type: uint32
                                YLeaf route_prefix; //type: string
                                YLeaf route_prefix_length; //type: uint32
                                YLeaf route_metric; //type: uint32
                                YLeaf route_type; //type: OspfRouteEnum
                                YLeaf route_connected; //type: boolean

                            class RouteInfo : public Entity
                            {
                                public:
                                    RouteInfo();
                                    ~RouteInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf route_area_id; //type: uint32
                                    YLeaf route_te_metric; //type: uint32
                                    YLeaf route_rib_version; //type: uint32
                                    YLeaf route_spf_version; //type: uint64
                                    YLeaf route_forward_distance; //type: uint32
                                    YLeaf route_source; //type: uint16
                                    YLeaf route_spf_priority; //type: uint8
                                    YLeaf route_auto_excluded; //type: boolean
                                    YLeaf route_srte_prefix_registered; //type: boolean
                                    YLeaf route_srte_nbr_registered; //type: uint16

                                class RouteUpdateTime : public Entity
                                {
                                    public:
                                        RouteUpdateTime();
                                        ~RouteUpdateTime();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf second; //type: uint32
                                        YLeaf nanosecond; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::ConnectedRoutes::ConnectedRoute::RouteInfo::RouteUpdateTime


                                class RouteFailTime : public Entity
                                {
                                    public:
                                        RouteFailTime();
                                        ~RouteFailTime();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf second; //type: uint32
                                        YLeaf nanosecond; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::ConnectedRoutes::ConnectedRoute::RouteInfo::RouteFailTime


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::ConnectedRoutes::ConnectedRoute::RouteInfo::RouteFailTime> route_fail_time;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::ConnectedRoutes::ConnectedRoute::RouteInfo::RouteUpdateTime> route_update_time;


                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::ConnectedRoutes::ConnectedRoute::RouteInfo


                            class RoutePath : public Entity
                            {
                                public:
                                    RoutePath();
                                    ~RoutePath();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf route_interface_name; //type: string
                                    YLeaf route_next_hop_address; //type: string
                                    YLeaf route_source; //type: string
                                    YLeaf route_lsaid; //type: string
                                    YLeaf route_path_is_mcast_intact; //type: boolean
                                    YLeaf route_path_is_ucmp_path; //type: boolean
                                    YLeaf route_metric; //type: uint32
                                    YLeaf lsa_type; //type: uint8
                                    YLeaf area_id; //type: uint32
                                    YLeaf area_format; //type: boolean



                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::ConnectedRoutes::ConnectedRoute::RoutePath


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::ConnectedRoutes::ConnectedRoute::RouteInfo> route_info;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::ConnectedRoutes::ConnectedRoute::RoutePath> > route_path;


                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::ConnectedRoutes::ConnectedRoute


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::ConnectedRoutes::ConnectedRoute> > connected_route;


                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::ConnectedRoutes


                    class LocalRoutes : public Entity
                    {
                        public:
                            LocalRoutes();
                            ~LocalRoutes();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class LocalRoute : public Entity
                        {
                            public:
                                LocalRoute();
                                ~LocalRoute();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf prefix; //type: string
                                YLeaf prefix_length; //type: uint32
                                YLeaf route_prefix; //type: string
                                YLeaf route_prefix_length; //type: uint32
                                YLeaf route_metric; //type: uint32
                                YLeaf route_type; //type: OspfRouteEnum
                                YLeaf route_connected; //type: boolean

                            class RouteInfo : public Entity
                            {
                                public:
                                    RouteInfo();
                                    ~RouteInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf route_area_id; //type: uint32
                                    YLeaf route_te_metric; //type: uint32
                                    YLeaf route_rib_version; //type: uint32
                                    YLeaf route_spf_version; //type: uint64
                                    YLeaf route_forward_distance; //type: uint32
                                    YLeaf route_source; //type: uint16
                                    YLeaf route_spf_priority; //type: uint8
                                    YLeaf route_auto_excluded; //type: boolean
                                    YLeaf route_srte_prefix_registered; //type: boolean
                                    YLeaf route_srte_nbr_registered; //type: uint16

                                class RouteUpdateTime : public Entity
                                {
                                    public:
                                        RouteUpdateTime();
                                        ~RouteUpdateTime();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf second; //type: uint32
                                        YLeaf nanosecond; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::LocalRoutes::LocalRoute::RouteInfo::RouteUpdateTime


                                class RouteFailTime : public Entity
                                {
                                    public:
                                        RouteFailTime();
                                        ~RouteFailTime();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf second; //type: uint32
                                        YLeaf nanosecond; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::LocalRoutes::LocalRoute::RouteInfo::RouteFailTime


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::LocalRoutes::LocalRoute::RouteInfo::RouteFailTime> route_fail_time;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::LocalRoutes::LocalRoute::RouteInfo::RouteUpdateTime> route_update_time;


                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::LocalRoutes::LocalRoute::RouteInfo


                            class RoutePath : public Entity
                            {
                                public:
                                    RoutePath();
                                    ~RoutePath();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf route_interface_name; //type: string
                                    YLeaf route_next_hop_address; //type: string
                                    YLeaf route_source; //type: string
                                    YLeaf route_lsaid; //type: string
                                    YLeaf route_path_is_mcast_intact; //type: boolean
                                    YLeaf route_path_is_ucmp_path; //type: boolean
                                    YLeaf route_metric; //type: uint32
                                    YLeaf lsa_type; //type: uint8
                                    YLeaf area_id; //type: uint32
                                    YLeaf area_format; //type: boolean



                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::LocalRoutes::LocalRoute::RoutePath


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::LocalRoutes::LocalRoute::RouteInfo> route_info;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::LocalRoutes::LocalRoute::RoutePath> > route_path;


                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::LocalRoutes::LocalRoute


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::LocalRoutes::LocalRoute> > local_route;


                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::LocalRoutes


                    class RouteAreas : public Entity
                    {
                        public:
                            RouteAreas();
                            ~RouteAreas();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class RouteArea : public Entity
                        {
                            public:
                                RouteArea();
                                ~RouteArea();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf area_id; //type: int32

                            class MulticastIntactBackupRouteAreas : public Entity
                            {
                                public:
                                    MulticastIntactBackupRouteAreas();
                                    ~MulticastIntactBackupRouteAreas();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class MulticastIntactBackupRouteArea : public Entity
                                {
                                    public:
                                        MulticastIntactBackupRouteArea();
                                        ~MulticastIntactBackupRouteArea();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf prefix; //type: string
                                        YLeaf prefix_length; //type: uint32
                                        YLeaf route_prefix; //type: string
                                        YLeaf route_prefix_length; //type: uint32
                                        YLeaf route_metric; //type: uint32
                                        YLeaf route_type; //type: OspfRouteEnum
                                        YLeaf route_connected; //type: boolean

                                    class RouteInfo : public Entity
                                    {
                                        public:
                                            RouteInfo();
                                            ~RouteInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf route_area_id; //type: uint32
                                            YLeaf route_te_metric; //type: uint32
                                            YLeaf route_rib_version; //type: uint32
                                            YLeaf route_spf_version; //type: uint64
                                            YLeaf route_forward_distance; //type: uint32
                                            YLeaf route_source; //type: uint16
                                            YLeaf route_spf_priority; //type: uint8
                                            YLeaf route_auto_excluded; //type: boolean
                                            YLeaf route_srte_prefix_registered; //type: boolean
                                            YLeaf route_srte_nbr_registered; //type: uint16

                                        class RouteUpdateTime : public Entity
                                        {
                                            public:
                                                RouteUpdateTime();
                                                ~RouteUpdateTime();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf second; //type: uint32
                                                YLeaf nanosecond; //type: uint32



                                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RouteInfo::RouteUpdateTime


                                        class RouteFailTime : public Entity
                                        {
                                            public:
                                                RouteFailTime();
                                                ~RouteFailTime();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf second; //type: uint32
                                                YLeaf nanosecond; //type: uint32



                                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RouteInfo::RouteFailTime


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RouteInfo::RouteFailTime> route_fail_time;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RouteInfo::RouteUpdateTime> route_update_time;


                                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RouteInfo


                                    class RoutePath : public Entity
                                    {
                                        public:
                                            RoutePath();
                                            ~RoutePath();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf route_interface_name; //type: string
                                            YLeaf route_next_hop_address; //type: string
                                            YLeaf route_source; //type: string
                                            YLeaf route_lsaid; //type: string
                                            YLeaf route_path_is_mcast_intact; //type: boolean
                                            YLeaf route_path_is_ucmp_path; //type: boolean
                                            YLeaf route_metric; //type: uint32
                                            YLeaf route_path_id; //type: uint16
                                            YLeaf lsa_type; //type: uint8

                                        class RouteBackupPath : public Entity
                                        {
                                            public:
                                                RouteBackupPath();
                                                ~RouteBackupPath();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf backup_route_interface_name; //type: string
                                                YLeaf backup_route_next_hop_address; //type: string
                                                YLeaf backup_route_source; //type: string
                                                YLeaf backup_metric; //type: uint32
                                                YLeaf primary_path; //type: boolean
                                                YLeaf line_card_disjoint; //type: boolean
                                                YLeaf downstream; //type: boolean
                                                YLeaf node_protect; //type: boolean
                                                YLeaf srlg_disjoint; //type: boolean
                                                YLeaf backup_remote_lfa; //type: string
                                                YLeaf backup_repair_list_sizei; //type: uint32
                                                YLeaf backup_tunnel_interface_name; //type: string

                                            class BackupRepair : public Entity
                                            {
                                                public:
                                                    BackupRepair();
                                                    ~BackupRepair();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf repair_element_id; //type: string
                                                    YLeaf repair_label; //type: uint32
                                                    YLeaf repair_element_type; //type: uint32



                                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RoutePath::RouteBackupPath::BackupRepair


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RoutePath::RouteBackupPath::BackupRepair> > backup_repair;


                                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RoutePath::RouteBackupPath


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RoutePath::RouteBackupPath> route_backup_path;


                                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RoutePath


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RouteInfo> route_info;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea::RoutePath> > route_path;


                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas::MulticastIntactBackupRouteArea> > multicast_intact_backup_route_area;


                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas


                            class ConnectedRouteAreas : public Entity
                            {
                                public:
                                    ConnectedRouteAreas();
                                    ~ConnectedRouteAreas();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class ConnectedRouteArea : public Entity
                                {
                                    public:
                                        ConnectedRouteArea();
                                        ~ConnectedRouteArea();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf prefix; //type: string
                                        YLeaf prefix_length; //type: uint32
                                        YLeaf route_prefix; //type: string
                                        YLeaf route_prefix_length; //type: uint32
                                        YLeaf route_metric; //type: uint32
                                        YLeaf route_type; //type: OspfRouteEnum
                                        YLeaf route_connected; //type: boolean

                                    class RouteInfo : public Entity
                                    {
                                        public:
                                            RouteInfo();
                                            ~RouteInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf route_area_id; //type: uint32
                                            YLeaf route_te_metric; //type: uint32
                                            YLeaf route_rib_version; //type: uint32
                                            YLeaf route_spf_version; //type: uint64
                                            YLeaf route_forward_distance; //type: uint32
                                            YLeaf route_source; //type: uint16
                                            YLeaf route_spf_priority; //type: uint8
                                            YLeaf route_auto_excluded; //type: boolean
                                            YLeaf route_srte_prefix_registered; //type: boolean
                                            YLeaf route_srte_nbr_registered; //type: uint16

                                        class RouteUpdateTime : public Entity
                                        {
                                            public:
                                                RouteUpdateTime();
                                                ~RouteUpdateTime();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf second; //type: uint32
                                                YLeaf nanosecond; //type: uint32



                                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea::RouteInfo::RouteUpdateTime


                                        class RouteFailTime : public Entity
                                        {
                                            public:
                                                RouteFailTime();
                                                ~RouteFailTime();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf second; //type: uint32
                                                YLeaf nanosecond; //type: uint32



                                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea::RouteInfo::RouteFailTime


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea::RouteInfo::RouteFailTime> route_fail_time;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea::RouteInfo::RouteUpdateTime> route_update_time;


                                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea::RouteInfo


                                    class RoutePath : public Entity
                                    {
                                        public:
                                            RoutePath();
                                            ~RoutePath();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf route_interface_name; //type: string
                                            YLeaf route_next_hop_address; //type: string
                                            YLeaf route_source; //type: string
                                            YLeaf route_lsaid; //type: string
                                            YLeaf route_path_is_mcast_intact; //type: boolean
                                            YLeaf route_path_is_ucmp_path; //type: boolean
                                            YLeaf route_metric; //type: uint32
                                            YLeaf lsa_type; //type: uint8
                                            YLeaf area_id; //type: uint32
                                            YLeaf area_format; //type: boolean



                                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea::RoutePath


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea::RouteInfo> route_info;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea::RoutePath> > route_path;


                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas::ConnectedRouteArea> > connected_route_area;


                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas


                            class BackupRouteAreas : public Entity
                            {
                                public:
                                    BackupRouteAreas();
                                    ~BackupRouteAreas();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class BackupRouteArea : public Entity
                                {
                                    public:
                                        BackupRouteArea();
                                        ~BackupRouteArea();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf prefix; //type: string
                                        YLeaf prefix_length; //type: uint32
                                        YLeaf route_prefix; //type: string
                                        YLeaf route_prefix_length; //type: uint32
                                        YLeaf route_metric; //type: uint32
                                        YLeaf route_type; //type: OspfRouteEnum
                                        YLeaf route_connected; //type: boolean

                                    class RouteInfo : public Entity
                                    {
                                        public:
                                            RouteInfo();
                                            ~RouteInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf route_area_id; //type: uint32
                                            YLeaf route_te_metric; //type: uint32
                                            YLeaf route_rib_version; //type: uint32
                                            YLeaf route_spf_version; //type: uint64
                                            YLeaf route_forward_distance; //type: uint32
                                            YLeaf route_source; //type: uint16
                                            YLeaf route_spf_priority; //type: uint8
                                            YLeaf route_auto_excluded; //type: boolean
                                            YLeaf route_srte_prefix_registered; //type: boolean
                                            YLeaf route_srte_nbr_registered; //type: uint16

                                        class RouteUpdateTime : public Entity
                                        {
                                            public:
                                                RouteUpdateTime();
                                                ~RouteUpdateTime();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf second; //type: uint32
                                                YLeaf nanosecond; //type: uint32



                                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RouteInfo::RouteUpdateTime


                                        class RouteFailTime : public Entity
                                        {
                                            public:
                                                RouteFailTime();
                                                ~RouteFailTime();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf second; //type: uint32
                                                YLeaf nanosecond; //type: uint32



                                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RouteInfo::RouteFailTime


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RouteInfo::RouteFailTime> route_fail_time;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RouteInfo::RouteUpdateTime> route_update_time;


                                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RouteInfo


                                    class RoutePath : public Entity
                                    {
                                        public:
                                            RoutePath();
                                            ~RoutePath();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf route_interface_name; //type: string
                                            YLeaf route_next_hop_address; //type: string
                                            YLeaf route_source; //type: string
                                            YLeaf route_lsaid; //type: string
                                            YLeaf route_path_is_mcast_intact; //type: boolean
                                            YLeaf route_path_is_ucmp_path; //type: boolean
                                            YLeaf route_metric; //type: uint32
                                            YLeaf route_path_id; //type: uint16
                                            YLeaf lsa_type; //type: uint8

                                        class RouteBackupPath : public Entity
                                        {
                                            public:
                                                RouteBackupPath();
                                                ~RouteBackupPath();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf backup_route_interface_name; //type: string
                                                YLeaf backup_route_next_hop_address; //type: string
                                                YLeaf backup_route_source; //type: string
                                                YLeaf backup_metric; //type: uint32
                                                YLeaf primary_path; //type: boolean
                                                YLeaf line_card_disjoint; //type: boolean
                                                YLeaf downstream; //type: boolean
                                                YLeaf node_protect; //type: boolean
                                                YLeaf srlg_disjoint; //type: boolean
                                                YLeaf backup_remote_lfa; //type: string
                                                YLeaf backup_repair_list_sizei; //type: uint32
                                                YLeaf backup_tunnel_interface_name; //type: string

                                            class BackupRepair : public Entity
                                            {
                                                public:
                                                    BackupRepair();
                                                    ~BackupRepair();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf repair_element_id; //type: string
                                                    YLeaf repair_label; //type: uint32
                                                    YLeaf repair_element_type; //type: uint32



                                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RoutePath::RouteBackupPath::BackupRepair


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RoutePath::RouteBackupPath::BackupRepair> > backup_repair;


                                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RoutePath::RouteBackupPath


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RoutePath::RouteBackupPath> route_backup_path;


                                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RoutePath


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RouteInfo> route_info;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea::RoutePath> > route_path;


                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas::BackupRouteArea> > backup_route_area;


                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas


                            class RouteAreaInformations : public Entity
                            {
                                public:
                                    RouteAreaInformations();
                                    ~RouteAreaInformations();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class RouteAreaInformation : public Entity
                                {
                                    public:
                                        RouteAreaInformation();
                                        ~RouteAreaInformation();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf prefix; //type: string
                                        YLeaf prefix_length; //type: uint32
                                        YLeaf route_prefix; //type: string
                                        YLeaf route_prefix_length; //type: uint32
                                        YLeaf route_metric; //type: uint32
                                        YLeaf route_type; //type: OspfRouteEnum
                                        YLeaf route_connected; //type: boolean

                                    class RouteInfo : public Entity
                                    {
                                        public:
                                            RouteInfo();
                                            ~RouteInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf route_area_id; //type: uint32
                                            YLeaf route_te_metric; //type: uint32
                                            YLeaf route_rib_version; //type: uint32
                                            YLeaf route_spf_version; //type: uint64
                                            YLeaf route_forward_distance; //type: uint32
                                            YLeaf route_source; //type: uint16
                                            YLeaf route_spf_priority; //type: uint8
                                            YLeaf route_auto_excluded; //type: boolean
                                            YLeaf route_srte_prefix_registered; //type: boolean
                                            YLeaf route_srte_nbr_registered; //type: uint16

                                        class RouteUpdateTime : public Entity
                                        {
                                            public:
                                                RouteUpdateTime();
                                                ~RouteUpdateTime();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf second; //type: uint32
                                                YLeaf nanosecond; //type: uint32



                                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation::RouteInfo::RouteUpdateTime


                                        class RouteFailTime : public Entity
                                        {
                                            public:
                                                RouteFailTime();
                                                ~RouteFailTime();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf second; //type: uint32
                                                YLeaf nanosecond; //type: uint32



                                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation::RouteInfo::RouteFailTime


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation::RouteInfo::RouteFailTime> route_fail_time;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation::RouteInfo::RouteUpdateTime> route_update_time;


                                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation::RouteInfo


                                    class RoutePath : public Entity
                                    {
                                        public:
                                            RoutePath();
                                            ~RoutePath();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf route_interface_name; //type: string
                                            YLeaf route_next_hop_address; //type: string
                                            YLeaf route_source; //type: string
                                            YLeaf route_lsaid; //type: string
                                            YLeaf route_path_is_mcast_intact; //type: boolean
                                            YLeaf route_path_is_ucmp_path; //type: boolean
                                            YLeaf route_metric; //type: uint32
                                            YLeaf lsa_type; //type: uint8
                                            YLeaf area_id; //type: uint32
                                            YLeaf area_format; //type: boolean



                                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation::RoutePath


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation::RouteInfo> route_info;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation::RoutePath> > route_path;


                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations::RouteAreaInformation> > route_area_information;


                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations


                            class MulticastIntactRouteAreas : public Entity
                            {
                                public:
                                    MulticastIntactRouteAreas();
                                    ~MulticastIntactRouteAreas();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class MulticastIntactRouteArea : public Entity
                                {
                                    public:
                                        MulticastIntactRouteArea();
                                        ~MulticastIntactRouteArea();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf prefix; //type: string
                                        YLeaf prefix_length; //type: uint32
                                        YLeaf route_prefix; //type: string
                                        YLeaf route_prefix_length; //type: uint32
                                        YLeaf route_metric; //type: uint32
                                        YLeaf route_type; //type: OspfRouteEnum
                                        YLeaf route_connected; //type: boolean

                                    class RouteInfo : public Entity
                                    {
                                        public:
                                            RouteInfo();
                                            ~RouteInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf route_area_id; //type: uint32
                                            YLeaf route_te_metric; //type: uint32
                                            YLeaf route_rib_version; //type: uint32
                                            YLeaf route_spf_version; //type: uint64
                                            YLeaf route_forward_distance; //type: uint32
                                            YLeaf route_source; //type: uint16
                                            YLeaf route_spf_priority; //type: uint8
                                            YLeaf route_auto_excluded; //type: boolean
                                            YLeaf route_srte_prefix_registered; //type: boolean
                                            YLeaf route_srte_nbr_registered; //type: uint16

                                        class RouteUpdateTime : public Entity
                                        {
                                            public:
                                                RouteUpdateTime();
                                                ~RouteUpdateTime();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf second; //type: uint32
                                                YLeaf nanosecond; //type: uint32



                                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea::RouteInfo::RouteUpdateTime


                                        class RouteFailTime : public Entity
                                        {
                                            public:
                                                RouteFailTime();
                                                ~RouteFailTime();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf second; //type: uint32
                                                YLeaf nanosecond; //type: uint32



                                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea::RouteInfo::RouteFailTime


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea::RouteInfo::RouteFailTime> route_fail_time;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea::RouteInfo::RouteUpdateTime> route_update_time;


                                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea::RouteInfo


                                    class RoutePath : public Entity
                                    {
                                        public:
                                            RoutePath();
                                            ~RoutePath();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf route_interface_name; //type: string
                                            YLeaf route_next_hop_address; //type: string
                                            YLeaf route_source; //type: string
                                            YLeaf route_lsaid; //type: string
                                            YLeaf route_path_is_mcast_intact; //type: boolean
                                            YLeaf route_path_is_ucmp_path; //type: boolean
                                            YLeaf route_metric; //type: uint32
                                            YLeaf lsa_type; //type: uint8
                                            YLeaf area_id; //type: uint32
                                            YLeaf area_format; //type: boolean



                                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea::RoutePath


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea::RouteInfo> route_info;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea::RoutePath> > route_path;


                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas::MulticastIntactRouteArea> > multicast_intact_route_area;


                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas


                            class SummaryAreaInformation : public Entity
                            {
                                public:
                                    SummaryAreaInformation();
                                    ~SummaryAreaInformation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf failures; //type: uint32
                                    YLeaf failure_address; //type: string

                                class FailureTime : public Entity
                                {
                                    public:
                                        FailureTime();
                                        ~FailureTime();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf second; //type: uint32
                                        YLeaf nanosecond; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::SummaryAreaInformation::FailureTime


                                class Common : public Entity
                                {
                                    public:
                                        Common();
                                        ~Common();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf external_type1s; //type: uint32
                                        YLeaf external_type2s; //type: uint32
                                        YLeaf external_nssa_type1s; //type: uint32
                                        YLeaf external_nssa_type2s; //type: uint32
                                        YLeaf inter_areas; //type: uint32
                                        YLeaf intra_areas; //type: uint32
                                        YLeaf total; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::SummaryAreaInformation::Common


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::SummaryAreaInformation::Common> common;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::SummaryAreaInformation::FailureTime> failure_time;


                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::SummaryAreaInformation


                            class LocalRouteAreas : public Entity
                            {
                                public:
                                    LocalRouteAreas();
                                    ~LocalRouteAreas();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class LocalRouteArea : public Entity
                                {
                                    public:
                                        LocalRouteArea();
                                        ~LocalRouteArea();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf prefix; //type: string
                                        YLeaf prefix_length; //type: uint32
                                        YLeaf route_prefix; //type: string
                                        YLeaf route_prefix_length; //type: uint32
                                        YLeaf route_metric; //type: uint32
                                        YLeaf route_type; //type: OspfRouteEnum
                                        YLeaf route_connected; //type: boolean

                                    class RouteInfo : public Entity
                                    {
                                        public:
                                            RouteInfo();
                                            ~RouteInfo();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf route_area_id; //type: uint32
                                            YLeaf route_te_metric; //type: uint32
                                            YLeaf route_rib_version; //type: uint32
                                            YLeaf route_spf_version; //type: uint64
                                            YLeaf route_forward_distance; //type: uint32
                                            YLeaf route_source; //type: uint16
                                            YLeaf route_spf_priority; //type: uint8
                                            YLeaf route_auto_excluded; //type: boolean
                                            YLeaf route_srte_prefix_registered; //type: boolean
                                            YLeaf route_srte_nbr_registered; //type: uint16

                                        class RouteUpdateTime : public Entity
                                        {
                                            public:
                                                RouteUpdateTime();
                                                ~RouteUpdateTime();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf second; //type: uint32
                                                YLeaf nanosecond; //type: uint32



                                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea::RouteInfo::RouteUpdateTime


                                        class RouteFailTime : public Entity
                                        {
                                            public:
                                                RouteFailTime();
                                                ~RouteFailTime();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf second; //type: uint32
                                                YLeaf nanosecond; //type: uint32



                                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea::RouteInfo::RouteFailTime


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea::RouteInfo::RouteFailTime> route_fail_time;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea::RouteInfo::RouteUpdateTime> route_update_time;


                                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea::RouteInfo


                                    class RoutePath : public Entity
                                    {
                                        public:
                                            RoutePath();
                                            ~RoutePath();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf route_interface_name; //type: string
                                            YLeaf route_next_hop_address; //type: string
                                            YLeaf route_source; //type: string
                                            YLeaf route_lsaid; //type: string
                                            YLeaf route_path_is_mcast_intact; //type: boolean
                                            YLeaf route_path_is_ucmp_path; //type: boolean
                                            YLeaf route_metric; //type: uint32
                                            YLeaf lsa_type; //type: uint8
                                            YLeaf area_id; //type: uint32
                                            YLeaf area_format; //type: boolean



                                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea::RoutePath


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea::RouteInfo> route_info;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea::RoutePath> > route_path;


                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas::LocalRouteArea> > local_route_area;


                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::BackupRouteAreas> backup_route_areas;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::ConnectedRouteAreas> connected_route_areas;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::LocalRouteAreas> local_route_areas;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactBackupRouteAreas> multicast_intact_backup_route_areas;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::MulticastIntactRouteAreas> multicast_intact_route_areas;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::RouteAreaInformations> route_area_informations;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea::SummaryAreaInformation> summary_area_information;


                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas::RouteArea> > route_area;


                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas


                    class RouteTable : public Entity
                    {
                        public:
                            RouteTable();
                            ~RouteTable();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Route : public Entity
                        {
                            public:
                                Route();
                                ~Route();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf prefix; //type: string
                                YLeaf prefix_length; //type: uint32
                                YLeaf route_prefix; //type: string
                                YLeaf route_prefix_length; //type: uint32
                                YLeaf route_metric; //type: uint32
                                YLeaf route_type; //type: OspfRouteEnum
                                YLeaf route_connected; //type: boolean

                            class RouteInfo : public Entity
                            {
                                public:
                                    RouteInfo();
                                    ~RouteInfo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf route_area_id; //type: uint32
                                    YLeaf route_te_metric; //type: uint32
                                    YLeaf route_rib_version; //type: uint32
                                    YLeaf route_spf_version; //type: uint64
                                    YLeaf route_forward_distance; //type: uint32
                                    YLeaf route_source; //type: uint16
                                    YLeaf route_spf_priority; //type: uint8
                                    YLeaf route_auto_excluded; //type: boolean
                                    YLeaf route_srte_prefix_registered; //type: boolean
                                    YLeaf route_srte_nbr_registered; //type: uint16

                                class RouteUpdateTime : public Entity
                                {
                                    public:
                                        RouteUpdateTime();
                                        ~RouteUpdateTime();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf second; //type: uint32
                                        YLeaf nanosecond; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteTable::Route::RouteInfo::RouteUpdateTime


                                class RouteFailTime : public Entity
                                {
                                    public:
                                        RouteFailTime();
                                        ~RouteFailTime();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf second; //type: uint32
                                        YLeaf nanosecond; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteTable::Route::RouteInfo::RouteFailTime


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteTable::Route::RouteInfo::RouteFailTime> route_fail_time;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteTable::Route::RouteInfo::RouteUpdateTime> route_update_time;


                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteTable::Route::RouteInfo


                            class RoutePath : public Entity
                            {
                                public:
                                    RoutePath();
                                    ~RoutePath();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf route_interface_name; //type: string
                                    YLeaf route_next_hop_address; //type: string
                                    YLeaf route_source; //type: string
                                    YLeaf route_lsaid; //type: string
                                    YLeaf route_path_is_mcast_intact; //type: boolean
                                    YLeaf route_path_is_ucmp_path; //type: boolean
                                    YLeaf route_metric; //type: uint32
                                    YLeaf lsa_type; //type: uint8
                                    YLeaf area_id; //type: uint32
                                    YLeaf area_format; //type: boolean



                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteTable::Route::RoutePath


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteTable::Route::RouteInfo> route_info;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteTable::Route::RoutePath> > route_path;


                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteTable::Route


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteTable::Route> > route;


                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteTable


                    class ExternalRoutes : public Entity
                    {
                        public:
                            ExternalRoutes();
                            ~ExternalRoutes();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class ExternalRoute : public Entity
                        {
                            public:
                                ExternalRoute();
                                ~ExternalRoute();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf prefix; //type: string
                                YLeaf prefix_length; //type: uint32

                            class RouteInformation_ : public Entity
                            {
                                public:
                                    RouteInformation_();
                                    ~RouteInformation_();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf route_prefix; //type: string
                                    YLeaf route_prefix_length; //type: uint32
                                    YLeaf route_metric; //type: uint32
                                    YLeaf route_type; //type: OspfRouteEnum
                                    YLeaf route_connected; //type: boolean

                                class RouteInfo : public Entity
                                {
                                    public:
                                        RouteInfo();
                                        ~RouteInfo();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf route_area_id; //type: uint32
                                        YLeaf route_te_metric; //type: uint32
                                        YLeaf route_rib_version; //type: uint32
                                        YLeaf route_spf_version; //type: uint64
                                        YLeaf route_forward_distance; //type: uint32
                                        YLeaf route_source; //type: uint16
                                        YLeaf route_spf_priority; //type: uint8
                                        YLeaf route_auto_excluded; //type: boolean
                                        YLeaf route_srte_prefix_registered; //type: boolean
                                        YLeaf route_srte_nbr_registered; //type: uint16

                                    class RouteUpdateTime : public Entity
                                    {
                                        public:
                                            RouteUpdateTime();
                                            ~RouteUpdateTime();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf second; //type: uint32
                                            YLeaf nanosecond; //type: uint32



                                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_::RouteInfo::RouteUpdateTime


                                    class RouteFailTime : public Entity
                                    {
                                        public:
                                            RouteFailTime();
                                            ~RouteFailTime();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf second; //type: uint32
                                            YLeaf nanosecond; //type: uint32



                                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_::RouteInfo::RouteFailTime


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_::RouteInfo::RouteFailTime> route_fail_time;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_::RouteInfo::RouteUpdateTime> route_update_time;


                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_::RouteInfo


                                class RoutePath : public Entity
                                {
                                    public:
                                        RoutePath();
                                        ~RoutePath();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf route_interface_name; //type: string
                                        YLeaf route_next_hop_address; //type: string
                                        YLeaf route_source; //type: string
                                        YLeaf route_lsaid; //type: string
                                        YLeaf route_path_is_mcast_intact; //type: boolean
                                        YLeaf route_path_is_ucmp_path; //type: boolean
                                        YLeaf route_metric; //type: uint32
                                        YLeaf lsa_type; //type: uint8
                                        YLeaf area_id; //type: uint32
                                        YLeaf area_format; //type: boolean



                                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_::RoutePath


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_::RouteInfo> route_info;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_::RoutePath> > route_path;


                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_


                            class ProtocolName : public Entity
                            {
                                public:
                                    ProtocolName();
                                    ~ProtocolName();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf protocol_type; //type: RedistProtocolEnum
                                    YLeaf isis_instance_id; //type: string
                                    YLeaf ospf_process_id; //type: string
                                    YLeaf bgp_as_number; //type: string
                                    YLeaf eigrp_as_number; //type: string
                                    YLeaf connected_instance; //type: string



                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::ExternalRoutes::ExternalRoute::ProtocolName


                            class RouteExtendedCommunity : public Entity
                            {
                                public:
                                    RouteExtendedCommunity();
                                    ~RouteExtendedCommunity();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf extended_community_domain_id_value; //type: string
                                    YLeaf extended_communityl_domain_id_type; //type: uint16
                                    YLeaf extended_community_area_id; //type: uint32
                                    YLeaf extended_community_router_id; //type: string
                                    YLeaf extended_community_route_type; //type: uint8
                                    YLeaf extended_community_options; //type: uint8



                            }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteExtendedCommunity


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::ExternalRoutes::ExternalRoute::ProtocolName> protocol_name;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteExtendedCommunity> route_extended_community;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::ExternalRoutes::ExternalRoute::RouteInformation_> route_information;


                        }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::ExternalRoutes::ExternalRoute


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::ExternalRoutes::ExternalRoute> > external_route;


                    }; // Ospf::Processes::Process::DefaultVrf::RouteInformation::ExternalRoutes


                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::BackupRoutes> backup_routes;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::ConnectedRoutes> connected_routes;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::ExternalRoutes> external_routes;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::LocalRoutes> local_routes;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactBackupRoutes> multicast_intact_backup_routes;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::MulticastIntactRouteTable> multicast_intact_route_table;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteAreas> route_areas;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::RouteTable> route_table;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation::SummaryInformation> summary_information;


                }; // Ospf::Processes::Process::DefaultVrf::RouteInformation


                class InterfaceInformation : public Entity
                {
                    public:
                        InterfaceInformation();
                        ~InterfaceInformation();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;



                    class VirtualLinks : public Entity
                    {
                        public:
                            VirtualLinks();
                            ~VirtualLinks();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class VirtualLink : public Entity
                        {
                            public:
                                VirtualLink();
                                ~VirtualLink();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf virtual_link_name; //type: string
                                YLeaf virtual_link_name_xr; //type: string
                                YLeaf virtual_link_neighbor_id; //type: string
                                YLeaf virtual_link_state; //type: OspfInterfaceStateEnum
                                YLeaf virtual_link_demand_circuit; //type: boolean
                                YLeaf virtual_link_dc_bitless_lsa; //type: uint32
                                YLeaf transit_area; //type: string
                                YLeaf virtual_link_interface_name; //type: string
                                YLeaf virtual_link_cost; //type: uint16
                                YLeaf virual_link_transmission_delay; //type: uint16
                                YLeaf virtual_link_hello_interval; //type: uint32
                                YLeaf virtual_link_hello_interval_ms; //type: uint32
                                YLeaf virtual_link_dead_interval; //type: uint32
                                YLeaf virtual_link_wait_interval; //type: uint32
                                YLeaf virtaul_link_retransmission_interval; //type: uint32
                                YLeaf virtual_link_next_hello; //type: uint32
                                YLeaf virtual_link_next_hello_ms; //type: uint32
                                YLeaf virtual_link_passive; //type: boolean
                                YLeaf virtual_link_authentication_type; //type: AuthenticationEnum
                                YLeaf virtual_link_youngest_md_key; //type: boolean
                                YLeaf virtual_link_youngest_md_key_id; //type: uint16
                                YLeaf virtual_link_old_md_key_count; //type: uint32
                                YLeaf virtual_link_keychain_id; //type: uint64
                                YLeaf virtual_link_nsf_enabled; //type: boolean
                                YLeaf virtual_link_nsf; //type: boolean
                                YLeaf virtual_link_last_nsf; //type: uint32
                                YLeafList virtual_link_md_key; //type: list of  uint16

                            class VirtualLinkNeighbor : public Entity
                            {
                                public:
                                    VirtualLinkNeighbor();
                                    ~VirtualLinkNeighbor();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf virtual_link_suppress_hello; //type: boolean
                                    YLeaf virtual_link_state; //type: NeighborStateEnum

                                class VirtualLinkRetransmissoin : public Entity
                                {
                                    public:
                                        VirtualLinkRetransmissoin();
                                        ~VirtualLinkRetransmissoin();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf dbd_retransmission_count; //type: uint32
                                        YLeaf dbd_retransmission_total_count; //type: uint32
                                        YLeaf area_flooding_index; //type: uint32
                                        YLeaf as_flood_index; //type: uint32
                                        YLeaf neighbor_retransmission_count; //type: uint32
                                        YLeaf number_of_retransmissions; //type: uint32
                                        YLeaf area_first_flood_information; //type: uint32
                                        YLeaf area_first_flood_information_index; //type: uint32
                                        YLeaf as_first_flood_information; //type: uint32
                                        YLeaf as_first_flood_information_index; //type: uint32
                                        YLeaf area_next_flood_information; //type: uint32
                                        YLeaf area_next_flood_information_index; //type: uint32
                                        YLeaf as_next_flood_information; //type: uint32
                                        YLeaf as_next_flood_information_index; //type: uint32
                                        YLeaf last_retransmission_length; //type: uint32
                                        YLeaf maximum_retransmission_length; //type: uint32
                                        YLeaf last_retransmission_time; //type: uint32
                                        YLeaf maximum_retransmission_time; //type: uint32
                                        YLeaf lsa_retransmission_timer; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::InterfaceInformation::VirtualLinks::VirtualLink::VirtualLinkNeighbor::VirtualLinkRetransmissoin


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::InterfaceInformation::VirtualLinks::VirtualLink::VirtualLinkNeighbor::VirtualLinkRetransmissoin> virtual_link_retransmissoin;


                            }; // Ospf::Processes::Process::DefaultVrf::InterfaceInformation::VirtualLinks::VirtualLink::VirtualLinkNeighbor


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::InterfaceInformation::VirtualLinks::VirtualLink::VirtualLinkNeighbor> virtual_link_neighbor;


                        }; // Ospf::Processes::Process::DefaultVrf::InterfaceInformation::VirtualLinks::VirtualLink


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::InterfaceInformation::VirtualLinks::VirtualLink> > virtual_link;


                    }; // Ospf::Processes::Process::DefaultVrf::InterfaceInformation::VirtualLinks


                    class InterfaceBriefs : public Entity
                    {
                        public:
                            InterfaceBriefs();
                            ~InterfaceBriefs();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class InterfaceBrief : public Entity
                        {
                            public:
                                InterfaceBrief();
                                ~InterfaceBrief();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf interface_name; //type: string
                                YLeaf interface_name_xr; //type: string
                                YLeaf interface_area; //type: string
                                YLeaf interface_address; //type: string
                                YLeaf interface_mask; //type: uint32
                                YLeaf interface_link_cost; //type: uint16
                                YLeaf ospf_interface_state; //type: OspfInterfaceStateEnum
                                YLeaf interface_fast_detect_hold_down; //type: boolean
                                YLeaf interface_neighbor_count; //type: uint16
                                YLeaf interface_adj_neighbor_count; //type: uint16
                                YLeaf interfaceis_madj; //type: boolean
                                YLeaf interface_madj_count; //type: uint16

                            class InterfaceMadj : public Entity
                            {
                                public:
                                    InterfaceMadj();
                                    ~InterfaceMadj();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf interface_area; //type: string
                                    YLeaf madj_area_id; //type: uint32
                                    YLeaf interface_neighbor_count; //type: uint16
                                    YLeaf interface_adj_neighbor_count; //type: uint16
                                    YLeaf interface_link_cost; //type: uint16
                                    YLeaf ospf_interface_state; //type: OspfInterfaceStateEnum



                            }; // Ospf::Processes::Process::DefaultVrf::InterfaceInformation::InterfaceBriefs::InterfaceBrief::InterfaceMadj


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::InterfaceInformation::InterfaceBriefs::InterfaceBrief::InterfaceMadj> > interface_madj;


                        }; // Ospf::Processes::Process::DefaultVrf::InterfaceInformation::InterfaceBriefs::InterfaceBrief


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::InterfaceInformation::InterfaceBriefs::InterfaceBrief> > interface_brief;


                    }; // Ospf::Processes::Process::DefaultVrf::InterfaceInformation::InterfaceBriefs


                    class Interfaces : public Entity
                    {
                        public:
                            Interfaces();
                            ~Interfaces();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Interface : public Entity
                        {
                            public:
                                Interface();
                                ~Interface();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf interface_name; //type: string
                                YLeaf interface_name_xr; //type: string
                                YLeaf interface_state; //type: InterfaceStateEnum
                                YLeaf interface_line_state; //type: boolean
                                YLeaf interface_address; //type: string
                                YLeaf interface_mask; //type: uint32
                                YLeaf interface_area; //type: string
                                YLeaf interface_sid; //type: uint32
                                YLeaf interface_sid_php_off; //type: boolean
                                YLeaf interface_sid_n_flag_clear; //type: boolean
                                YLeaf interface_strict_spf_sid; //type: uint32
                                YLeaf interface_strict_spf_sid_php_off; //type: boolean
                                YLeaf interface_strict_spf_sid_n_flag_clear; //type: boolean
                                YLeaf interface_router_id; //type: string
                                YLeaf network_type; //type: InterfaceEnum
                                YLeaf ip_mtu; //type: uint16
                                YLeaf maximum_packet_size; //type: uint16
                                YLeaf interface_tunnel_flags; //type: uint32
                                YLeaf interface_link_cost; //type: uint16
                                YLeaf interface_bandwidth; //type: uint32
                                YLeaf cfg_cost_fallback; //type: boolean
                                YLeaf interface_cost_fallback; //type: uint16
                                YLeaf cost_fallback_active; //type: boolean
                                YLeaf configured_ldp_sync; //type: boolean
                                YLeaf configured_ldp_sync_igp_shortcuts; //type: boolean
                                YLeaf interface_ldp_sync; //type: boolean
                                YLeaf configured_demand_circuit; //type: boolean
                                YLeaf interface_demand_circuit; //type: boolean
                                YLeaf interface_dc_bitless_lsa_count; //type: uint32
                                YLeaf transmission_delay; //type: uint16
                                YLeaf ospf_interface_state; //type: OspfInterfaceStateEnum
                                YLeaf interface_priority; //type: uint8
                                YLeaf designated_router; //type: boolean
                                YLeaf designated_router_id; //type: string
                                YLeaf designated_router_address; //type: string
                                YLeaf backup_designated_router; //type: boolean
                                YLeaf backup_designated_router_id; //type: string
                                YLeaf backup_designated_router_address; //type: string
                                YLeaf network_lsa_flush_timer; //type: uint32
                                YLeaf interface_lsa_filter; //type: boolean
                                YLeaf hello_interval; //type: uint32
                                YLeaf hello_interval_ms; //type: uint32
                                YLeaf dead_interval; //type: uint32
                                YLeaf wait_interval; //type: uint32
                                YLeaf interface_retransmission_interrval; //type: uint32
                                YLeaf interface_nsf_enabled; //type: boolean
                                YLeaf interface_nsf; //type: boolean
                                YLeaf interface_last_nsf; //type: uint32
                                YLeaf passive_interface; //type: boolean
                                YLeaf next_hello_time; //type: uint32
                                YLeaf next_hello_time_ms; //type: uint32
                                YLeaf ttl_security_enabled; //type: boolean
                                YLeaf ttl_security_hop_count; //type: uint32
                                YLeaf interfaceis_madj; //type: boolean
                                YLeaf interface_madj_count; //type: uint16
                                YLeaf prefix_suppress_primary_addresses; //type: boolean
                                YLeaf prefix_suppress_secondary_addresses; //type: boolean
                                YLeaf is_loopback_stub_network; //type: boolean
                                YLeaf interface_ack_list_count; //type: uint32
                                YLeaf interface_ack_list_high_watermark; //type: uint32
                                YLeaf registered_for_link_down_fast_detection; //type: boolean
                                YLeaf fast_detect_hold_down_time; //type: uint32
                                YLeaf interface_fast_detect_hold_down; //type: boolean
                                YLeaf fast_detect_hold_down_time_remaining; //type: uint32
                                YLeaf fast_reroute_type; //type: IpfrrEnum
                                YLeaf fast_reroute_topology_independent_lfa; //type: boolean
                                YLeafList srlg; //type: list of  uint32

                            class InterfaceBfdInformation : public Entity
                            {
                                public:
                                    InterfaceBfdInformation();
                                    ~InterfaceBfdInformation();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf bfd_intf_enable_mode; //type: uint32
                                    YLeaf interval; //type: uint32
                                    YLeaf detection_multiplier; //type: uint32



                            }; // Ospf::Processes::Process::DefaultVrf::InterfaceInformation::Interfaces::Interface::InterfaceBfdInformation


                            class ActiveInterface : public Entity
                            {
                                public:
                                    ActiveInterface();
                                    ~ActiveInterface();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf wait_time; //type: uint32
                                    YLeaf interface_area_flood_index; //type: uint32
                                    YLeaf interface_as_flood_index; //type: uint32
                                    YLeaf interface_flood_length; //type: uint32
                                    YLeaf interface_area_next_flood; //type: uint32
                                    YLeaf interface_area_next_flood_index; //type: uint32
                                    YLeaf interface_as_next_flood; //type: uint32
                                    YLeaf interface_as_next_flood_index; //type: uint32
                                    YLeaf flood_scan_length; //type: uint32
                                    YLeaf maximum_flood_length; //type: uint32
                                    YLeaf last_flood_time; //type: uint32
                                    YLeaf maximum_flood_time; //type: uint32
                                    YLeaf interface_flood_pacing_timer; //type: uint32
                                    YLeaf interface_neighbor_count; //type: uint16
                                    YLeaf suppress_hello_count; //type: uint16
                                    YLeaf interface_authentication_type; //type: AuthenticationEnum
                                    YLeaf youngest_md_key; //type: boolean
                                    YLeaf old_md5_key_neighbor_count; //type: uint32
                                    YLeaf youngest_md_key_id; //type: uint16
                                    YLeaf keychain_id; //type: uint64
                                    YLeafList md_keys; //type: list of  uint16



                            }; // Ospf::Processes::Process::DefaultVrf::InterfaceInformation::Interfaces::Interface::ActiveInterface


                            class InterfaceNeighbor : public Entity
                            {
                                public:
                                    InterfaceNeighbor();
                                    ~InterfaceNeighbor();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf interface_neighbor_id; //type: string
                                    YLeaf interface_neighbor_cost; //type: uint32
                                    YLeaf neighbor_dr; //type: boolean
                                    YLeaf neighbor_bdr; //type: boolean
                                    YLeaf suppress_hello; //type: boolean



                            }; // Ospf::Processes::Process::DefaultVrf::InterfaceInformation::Interfaces::Interface::InterfaceNeighbor


                            class InterfaceMadj : public Entity
                            {
                                public:
                                    InterfaceMadj();
                                    ~InterfaceMadj();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf interface_area; //type: string
                                    YLeaf madj_area_id; //type: uint32
                                    YLeaf interface_neighbor_count; //type: uint16
                                    YLeaf interface_adj_neighbor_count; //type: uint16
                                    YLeaf interface_link_cost; //type: uint16
                                    YLeaf ospf_interface_state; //type: OspfInterfaceStateEnum



                            }; // Ospf::Processes::Process::DefaultVrf::InterfaceInformation::Interfaces::Interface::InterfaceMadj


                            class IpfrrTiebreakers : public Entity
                            {
                                public:
                                    IpfrrTiebreakers();
                                    ~IpfrrTiebreakers();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf tiebreaker_type; //type: IpfrrTbrkrEnum
                                    YLeaf tiebreaker_index; //type: uint32



                            }; // Ospf::Processes::Process::DefaultVrf::InterfaceInformation::Interfaces::Interface::IpfrrTiebreakers


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::InterfaceInformation::Interfaces::Interface::ActiveInterface> active_interface;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::InterfaceInformation::Interfaces::Interface::InterfaceBfdInformation> interface_bfd_information;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::InterfaceInformation::Interfaces::Interface::InterfaceMadj> > interface_madj;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::InterfaceInformation::Interfaces::Interface::InterfaceNeighbor> > interface_neighbor;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::InterfaceInformation::Interfaces::Interface::IpfrrTiebreakers> > ipfrr_tiebreakers;


                        }; // Ospf::Processes::Process::DefaultVrf::InterfaceInformation::Interfaces::Interface


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::InterfaceInformation::Interfaces::Interface> > interface;


                    }; // Ospf::Processes::Process::DefaultVrf::InterfaceInformation::Interfaces


                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::InterfaceInformation::InterfaceBriefs> interface_briefs;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::InterfaceInformation::Interfaces> interfaces;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::InterfaceInformation::VirtualLinks> virtual_links;


                }; // Ospf::Processes::Process::DefaultVrf::InterfaceInformation


                class BorderRouters : public Entity
                {
                    public:
                        BorderRouters();
                        ~BorderRouters();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;



                    class BorderRouter : public Entity
                    {
                        public:
                            BorderRouter();
                            ~BorderRouter();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                            YLeaf border_router_id; //type: string
                            YLeaf border_router_id_xr; //type: string

                        class BorderRouterPath : public Entity
                        {
                            public:
                                BorderRouterPath();
                                ~BorderRouterPath();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf border_router_route_type; //type: OspfRouteEnum
                                YLeaf border_router_route_metric; //type: uint32
                                YLeaf border_router_next_hop; //type: string
                                YLeaf border_router_next_hop_interface_name; //type: string
                                YLeaf border_router_type; //type: OspfBrEnum
                                YLeaf border_router_area_id; //type: string
                                YLeaf spf_version; //type: uint64



                        }; // Ospf::Processes::Process::DefaultVrf::BorderRouters::BorderRouter::BorderRouterPath


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::BorderRouters::BorderRouter::BorderRouterPath> > border_router_path;


                    }; // Ospf::Processes::Process::DefaultVrf::BorderRouters::BorderRouter


                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::BorderRouters::BorderRouter> > border_router;


                }; // Ospf::Processes::Process::DefaultVrf::BorderRouters


                class ProcessInformation : public Entity
                {
                    public:
                        ProcessInformation();
                        ~ProcessInformation();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;



                    class ProtocolAreas : public Entity
                    {
                        public:
                            ProtocolAreas();
                            ~ProtocolAreas();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class ProtocolArea : public Entity
                        {
                            public:
                                ProtocolArea();
                                ~ProtocolArea();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf area_id; //type: int32
                                YLeaf address; //type: string
                                YLeaf protcol_area; //type: string
                                YLeaf protocol_mpls; //type: boolean
                                YLeaf protocol_area_dist_list_in; //type: string

                            class ProtocolInterface : public Entity
                            {
                                public:
                                    ProtocolInterface();
                                    ~ProtocolInterface();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf protocol_interface_name; //type: string
                                    YLeaf protocol_authentication_type; //type: AuthenticationEnum
                                    YLeaf protocol_interface_dist_list_in; //type: string



                            }; // Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProtocolAreas::ProtocolArea::ProtocolInterface


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProtocolAreas::ProtocolArea::ProtocolInterface> > protocol_interface;


                        }; // Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProtocolAreas::ProtocolArea


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProtocolAreas::ProtocolArea> > protocol_area;


                    }; // Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProtocolAreas


                    class ProtocolSummary : public Entity
                    {
                        public:
                            ProtocolSummary();
                            ~ProtocolSummary();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                            YLeaf protocol_router_id; //type: string
                            YLeaf protocol_distance; //type: uint32
                            YLeaf administrative_distance_inter_area; //type: uint32
                            YLeaf administrative_distance_external; //type: uint32
                            YLeaf protocol_nsf; //type: boolean
                            YLeaf dist_list_in; //type: string



                    }; // Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProtocolSummary


                    class Redistributions : public Entity
                    {
                        public:
                            Redistributions();
                            ~Redistributions();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Redistribution : public Entity
                        {
                            public:
                                Redistribution();
                                ~Redistribution();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf protocol_name; //type: string
                                YLeaf process_name; //type: string
                                YLeaf metric_flag; //type: boolean
                                YLeaf metric; //type: uint32
                                YLeaf classless; //type: boolean
                                YLeaf nssa_only; //type: boolean

                            class RedistributionProtocol : public Entity
                            {
                                public:
                                    RedistributionProtocol();
                                    ~RedistributionProtocol();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf protocol_type; //type: RedistProtocolEnum
                                    YLeaf isis_instance_id; //type: string
                                    YLeaf ospf_process_id; //type: string
                                    YLeaf bgp_as_number; //type: string
                                    YLeaf eigrp_as_number; //type: string
                                    YLeaf connected_instance; //type: string



                            }; // Ospf::Processes::Process::DefaultVrf::ProcessInformation::Redistributions::Redistribution::RedistributionProtocol


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::ProcessInformation::Redistributions::Redistribution::RedistributionProtocol> redistribution_protocol;


                        }; // Ospf::Processes::Process::DefaultVrf::ProcessInformation::Redistributions::Redistribution


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::ProcessInformation::Redistributions::Redistribution> > redistribution;


                    }; // Ospf::Processes::Process::DefaultVrf::ProcessInformation::Redistributions


                    class ProcessAreas : public Entity
                    {
                        public:
                            ProcessAreas();
                            ~ProcessAreas();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class ProcessArea : public Entity
                        {
                            public:
                                ProcessArea();
                                ~ProcessArea();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf area_id; //type: int32
                                YLeaf address; //type: string
                                YLeaf area_id_string; //type: string
                                YLeaf backbone_area_active; //type: boolean
                                YLeaf area_interface_count; //type: uint16
                                YLeaf area_stub; //type: boolean
                                YLeaf area_total_stub; //type: boolean
                                YLeaf stub_default_cost; //type: uint16
                                YLeaf area_nssa; //type: boolean
                                YLeaf nssa_no_redistribution; //type: boolean
                                YLeaf nssa_translate; //type: boolean
                                YLeaf nssa_default; //type: boolean
                                YLeaf te_enabled; //type: boolean
                                YLeaf te_topology_version; //type: uint32
                                YLeaf external_out; //type: boolean
                                YLeaf summary_in; //type: boolean
                                YLeaf segment_routing; //type: uint32
                                YLeaf sr_strict_spf_cap; //type: boolean
                                YLeaf sr_strict_spfsids_available; //type: boolean
                                YLeaf authentication_type; //type: AuthenticationEnum
                                YLeaf spf_count; //type: uint32
                                YLeaf area_policy_in; //type: boolean
                                YLeaf area_policy_in_name; //type: string
                                YLeaf area_policy_out; //type: boolean
                                YLeaf area_policy_out_name; //type: string
                                YLeaf area_lsa_count; //type: uint32
                                YLeaf area_lsa_checksum; //type: uint32
                                YLeaf area_opaque_lsa_count; //type: uint32
                                YLeaf area_opaque_lsa_checksum; //type: uint32
                                YLeaf area_dc_bitless_lsa_count; //type: uint32
                                YLeaf indication_lsa_count; //type: uint32
                                YLeaf dna_lsa_count; //type: uint32
                                YLeaf flood_list_length; //type: uint32
                                YLeaf area_lfa_interface_count; //type: uint32
                                YLeaf area_per_prefix_lfa_interface_count; //type: uint32
                                YLeaf area_lfa_revision; //type: uint32
                                YLeaf area_adj_stag_num_nbr_forming; //type: uint16
                                YLeaf area_num_nbr_full; //type: uint16

                            class AreaRange : public Entity
                            {
                                public:
                                    AreaRange();
                                    ~AreaRange();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf range_prefix; //type: string
                                    YLeaf range_mask; //type: string
                                    YLeaf cost; //type: uint32
                                    YLeaf advertise_flag; //type: boolean



                            }; // Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessAreas::ProcessArea::AreaRange


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessAreas::ProcessArea::AreaRange> > area_range;


                        }; // Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessAreas::ProcessArea


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessAreas::ProcessArea> > process_area;


                    }; // Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessAreas


                    class ProcessSummary : public Entity
                    {
                        public:
                            ProcessSummary();
                            ~ProcessSummary();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                            YLeaf role_standby; //type: boolean
                            YLeaf role; //type: uint32
                            YLeaf nsr_enabled; //type: boolean
                            YLeaf nsr_switchover_on_restart; //type: boolean
                            YLeaf igp_intact_on; //type: boolean
                            YLeaf router_id; //type: string
                            YLeaf tos_options; //type: uint8
                            YLeaf opaque_capable; //type: boolean
                            YLeaf area_border_router; //type: boolean
                            YLeaf as_border_router; //type: boolean
                            YLeaf vrf_lite_enabled; //type: boolean
                            YLeaf maximum_metric_start; //type: boolean
                            YLeaf maximum_metric_start_timer; //type: uint32
                            YLeaf maximum_metric_set_reason; //type: MaxMetricSetReasonEnum
                            YLeaf maximum_metric_abr_off_mode; //type: boolean
                            YLeaf maximum_metric_abr_off_reasons; //type: OspfMaxMetricAbrOffReasonsEnum
                            YLeaf maximum_metric_abr_off_buffer_time; //type: uint32
                            YLeaf spf_start_time; //type: uint16
                            YLeaf spf_hold_time; //type: uint16
                            YLeaf spf_maximum_time; //type: uint16
                            YLeaf spf_start_time_u32; //type: uint32
                            YLeaf spf_hold_time_u32; //type: uint32
                            YLeaf spf_maximum_time_u32; //type: uint32
                            YLeaf spf_prefix_priority; //type: boolean
                            YLeaf spf_prefix_priority_route_policy; //type: string
                            YLeaf lsa_start_time; //type: int32
                            YLeaf lsa_hold_time; //type: uint32
                            YLeaf lsa_maximum_time; //type: uint32
                            YLeaf minimum_lsa_interval; //type: uint16
                            YLeaf minimum_lsa_interval_u32; //type: uint32
                            YLeaf lsa_refresh_interval; //type: uint32
                            YLeaf minimum_lsa_arrival_interval; //type: uint16
                            YLeaf minimum_lsa_arrival_interval_u32; //type: uint32
                            YLeaf if_flood_pacing_interval; //type: uint16
                            YLeaf if_retrans_pacing_interval; //type: uint16
                            YLeaf adj_stag_init_num_nbr; //type: uint16
                            YLeaf adj_stag_max_num_nbr; //type: uint16
                            YLeaf adj_stagger_enabled; //type: boolean
                            YLeaf adj_stag_num_nbr_forming; //type: uint16
                            YLeaf number_nbrs_full; //type: uint16
                            YLeaf as_lsa_count; //type: uint32
                            YLeaf as_lsa_checksum; //type: uint32
                            YLeaf opaque_lsa_count; //type: uint32
                            YLeaf opaque_lsa_checksum; //type: uint32
                            YLeaf as_dc_bitless_lsa_count; //type: uint32
                            YLeaf as_dna_lsa_count; //type: uint32
                            YLeaf area_count; //type: uint16
                            YLeaf normal_area_count; //type: uint16
                            YLeaf stub_area_count; //type: uint16
                            YLeaf nssa_area_count; //type: uint16
                            YLeaf maximum_interfaces; //type: uint32
                            YLeaf as_lsa_flood_list_length; //type: uint32
                            YLeaf nsf_enabled; //type: boolean
                            YLeaf last_nsf_time; //type: uint32
                            YLeaf nsf_time; //type: uint32
                            YLeaf redistribution_limit; //type: uint32
                            YLeaf redistribution_threshold; //type: uint32
                            YLeaf redistribution_limit_warn; //type: boolean
                            YLeaf graceful_shutdown_retention_time; //type: uint32
                            YLeaf graceful_shutdown_state; //type: GsStateEnum
                            YLeaf table_prefix_limit_reached; //type: boolean
                            YLeaf non_self_lsa_count; //type: uint32
                            YLeaf max_lsa_enabled; //type: boolean
                            YLeaf max_lsa_limit; //type: uint32
                            YLeaf max_lsa_treshold; //type: uint32
                            YLeaf max_lsa_warning_only; //type: boolean
                            YLeaf max_lsa_ignore_time; //type: uint32
                            YLeaf max_lsa_reset_time; //type: uint32
                            YLeaf max_lsa_ignore_limit; //type: uint32
                            YLeaf max_lsa_ignore_count; //type: uint32
                            YLeaf max_lsa_ignore_timer; //type: uint32
                            YLeaf max_lsa_reset_timer; //type: uint32
                            YLeaf context_name; //type: string
                            YLeaf snmp_trap_enabled; //type: boolean
                            YLeaf ucmp; //type: boolean
                            YLeaf ucmp_prefix_list; //type: string
                            YLeaf ucmp_variance; //type: int32
                            YLeaf ucmp_delay; //type: uint32
                            YLeaf lsd_connected; //type: boolean
                            YLeaf lsd_registered; //type: boolean
                            YLeaf lsd_bound; //type: boolean
                            YLeaf lsd_connection_revision; //type: uint32
                            YLeaf srgb_configured; //type: boolean
                            YLeaf srgb_start; //type: uint32
                            YLeaf srgb_end; //type: uint32
                            YLeaf srgb_status; //type: OspfSrgbStatusEnum
                            YLeaf sr_strict_spf_cap; //type: boolean

                        class DomainId : public Entity
                        {
                            public:
                                DomainId();
                                ~DomainId();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class PrimaryDomainId : public Entity
                            {
                                public:
                                    PrimaryDomainId();
                                    ~PrimaryDomainId();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf domain_id_type; //type: uint16
                                    YLeaf domain_id_value; //type: string



                            }; // Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessSummary::DomainId::PrimaryDomainId


                            class SecondaryDomainId : public Entity
                            {
                                public:
                                    SecondaryDomainId();
                                    ~SecondaryDomainId();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf domain_id_type; //type: uint16
                                    YLeaf domain_id_value; //type: string



                            }; // Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessSummary::DomainId::SecondaryDomainId


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessSummary::DomainId::PrimaryDomainId> primary_domain_id;
                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessSummary::DomainId::SecondaryDomainId> > secondary_domain_id;


                        }; // Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessSummary::DomainId


                        class MaximumMetric : public Entity
                        {
                            public:
                                MaximumMetric();
                                ~MaximumMetric();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf max_metric_reason; //type: uint8
                                YLeaf max_metric_enabled; //type: boolean
                                YLeaf unset_maximum_metric; //type: boolean
                                YLeaf saved_unset_maximum_metric; //type: boolean
                                YLeaf maximum_metric_start_time; //type: uint32
                                YLeaf saved_startup_time; //type: uint32
                                YLeaf maximum_metric_include_stubs; //type: boolean
                                YLeaf maximum_metric_summary_lsa; //type: boolean
                                YLeaf maximum_metric_summary_lsa_metric; //type: uint32
                                YLeaf maximum_metric_external_lsa; //type: boolean
                                YLeaf maximum_metric_external_lsa_metric; //type: uint32
                                YLeaf maximum_metric_originated_for; //type: uint32
                                YLeaf maximum_metric_unset_reason; //type: MaxMetricUnsetReasonEnum

                            class MaximumMetricTimeUnset : public Entity
                            {
                                public:
                                    MaximumMetricTimeUnset();
                                    ~MaximumMetricTimeUnset();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf second; //type: uint32
                                    YLeaf nanosecond; //type: uint32



                            }; // Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessSummary::MaximumMetric::MaximumMetricTimeUnset


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessSummary::MaximumMetric::MaximumMetricTimeUnset> maximum_metric_time_unset;


                        }; // Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessSummary::MaximumMetric


                        class Redistribution : public Entity
                        {
                            public:
                                Redistribution();
                                ~Redistribution();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf metric_flag; //type: boolean
                                YLeaf metric; //type: uint32
                                YLeaf classless; //type: boolean
                                YLeaf nssa_only; //type: boolean

                            class RedistributionProtocol : public Entity
                            {
                                public:
                                    RedistributionProtocol();
                                    ~RedistributionProtocol();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf protocol_type; //type: RedistProtocolEnum
                                    YLeaf isis_instance_id; //type: string
                                    YLeaf ospf_process_id; //type: string
                                    YLeaf bgp_as_number; //type: string
                                    YLeaf eigrp_as_number; //type: string
                                    YLeaf connected_instance; //type: string



                            }; // Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessSummary::Redistribution::RedistributionProtocol


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessSummary::Redistribution::RedistributionProtocol> redistribution_protocol;


                        }; // Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessSummary::Redistribution


                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessSummary::DomainId> domain_id;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessSummary::MaximumMetric> > maximum_metric;
                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessSummary::Redistribution> > redistribution;


                    }; // Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessSummary


                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessAreas> process_areas;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProcessSummary> process_summary;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProtocolAreas> protocol_areas;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::ProcessInformation::ProtocolSummary> protocol_summary;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::ProcessInformation::Redistributions> redistributions;


                }; // Ospf::Processes::Process::DefaultVrf::ProcessInformation


                class Areas : public Entity
                {
                    public:
                        Areas();
                        ~Areas();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;



                    class Area : public Entity
                    {
                        public:
                            Area();
                            ~Area();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                            YLeaf area_id; //type: int32

                        class FloodListAreaTable : public Entity
                        {
                            public:
                                FloodListAreaTable();
                                ~FloodListAreaTable();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class Flood : public Entity
                            {
                                public:
                                    Flood();
                                    ~Flood();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf interface_name; //type: string
                                    YLeaf flood_interface_name; //type: string
                                    YLeaf flood_pacing_timer; //type: uint32
                                    YLeaf flood_lsa_count; //type: uint32

                                class AreaFlood : public Entity
                                {
                                    public:
                                        AreaFlood();
                                        ~AreaFlood();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf header_lsa_type; //type: LsaEnum
                                        YLeaf header_lsa_age; //type: uint16
                                        YLeaf header_ls_id; //type: string
                                        YLeaf header_advertising_router; //type: string
                                        YLeaf header_sequence_number; //type: uint32
                                        YLeaf header_lsa_checksum; //type: uint16



                                }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::FloodListAreaTable::Flood::AreaFlood


                                class AsFlood : public Entity
                                {
                                    public:
                                        AsFlood();
                                        ~AsFlood();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf header_lsa_type; //type: LsaEnum
                                        YLeaf header_lsa_age; //type: uint16
                                        YLeaf header_ls_id; //type: string
                                        YLeaf header_advertising_router; //type: string
                                        YLeaf header_sequence_number; //type: uint32
                                        YLeaf header_lsa_checksum; //type: uint16



                                }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::FloodListAreaTable::Flood::AsFlood


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::FloodListAreaTable::Flood::AreaFlood> > area_flood;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::FloodListAreaTable::Flood::AsFlood> > as_flood;


                            }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::FloodListAreaTable::Flood


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::FloodListAreaTable::Flood> > flood;


                        }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::FloodListAreaTable


                        class Neighbors : public Entity
                        {
                            public:
                                Neighbors();
                                ~Neighbors();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class Neighbor : public Entity
                            {
                                public:
                                    Neighbor();
                                    ~Neighbor();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf interface_name; //type: string
                                    YLeaf neighbor_address; //type: string
                                    YLeaf neighbor_id; //type: string
                                    YLeaf neighbor_address_xr; //type: string
                                    YLeaf neighbor_interface_name; //type: string
                                    YLeaf neighbor_dr_priority; //type: uint8
                                    YLeaf neighbor_state; //type: NeighborStateEnum
                                    YLeaf dr_bdr_state; //type: DrBdrStateEnum
                                    YLeaf neighbor_dead_timer; //type: uint32
                                    YLeaf neighbor_up_time; //type: uint32
                                    YLeaf neighbor_madj_interface; //type: boolean

                                class NeighborBfdInformation : public Entity
                                {
                                    public:
                                        NeighborBfdInformation();
                                        ~NeighborBfdInformation();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf bfd_intf_enable_mode; //type: uint32
                                        YLeaf bfd_status_flag; //type: uint8



                                }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::Neighbors::Neighbor::NeighborBfdInformation


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::Neighbors::Neighbor::NeighborBfdInformation> neighbor_bfd_information;


                            }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::Neighbors::Neighbor


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::Neighbors::Neighbor> > neighbor;


                        }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::Neighbors


                        class InterfaceBriefs : public Entity
                        {
                            public:
                                InterfaceBriefs();
                                ~InterfaceBriefs();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class InterfaceBrief : public Entity
                            {
                                public:
                                    InterfaceBrief();
                                    ~InterfaceBrief();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf interface_name; //type: string
                                    YLeaf interface_name_xr; //type: string
                                    YLeaf interface_area; //type: string
                                    YLeaf interface_address; //type: string
                                    YLeaf interface_mask; //type: uint32
                                    YLeaf interface_link_cost; //type: uint16
                                    YLeaf ospf_interface_state; //type: OspfInterfaceStateEnum
                                    YLeaf interface_fast_detect_hold_down; //type: boolean
                                    YLeaf interface_neighbor_count; //type: uint16
                                    YLeaf interface_adj_neighbor_count; //type: uint16
                                    YLeaf interfaceis_madj; //type: boolean
                                    YLeaf interface_madj_count; //type: uint16

                                class InterfaceMadj : public Entity
                                {
                                    public:
                                        InterfaceMadj();
                                        ~InterfaceMadj();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf interface_area; //type: string
                                        YLeaf madj_area_id; //type: uint32
                                        YLeaf interface_neighbor_count; //type: uint16
                                        YLeaf interface_adj_neighbor_count; //type: uint16
                                        YLeaf interface_link_cost; //type: uint16
                                        YLeaf ospf_interface_state; //type: OspfInterfaceStateEnum



                                }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::InterfaceBriefs::InterfaceBrief::InterfaceMadj


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::InterfaceBriefs::InterfaceBrief::InterfaceMadj> > interface_madj;


                            }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::InterfaceBriefs::InterfaceBrief


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::InterfaceBriefs::InterfaceBrief> > interface_brief;


                        }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::InterfaceBriefs


                        class Requests : public Entity
                        {
                            public:
                                Requests();
                                ~Requests();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class Request : public Entity
                            {
                                public:
                                    Request();
                                    ~Request();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf interface_name; //type: string
                                    YLeaf neighbor_address; //type: string
                                    YLeaf request_neighbor_id; //type: string
                                    YLeaf request_neighbor_address; //type: string
                                    YLeaf request_interface_name; //type: string

                                class Request_ : public Entity
                                {
                                    public:
                                        Request_();
                                        ~Request_();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf header_lsa_type; //type: LsaEnum
                                        YLeaf header_lsa_age; //type: uint16
                                        YLeaf header_ls_id; //type: string
                                        YLeaf header_advertising_router; //type: string
                                        YLeaf header_sequence_number; //type: uint32
                                        YLeaf header_lsa_checksum; //type: uint16



                                }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::Requests::Request::Request_


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::Requests::Request::Request_> > request;


                            }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::Requests::Request


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::Requests::Request> > request;


                        }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::Requests


                        class Retransmissions : public Entity
                        {
                            public:
                                Retransmissions();
                                ~Retransmissions();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class Retransmission : public Entity
                            {
                                public:
                                    Retransmission();
                                    ~Retransmission();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf interface_name; //type: string
                                    YLeaf neighbor_address; //type: string
                                    YLeaf retransmission_neighbor_id; //type: string
                                    YLeaf retransmission_neighbor_ip_address; //type: string
                                    YLeaf retransmission_interface_name; //type: string
                                    YLeaf retransmission_timer; //type: uint32
                                    YLeaf retransmission_count; //type: uint32

                                class RetransmissionAreaDb : public Entity
                                {
                                    public:
                                        RetransmissionAreaDb();
                                        ~RetransmissionAreaDb();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf header_lsa_type; //type: LsaEnum
                                        YLeaf header_lsa_age; //type: uint16
                                        YLeaf header_ls_id; //type: string
                                        YLeaf header_advertising_router; //type: string
                                        YLeaf header_sequence_number; //type: uint32
                                        YLeaf header_lsa_checksum; //type: uint16



                                }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::Retransmissions::Retransmission::RetransmissionAreaDb


                                class RetransmissionAsdb : public Entity
                                {
                                    public:
                                        RetransmissionAsdb();
                                        ~RetransmissionAsdb();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf header_lsa_type; //type: LsaEnum
                                        YLeaf header_lsa_age; //type: uint16
                                        YLeaf header_ls_id; //type: string
                                        YLeaf header_advertising_router; //type: string
                                        YLeaf header_sequence_number; //type: uint32
                                        YLeaf header_lsa_checksum; //type: uint16



                                }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::Retransmissions::Retransmission::RetransmissionAsdb


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::Retransmissions::Retransmission::RetransmissionAreaDb> > retransmission_area_db;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::Retransmissions::Retransmission::RetransmissionAsdb> > retransmission_asdb;


                            }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::Retransmissions::Retransmission


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::Retransmissions::Retransmission> > retransmission;


                        }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::Retransmissions


                        class NeighborDetails : public Entity
                        {
                            public:
                                NeighborDetails();
                                ~NeighborDetails();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class NeighborDetail : public Entity
                            {
                                public:
                                    NeighborDetail();
                                    ~NeighborDetail();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf interface_name; //type: string
                                    YLeaf neighbor_address; //type: string
                                    YLeaf neighbor_area_id; //type: string
                                    YLeaf state_change_count; //type: uint16
                                    YLeaf neighbor_cost; //type: uint16
                                    YLeaf neighbor_filter; //type: boolean
                                    YLeaf neighbor_designated_router_address; //type: string
                                    YLeaf neighbor_backup_designated_router_address; //type: string
                                    YLeaf interface_type; //type: InterfaceEnum
                                    YLeaf poll_interval; //type: uint32
                                    YLeaf next_poll_interval; //type: uint32
                                    YLeaf neighbor_option; //type: uint8
                                    YLeaf pending_events; //type: uint16
                                    YLeaf neighbor_lls_option; //type: uint16
                                    YLeaf oob_resynchronization; //type: boolean
                                    YLeaf nsf_router_state; //type: NsfRtrEnum
                                    YLeaf last_oob_time; //type: uint32
                                    YLeaf lfa_interface; //type: string
                                    YLeaf lfa_next_hop; //type: string
                                    YLeaf lfa_neighbor_id; //type: string
                                    YLeaf lfa_neighbor_revision; //type: uint32
                                    YLeaf neighbor_ack_list_count; //type: uint32
                                    YLeaf neighbor_ack_list_high_watermark; //type: uint32
                                    YLeaf adjacency_sid_label; //type: uint32
                                    YLeaf adjacency_sid_protected; //type: boolean
                                    YLeaf adjacency_sid_unprotected_label; //type: uint32

                                class NeighborSummary : public Entity
                                {
                                    public:
                                        NeighborSummary();
                                        ~NeighborSummary();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf neighbor_id; //type: string
                                        YLeaf neighbor_address_xr; //type: string
                                        YLeaf neighbor_interface_name; //type: string
                                        YLeaf neighbor_dr_priority; //type: uint8
                                        YLeaf neighbor_state; //type: NeighborStateEnum
                                        YLeaf dr_bdr_state; //type: DrBdrStateEnum
                                        YLeaf neighbor_dead_timer; //type: uint32
                                        YLeaf neighbor_up_time; //type: uint32
                                        YLeaf neighbor_madj_interface; //type: boolean

                                    class NeighborBfdInformation : public Entity
                                    {
                                        public:
                                            NeighborBfdInformation();
                                            ~NeighborBfdInformation();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf bfd_intf_enable_mode; //type: uint32
                                            YLeaf bfd_status_flag; //type: uint8



                                    }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::NeighborDetails::NeighborDetail::NeighborSummary::NeighborBfdInformation


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::NeighborDetails::NeighborDetail::NeighborSummary::NeighborBfdInformation> neighbor_bfd_information;


                                }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::NeighborDetails::NeighborDetail::NeighborSummary


                                class NeighborBfdInformation : public Entity
                                {
                                    public:
                                        NeighborBfdInformation();
                                        ~NeighborBfdInformation();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf bfd_intf_enable_mode; //type: uint32
                                        YLeaf bfd_status_flag; //type: uint8



                                }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::NeighborDetails::NeighborDetail::NeighborBfdInformation


                                class NeighborRetransmissionInformation : public Entity
                                {
                                    public:
                                        NeighborRetransmissionInformation();
                                        ~NeighborRetransmissionInformation();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf dbd_retransmission_count; //type: uint32
                                        YLeaf dbd_retransmission_total_count; //type: uint32
                                        YLeaf area_flooding_index; //type: uint32
                                        YLeaf as_flood_index; //type: uint32
                                        YLeaf neighbor_retransmission_count; //type: uint32
                                        YLeaf number_of_retransmissions; //type: uint32
                                        YLeaf area_first_flood_information; //type: uint32
                                        YLeaf area_first_flood_information_index; //type: uint32
                                        YLeaf as_first_flood_information; //type: uint32
                                        YLeaf as_first_flood_information_index; //type: uint32
                                        YLeaf area_next_flood_information; //type: uint32
                                        YLeaf area_next_flood_information_index; //type: uint32
                                        YLeaf as_next_flood_information; //type: uint32
                                        YLeaf as_next_flood_information_index; //type: uint32
                                        YLeaf last_retransmission_length; //type: uint32
                                        YLeaf maximum_retransmission_length; //type: uint32
                                        YLeaf last_retransmission_time; //type: uint32
                                        YLeaf maximum_retransmission_time; //type: uint32
                                        YLeaf lsa_retransmission_timer; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::NeighborDetails::NeighborDetail::NeighborRetransmissionInformation


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::NeighborDetails::NeighborDetail::NeighborBfdInformation> neighbor_bfd_information;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::NeighborDetails::NeighborDetail::NeighborRetransmissionInformation> neighbor_retransmission_information;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::NeighborDetails::NeighborDetail::NeighborSummary> neighbor_summary;


                            }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::NeighborDetails::NeighborDetail


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::NeighborDetails::NeighborDetail> > neighbor_detail;


                        }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::NeighborDetails


                        class Interfaces : public Entity
                        {
                            public:
                                Interfaces();
                                ~Interfaces();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;



                            class Interface : public Entity
                            {
                                public:
                                    Interface();
                                    ~Interface();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf interface_name; //type: string
                                    YLeaf interface_name_xr; //type: string
                                    YLeaf interface_state; //type: InterfaceStateEnum
                                    YLeaf interface_line_state; //type: boolean
                                    YLeaf interface_address; //type: string
                                    YLeaf interface_mask; //type: uint32
                                    YLeaf interface_area; //type: string
                                    YLeaf interface_sid; //type: uint32
                                    YLeaf interface_sid_php_off; //type: boolean
                                    YLeaf interface_sid_n_flag_clear; //type: boolean
                                    YLeaf interface_strict_spf_sid; //type: uint32
                                    YLeaf interface_strict_spf_sid_php_off; //type: boolean
                                    YLeaf interface_strict_spf_sid_n_flag_clear; //type: boolean
                                    YLeaf interface_router_id; //type: string
                                    YLeaf network_type; //type: InterfaceEnum
                                    YLeaf ip_mtu; //type: uint16
                                    YLeaf maximum_packet_size; //type: uint16
                                    YLeaf interface_tunnel_flags; //type: uint32
                                    YLeaf interface_link_cost; //type: uint16
                                    YLeaf interface_bandwidth; //type: uint32
                                    YLeaf cfg_cost_fallback; //type: boolean
                                    YLeaf interface_cost_fallback; //type: uint16
                                    YLeaf cost_fallback_active; //type: boolean
                                    YLeaf configured_ldp_sync; //type: boolean
                                    YLeaf configured_ldp_sync_igp_shortcuts; //type: boolean
                                    YLeaf interface_ldp_sync; //type: boolean
                                    YLeaf configured_demand_circuit; //type: boolean
                                    YLeaf interface_demand_circuit; //type: boolean
                                    YLeaf interface_dc_bitless_lsa_count; //type: uint32
                                    YLeaf transmission_delay; //type: uint16
                                    YLeaf ospf_interface_state; //type: OspfInterfaceStateEnum
                                    YLeaf interface_priority; //type: uint8
                                    YLeaf designated_router; //type: boolean
                                    YLeaf designated_router_id; //type: string
                                    YLeaf designated_router_address; //type: string
                                    YLeaf backup_designated_router; //type: boolean
                                    YLeaf backup_designated_router_id; //type: string
                                    YLeaf backup_designated_router_address; //type: string
                                    YLeaf network_lsa_flush_timer; //type: uint32
                                    YLeaf interface_lsa_filter; //type: boolean
                                    YLeaf hello_interval; //type: uint32
                                    YLeaf hello_interval_ms; //type: uint32
                                    YLeaf dead_interval; //type: uint32
                                    YLeaf wait_interval; //type: uint32
                                    YLeaf interface_retransmission_interrval; //type: uint32
                                    YLeaf interface_nsf_enabled; //type: boolean
                                    YLeaf interface_nsf; //type: boolean
                                    YLeaf interface_last_nsf; //type: uint32
                                    YLeaf passive_interface; //type: boolean
                                    YLeaf next_hello_time; //type: uint32
                                    YLeaf next_hello_time_ms; //type: uint32
                                    YLeaf ttl_security_enabled; //type: boolean
                                    YLeaf ttl_security_hop_count; //type: uint32
                                    YLeaf interfaceis_madj; //type: boolean
                                    YLeaf interface_madj_count; //type: uint16
                                    YLeaf prefix_suppress_primary_addresses; //type: boolean
                                    YLeaf prefix_suppress_secondary_addresses; //type: boolean
                                    YLeaf is_loopback_stub_network; //type: boolean
                                    YLeaf interface_ack_list_count; //type: uint32
                                    YLeaf interface_ack_list_high_watermark; //type: uint32
                                    YLeaf registered_for_link_down_fast_detection; //type: boolean
                                    YLeaf fast_detect_hold_down_time; //type: uint32
                                    YLeaf interface_fast_detect_hold_down; //type: boolean
                                    YLeaf fast_detect_hold_down_time_remaining; //type: uint32
                                    YLeaf fast_reroute_type; //type: IpfrrEnum
                                    YLeaf fast_reroute_topology_independent_lfa; //type: boolean
                                    YLeafList srlg; //type: list of  uint32

                                class InterfaceBfdInformation : public Entity
                                {
                                    public:
                                        InterfaceBfdInformation();
                                        ~InterfaceBfdInformation();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf bfd_intf_enable_mode; //type: uint32
                                        YLeaf interval; //type: uint32
                                        YLeaf detection_multiplier; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::Interfaces::Interface::InterfaceBfdInformation


                                class ActiveInterface : public Entity
                                {
                                    public:
                                        ActiveInterface();
                                        ~ActiveInterface();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf wait_time; //type: uint32
                                        YLeaf interface_area_flood_index; //type: uint32
                                        YLeaf interface_as_flood_index; //type: uint32
                                        YLeaf interface_flood_length; //type: uint32
                                        YLeaf interface_area_next_flood; //type: uint32
                                        YLeaf interface_area_next_flood_index; //type: uint32
                                        YLeaf interface_as_next_flood; //type: uint32
                                        YLeaf interface_as_next_flood_index; //type: uint32
                                        YLeaf flood_scan_length; //type: uint32
                                        YLeaf maximum_flood_length; //type: uint32
                                        YLeaf last_flood_time; //type: uint32
                                        YLeaf maximum_flood_time; //type: uint32
                                        YLeaf interface_flood_pacing_timer; //type: uint32
                                        YLeaf interface_neighbor_count; //type: uint16
                                        YLeaf suppress_hello_count; //type: uint16
                                        YLeaf interface_authentication_type; //type: AuthenticationEnum
                                        YLeaf youngest_md_key; //type: boolean
                                        YLeaf old_md5_key_neighbor_count; //type: uint32
                                        YLeaf youngest_md_key_id; //type: uint16
                                        YLeaf keychain_id; //type: uint64
                                        YLeafList md_keys; //type: list of  uint16



                                }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::Interfaces::Interface::ActiveInterface


                                class InterfaceNeighbor : public Entity
                                {
                                    public:
                                        InterfaceNeighbor();
                                        ~InterfaceNeighbor();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf interface_neighbor_id; //type: string
                                        YLeaf interface_neighbor_cost; //type: uint32
                                        YLeaf neighbor_dr; //type: boolean
                                        YLeaf neighbor_bdr; //type: boolean
                                        YLeaf suppress_hello; //type: boolean



                                }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::Interfaces::Interface::InterfaceNeighbor


                                class InterfaceMadj : public Entity
                                {
                                    public:
                                        InterfaceMadj();
                                        ~InterfaceMadj();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf interface_area; //type: string
                                        YLeaf madj_area_id; //type: uint32
                                        YLeaf interface_neighbor_count; //type: uint16
                                        YLeaf interface_adj_neighbor_count; //type: uint16
                                        YLeaf interface_link_cost; //type: uint16
                                        YLeaf ospf_interface_state; //type: OspfInterfaceStateEnum



                                }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::Interfaces::Interface::InterfaceMadj


                                class IpfrrTiebreakers : public Entity
                                {
                                    public:
                                        IpfrrTiebreakers();
                                        ~IpfrrTiebreakers();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf tiebreaker_type; //type: IpfrrTbrkrEnum
                                        YLeaf tiebreaker_index; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::Interfaces::Interface::IpfrrTiebreakers


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::Interfaces::Interface::ActiveInterface> active_interface;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::Interfaces::Interface::InterfaceBfdInformation> interface_bfd_information;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::Interfaces::Interface::InterfaceMadj> > interface_madj;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::Interfaces::Interface::InterfaceNeighbor> > interface_neighbor;
                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::Interfaces::Interface::IpfrrTiebreakers> > ipfrr_tiebreakers;


                            }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::Interfaces::Interface


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::Interfaces::Interface> > interface;


                        }; // Ospf::Processes::Process::DefaultVrf::Areas::Area::Interfaces


                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::FloodListAreaTable> flood_list_area_table;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::InterfaceBriefs> interface_briefs;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::Interfaces> interfaces;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::NeighborDetails> neighbor_details;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::Neighbors> neighbors;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::Requests> requests;
                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area::Retransmissions> retransmissions;


                    }; // Ospf::Processes::Process::DefaultVrf::Areas::Area


                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas::Area> > area;


                }; // Ospf::Processes::Process::DefaultVrf::Areas


                class Database : public Entity
                {
                    public:
                        Database();
                        ~Database();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;



                    class DatabaseAreas : public Entity
                    {
                        public:
                            DatabaseAreas();
                            ~DatabaseAreas();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class DatabaseArea : public Entity
                        {
                            public:
                                DatabaseArea();
                                ~DatabaseArea();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf area_id; //type: int32

                            class Lsas : public Entity
                            {
                                public:
                                    Lsas();
                                    ~Lsas();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class Lsa : public Entity
                                {
                                    public:
                                        Lsa();
                                        ~Lsa();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf area_id; //type: int32
                                        YLeaf ls_type; //type: OspfLsEnum
                                        YLeaf ls_id; //type: string
                                        YLeaf advertising_router; //type: string
                                        YLeaf interface_name; //type: string

                                    class LsaHeader : public Entity
                                    {
                                        public:
                                            LsaHeader();
                                            ~LsaHeader();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf ls_type; //type: LsaEnum
                                            YLeaf lsid; //type: string
                                            YLeaf advertising_router; //type: string
                                            YLeaf lsa_area_id; //type: string
                                            YLeaf lsa_age; //type: uint16
                                            YLeaf dn_age_lsa; //type: boolean
                                            YLeaf nsf; //type: boolean
                                            YLeaf sequence_number; //type: uint32
                                            YLeaf checksum; //type: uint16



                                    }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaHeader


                                    class LsaDetailData : public Entity
                                    {
                                        public:
                                            LsaDetailData();
                                            ~LsaDetailData();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf tos_capable; //type: boolean
                                            YLeaf nssa_translation; //type: boolean
                                            YLeaf demand_circuit; //type: boolean
                                            YLeaf dn_bit; //type: boolean
                                            YLeaf lsa_rate_limit_due_time; //type: uint32
                                            YLeaf lsadb_base_clock; //type: uint64
                                            YLeaf routing_bit; //type: boolean
                                            YLeaf advertising_router_reachable; //type: boolean
                                            YLeaf length; //type: uint16
                                            YLeaf sum_origin; //type: uint16
                                            YLeaf ase_origin; //type: uint16
                                            YLeaf in_sync; //type: uint8
                                            YLeaf lsa_prefix_priority; //type: uint8
                                            YLeaf new_lsa_prefix_priority; //type: uint8
                                            YLeaf lsa_flood_required_post_fail_over; //type: boolean

                                        class LsaThrottleTimer : public Entity
                                        {
                                            public:
                                                LsaThrottleTimer();
                                                ~LsaThrottleTimer();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf timer_location; //type: TimerTableEnum
                                                YLeaf timer_type; //type: TimerEnum
                                                YLeaf second_table_index; //type: uint8
                                                YLeaf minute_table_index; //type: uint8
                                                YLeaf last_inst_second_table_index; //type: uint8
                                                YLeaf last_inst_minute_table_index; //type: uint8



                                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData::LsaThrottleTimer


                                        class LsaLastUpdatedTime : public Entity
                                        {
                                            public:
                                                LsaLastUpdatedTime();
                                                ~LsaLastUpdatedTime();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf second; //type: uint32
                                                YLeaf nanosecond; //type: uint32



                                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData::LsaLastUpdatedTime


                                        class LsadbBaseTimeStamp : public Entity
                                        {
                                            public:
                                                LsadbBaseTimeStamp();
                                                ~LsadbBaseTimeStamp();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf second; //type: uint32
                                                YLeaf nanosecond; //type: uint32



                                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData::LsadbBaseTimeStamp


                                        class NotDelete : public Entity
                                        {
                                            public:
                                                NotDelete();
                                                ~NotDelete();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf free_time; //type: uint32
                                                YLeaf no_delete; //type: boolean
                                                YLeaf neighbor_exchange; //type: boolean
                                                YLeaf routing_table; //type: boolean
                                                YLeaf acknowledgement; //type: boolean
                                                YLeaf maximum_age; //type: boolean
                                                YLeaf partial_spf; //type: boolean
                                                YLeaf flood_pending; //type: boolean
                                                YLeaf rate_limit; //type: boolean
                                                YLeaf nsr_ack_pending; //type: boolean
                                                YLeaf sum_orig_pending; //type: boolean
                                                YLeaf nsr_flood_required; //type: boolean



                                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData::NotDelete


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData::LsaLastUpdatedTime> lsa_last_updated_time;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData::LsaThrottleTimer> lsa_throttle_timer;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData::LsadbBaseTimeStamp> lsadb_base_time_stamp;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData::NotDelete> not_delete;


                                    }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData


                                    class LsaInternalData : public Entity
                                    {
                                        public:
                                            LsaInternalData();
                                            ~LsaInternalData();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf internal_lsa_type; //type: OspfInternalLsaTypesEnum

                                        class RouterLsaType : public Entity
                                        {
                                            public:
                                                RouterLsaType();
                                                ~RouterLsaType();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf router_asbr; //type: boolean
                                                YLeaf router_abr; //type: boolean
                                                YLeaf internal_lsa; //type: boolean

                                            class Link : public Entity
                                            {
                                                public:
                                                    Link();
                                                    ~Link();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf link_id; //type: string
                                                    YLeaf link_data; //type: string
                                                    YLeaf link_type; //type: OspfLinkTypesEnum
                                                    YLeaf link_metric; //type: uint16

                                                class LinkTos : public Entity
                                                {
                                                    public:
                                                        LinkTos();
                                                        ~LinkTos();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf router_tos; //type: uint16
                                                        YLeaf tos_cost; //type: uint16



                                                }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType::Link::LinkTos


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType::Link::LinkTos> > link_tos;


                                            }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType::Link


                                            class InternalLink : public Entity
                                            {
                                                public:
                                                    InternalLink();
                                                    ~InternalLink();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf link_id; //type: string
                                                    YLeaf link_data; //type: string
                                                    YLeaf link_type; //type: OspfLinkTypesEnum
                                                    YLeaf link_metric; //type: uint16

                                                class LinkTos : public Entity
                                                {
                                                    public:
                                                        LinkTos();
                                                        ~LinkTos();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf router_tos; //type: uint16
                                                        YLeaf tos_cost; //type: uint16



                                                }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType::InternalLink::LinkTos


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType::InternalLink::LinkTos> > link_tos;


                                            }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType::InternalLink


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType::InternalLink> > internal_link;
                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType::Link> > link;


                                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType


                                        class NetworkLsaType : public Entity
                                        {
                                            public:
                                                NetworkLsaType();
                                                ~NetworkLsaType();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf network_prefix_length; //type: uint32
                                                YLeafList neighbor_router; //type: list of  string



                                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::NetworkLsaType


                                        class SummaryLsaType : public Entity
                                        {
                                            public:
                                                SummaryLsaType();
                                                ~SummaryLsaType();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf summary_prefix_length; //type: uint32
                                                YLeaf internal_sum_lsa; //type: boolean
                                                YLeafList summary_lsa_metric; //type: list of  uint32



                                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::SummaryLsaType


                                        class ExternalLsaType : public Entity
                                        {
                                            public:
                                                ExternalLsaType();
                                                ~ExternalLsaType();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf external_prefix_length; //type: uint32
                                                YLeaf internal_external_lsa; //type: boolean

                                            class ExternalTosMetric : public Entity
                                            {
                                                public:
                                                    ExternalTosMetric();
                                                    ~ExternalTosMetric();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf external_metric; //type: uint32
                                                    YLeaf external_metric_type; //type: ExMetricEnum
                                                    YLeaf external_tos; //type: uint32
                                                    YLeaf forwarding_address; //type: string
                                                    YLeaf external_tag; //type: uint32



                                            }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::ExternalLsaType::ExternalTosMetric


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::ExternalLsaType::ExternalTosMetric> > external_tos_metric;


                                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::ExternalLsaType


                                        class OpaqueLinkLsaType : public Entity
                                        {
                                            public:
                                                OpaqueLinkLsaType();
                                                ~OpaqueLinkLsaType();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf opaque_interface_name; //type: string



                                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueLinkLsaType


                                        class OpaqueMplsTeLsaType : public Entity
                                        {
                                            public:
                                                OpaqueMplsTeLsaType();
                                                ~OpaqueMplsTeLsaType();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class Tlv : public Entity
                                            {
                                                public:
                                                    Tlv();
                                                    ~Tlv();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf tlv_type; //type: uint16
                                                    YLeaf tlv_length; //type: uint16
                                                    YLeaf mpls_router_id; //type: uint32
                                                    YLeaf mpls_dste_link; //type: boolean
                                                    YLeaf tlv_data; //type: string

                                                class TeLinkSubTlv : public Entity
                                                {
                                                    public:
                                                        TeLinkSubTlv();
                                                        ~TeLinkSubTlv();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf sub_tlv_type; //type: StlvEnum
                                                        YLeaf sub_tlv_length; //type: uint16
                                                        YLeaf sub_tlv_value; //type: string



                                                }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType::Tlv::TeLinkSubTlv


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType::Tlv::TeLinkSubTlv> > te_link_sub_tlv;


                                            }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType::Tlv


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType::Tlv> > tlv;


                                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType


                                        class OpaqueGraceLsa : public Entity
                                        {
                                            public:
                                                OpaqueGraceLsa();
                                                ~OpaqueGraceLsa();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf grace_period; //type: uint32
                                                YLeaf grace_reason; //type: OspfGrReasonEnum
                                                YLeaf ip_address; //type: string



                                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueGraceLsa


                                        class OpaqueRouterInfoLsaType : public Entity
                                        {
                                            public:
                                                OpaqueRouterInfoLsaType();
                                                ~OpaqueRouterInfoLsaType();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf opaque_rilsa_scope; //type: OspfLsaOpqRiScopeEnum
                                                YLeaf opaque_ri_interface_name; //type: string

                                            class OpaqueRitlv : public Entity
                                            {
                                                public:
                                                    OpaqueRitlv();
                                                    ~OpaqueRitlv();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf ritlv_internal_type; //type: OspfShOpqRiTlvTypesEnum

                                                class UnknownTlv : public Entity
                                                {
                                                    public:
                                                        UnknownTlv();
                                                        ~UnknownTlv();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf ri_gen_tlv_type; //type: uint16
                                                        YLeaf ri_gen_tlv_length; //type: uint16
                                                        YLeaf ri_genvalue; //type: string



                                                }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::UnknownTlv


                                                class RtrCapTlv : public Entity
                                                {
                                                    public:
                                                        RtrCapTlv();
                                                        ~RtrCapTlv();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf rtr_cap_tlv_length; //type: uint16
                                                        YLeaf rtr_cap_graceful_restart; //type: boolean
                                                        YLeaf rtr_cap_graceful_restart_helper; //type: boolean
                                                        YLeaf rtr_cap_stub_rtr; //type: boolean
                                                        YLeaf rtr_cap_area_te; //type: boolean
                                                        YLeaf rtr_cap_p2plan; //type: boolean
                                                        YLeaf rtr_cap_te_exp; //type: boolean
                                                        YLeaf rtr_cap_all_bits; //type: uint32
                                                        YLeaf rtr_cap_additional_info; //type: string



                                                }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::RtrCapTlv


                                                class Pcedtlv : public Entity
                                                {
                                                    public:
                                                        Pcedtlv();
                                                        ~Pcedtlv();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf pcedtlv_length; //type: uint16

                                                    class PcedAddr : public Entity
                                                    {
                                                        public:
                                                            PcedAddr();
                                                            ~PcedAddr();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf pce_addr_type; //type: OspfShOpqRiPceAddrTypesEnum

                                                        class PceAddrUnknownTlv : public Entity
                                                        {
                                                            public:
                                                                PceAddrUnknownTlv();
                                                                ~PceAddrUnknownTlv();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;


                                                                YLeaf ri_gen_tlv_type; //type: uint16
                                                                YLeaf ri_gen_tlv_length; //type: uint16
                                                                YLeaf ri_genvalue; //type: string



                                                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::PceAddrUnknownTlv


                                                        class Ipv4PceAddr : public Entity
                                                        {
                                                            public:
                                                                Ipv4PceAddr();
                                                                ~Ipv4PceAddr();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;


                                                                YLeaf pceipv4_addr; //type: string



                                                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::Ipv4PceAddr


                                                        class Ipv6PceAddr : public Entity
                                                        {
                                                            public:
                                                                Ipv6PceAddr();
                                                                ~Ipv6PceAddr();

                                                                bool has_data() const override;
                                                                bool has_operation() const override;
                                                                EntityPath get_entity_path(Entity* parent) const override;
                                                                std::string get_segment_path() const override;
                                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                                void set_value(const std::string & value_path, std::string value) override;
                                                                std::map<std::string, Entity*> & get_children() override;


                                                                YLeaf pceipv6_addr; //type: string



                                                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::Ipv6PceAddr


                                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::Ipv4PceAddr> ipv4pce_addr;
                                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::Ipv6PceAddr> ipv6pce_addr;
                                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::PceAddrUnknownTlv> pce_addr_unknown_tlv;


                                                    }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr


                                                    class PcedScope : public Entity
                                                    {
                                                        public:
                                                            PcedScope();
                                                            ~PcedScope();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf lbit; //type: boolean
                                                            YLeaf rbit; //type: boolean
                                                            YLeaf rd_bit; //type: boolean
                                                            YLeaf sbit; //type: boolean
                                                            YLeaf sd_bit; //type: boolean
                                                            YLeaf ybit; //type: boolean
                                                            YLeaf pref_l; //type: uint8
                                                            YLeaf pref_r; //type: uint8
                                                            YLeaf pref_s; //type: uint8
                                                            YLeaf pref_y; //type: uint8
                                                            YLeaf all_scope_info_bits; //type: uint32



                                                    }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedScope


                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr> pced_addr;
                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedScope> pced_scope;


                                                }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv


                                                class SrAlgoTlv : public Entity
                                                {
                                                    public:
                                                        SrAlgoTlv();
                                                        ~SrAlgoTlv();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf sr_algo_length; //type: uint16
                                                        YLeaf sr_algo_value; //type: string



                                                }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrAlgoTlv


                                                class SrRangeTlv : public Entity
                                                {
                                                    public:
                                                        SrRangeTlv();
                                                        ~SrRangeTlv();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf sr_range_length; //type: uint16
                                                        YLeaf sr_range_size; //type: uint32

                                                    class Sidtlv : public Entity
                                                    {
                                                        public:
                                                            Sidtlv();
                                                            ~Sidtlv();

                                                            bool has_data() const override;
                                                            bool has_operation() const override;
                                                            EntityPath get_entity_path(Entity* parent) const override;
                                                            std::string get_segment_path() const override;
                                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                            void set_value(const std::string & value_path, std::string value) override;
                                                            std::map<std::string, Entity*> & get_children() override;


                                                            YLeaf sr_sid_length; //type: uint16
                                                            YLeaf sr_sid_value; //type: uint32



                                                    }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrRangeTlv::Sidtlv


                                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrRangeTlv::Sidtlv> sidtlv;


                                                }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrRangeTlv


                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv> pcedtlv;
                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::RtrCapTlv> rtr_cap_tlv;
                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrAlgoTlv> sr_algo_tlv;
                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrRangeTlv> sr_range_tlv;
                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::UnknownTlv> unknown_tlv;


                                            }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv> > opaque_ritlv;


                                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType


                                        class OpaqueEpLsaType : public Entity
                                        {
                                            public:
                                                OpaqueEpLsaType();
                                                ~OpaqueEpLsaType();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class Tlv : public Entity
                                            {
                                                public:
                                                    Tlv();
                                                    ~Tlv();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf tlv_type; //type: uint16
                                                    YLeaf tlv_length; //type: uint16
                                                    YLeaf mpls_router_id; //type: uint32
                                                    YLeaf mpls_dste_link; //type: boolean
                                                    YLeaf tlv_data; //type: string

                                                class TeLinkSubTlv : public Entity
                                                {
                                                    public:
                                                        TeLinkSubTlv();
                                                        ~TeLinkSubTlv();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf sub_tlv_type; //type: StlvEnum
                                                        YLeaf sub_tlv_length; //type: uint16
                                                        YLeaf sub_tlv_value; //type: string



                                                }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType::Tlv::TeLinkSubTlv


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType::Tlv::TeLinkSubTlv> > te_link_sub_tlv;


                                            }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType::Tlv


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType::Tlv> > tlv;


                                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType


                                        class OpaqueElLsaType : public Entity
                                        {
                                            public:
                                                OpaqueElLsaType();
                                                ~OpaqueElLsaType();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;



                                            class Tlv : public Entity
                                            {
                                                public:
                                                    Tlv();
                                                    ~Tlv();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf tlv_type; //type: uint16
                                                    YLeaf tlv_length; //type: uint16
                                                    YLeaf mpls_router_id; //type: uint32
                                                    YLeaf mpls_dste_link; //type: boolean
                                                    YLeaf tlv_data; //type: string

                                                class TeLinkSubTlv : public Entity
                                                {
                                                    public:
                                                        TeLinkSubTlv();
                                                        ~TeLinkSubTlv();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf sub_tlv_type; //type: StlvEnum
                                                        YLeaf sub_tlv_length; //type: uint16
                                                        YLeaf sub_tlv_value; //type: string



                                                }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueElLsaType::Tlv::TeLinkSubTlv


                                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueElLsaType::Tlv::TeLinkSubTlv> > te_link_sub_tlv;


                                            }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueElLsaType::Tlv


                                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueElLsaType::Tlv> > tlv;


                                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueElLsaType


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::ExternalLsaType> external_lsa_type;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::NetworkLsaType> network_lsa_type;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueElLsaType> opaque_el_lsa_type;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType> opaque_ep_lsa_type;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueGraceLsa> opaque_grace_lsa;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueLinkLsaType> opaque_link_lsa_type;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType> opaque_mpls_te_lsa_type;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType> opaque_router_info_lsa_type;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::RouterLsaType> router_lsa_type;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData::SummaryLsaType> summary_lsa_type;


                                    }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaDetailData> lsa_detail_data;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaHeader> lsa_header;
                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa::LsaInternalData> lsa_internal_data;


                                }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas::Lsa> > lsa;


                            }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas


                            class LsaSummaries : public Entity
                            {
                                public:
                                    LsaSummaries();
                                    ~LsaSummaries();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;



                                class LsaSummary : public Entity
                                {
                                    public:
                                        LsaSummary();
                                        ~LsaSummary();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf area_id; //type: int32
                                        YLeaf ls_type; //type: OspfLsEnum
                                        YLeaf ls_id; //type: string
                                        YLeaf advertising_router; //type: string
                                        YLeaf interface_name; //type: string
                                        YLeaf external_tag; //type: uint32
                                        YLeaf link_count; //type: uint16

                                    class LsaHeader : public Entity
                                    {
                                        public:
                                            LsaHeader();
                                            ~LsaHeader();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf ls_type; //type: LsaEnum
                                            YLeaf lsid; //type: string
                                            YLeaf advertising_router; //type: string
                                            YLeaf lsa_area_id; //type: string
                                            YLeaf lsa_age; //type: uint16
                                            YLeaf dn_age_lsa; //type: boolean
                                            YLeaf nsf; //type: boolean
                                            YLeaf sequence_number; //type: uint32
                                            YLeaf checksum; //type: uint16



                                    }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::LsaSummaries::LsaSummary::LsaHeader


                                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::LsaSummaries::LsaSummary::LsaHeader> lsa_header;


                                }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::LsaSummaries::LsaSummary


                                    std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::LsaSummaries::LsaSummary> > lsa_summary;


                            }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::LsaSummaries


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::LsaSummaries> lsa_summaries;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea::Lsas> lsas;


                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas::DatabaseArea> > database_area;


                    }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas


                    class DatabaseSummaries : public Entity
                    {
                        public:
                            DatabaseSummaries();
                            ~DatabaseSummaries();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class DatabaseSummary : public Entity
                        {
                            public:
                                DatabaseSummary();
                                ~DatabaseSummary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf area_id; //type: int32
                                YLeaf dbase_sum_area_id_string; //type: string

                            class AreaLsaCounter : public Entity
                            {
                                public:
                                    AreaLsaCounter();
                                    ~AreaLsaCounter();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf lsa_type; //type: LsaEnum
                                    YLeaf lsa_count; //type: int32
                                    YLeaf lsa_delete_count; //type: int32
                                    YLeaf lsa_maxage_count; //type: int32
                                    YLeaf lsa_self_count; //type: int32



                            }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseSummaries::DatabaseSummary::AreaLsaCounter


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseSummaries::DatabaseSummary::AreaLsaCounter> > area_lsa_counter;


                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseSummaries::DatabaseSummary


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseSummaries::DatabaseSummary> > database_summary;


                    }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseSummaries


                    class DatabaseSummaryAs : public Entity
                    {
                        public:
                            DatabaseSummaryAs();
                            ~DatabaseSummaryAs();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class AsLsaCounter : public Entity
                        {
                            public:
                                AsLsaCounter();
                                ~AsLsaCounter();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf lsa_type; //type: LsaEnum
                                YLeaf lsa_count; //type: int32
                                YLeaf lsa_delete_count; //type: int32
                                YLeaf lsa_maxage_count; //type: int32
                                YLeaf lsa_self_count; //type: int32



                        }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseSummaryAs::AsLsaCounter


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseSummaryAs::AsLsaCounter> > as_lsa_counter;


                    }; // Ospf::Processes::Process::DefaultVrf::Database::DatabaseSummaryAs


                    class Lsas : public Entity
                    {
                        public:
                            Lsas();
                            ~Lsas();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Lsa : public Entity
                        {
                            public:
                                Lsa();
                                ~Lsa();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf area_id; //type: int32
                                YLeaf ls_type; //type: OspfLsEnum
                                YLeaf ls_id; //type: string
                                YLeaf advertising_router; //type: string
                                YLeaf interface_name; //type: string

                            class LsaHeader : public Entity
                            {
                                public:
                                    LsaHeader();
                                    ~LsaHeader();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf ls_type; //type: LsaEnum
                                    YLeaf lsid; //type: string
                                    YLeaf advertising_router; //type: string
                                    YLeaf lsa_area_id; //type: string
                                    YLeaf lsa_age; //type: uint16
                                    YLeaf dn_age_lsa; //type: boolean
                                    YLeaf nsf; //type: boolean
                                    YLeaf sequence_number; //type: uint32
                                    YLeaf checksum; //type: uint16



                            }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaHeader


                            class LsaDetailData : public Entity
                            {
                                public:
                                    LsaDetailData();
                                    ~LsaDetailData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf tos_capable; //type: boolean
                                    YLeaf nssa_translation; //type: boolean
                                    YLeaf demand_circuit; //type: boolean
                                    YLeaf dn_bit; //type: boolean
                                    YLeaf lsa_rate_limit_due_time; //type: uint32
                                    YLeaf lsadb_base_clock; //type: uint64
                                    YLeaf routing_bit; //type: boolean
                                    YLeaf advertising_router_reachable; //type: boolean
                                    YLeaf length; //type: uint16
                                    YLeaf sum_origin; //type: uint16
                                    YLeaf ase_origin; //type: uint16
                                    YLeaf in_sync; //type: uint8
                                    YLeaf lsa_prefix_priority; //type: uint8
                                    YLeaf new_lsa_prefix_priority; //type: uint8
                                    YLeaf lsa_flood_required_post_fail_over; //type: boolean

                                class LsaThrottleTimer : public Entity
                                {
                                    public:
                                        LsaThrottleTimer();
                                        ~LsaThrottleTimer();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf timer_location; //type: TimerTableEnum
                                        YLeaf timer_type; //type: TimerEnum
                                        YLeaf second_table_index; //type: uint8
                                        YLeaf minute_table_index; //type: uint8
                                        YLeaf last_inst_second_table_index; //type: uint8
                                        YLeaf last_inst_minute_table_index; //type: uint8



                                }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaDetailData::LsaThrottleTimer


                                class LsaLastUpdatedTime : public Entity
                                {
                                    public:
                                        LsaLastUpdatedTime();
                                        ~LsaLastUpdatedTime();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf second; //type: uint32
                                        YLeaf nanosecond; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaDetailData::LsaLastUpdatedTime


                                class LsadbBaseTimeStamp : public Entity
                                {
                                    public:
                                        LsadbBaseTimeStamp();
                                        ~LsadbBaseTimeStamp();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf second; //type: uint32
                                        YLeaf nanosecond; //type: uint32



                                }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaDetailData::LsadbBaseTimeStamp


                                class NotDelete : public Entity
                                {
                                    public:
                                        NotDelete();
                                        ~NotDelete();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf free_time; //type: uint32
                                        YLeaf no_delete; //type: boolean
                                        YLeaf neighbor_exchange; //type: boolean
                                        YLeaf routing_table; //type: boolean
                                        YLeaf acknowledgement; //type: boolean
                                        YLeaf maximum_age; //type: boolean
                                        YLeaf partial_spf; //type: boolean
                                        YLeaf flood_pending; //type: boolean
                                        YLeaf rate_limit; //type: boolean
                                        YLeaf nsr_ack_pending; //type: boolean
                                        YLeaf sum_orig_pending; //type: boolean
                                        YLeaf nsr_flood_required; //type: boolean



                                }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaDetailData::NotDelete


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaDetailData::LsaLastUpdatedTime> lsa_last_updated_time;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaDetailData::LsaThrottleTimer> lsa_throttle_timer;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaDetailData::LsadbBaseTimeStamp> lsadb_base_time_stamp;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaDetailData::NotDelete> not_delete;


                            }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaDetailData


                            class LsaInternalData : public Entity
                            {
                                public:
                                    LsaInternalData();
                                    ~LsaInternalData();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf internal_lsa_type; //type: OspfInternalLsaTypesEnum

                                class RouterLsaType : public Entity
                                {
                                    public:
                                        RouterLsaType();
                                        ~RouterLsaType();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf router_asbr; //type: boolean
                                        YLeaf router_abr; //type: boolean
                                        YLeaf internal_lsa; //type: boolean

                                    class Link : public Entity
                                    {
                                        public:
                                            Link();
                                            ~Link();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf link_id; //type: string
                                            YLeaf link_data; //type: string
                                            YLeaf link_type; //type: OspfLinkTypesEnum
                                            YLeaf link_metric; //type: uint16

                                        class LinkTos : public Entity
                                        {
                                            public:
                                                LinkTos();
                                                ~LinkTos();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf router_tos; //type: uint16
                                                YLeaf tos_cost; //type: uint16



                                        }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType::Link::LinkTos


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType::Link::LinkTos> > link_tos;


                                    }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType::Link


                                    class InternalLink : public Entity
                                    {
                                        public:
                                            InternalLink();
                                            ~InternalLink();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf link_id; //type: string
                                            YLeaf link_data; //type: string
                                            YLeaf link_type; //type: OspfLinkTypesEnum
                                            YLeaf link_metric; //type: uint16

                                        class LinkTos : public Entity
                                        {
                                            public:
                                                LinkTos();
                                                ~LinkTos();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf router_tos; //type: uint16
                                                YLeaf tos_cost; //type: uint16



                                        }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType::InternalLink::LinkTos


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType::InternalLink::LinkTos> > link_tos;


                                    }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType::InternalLink


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType::InternalLink> > internal_link;
                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType::Link> > link;


                                }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType


                                class NetworkLsaType : public Entity
                                {
                                    public:
                                        NetworkLsaType();
                                        ~NetworkLsaType();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf network_prefix_length; //type: uint32
                                        YLeafList neighbor_router; //type: list of  string



                                }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::NetworkLsaType


                                class SummaryLsaType : public Entity
                                {
                                    public:
                                        SummaryLsaType();
                                        ~SummaryLsaType();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf summary_prefix_length; //type: uint32
                                        YLeaf internal_sum_lsa; //type: boolean
                                        YLeafList summary_lsa_metric; //type: list of  uint32



                                }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::SummaryLsaType


                                class ExternalLsaType : public Entity
                                {
                                    public:
                                        ExternalLsaType();
                                        ~ExternalLsaType();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf external_prefix_length; //type: uint32
                                        YLeaf internal_external_lsa; //type: boolean

                                    class ExternalTosMetric : public Entity
                                    {
                                        public:
                                            ExternalTosMetric();
                                            ~ExternalTosMetric();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf external_metric; //type: uint32
                                            YLeaf external_metric_type; //type: ExMetricEnum
                                            YLeaf external_tos; //type: uint32
                                            YLeaf forwarding_address; //type: string
                                            YLeaf external_tag; //type: uint32



                                    }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::ExternalLsaType::ExternalTosMetric


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::ExternalLsaType::ExternalTosMetric> > external_tos_metric;


                                }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::ExternalLsaType


                                class OpaqueLinkLsaType : public Entity
                                {
                                    public:
                                        OpaqueLinkLsaType();
                                        ~OpaqueLinkLsaType();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf opaque_interface_name; //type: string



                                }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueLinkLsaType


                                class OpaqueMplsTeLsaType : public Entity
                                {
                                    public:
                                        OpaqueMplsTeLsaType();
                                        ~OpaqueMplsTeLsaType();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class Tlv : public Entity
                                    {
                                        public:
                                            Tlv();
                                            ~Tlv();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf tlv_type; //type: uint16
                                            YLeaf tlv_length; //type: uint16
                                            YLeaf mpls_router_id; //type: uint32
                                            YLeaf mpls_dste_link; //type: boolean
                                            YLeaf tlv_data; //type: string

                                        class TeLinkSubTlv : public Entity
                                        {
                                            public:
                                                TeLinkSubTlv();
                                                ~TeLinkSubTlv();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf sub_tlv_type; //type: StlvEnum
                                                YLeaf sub_tlv_length; //type: uint16
                                                YLeaf sub_tlv_value; //type: string



                                        }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType::Tlv::TeLinkSubTlv


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType::Tlv::TeLinkSubTlv> > te_link_sub_tlv;


                                    }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType::Tlv


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType::Tlv> > tlv;


                                }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType


                                class OpaqueGraceLsa : public Entity
                                {
                                    public:
                                        OpaqueGraceLsa();
                                        ~OpaqueGraceLsa();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf grace_period; //type: uint32
                                        YLeaf grace_reason; //type: OspfGrReasonEnum
                                        YLeaf ip_address; //type: string



                                }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueGraceLsa


                                class OpaqueRouterInfoLsaType : public Entity
                                {
                                    public:
                                        OpaqueRouterInfoLsaType();
                                        ~OpaqueRouterInfoLsaType();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;


                                        YLeaf opaque_rilsa_scope; //type: OspfLsaOpqRiScopeEnum
                                        YLeaf opaque_ri_interface_name; //type: string

                                    class OpaqueRitlv : public Entity
                                    {
                                        public:
                                            OpaqueRitlv();
                                            ~OpaqueRitlv();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf ritlv_internal_type; //type: OspfShOpqRiTlvTypesEnum

                                        class UnknownTlv : public Entity
                                        {
                                            public:
                                                UnknownTlv();
                                                ~UnknownTlv();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf ri_gen_tlv_type; //type: uint16
                                                YLeaf ri_gen_tlv_length; //type: uint16
                                                YLeaf ri_genvalue; //type: string



                                        }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::UnknownTlv


                                        class RtrCapTlv : public Entity
                                        {
                                            public:
                                                RtrCapTlv();
                                                ~RtrCapTlv();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf rtr_cap_tlv_length; //type: uint16
                                                YLeaf rtr_cap_graceful_restart; //type: boolean
                                                YLeaf rtr_cap_graceful_restart_helper; //type: boolean
                                                YLeaf rtr_cap_stub_rtr; //type: boolean
                                                YLeaf rtr_cap_area_te; //type: boolean
                                                YLeaf rtr_cap_p2plan; //type: boolean
                                                YLeaf rtr_cap_te_exp; //type: boolean
                                                YLeaf rtr_cap_all_bits; //type: uint32
                                                YLeaf rtr_cap_additional_info; //type: string



                                        }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::RtrCapTlv


                                        class Pcedtlv : public Entity
                                        {
                                            public:
                                                Pcedtlv();
                                                ~Pcedtlv();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf pcedtlv_length; //type: uint16

                                            class PcedAddr : public Entity
                                            {
                                                public:
                                                    PcedAddr();
                                                    ~PcedAddr();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf pce_addr_type; //type: OspfShOpqRiPceAddrTypesEnum

                                                class PceAddrUnknownTlv : public Entity
                                                {
                                                    public:
                                                        PceAddrUnknownTlv();
                                                        ~PceAddrUnknownTlv();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf ri_gen_tlv_type; //type: uint16
                                                        YLeaf ri_gen_tlv_length; //type: uint16
                                                        YLeaf ri_genvalue; //type: string



                                                }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::PceAddrUnknownTlv


                                                class Ipv4PceAddr : public Entity
                                                {
                                                    public:
                                                        Ipv4PceAddr();
                                                        ~Ipv4PceAddr();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf pceipv4_addr; //type: string



                                                }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::Ipv4PceAddr


                                                class Ipv6PceAddr : public Entity
                                                {
                                                    public:
                                                        Ipv6PceAddr();
                                                        ~Ipv6PceAddr();

                                                        bool has_data() const override;
                                                        bool has_operation() const override;
                                                        EntityPath get_entity_path(Entity* parent) const override;
                                                        std::string get_segment_path() const override;
                                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                        void set_value(const std::string & value_path, std::string value) override;
                                                        std::map<std::string, Entity*> & get_children() override;


                                                        YLeaf pceipv6_addr; //type: string



                                                }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::Ipv6PceAddr


                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::Ipv4PceAddr> ipv4pce_addr;
                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::Ipv6PceAddr> ipv6pce_addr;
                                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr::PceAddrUnknownTlv> pce_addr_unknown_tlv;


                                            }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr


                                            class PcedScope : public Entity
                                            {
                                                public:
                                                    PcedScope();
                                                    ~PcedScope();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf lbit; //type: boolean
                                                    YLeaf rbit; //type: boolean
                                                    YLeaf rd_bit; //type: boolean
                                                    YLeaf sbit; //type: boolean
                                                    YLeaf sd_bit; //type: boolean
                                                    YLeaf ybit; //type: boolean
                                                    YLeaf pref_l; //type: uint8
                                                    YLeaf pref_r; //type: uint8
                                                    YLeaf pref_s; //type: uint8
                                                    YLeaf pref_y; //type: uint8
                                                    YLeaf all_scope_info_bits; //type: uint32



                                            }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedScope


                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedAddr> pced_addr;
                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv::PcedScope> pced_scope;


                                        }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv


                                        class SrAlgoTlv : public Entity
                                        {
                                            public:
                                                SrAlgoTlv();
                                                ~SrAlgoTlv();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf sr_algo_length; //type: uint16
                                                YLeaf sr_algo_value; //type: string



                                        }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrAlgoTlv


                                        class SrRangeTlv : public Entity
                                        {
                                            public:
                                                SrRangeTlv();
                                                ~SrRangeTlv();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf sr_range_length; //type: uint16
                                                YLeaf sr_range_size; //type: uint32

                                            class Sidtlv : public Entity
                                            {
                                                public:
                                                    Sidtlv();
                                                    ~Sidtlv();

                                                    bool has_data() const override;
                                                    bool has_operation() const override;
                                                    EntityPath get_entity_path(Entity* parent) const override;
                                                    std::string get_segment_path() const override;
                                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                    void set_value(const std::string & value_path, std::string value) override;
                                                    std::map<std::string, Entity*> & get_children() override;


                                                    YLeaf sr_sid_length; //type: uint16
                                                    YLeaf sr_sid_value; //type: uint32



                                            }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrRangeTlv::Sidtlv


                                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrRangeTlv::Sidtlv> sidtlv;


                                        }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrRangeTlv


                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::Pcedtlv> pcedtlv;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::RtrCapTlv> rtr_cap_tlv;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrAlgoTlv> sr_algo_tlv;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::SrRangeTlv> sr_range_tlv;
                                            std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv::UnknownTlv> unknown_tlv;


                                    }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType::OpaqueRitlv> > opaque_ritlv;


                                }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType


                                class OpaqueEpLsaType : public Entity
                                {
                                    public:
                                        OpaqueEpLsaType();
                                        ~OpaqueEpLsaType();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class Tlv : public Entity
                                    {
                                        public:
                                            Tlv();
                                            ~Tlv();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf tlv_type; //type: uint16
                                            YLeaf tlv_length; //type: uint16
                                            YLeaf mpls_router_id; //type: uint32
                                            YLeaf mpls_dste_link; //type: boolean
                                            YLeaf tlv_data; //type: string

                                        class TeLinkSubTlv : public Entity
                                        {
                                            public:
                                                TeLinkSubTlv();
                                                ~TeLinkSubTlv();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf sub_tlv_type; //type: StlvEnum
                                                YLeaf sub_tlv_length; //type: uint16
                                                YLeaf sub_tlv_value; //type: string



                                        }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType::Tlv::TeLinkSubTlv


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType::Tlv::TeLinkSubTlv> > te_link_sub_tlv;


                                    }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType::Tlv


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType::Tlv> > tlv;


                                }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType


                                class OpaqueElLsaType : public Entity
                                {
                                    public:
                                        OpaqueElLsaType();
                                        ~OpaqueElLsaType();

                                        bool has_data() const override;
                                        bool has_operation() const override;
                                        EntityPath get_entity_path(Entity* parent) const override;
                                        std::string get_segment_path() const override;
                                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                        void set_value(const std::string & value_path, std::string value) override;
                                        std::map<std::string, Entity*> & get_children() override;



                                    class Tlv : public Entity
                                    {
                                        public:
                                            Tlv();
                                            ~Tlv();

                                            bool has_data() const override;
                                            bool has_operation() const override;
                                            EntityPath get_entity_path(Entity* parent) const override;
                                            std::string get_segment_path() const override;
                                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                            void set_value(const std::string & value_path, std::string value) override;
                                            std::map<std::string, Entity*> & get_children() override;


                                            YLeaf tlv_type; //type: uint16
                                            YLeaf tlv_length; //type: uint16
                                            YLeaf mpls_router_id; //type: uint32
                                            YLeaf mpls_dste_link; //type: boolean
                                            YLeaf tlv_data; //type: string

                                        class TeLinkSubTlv : public Entity
                                        {
                                            public:
                                                TeLinkSubTlv();
                                                ~TeLinkSubTlv();

                                                bool has_data() const override;
                                                bool has_operation() const override;
                                                EntityPath get_entity_path(Entity* parent) const override;
                                                std::string get_segment_path() const override;
                                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                                void set_value(const std::string & value_path, std::string value) override;
                                                std::map<std::string, Entity*> & get_children() override;


                                                YLeaf sub_tlv_type; //type: StlvEnum
                                                YLeaf sub_tlv_length; //type: uint16
                                                YLeaf sub_tlv_value; //type: string



                                        }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueElLsaType::Tlv::TeLinkSubTlv


                                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueElLsaType::Tlv::TeLinkSubTlv> > te_link_sub_tlv;


                                    }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueElLsaType::Tlv


                                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueElLsaType::Tlv> > tlv;


                                }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueElLsaType


                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::ExternalLsaType> external_lsa_type;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::NetworkLsaType> network_lsa_type;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueElLsaType> opaque_el_lsa_type;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueEpLsaType> opaque_ep_lsa_type;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueGraceLsa> opaque_grace_lsa;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueLinkLsaType> opaque_link_lsa_type;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueMplsTeLsaType> opaque_mpls_te_lsa_type;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::OpaqueRouterInfoLsaType> opaque_router_info_lsa_type;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::RouterLsaType> router_lsa_type;
                                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData::SummaryLsaType> summary_lsa_type;


                            }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaDetailData> lsa_detail_data;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaHeader> lsa_header;
                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa::LsaInternalData> lsa_internal_data;


                        }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas::Lsa> > lsa;


                    }; // Ospf::Processes::Process::DefaultVrf::Database::Lsas


                    class LsaSummaries : public Entity
                    {
                        public:
                            LsaSummaries();
                            ~LsaSummaries();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class LsaSummary : public Entity
                        {
                            public:
                                LsaSummary();
                                ~LsaSummary();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf area_id; //type: int32
                                YLeaf ls_type; //type: OspfLsEnum
                                YLeaf ls_id; //type: string
                                YLeaf advertising_router; //type: string
                                YLeaf interface_name; //type: string
                                YLeaf external_tag; //type: uint32
                                YLeaf link_count; //type: uint16

                            class LsaHeader : public Entity
                            {
                                public:
                                    LsaHeader();
                                    ~LsaHeader();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf ls_type; //type: LsaEnum
                                    YLeaf lsid; //type: string
                                    YLeaf advertising_router; //type: string
                                    YLeaf lsa_area_id; //type: string
                                    YLeaf lsa_age; //type: uint16
                                    YLeaf dn_age_lsa; //type: boolean
                                    YLeaf nsf; //type: boolean
                                    YLeaf sequence_number; //type: uint32
                                    YLeaf checksum; //type: uint16



                            }; // Ospf::Processes::Process::DefaultVrf::Database::LsaSummaries::LsaSummary::LsaHeader


                                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::LsaSummaries::LsaSummary::LsaHeader> lsa_header;


                        }; // Ospf::Processes::Process::DefaultVrf::Database::LsaSummaries::LsaSummary


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::LsaSummaries::LsaSummary> > lsa_summary;


                    }; // Ospf::Processes::Process::DefaultVrf::Database::LsaSummaries


                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseAreas> database_areas;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseSummaries> database_summaries;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::DatabaseSummaryAs> database_summary_as;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::LsaSummaries> lsa_summaries;
                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database::Lsas> lsas;


                }; // Ospf::Processes::Process::DefaultVrf::Database


                class SummaryPrefixes : public Entity
                {
                    public:
                        SummaryPrefixes();
                        ~SummaryPrefixes();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;



                    class SummaryPrefix : public Entity
                    {
                        public:
                            SummaryPrefix();
                            ~SummaryPrefix();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;


                            YLeaf prefix; //type: string
                            YLeaf netmask; //type: string
                            YLeaf summary_prefix; //type: string
                            YLeaf summary_mask; //type: string
                            YLeaf summary_metric; //type: uint32
                            YLeaf summary_metric_type; //type: ExMetricEnum
                            YLeaf summary_tag; //type: uint32



                    }; // Ospf::Processes::Process::DefaultVrf::SummaryPrefixes::SummaryPrefix


                        std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::SummaryPrefixes::SummaryPrefix> > summary_prefix;


                }; // Ospf::Processes::Process::DefaultVrf::SummaryPrefixes


                class OspfSummary : public Entity
                {
                    public:
                        OspfSummary();
                        ~OspfSummary();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;


                        YLeaf sa_num_nbrs; //type: uint32
                        YLeaf sa_num_nbrs_up; //type: uint32
                        YLeaf sa_num_intf; //type: uint32
                        YLeaf sa_num_intf_up; //type: uint32
                        YLeaf sa_num_vintf_up; //type: uint32
                        YLeaf sa_num_slintf_up; //type: uint32
                        YLeaf sa_num_areas; //type: uint32
                        YLeaf sa_lsa_cnt_type_rtr; //type: uint32
                        YLeaf sa_lsa_cnt_type_net; //type: uint32
                        YLeaf sa_lsa_cnt_type_sum_net; //type: uint32
                        YLeaf sa_lsa_cnt_type_sum_asb; //type: uint32
                        YLeaf sa_lsa_cnt_type_ase; //type: uint32
                        YLeaf sa_lsa_cnt_type_mospf; //type: uint32
                        YLeaf sa_lsa_cnt_type_7ase; //type: uint32
                        YLeaf sa_lsa_cnt_type_8_ignore; //type: uint32
                        YLeaf sa_lsa_cnt_type_opq_link; //type: uint32
                        YLeaf sa_lsa_cnt_type_opq_area; //type: uint32
                        YLeaf sa_lsa_cnt_type_opq_as; //type: uint32



                }; // Ospf::Processes::Process::DefaultVrf::OspfSummary


                class FastReroute : public Entity
                {
                    public:
                        FastReroute();
                        ~FastReroute();

                        bool has_data() const override;
                        bool has_operation() const override;
                        EntityPath get_entity_path(Entity* parent) const override;
                        std::string get_segment_path() const override;
                        Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                        void set_value(const std::string & value_path, std::string value) override;
                        std::map<std::string, Entity*> & get_children() override;



                    class Topologies : public Entity
                    {
                        public:
                            Topologies();
                            ~Topologies();

                            bool has_data() const override;
                            bool has_operation() const override;
                            EntityPath get_entity_path(Entity* parent) const override;
                            std::string get_segment_path() const override;
                            Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                            void set_value(const std::string & value_path, std::string value) override;
                            std::map<std::string, Entity*> & get_children() override;



                        class Topology : public Entity
                        {
                            public:
                                Topology();
                                ~Topology();

                                bool has_data() const override;
                                bool has_operation() const override;
                                EntityPath get_entity_path(Entity* parent) const override;
                                std::string get_segment_path() const override;
                                Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                void set_value(const std::string & value_path, std::string value) override;
                                std::map<std::string, Entity*> & get_children() override;


                                YLeaf router_id; //type: string
                                YLeaf area_id; //type: int32
                                YLeaf ipfrr_topo_area_id; //type: string
                                YLeaf ipfrr_router_id; //type: string
                                YLeaf ipfrr_area_revision; //type: uint32

                            class IpfrrTopo : public Entity
                            {
                                public:
                                    IpfrrTopo();
                                    ~IpfrrTopo();

                                    bool has_data() const override;
                                    bool has_operation() const override;
                                    EntityPath get_entity_path(Entity* parent) const override;
                                    std::string get_segment_path() const override;
                                    Entity* get_child_by_name(const std::string & yang_name, const std::string & segment_path) override;
                                    void set_value(const std::string & value_path, std::string value) override;
                                    std::map<std::string, Entity*> & get_children() override;


                                    YLeaf node_id; //type: string
                                    YLeaf distance; //type: uint32
                                    YLeaf distance_reverse; //type: uint32
                                    YLeaf type4; //type: boolean
                                    YLeaf revision; //type: uint32
                                    YLeaf neighbor_sourced; //type: boolean
                                    YLeaf dr; //type: boolean
                                    YLeaf poison; //type: boolean



                            }; // Ospf::Processes::Process::DefaultVrf::FastReroute::Topologies::Topology::IpfrrTopo


                                std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::FastReroute::Topologies::Topology::IpfrrTopo> > ipfrr_topo;


                        }; // Ospf::Processes::Process::DefaultVrf::FastReroute::Topologies::Topology


                            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::FastReroute::Topologies::Topology> > topology;


                    }; // Ospf::Processes::Process::DefaultVrf::FastReroute::Topologies


                        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::FastReroute::Topologies> topologies;


                }; // Ospf::Processes::Process::DefaultVrf::FastReroute


                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::AdjacencyInformation> adjacency_information;
                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Areas> areas;
                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::BorderRouters> border_routers;
                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::Database> database;
                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::FastReroute> fast_reroute;
                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::FloodListTable> flood_list_table;
                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::InterfaceInformation> interface_information;
                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::MplsTe> mpls_te;
                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::OspfSummary> ospf_summary;
                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::ProcessInformation> process_information;
                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::RouteInformation> route_information;
                    std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf::SummaryPrefixes> summary_prefixes;


            }; // Ospf::Processes::Process::DefaultVrf


                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::DefaultVrf> default_vrf;
                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Srms> srms;
                std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process::Vrfs> vrfs;


        }; // Ospf::Processes::Process


            std::vector<std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes::Process> > process;


    }; // Ospf::Processes


        std::unique_ptr<Cisco_IOS_XR_ipv4_ospf_oper::Ospf::Processes> processes;


}; // Ospf


class NsfRtrEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_nsf_rtr_none;
        static const Enum::YLeaf mgmt_nsf_rtr_requester;
        static const Enum::YLeaf mgmt_nsf_rtr_receiver;

};

class IpfrrTbrkrEnum : public Enum
{
    public:
        static const Enum::YLeaf downstream;
        static const Enum::YLeaf line_card_disjoint;
        static const Enum::YLeaf backup_metric;
        static const Enum::YLeaf node_protect;
        static const Enum::YLeaf primary_path;
        static const Enum::YLeaf secondary_path;
        static const Enum::YLeaf srlg_disjoint;
        static const Enum::YLeaf tunnel;
        static const Enum::YLeaf post_convergence;

};

class IgpteLibBwModelEnum : public Enum
{
    public:
        static const Enum::YLeaf rdm;
        static const Enum::YLeaf mam;
        static const Enum::YLeaf not_set;

};

class LinkSubnetEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_igp_subnet_type_none;
        static const Enum::YLeaf mgmt_igp_subnet_type_p2p;
        static const Enum::YLeaf mgmt_igp_subnet_type_broadcast;
        static const Enum::YLeaf mgmt_igp_subnet_type_nbma;
        static const Enum::YLeaf mgmt_igp_subnet_type_p2mp;
        static const Enum::YLeaf mgmt_igp_subnet_type_loop_back;
        static const Enum::YLeaf mgmt_igp_subnet_type_max;

};

class AuthenticationEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_ospf_auth_none;
        static const Enum::YLeaf mgmt_ospf_auth_ct;
        static const Enum::YLeaf mgmt_ospf_auth_md;
        static const Enum::YLeaf mgmt_ospf_auth_kc;

};

class OspfLinkTypesEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_rtr_link;
        static const Enum::YLeaf mgmt_trans_link;
        static const Enum::YLeaf mgmt_stub_net;
        static const Enum::YLeaf mgmt_vitural_link;

};

class SrmsMiSrcEBEnum : public Enum
{
    public:
        static const Enum::YLeaf none;
        static const Enum::YLeaf local;
        static const Enum::YLeaf remote;

};

class OspfInterfaceStateEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_ospf_ifs_down;
        static const Enum::YLeaf mgmt_ospf_ifs_loop_back;
        static const Enum::YLeaf mgmt_ospf_ifs_waiting;
        static const Enum::YLeaf mgmt_ospf_ifs_point_to_m_point;
        static const Enum::YLeaf mgmt_ospf_ifs_point_to_point;
        static const Enum::YLeaf mgmt_ospf_ifs_dr;
        static const Enum::YLeaf mgmt_ospf_ifs_backup;
        static const Enum::YLeaf mgmt_ospf_ifs_other;

};

class IpfrrEnum : public Enum
{
    public:
        static const Enum::YLeaf none;
        static const Enum::YLeaf per_link;
        static const Enum::YLeaf per_prefix;

};

class OspfSrgbStatusEnum : public Enum
{
    public:
        static const Enum::YLeaf not_allocated;
        static const Enum::YLeaf pending;
        static const Enum::YLeaf allocated;

};

class InterfaceEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_if_broadcast;
        static const Enum::YLeaf mgmt_if_nonbroadcast;
        static const Enum::YLeaf mgmt_if_point_to_point;
        static const Enum::YLeaf mgmt_if_point_to_m_point;
        static const Enum::YLeaf mgmt_if_p2mp_non_bcast;
        static const Enum::YLeaf mgmt_if_virtual_link;
        static const Enum::YLeaf mgmt_if_sham_link;
        static const Enum::YLeaf mgmt_if_loop_back;

};

class InterfaceStateEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_ifs_unknown;
        static const Enum::YLeaf mgmt_ifs_admin_down;
        static const Enum::YLeaf mgmt_ifs_down;
        static const Enum::YLeaf mgmt_ifs_up;
        static const Enum::YLeaf mgmt_ifs_shutdown;

};

class ExMetricEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_ex_metric_type_none;
        static const Enum::YLeaf mgmt_ex_metric_type_1;
        static const Enum::YLeaf mgmt_ex_metric_type_2;

};

class GsStateEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_gs_init;
        static const Enum::YLeaf mgmt_gs_normal;
        static const Enum::YLeaf mgmt_gs_delay;
        static const Enum::YLeaf mgmt_gs_flush;
        static const Enum::YLeaf mgmt_gs_hello;
        static const Enum::YLeaf mgmt_gs_quiet;

};

class OspfShOpqRiPceAddrTypesEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_ospf_opq_pce_addr_type_invalid;
        static const Enum::YLeaf mgmt_ospf_opq_pce_addr_type_ipv4;
        static const Enum::YLeaf mgmt_ospf_opq_pce_addr_type_ipv6;

};

class MaxMetricSetReasonEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_max_metric_on_proc_migration;
        static const Enum::YLeaf mgmt_max_metric_on_proc_restart;
        static const Enum::YLeaf mgmt_max_metric_on_switchover;
        static const Enum::YLeaf mgmt_max_metric_on_startup;
        static const Enum::YLeaf mgmt_max_metric_always;
        static const Enum::YLeaf mgmt_max_metric_reason_none;

};

class OspfRouteEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_r_type_none;
        static const Enum::YLeaf mgmt_r_type_other;
        static const Enum::YLeaf mgmt_r_type_intra;
        static const Enum::YLeaf mgmt_r_type_inter;
        static const Enum::YLeaf mgmt_r_type_extern1;
        static const Enum::YLeaf mgmt_r_type_extern2;
        static const Enum::YLeaf mgmt_r_type_isis_sum;
        static const Enum::YLeaf mgmt_r_type_isis_l1;
        static const Enum::YLeaf mgmt_r_type_isis_l2;
        static const Enum::YLeaf mgmt_r_type_isis_l1_ia;
        static const Enum::YLeaf mgmt_r_type_bgp_int;
        static const Enum::YLeaf mgmt_r_type_bgp_ext;
        static const Enum::YLeaf mgmt_r_type_bgp_loc;
        static const Enum::YLeaf mgmt_r_type_nssa1;
        static const Enum::YLeaf mgmt_r_type_nssa2;
        static const Enum::YLeaf mgmt_r_type_i_grp2_int;
        static const Enum::YLeaf mgmt_r_type_i_grp2_ext;

};

class OspfShOpqRiTlvTypesEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_ospf_opq_ri_tlv_type_unknown;
        static const Enum::YLeaf mgmt_ospf_opq_ri_tlv_type_rtrcap;
        static const Enum::YLeaf mgmt_ospf_opq_ri_tlv_type_pce_discovery;
        static const Enum::YLeaf mgmt_ospf_opq_ri_tlv_type_sr_algo;
        static const Enum::YLeaf mgmt_ospf_opq_ri_tlv_type_sr_range;

};

class TimerEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_db_stop;
        static const Enum::YLeaf mgmt_db_refresh;
        static const Enum::YLeaf mgmt_db_checksum;
        static const Enum::YLeaf mgmt_db_max_age;

};

class MaxMetricUnsetReasonEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_max_metric_unset_none;
        static const Enum::YLeaf mgmt_max_metric_unset_bgp;
        static const Enum::YLeaf mgmt_max_metric_unset_timer;
        static const Enum::YLeaf mgmt_max_metric_unset_cfg;
        static const Enum::YLeaf mgmt_max_metric_unset_process_cleared;
        static const Enum::YLeaf mgmt_max_metric_unset_over_write;

};

class OspfBrEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_d_type_abr_asbr;
        static const Enum::YLeaf mgmt_d_type_asbr;
        static const Enum::YLeaf mgmt_d_type_abr;

};

class StlvEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_rrr_link_type;
        static const Enum::YLeaf mgmt_rrr_link_id;
        static const Enum::YLeaf mgmt_rrr_link_local_if_addr;
        static const Enum::YLeaf mgmt_rrr_link_remote_if_addr;
        static const Enum::YLeaf mgmt_rrr_link_metric;
        static const Enum::YLeaf mgmt_rrr_link_max_bw;
        static const Enum::YLeaf mgmt_rrr_link_max_reservable_bw;
        static const Enum::YLeaf mgmt_rrr_link_unreserved_bw;
        static const Enum::YLeaf mgmt_rrr_link_re_source_class;
        static const Enum::YLeaf mgmt_rrr_link_in_out_if_id;
        static const Enum::YLeaf mgmt_rrr_link_if_switching_cap_desc;
        static const Enum::YLeaf mgmt_ospf_rrr_link_srlg;
        static const Enum::YLeaf mgmt_rrr_link_bw_constraints_sub;
        static const Enum::YLeaf mgmt_ospf_rrr_link_uni_delay;
        static const Enum::YLeaf mgmt_ospf_rrr_link_max_reservable_bw_sub;
        static const Enum::YLeaf mgmt_ospf_rrr_link_unreserved_bw_sub;
        static const Enum::YLeaf mgmt_rrr_link_igp_metric;
        static const Enum::YLeaf mgmt_ospf_rrr_link_ext_admin_sub;

};

class SrmsMiFlagEBEnum : public Enum
{
    public:
        static const Enum::YLeaf false_;
        static const Enum::YLeaf true_;

};

class SrmsMiAfEBEnum : public Enum
{
    public:
        static const Enum::YLeaf none;
        static const Enum::YLeaf ipv4;
        static const Enum::YLeaf ipv6;

};

class NeighborStateEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_nbr_down;
        static const Enum::YLeaf mgmt_nbr_attempt;
        static const Enum::YLeaf mgmt_nbr_init;
        static const Enum::YLeaf mgmt_nbr_2way;
        static const Enum::YLeaf mgmt_nbr_ex_start;
        static const Enum::YLeaf mgmt_nbr_ex_change;
        static const Enum::YLeaf mgmt_nbr_load_ing;
        static const Enum::YLeaf mgmt_nbr_full;
        static const Enum::YLeaf mgmt_nbr_sc_virtual;

};

class OspfInternalLsaTypesEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_rtr_type;
        static const Enum::YLeaf mgmt_ntwk_type;
        static const Enum::YLeaf mgmt_sum_type;
        static const Enum::YLeaf mgmt_ext_type;
        static const Enum::YLeaf mgmt_opq_type;
        static const Enum::YLeaf mgmt_opq_link_type;
        static const Enum::YLeaf mgmt_opq_rrr_type;
        static const Enum::YLeaf mgmt_opq_gr_type;
        static const Enum::YLeaf mgmt_opq_ri_type;
        static const Enum::YLeaf mgmt_opq_epl_type;
        static const Enum::YLeaf mgmt_opq_ell_type;

};

class MplsTeOptTlvEnum : public Enum
{
    public:
        static const Enum::YLeaf mpls_te_opt_tlv_type_none;
        static const Enum::YLeaf mpls_te_opt_tlv_type_srlg;
        static const Enum::YLeaf mpls_te_opt_tlv_type_bc;
        static const Enum::YLeaf mpls_te_opt_tlv_type_ixcd;
        static const Enum::YLeaf mpls_te_opt_tlv_type_uni_delay;

};

class RedistProtocolEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_rib_protocol_all;
        static const Enum::YLeaf mgmt_rib_protocol_connected;
        static const Enum::YLeaf mgmt_rib_protocol_local;
        static const Enum::YLeaf mgmt_rib_protocol_static;
        static const Enum::YLeaf mgmt_rib_protocol_bgp;
        static const Enum::YLeaf mgmt_rib_protocol_rip;
        static const Enum::YLeaf mgmt_rib_protocol_isis;
        static const Enum::YLeaf mgmt_rib_protocol_ospf;
        static const Enum::YLeaf mgmt_rib_protocol_eigrp;
        static const Enum::YLeaf mgmt_rib_protocol_dagr;
        static const Enum::YLeaf mgmt_rib_protocol_subscriber;
        static const Enum::YLeaf mgmt_rib_protocol_application;
        static const Enum::YLeaf mgmt_rib_protocol_mobile;

};

class OspfLsaOpqRiScopeEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_lsa_opq_ri_scope_link;
        static const Enum::YLeaf mgmt_lsa_opq_ri_scope_area;
        static const Enum::YLeaf mgmt_lsa_opq_ri_scope_as;

};

class LsaEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_lsa_type_rtr;
        static const Enum::YLeaf mgmt_lsa_type_net;
        static const Enum::YLeaf mgmt_lsa_type_sum_net;
        static const Enum::YLeaf mgmt_lsa_type_sum_asb;
        static const Enum::YLeaf mgmt_lsa_type_ext;
        static const Enum::YLeaf mgmt_lsa_type_mospf;
        static const Enum::YLeaf mgmt_lsa_type_7_ase;
        static const Enum::YLeaf mgmt_lsa_type_8_ignore;
        static const Enum::YLeaf mgmt_lsa_type_opq_link;
        static const Enum::YLeaf mgmt_lsa_type_opq_area;
        static const Enum::YLeaf mgmt_lsa_type_opq_as;

};

class DrBdrStateEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_dbdr_none;
        static const Enum::YLeaf mgmt_dbdr_dr;
        static const Enum::YLeaf mgmt_dbdr_bdr;
        static const Enum::YLeaf mgmt_dbdr_dr_other;

};

class TimerTableEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_db_no_table;
        static const Enum::YLeaf mgmt_db_sec_table;
        static const Enum::YLeaf mgmt_db_buffer_table;
        static const Enum::YLeaf mgmt_db_min_table;

};

class OspfGrReasonEnum : public Enum
{
    public:
        static const Enum::YLeaf mgmt_gr_reason_unknown;
        static const Enum::YLeaf mgmt_gr_reason_sw_restart;
        static const Enum::YLeaf mgmt_gr_reason_sw_upgrade;
        static const Enum::YLeaf mgmt_gr_reason_switchover;

};

class OspfMaxMetricAbrOffReasonsEnum : public Enum
{
    public:
        static const Enum::YLeaf ospf_max_metric_abr_off_reason_none;
        static const Enum::YLeaf ospf_max_metric_abr_off_reason_no_nbr;
        static const Enum::YLeaf ospf_max_metric_abr_off_reason_new_nbr;
        static const Enum::YLeaf ospf_max_metric_abr_off_reason_nbr_full;
        static const Enum::YLeaf ospf_max_metric_abr_off_reason_flush_p_end;

};

class OspfLsEnum : public Enum
{
    public:
        static const Enum::YLeaf router;
        static const Enum::YLeaf network;
        static const Enum::YLeaf summary;
        static const Enum::YLeaf asbr_summary;
        static const Enum::YLeaf external;
        static const Enum::YLeaf nssa_external;
        static const Enum::YLeaf opaque_link;
        static const Enum::YLeaf opaque_area;
        static const Enum::YLeaf opaque_as;

};


}
}

#endif /* _CISCO_IOS_XR_IPV4_OSPF_OPER_ */

