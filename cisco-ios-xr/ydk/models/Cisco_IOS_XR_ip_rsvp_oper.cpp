
#include <sstream>
#include <iostream>
#include "ydk/entity_util.hpp"
#include "Cisco_IOS_XR_ip_rsvp_oper.hpp"

namespace ydk {
namespace Cisco_IOS_XR_ip_rsvp_oper {

RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact::InterfaceNeighborListCompact()
    :
    	interface_neighbor_address{YType::str, "interface-neighbor-address"},
	 neighbor_interface_name{YType::str, "neighbor-interface-name"}
{
    yang_name = "interface-neighbor-list-compact"; yang_parent_name = "interface-neighbor-brief";
}

RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact::~InterfaceNeighborListCompact()
{
}

bool RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact::has_data() const
{
    return interface_neighbor_address.is_set
	|| neighbor_interface_name.is_set;
}

bool RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_neighbor_address.operation)
	|| is_set(neighbor_interface_name.operation);
}

std::string RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-neighbor-list-compact";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_neighbor_address.is_set || is_set(interface_neighbor_address.operation)) leaf_name_data.push_back(interface_neighbor_address.get_name_leafdata());
    if (neighbor_interface_name.is_set || is_set(neighbor_interface_name.operation)) leaf_name_data.push_back(neighbor_interface_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact::get_children()
{
    return children;
}

void RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-neighbor-address")
    {
        interface_neighbor_address = value;
    }
    if(value_path == "neighbor-interface-name")
    {
        neighbor_interface_name = value;
    }
}

RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborBrief()
    :
    	neighbor_address{YType::str, "neighbor-address"},
	 node_address{YType::str, "node-address"}
{
    yang_name = "interface-neighbor-brief"; yang_parent_name = "interface-neighbor-briefs";
}

RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief::~InterfaceNeighborBrief()
{
}

bool RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief::has_data() const
{
    for (std::size_t index=0; index<interface_neighbor_list_compact.size(); index++)
    {
        if(interface_neighbor_list_compact[index]->has_data())
            return true;
    }
    return neighbor_address.is_set
	|| node_address.is_set;
}

bool RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief::has_operation() const
{
    for (std::size_t index=0; index<interface_neighbor_list_compact.size(); index++)
    {
        if(interface_neighbor_list_compact[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(neighbor_address.operation)
	|| is_set(node_address.operation);
}

std::string RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-neighbor-brief" <<"[neighbor-address='" <<neighbor_address.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-neighbor-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (node_address.is_set || is_set(node_address.operation)) leaf_name_data.push_back(node_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-neighbor-list-compact")
    {
        for(auto const & c : interface_neighbor_list_compact)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact>();
        c->parent = this;
        interface_neighbor_list_compact.push_back(std::move(c));
        children[segment_path] = interface_neighbor_list_compact.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief::get_children()
{
    for (auto const & c : interface_neighbor_list_compact)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "node-address")
    {
        node_address = value;
    }
}

RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBriefs()
{
    yang_name = "interface-neighbor-briefs"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::InterfaceNeighborBriefs::~InterfaceNeighborBriefs()
{
}

bool RsvpStandby::InterfaceNeighborBriefs::has_data() const
{
    for (std::size_t index=0; index<interface_neighbor_brief.size(); index++)
    {
        if(interface_neighbor_brief[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::InterfaceNeighborBriefs::has_operation() const
{
    for (std::size_t index=0; index<interface_neighbor_brief.size(); index++)
    {
        if(interface_neighbor_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::InterfaceNeighborBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-neighbor-briefs";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceNeighborBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceNeighborBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-neighbor-brief")
    {
        for(auto const & c : interface_neighbor_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::InterfaceNeighborBriefs::InterfaceNeighborBrief>();
        c->parent = this;
        interface_neighbor_brief.push_back(std::move(c));
        children[segment_path] = interface_neighbor_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceNeighborBriefs::get_children()
{
    for (auto const & c : interface_neighbor_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::InterfaceNeighborBriefs::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::AuthenticationBriefs::AuthenticationBrief::AuthenticationBrief()
    :
    	destination_address{YType::str, "destination-address"},
	 interface_name{YType::str, "interface-name"},
	 mode_id{YType::enumeration, "mode-id"},
	 source_address{YType::str, "source-address"},
	 destination_address_xr{YType::str, "destination-address-xr"},
	 direction{YType::enumeration, "direction"},
	 key_id{YType::uint64, "key-id"},
	 key_id_valid{YType::uint32, "key-id-valid"},
	 key_source{YType::str, "key-source"},
	 key_type{YType::enumeration, "key-type"},
	 neighbor_address{YType::str, "neighbor-address"},
	 source_address_xr{YType::str, "source-address-xr"}
{
    yang_name = "authentication-brief"; yang_parent_name = "authentication-briefs";
}

RsvpStandby::AuthenticationBriefs::AuthenticationBrief::~AuthenticationBrief()
{
}

bool RsvpStandby::AuthenticationBriefs::AuthenticationBrief::has_data() const
{
    return destination_address.is_set
	|| interface_name.is_set
	|| mode_id.is_set
	|| source_address.is_set
	|| destination_address_xr.is_set
	|| direction.is_set
	|| key_id.is_set
	|| key_id_valid.is_set
	|| key_source.is_set
	|| key_type.is_set
	|| neighbor_address.is_set
	|| source_address_xr.is_set;
}

bool RsvpStandby::AuthenticationBriefs::AuthenticationBrief::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(interface_name.operation)
	|| is_set(mode_id.operation)
	|| is_set(source_address.operation)
	|| is_set(destination_address_xr.operation)
	|| is_set(direction.operation)
	|| is_set(key_id.operation)
	|| is_set(key_id_valid.operation)
	|| is_set(key_source.operation)
	|| is_set(key_type.operation)
	|| is_set(neighbor_address.operation)
	|| is_set(source_address_xr.operation);
}

std::string RsvpStandby::AuthenticationBriefs::AuthenticationBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "authentication-brief" <<"[destination-address='" <<destination_address.get() <<"']" <<"[interface-name='" <<interface_name.get() <<"']" <<"[mode-id='" <<mode_id.get() <<"']" <<"[source-address='" <<source_address.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::AuthenticationBriefs::AuthenticationBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/authentication-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (mode_id.is_set || is_set(mode_id.operation)) leaf_name_data.push_back(mode_id.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (destination_address_xr.is_set || is_set(destination_address_xr.operation)) leaf_name_data.push_back(destination_address_xr.get_name_leafdata());
    if (direction.is_set || is_set(direction.operation)) leaf_name_data.push_back(direction.get_name_leafdata());
    if (key_id.is_set || is_set(key_id.operation)) leaf_name_data.push_back(key_id.get_name_leafdata());
    if (key_id_valid.is_set || is_set(key_id_valid.operation)) leaf_name_data.push_back(key_id_valid.get_name_leafdata());
    if (key_source.is_set || is_set(key_source.operation)) leaf_name_data.push_back(key_source.get_name_leafdata());
    if (key_type.is_set || is_set(key_type.operation)) leaf_name_data.push_back(key_type.get_name_leafdata());
    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (source_address_xr.is_set || is_set(source_address_xr.operation)) leaf_name_data.push_back(source_address_xr.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::AuthenticationBriefs::AuthenticationBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::AuthenticationBriefs::AuthenticationBrief::get_children()
{
    return children;
}

void RsvpStandby::AuthenticationBriefs::AuthenticationBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "mode-id")
    {
        mode_id = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "destination-address-xr")
    {
        destination_address_xr = value;
    }
    if(value_path == "direction")
    {
        direction = value;
    }
    if(value_path == "key-id")
    {
        key_id = value;
    }
    if(value_path == "key-id-valid")
    {
        key_id_valid = value;
    }
    if(value_path == "key-source")
    {
        key_source = value;
    }
    if(value_path == "key-type")
    {
        key_type = value;
    }
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "source-address-xr")
    {
        source_address_xr = value;
    }
}

RsvpStandby::AuthenticationBriefs::AuthenticationBriefs()
{
    yang_name = "authentication-briefs"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::AuthenticationBriefs::~AuthenticationBriefs()
{
}

bool RsvpStandby::AuthenticationBriefs::has_data() const
{
    for (std::size_t index=0; index<authentication_brief.size(); index++)
    {
        if(authentication_brief[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::AuthenticationBriefs::has_operation() const
{
    for (std::size_t index=0; index<authentication_brief.size(); index++)
    {
        if(authentication_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::AuthenticationBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "authentication-briefs";

    return path_buffer.str();

}

EntityPath RsvpStandby::AuthenticationBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::AuthenticationBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "authentication-brief")
    {
        for(auto const & c : authentication_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::AuthenticationBriefs::AuthenticationBrief>();
        c->parent = this;
        authentication_brief.push_back(std::move(c));
        children[segment_path] = authentication_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::AuthenticationBriefs::get_children()
{
    for (auto const & c : authentication_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::AuthenticationBriefs::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/session-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/session-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/session-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/session-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::~RsvpSession()
{
}

bool RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/session-brief/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

RsvpStandby::SessionBriefs::SessionBrief::Session::Session()
    :
    rsvp_session(std::make_unique<RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "session-brief";
}

RsvpStandby::SessionBriefs::SessionBrief::Session::~Session()
{
}

bool RsvpStandby::SessionBriefs::SessionBrief::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool RsvpStandby::SessionBriefs::SessionBrief::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string RsvpStandby::SessionBriefs::SessionBrief::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionBriefs::SessionBrief::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/session-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionBriefs::SessionBrief::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<RsvpStandby::SessionBriefs::SessionBrief::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionBriefs::SessionBrief::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void RsvpStandby::SessionBriefs::SessionBrief::Session::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::SessionBriefs::SessionBrief::SessionBrief()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 detail_list_size{YType::uint32, "detail-list-size"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 protocol{YType::int32, "protocol"},
	 ps_bs{YType::uint32, "ps-bs"},
	 requests{YType::uint32, "requests"},
	 rs_bs{YType::uint32, "rs-bs"},
	 session_type{YType::enumeration, "session-type"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    session(std::make_unique<RsvpStandby::SessionBriefs::SessionBrief::Session>())
{
    session->parent = this;
    children["session"] = session.get();

    yang_name = "session-brief"; yang_parent_name = "session-briefs";
}

RsvpStandby::SessionBriefs::SessionBrief::~SessionBrief()
{
}

bool RsvpStandby::SessionBriefs::SessionBrief::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| detail_list_size.is_set
	|| extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| protocol.is_set
	|| ps_bs.is_set
	|| requests.is_set
	|| rs_bs.is_set
	|| session_type.is_set
	|| vrf_name.is_set
	|| (session !=  nullptr && session->has_data());
}

bool RsvpStandby::SessionBriefs::SessionBrief::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(detail_list_size.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(protocol.operation)
	|| is_set(ps_bs.operation)
	|| is_set(requests.operation)
	|| is_set(rs_bs.operation)
	|| is_set(session_type.operation)
	|| is_set(vrf_name.operation)
	|| (session !=  nullptr && session->has_operation());
}

std::string RsvpStandby::SessionBriefs::SessionBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session-brief";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionBriefs::SessionBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (detail_list_size.is_set || is_set(detail_list_size.operation)) leaf_name_data.push_back(detail_list_size.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (ps_bs.is_set || is_set(ps_bs.operation)) leaf_name_data.push_back(ps_bs.get_name_leafdata());
    if (requests.is_set || is_set(requests.operation)) leaf_name_data.push_back(requests.get_name_leafdata());
    if (rs_bs.is_set || is_set(rs_bs.operation)) leaf_name_data.push_back(rs_bs.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionBriefs::SessionBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<RsvpStandby::SessionBriefs::SessionBrief::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionBriefs::SessionBrief::get_children()
{
    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    return children;
}

void RsvpStandby::SessionBriefs::SessionBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "detail-list-size")
    {
        detail_list_size = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "ps-bs")
    {
        ps_bs = value;
    }
    if(value_path == "requests")
    {
        requests = value;
    }
    if(value_path == "rs-bs")
    {
        rs_bs = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

RsvpStandby::SessionBriefs::SessionBriefs()
{
    yang_name = "session-briefs"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::SessionBriefs::~SessionBriefs()
{
}

bool RsvpStandby::SessionBriefs::has_data() const
{
    for (std::size_t index=0; index<session_brief.size(); index++)
    {
        if(session_brief[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::SessionBriefs::has_operation() const
{
    for (std::size_t index=0; index<session_brief.size(); index++)
    {
        if(session_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::SessionBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session-briefs";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "session-brief")
    {
        for(auto const & c : session_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::SessionBriefs::SessionBrief>();
        c->parent = this;
        session_brief.push_back(std::move(c));
        children[segment_path] = session_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionBriefs::get_children()
{
    for (auto const & c : session_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::SessionBriefs::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::~RsvpSession()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::Session::Session()
    :
    rsvp_session(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "psb-detailed";
}

RsvpStandby::PsbDetaileds::PsbDetailed::Session::~Session()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::Session::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::PsbDetaileds::PsbDetailed::S2LSubLsp::S2LSubLsp()
    :
    	s2l_destination_address{YType::str, "s2l-destination-address"}
{
    yang_name = "s2l-sub-lsp"; yang_parent_name = "psb-detailed";
}

RsvpStandby::PsbDetaileds::PsbDetailed::S2LSubLsp::~S2LSubLsp()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::S2LSubLsp::has_data() const
{
    return s2l_destination_address.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::S2LSubLsp::has_operation() const
{
    return is_set(operation)
	|| is_set(s2l_destination_address.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::S2LSubLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "s2l-sub-lsp";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::S2LSubLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (s2l_destination_address.is_set || is_set(s2l_destination_address.operation)) leaf_name_data.push_back(s2l_destination_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::S2LSubLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::S2LSubLsp::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::S2LSubLsp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "s2l-destination-address")
    {
        s2l_destination_address = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session::UdpIpv4Session()
    :
    	source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"}
{
    yang_name = "udp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session::~UdpIpv4Session()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session::has_data() const
{
    return source_address.is_set
	|| source_port.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "udp-ipv4-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/template/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session::P2MpIpv4Session()
    :
    	p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"},
	 sub_group_id{YType::uint16, "sub-group-id"}
{
    yang_name = "p2mp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session::~P2MpIpv4Session()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session::has_data() const
{
    return p2mp_sub_group_origin.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "p2mp-ipv4-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/template/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::RsvpFilter()
    :
    	filter_type{YType::enumeration, "filter-type"}
    	,
    p2mp_ipv4_session(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session>())
	,udp_ipv4_session(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session>())
{
    p2mp_ipv4_session->parent = this;
    children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();

    udp_ipv4_session->parent = this;
    children["udp-ipv4-session"] = udp_ipv4_session.get();

    yang_name = "rsvp-filter"; yang_parent_name = "template";
}

RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::~RsvpFilter()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::has_data() const
{
    return filter_type.is_set
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_data())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_data());
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::has_operation() const
{
    return is_set(operation)
	|| is_set(filter_type.operation)
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_operation())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_operation());
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-filter";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/template/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (filter_type.is_set || is_set(filter_type.operation)) leaf_name_data.push_back(filter_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "p2mp-ipv4-session")
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        else
        {
            p2mp_ipv4_session = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session>();
            p2mp_ipv4_session->parent = this;
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        return children.at("p2mp-ipv4-session");
    }

    if(child_yang_name == "udp-ipv4-session")
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        else
        {
            udp_ipv4_session = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session>();
            udp_ipv4_session->parent = this;
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        return children.at("udp-ipv4-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::get_children()
{
    if(children.find("p2mp-ipv4-session") == children.end())
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
    }

    if(children.find("udp-ipv4-session") == children.end())
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
    }

    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "filter-type")
    {
        filter_type = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::Template_::Template_()
    :
    rsvp_filter(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter>())
{
    rsvp_filter->parent = this;
    children["rsvp-filter"] = rsvp_filter.get();

    yang_name = "template"; yang_parent_name = "psb-detailed";
}

RsvpStandby::PsbDetaileds::PsbDetailed::Template_::~Template_()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Template_::has_data() const
{
    return (rsvp_filter !=  nullptr && rsvp_filter->has_data());
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Template_::has_operation() const
{
    return is_set(operation)
	|| (rsvp_filter !=  nullptr && rsvp_filter->has_operation());
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::Template_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "template";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::Template_::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::Template_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-filter")
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
        else
        {
            rsvp_filter = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Template_::RsvpFilter>();
            rsvp_filter->parent = this;
            children["rsvp-filter"] = rsvp_filter.get();
        }
        return children.at("rsvp-filter");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::Template_::get_children()
{
    if(children.find("rsvp-filter") == children.end())
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
    }

    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::Template_::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags::SessAttributeFlags()
    :
    	is_bandwidth_protect{YType::boolean, "is-bandwidth-protect"},
	 is_local_protect{YType::boolean, "is-local-protect"},
	 is_node_protect{YType::boolean, "is-node-protect"},
	 is_record_labels{YType::boolean, "is-record-labels"},
	 is_shared_explicit_requested{YType::boolean, "is-shared-explicit-requested"}
{
    yang_name = "sess-attribute-flags"; yang_parent_name = "session-attribute";
}

RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags::~SessAttributeFlags()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags::has_data() const
{
    return is_bandwidth_protect.is_set
	|| is_local_protect.is_set
	|| is_node_protect.is_set
	|| is_record_labels.is_set
	|| is_shared_explicit_requested.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bandwidth_protect.operation)
	|| is_set(is_local_protect.operation)
	|| is_set(is_node_protect.operation)
	|| is_set(is_record_labels.operation)
	|| is_set(is_shared_explicit_requested.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sess-attribute-flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/session-attribute/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bandwidth_protect.is_set || is_set(is_bandwidth_protect.operation)) leaf_name_data.push_back(is_bandwidth_protect.get_name_leafdata());
    if (is_local_protect.is_set || is_set(is_local_protect.operation)) leaf_name_data.push_back(is_local_protect.get_name_leafdata());
    if (is_node_protect.is_set || is_set(is_node_protect.operation)) leaf_name_data.push_back(is_node_protect.get_name_leafdata());
    if (is_record_labels.is_set || is_set(is_record_labels.operation)) leaf_name_data.push_back(is_record_labels.get_name_leafdata());
    if (is_shared_explicit_requested.is_set || is_set(is_shared_explicit_requested.operation)) leaf_name_data.push_back(is_shared_explicit_requested.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bandwidth-protect")
    {
        is_bandwidth_protect = value;
    }
    if(value_path == "is-local-protect")
    {
        is_local_protect = value;
    }
    if(value_path == "is-node-protect")
    {
        is_node_protect = value;
    }
    if(value_path == "is-record-labels")
    {
        is_record_labels = value;
    }
    if(value_path == "is-shared-explicit-requested")
    {
        is_shared_explicit_requested = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::SessionAttribute()
    :
    	reservation_priority{YType::uint8, "reservation-priority"},
	 setup_priority{YType::uint8, "setup-priority"}
    	,
    sess_attribute_flags(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags>())
{
    sess_attribute_flags->parent = this;
    children["sess-attribute-flags"] = sess_attribute_flags.get();

    yang_name = "session-attribute"; yang_parent_name = "psb-detailed";
}

RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::~SessionAttribute()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::has_data() const
{
    return reservation_priority.is_set
	|| setup_priority.is_set
	|| (sess_attribute_flags !=  nullptr && sess_attribute_flags->has_data());
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::has_operation() const
{
    return is_set(operation)
	|| is_set(reservation_priority.operation)
	|| is_set(setup_priority.operation)
	|| (sess_attribute_flags !=  nullptr && sess_attribute_flags->has_operation());
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session-attribute";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (reservation_priority.is_set || is_set(reservation_priority.operation)) leaf_name_data.push_back(reservation_priority.get_name_leafdata());
    if (setup_priority.is_set || is_set(setup_priority.operation)) leaf_name_data.push_back(setup_priority.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "sess-attribute-flags")
    {
        if(sess_attribute_flags != nullptr)
        {
            children["sess-attribute-flags"] = sess_attribute_flags.get();
        }
        else
        {
            sess_attribute_flags = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags>();
            sess_attribute_flags->parent = this;
            children["sess-attribute-flags"] = sess_attribute_flags.get();
        }
        return children.at("sess-attribute-flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::get_children()
{
    if(children.find("sess-attribute-flags") == children.end())
    {
        if(sess_attribute_flags != nullptr)
        {
            children["sess-attribute-flags"] = sess_attribute_flags.get();
        }
    }

    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "reservation-priority")
    {
        reservation_priority = value;
    }
    if(value_path == "setup-priority")
    {
        setup_priority = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::TrafficSpec::TrafficSpec()
    :
    	traffic_average_rate{YType::uint64, "traffic-average-rate"},
	 traffic_max_burst{YType::uint64, "traffic-max-burst"},
	 traffic_max_unit{YType::uint32, "traffic-max-unit"},
	 traffic_min_unit{YType::uint32, "traffic-min-unit"},
	 traffic_peak_rate{YType::uint64, "traffic-peak-rate"}
{
    yang_name = "traffic-spec"; yang_parent_name = "psb-detailed";
}

RsvpStandby::PsbDetaileds::PsbDetailed::TrafficSpec::~TrafficSpec()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::TrafficSpec::has_data() const
{
    return traffic_average_rate.is_set
	|| traffic_max_burst.is_set
	|| traffic_max_unit.is_set
	|| traffic_min_unit.is_set
	|| traffic_peak_rate.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::TrafficSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_average_rate.operation)
	|| is_set(traffic_max_burst.operation)
	|| is_set(traffic_max_unit.operation)
	|| is_set(traffic_min_unit.operation)
	|| is_set(traffic_peak_rate.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::TrafficSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "traffic-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::TrafficSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_average_rate.is_set || is_set(traffic_average_rate.operation)) leaf_name_data.push_back(traffic_average_rate.get_name_leafdata());
    if (traffic_max_burst.is_set || is_set(traffic_max_burst.operation)) leaf_name_data.push_back(traffic_max_burst.get_name_leafdata());
    if (traffic_max_unit.is_set || is_set(traffic_max_unit.operation)) leaf_name_data.push_back(traffic_max_unit.get_name_leafdata());
    if (traffic_min_unit.is_set || is_set(traffic_min_unit.operation)) leaf_name_data.push_back(traffic_min_unit.get_name_leafdata());
    if (traffic_peak_rate.is_set || is_set(traffic_peak_rate.operation)) leaf_name_data.push_back(traffic_peak_rate.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::TrafficSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::TrafficSpec::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::TrafficSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-average-rate")
    {
        traffic_average_rate = value;
    }
    if(value_path == "traffic-max-burst")
    {
        traffic_max_burst = value;
    }
    if(value_path == "traffic-max-unit")
    {
        traffic_max_unit = value;
    }
    if(value_path == "traffic-min-unit")
    {
        traffic_min_unit = value;
    }
    if(value_path == "traffic-peak-rate")
    {
        traffic_peak_rate = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec::G709OtnTspec()
    :
    	traffic_bit_rate{YType::uint64, "traffic-bit-rate"},
	 traffic_multiplier{YType::uint16, "traffic-multiplier"},
	 traffic_nvc{YType::uint16, "traffic-nvc"},
	 traffic_signal_type{YType::uint8, "traffic-signal-type"}
{
    yang_name = "g709otn-tspec"; yang_parent_name = "generic-traffic-spec";
}

RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec::~G709OtnTspec()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec::has_data() const
{
    return traffic_bit_rate.is_set
	|| traffic_multiplier.is_set
	|| traffic_nvc.is_set
	|| traffic_signal_type.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_bit_rate.operation)
	|| is_set(traffic_multiplier.operation)
	|| is_set(traffic_nvc.operation)
	|| is_set(traffic_signal_type.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-tspec";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/generic-traffic-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_bit_rate.is_set || is_set(traffic_bit_rate.operation)) leaf_name_data.push_back(traffic_bit_rate.get_name_leafdata());
    if (traffic_multiplier.is_set || is_set(traffic_multiplier.operation)) leaf_name_data.push_back(traffic_multiplier.get_name_leafdata());
    if (traffic_nvc.is_set || is_set(traffic_nvc.operation)) leaf_name_data.push_back(traffic_nvc.get_name_leafdata());
    if (traffic_signal_type.is_set || is_set(traffic_signal_type.operation)) leaf_name_data.push_back(traffic_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-bit-rate")
    {
        traffic_bit_rate = value;
    }
    if(value_path == "traffic-multiplier")
    {
        traffic_multiplier = value;
    }
    if(value_path == "traffic-nvc")
    {
        traffic_nvc = value;
    }
    if(value_path == "traffic-signal-type")
    {
        traffic_signal_type = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec::IntsrvTspec()
    :
    	traffic_average_rate{YType::uint64, "traffic-average-rate"},
	 traffic_max_burst{YType::uint64, "traffic-max-burst"},
	 traffic_max_unit{YType::uint32, "traffic-max-unit"},
	 traffic_min_unit{YType::uint32, "traffic-min-unit"},
	 traffic_peak_rate{YType::uint64, "traffic-peak-rate"}
{
    yang_name = "intsrv-tspec"; yang_parent_name = "generic-traffic-spec";
}

RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec::~IntsrvTspec()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec::has_data() const
{
    return traffic_average_rate.is_set
	|| traffic_max_burst.is_set
	|| traffic_max_unit.is_set
	|| traffic_min_unit.is_set
	|| traffic_peak_rate.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_average_rate.operation)
	|| is_set(traffic_max_burst.operation)
	|| is_set(traffic_max_unit.operation)
	|| is_set(traffic_min_unit.operation)
	|| is_set(traffic_peak_rate.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "intsrv-tspec";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/generic-traffic-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_average_rate.is_set || is_set(traffic_average_rate.operation)) leaf_name_data.push_back(traffic_average_rate.get_name_leafdata());
    if (traffic_max_burst.is_set || is_set(traffic_max_burst.operation)) leaf_name_data.push_back(traffic_max_burst.get_name_leafdata());
    if (traffic_max_unit.is_set || is_set(traffic_max_unit.operation)) leaf_name_data.push_back(traffic_max_unit.get_name_leafdata());
    if (traffic_min_unit.is_set || is_set(traffic_min_unit.operation)) leaf_name_data.push_back(traffic_min_unit.get_name_leafdata());
    if (traffic_peak_rate.is_set || is_set(traffic_peak_rate.operation)) leaf_name_data.push_back(traffic_peak_rate.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-average-rate")
    {
        traffic_average_rate = value;
    }
    if(value_path == "traffic-max-burst")
    {
        traffic_max_burst = value;
    }
    if(value_path == "traffic-max-unit")
    {
        traffic_max_unit = value;
    }
    if(value_path == "traffic-min-unit")
    {
        traffic_min_unit = value;
    }
    if(value_path == "traffic-peak-rate")
    {
        traffic_peak_rate = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::GenericTrafficSpec()
    :
    	tspec_type{YType::enumeration, "tspec-type"}
    	,
    g709otn_tspec(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec>())
	,intsrv_tspec(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec>())
{
    g709otn_tspec->parent = this;
    children["g709otn-tspec"] = g709otn_tspec.get();

    intsrv_tspec->parent = this;
    children["intsrv-tspec"] = intsrv_tspec.get();

    yang_name = "generic-traffic-spec"; yang_parent_name = "psb-detailed";
}

RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::~GenericTrafficSpec()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::has_data() const
{
    return tspec_type.is_set
	|| (g709otn_tspec !=  nullptr && g709otn_tspec->has_data())
	|| (intsrv_tspec !=  nullptr && intsrv_tspec->has_data());
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(tspec_type.operation)
	|| (g709otn_tspec !=  nullptr && g709otn_tspec->has_operation())
	|| (intsrv_tspec !=  nullptr && intsrv_tspec->has_operation());
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-traffic-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (tspec_type.is_set || is_set(tspec_type.operation)) leaf_name_data.push_back(tspec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-tspec")
    {
        if(g709otn_tspec != nullptr)
        {
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
        else
        {
            g709otn_tspec = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec>();
            g709otn_tspec->parent = this;
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
        return children.at("g709otn-tspec");
    }

    if(child_yang_name == "intsrv-tspec")
    {
        if(intsrv_tspec != nullptr)
        {
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
        else
        {
            intsrv_tspec = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec>();
            intsrv_tspec->parent = this;
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
        return children.at("intsrv-tspec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::get_children()
{
    if(children.find("g709otn-tspec") == children.end())
    {
        if(g709otn_tspec != nullptr)
        {
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
    }

    if(children.find("intsrv-tspec") == children.end())
    {
        if(intsrv_tspec != nullptr)
        {
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
    }

    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "tspec-type")
    {
        tspec_type = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::PathFlags::PathFlags()
    :
    	is_bidirectional{YType::boolean, "is-bidirectional"},
	 is_local_repair{YType::boolean, "is-local-repair"},
	 is_local_sender{YType::boolean, "is-local-sender"},
	 is_lockout{YType::boolean, "is-lockout"},
	 is_message_id_valid{YType::boolean, "is-message-id-valid"},
	 is_non_rsvp_hop_upstream{YType::boolean, "is-non-rsvp-hop-upstream"}
{
    yang_name = "path-flags"; yang_parent_name = "psb-detailed";
}

RsvpStandby::PsbDetaileds::PsbDetailed::PathFlags::~PathFlags()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::PathFlags::has_data() const
{
    return is_bidirectional.is_set
	|| is_local_repair.is_set
	|| is_local_sender.is_set
	|| is_lockout.is_set
	|| is_message_id_valid.is_set
	|| is_non_rsvp_hop_upstream.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::PathFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bidirectional.operation)
	|| is_set(is_local_repair.operation)
	|| is_set(is_local_sender.operation)
	|| is_set(is_lockout.operation)
	|| is_set(is_message_id_valid.operation)
	|| is_set(is_non_rsvp_hop_upstream.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::PathFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "path-flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::PathFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bidirectional.is_set || is_set(is_bidirectional.operation)) leaf_name_data.push_back(is_bidirectional.get_name_leafdata());
    if (is_local_repair.is_set || is_set(is_local_repair.operation)) leaf_name_data.push_back(is_local_repair.get_name_leafdata());
    if (is_local_sender.is_set || is_set(is_local_sender.operation)) leaf_name_data.push_back(is_local_sender.get_name_leafdata());
    if (is_lockout.is_set || is_set(is_lockout.operation)) leaf_name_data.push_back(is_lockout.get_name_leafdata());
    if (is_message_id_valid.is_set || is_set(is_message_id_valid.operation)) leaf_name_data.push_back(is_message_id_valid.get_name_leafdata());
    if (is_non_rsvp_hop_upstream.is_set || is_set(is_non_rsvp_hop_upstream.operation)) leaf_name_data.push_back(is_non_rsvp_hop_upstream.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::PathFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::PathFlags::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::PathFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bidirectional")
    {
        is_bidirectional = value;
    }
    if(value_path == "is-local-repair")
    {
        is_local_repair = value;
    }
    if(value_path == "is-local-sender")
    {
        is_local_sender = value;
    }
    if(value_path == "is-lockout")
    {
        is_lockout = value;
    }
    if(value_path == "is-message-id-valid")
    {
        is_message_id_valid = value;
    }
    if(value_path == "is-non-rsvp-hop-upstream")
    {
        is_non_rsvp_hop_upstream = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::Hop::Hop()
    :
    	neighbor_address{YType::str, "neighbor-address"},
	 neighbor_logical_interface_name{YType::str, "neighbor-logical-interface-name"}
{
    yang_name = "hop"; yang_parent_name = "psb-detailed";
}

RsvpStandby::PsbDetaileds::PsbDetailed::Hop::~Hop()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Hop::has_data() const
{
    return neighbor_address.is_set
	|| neighbor_logical_interface_name.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Hop::has_operation() const
{
    return is_set(operation)
	|| is_set(neighbor_address.operation)
	|| is_set(neighbor_logical_interface_name.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::Hop::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hop";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::Hop::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (neighbor_logical_interface_name.is_set || is_set(neighbor_logical_interface_name.operation)) leaf_name_data.push_back(neighbor_logical_interface_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::Hop::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::Hop::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::Hop::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "neighbor-logical-interface-name")
    {
        neighbor_logical_interface_name = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::PolicySourceInfo::PolicySourceInfo()
    :
    	is_cable{YType::boolean, "is-cable"},
	 is_cops{YType::boolean, "is-cops"},
	 is_default{YType::boolean, "is-default"},
	 is_local{YType::boolean, "is-local"},
	 is_te_link{YType::boolean, "is-te-link"}
{
    yang_name = "policy-source-info"; yang_parent_name = "psb-detailed";
}

RsvpStandby::PsbDetaileds::PsbDetailed::PolicySourceInfo::~PolicySourceInfo()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::PolicySourceInfo::has_data() const
{
    return is_cable.is_set
	|| is_cops.is_set
	|| is_default.is_set
	|| is_local.is_set
	|| is_te_link.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::PolicySourceInfo::has_operation() const
{
    return is_set(operation)
	|| is_set(is_cable.operation)
	|| is_set(is_cops.operation)
	|| is_set(is_default.operation)
	|| is_set(is_local.operation)
	|| is_set(is_te_link.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::PolicySourceInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-source-info";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::PolicySourceInfo::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_cable.is_set || is_set(is_cable.operation)) leaf_name_data.push_back(is_cable.get_name_leafdata());
    if (is_cops.is_set || is_set(is_cops.operation)) leaf_name_data.push_back(is_cops.get_name_leafdata());
    if (is_default.is_set || is_set(is_default.operation)) leaf_name_data.push_back(is_default.get_name_leafdata());
    if (is_local.is_set || is_set(is_local.operation)) leaf_name_data.push_back(is_local.get_name_leafdata());
    if (is_te_link.is_set || is_set(is_te_link.operation)) leaf_name_data.push_back(is_te_link.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::PolicySourceInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::PolicySourceInfo::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::PolicySourceInfo::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-cable")
    {
        is_cable = value;
    }
    if(value_path == "is-cops")
    {
        is_cops = value;
    }
    if(value_path == "is-default")
    {
        is_default = value;
    }
    if(value_path == "is-local")
    {
        is_local = value;
    }
    if(value_path == "is-te-link")
    {
        is_te_link = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::Header::Header()
    :
    	ip_source_address{YType::str, "ip-source-address"},
	 ip_tos{YType::uint8, "ip-tos"},
	 ip_ttl{YType::uint8, "ip-ttl"},
	 rsvp_header_flags{YType::uint8, "rsvp-header-flags"},
	 rsvp_message_type{YType::uint8, "rsvp-message-type"},
	 rsvp_ttl{YType::uint8, "rsvp-ttl"},
	 rsvp_version{YType::uint8, "rsvp-version"}
{
    yang_name = "header"; yang_parent_name = "psb-detailed";
}

RsvpStandby::PsbDetaileds::PsbDetailed::Header::~Header()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Header::has_data() const
{
    return ip_source_address.is_set
	|| ip_tos.is_set
	|| ip_ttl.is_set
	|| rsvp_header_flags.is_set
	|| rsvp_message_type.is_set
	|| rsvp_ttl.is_set
	|| rsvp_version.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Header::has_operation() const
{
    return is_set(operation)
	|| is_set(ip_source_address.operation)
	|| is_set(ip_tos.operation)
	|| is_set(ip_ttl.operation)
	|| is_set(rsvp_header_flags.operation)
	|| is_set(rsvp_message_type.operation)
	|| is_set(rsvp_ttl.operation)
	|| is_set(rsvp_version.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::Header::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "header";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::Header::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ip_source_address.is_set || is_set(ip_source_address.operation)) leaf_name_data.push_back(ip_source_address.get_name_leafdata());
    if (ip_tos.is_set || is_set(ip_tos.operation)) leaf_name_data.push_back(ip_tos.get_name_leafdata());
    if (ip_ttl.is_set || is_set(ip_ttl.operation)) leaf_name_data.push_back(ip_ttl.get_name_leafdata());
    if (rsvp_header_flags.is_set || is_set(rsvp_header_flags.operation)) leaf_name_data.push_back(rsvp_header_flags.get_name_leafdata());
    if (rsvp_message_type.is_set || is_set(rsvp_message_type.operation)) leaf_name_data.push_back(rsvp_message_type.get_name_leafdata());
    if (rsvp_ttl.is_set || is_set(rsvp_ttl.operation)) leaf_name_data.push_back(rsvp_ttl.get_name_leafdata());
    if (rsvp_version.is_set || is_set(rsvp_version.operation)) leaf_name_data.push_back(rsvp_version.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::Header::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::Header::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::Header::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ip-source-address")
    {
        ip_source_address = value;
    }
    if(value_path == "ip-tos")
    {
        ip_tos = value;
    }
    if(value_path == "ip-ttl")
    {
        ip_ttl = value;
    }
    if(value_path == "rsvp-header-flags")
    {
        rsvp_header_flags = value;
    }
    if(value_path == "rsvp-message-type")
    {
        rsvp_message_type = value;
    }
    if(value_path == "rsvp-ttl")
    {
        rsvp_ttl = value;
    }
    if(value_path == "rsvp-version")
    {
        rsvp_version = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::ExpiryTime::ExpiryTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "expiry-time"; yang_parent_name = "psb-detailed";
}

RsvpStandby::PsbDetaileds::PsbDetailed::ExpiryTime::~ExpiryTime()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::ExpiryTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::ExpiryTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::ExpiryTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "expiry-time";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::ExpiryTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::ExpiryTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::ExpiryTime::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::ExpiryTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::PolicyFlags::PolicyFlags()
    :
    	is_accepted{YType::boolean, "is-accepted"},
	 is_forwarding{YType::boolean, "is-forwarding"},
	 is_installed{YType::boolean, "is-installed"}
{
    yang_name = "policy-flags"; yang_parent_name = "psb-detailed";
}

RsvpStandby::PsbDetaileds::PsbDetailed::PolicyFlags::~PolicyFlags()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::PolicyFlags::has_data() const
{
    return is_accepted.is_set
	|| is_forwarding.is_set
	|| is_installed.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::PolicyFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_accepted.operation)
	|| is_set(is_forwarding.operation)
	|| is_set(is_installed.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::PolicyFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::PolicyFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_accepted.is_set || is_set(is_accepted.operation)) leaf_name_data.push_back(is_accepted.get_name_leafdata());
    if (is_forwarding.is_set || is_set(is_forwarding.operation)) leaf_name_data.push_back(is_forwarding.get_name_leafdata());
    if (is_installed.is_set || is_set(is_installed.operation)) leaf_name_data.push_back(is_installed.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::PolicyFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::PolicyFlags::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::PolicyFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-accepted")
    {
        is_accepted = value;
    }
    if(value_path == "is-forwarding")
    {
        is_forwarding = value;
    }
    if(value_path == "is-installed")
    {
        is_installed = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::PolicyQueryFlags::PolicyQueryFlags()
    :
    	is_bypass{YType::boolean, "is-bypass"},
	 is_needed{YType::boolean, "is-needed"},
	 is_report_required{YType::boolean, "is-report-required"},
	 is_resync{YType::boolean, "is-resync"}
{
    yang_name = "policy-query-flags"; yang_parent_name = "psb-detailed";
}

RsvpStandby::PsbDetaileds::PsbDetailed::PolicyQueryFlags::~PolicyQueryFlags()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::PolicyQueryFlags::has_data() const
{
    return is_bypass.is_set
	|| is_needed.is_set
	|| is_report_required.is_set
	|| is_resync.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::PolicyQueryFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bypass.operation)
	|| is_set(is_needed.operation)
	|| is_set(is_report_required.operation)
	|| is_set(is_resync.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::PolicyQueryFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-query-flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::PolicyQueryFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bypass.is_set || is_set(is_bypass.operation)) leaf_name_data.push_back(is_bypass.get_name_leafdata());
    if (is_needed.is_set || is_set(is_needed.operation)) leaf_name_data.push_back(is_needed.get_name_leafdata());
    if (is_report_required.is_set || is_set(is_report_required.operation)) leaf_name_data.push_back(is_report_required.get_name_leafdata());
    if (is_resync.is_set || is_set(is_resync.operation)) leaf_name_data.push_back(is_resync.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::PolicyQueryFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::PolicyQueryFlags::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::PolicyQueryFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bypass")
    {
        is_bypass = value;
    }
    if(value_path == "is-needed")
    {
        is_needed = value;
    }
    if(value_path == "is-report-required")
    {
        is_report_required = value;
    }
    if(value_path == "is-resync")
    {
        is_resync = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-local-downstream-label";
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-local-downstream-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GenericLocalDownstreamLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-local-downstream-label"; yang_parent_name = "label-info";
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::~GenericLocalDownstreamLabel()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-local-downstream-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-outgoing-downstream-label";
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-outgoing-downstream-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GenericOutgoingDownstreamLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-outgoing-downstream-label"; yang_parent_name = "label-info";
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::~GenericOutgoingDownstreamLabel()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-outgoing-downstream-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-merge-point-label";
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-merge-point-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GenericMergePointLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-merge-point-label"; yang_parent_name = "label-info";
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::~GenericMergePointLabel()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-merge-point-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-outgoing-upstream-label";
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-outgoing-upstream-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GenericOutgoingUpstreamLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-outgoing-upstream-label"; yang_parent_name = "label-info";
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::~GenericOutgoingUpstreamLabel()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-outgoing-upstream-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-local-upstream-label";
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-local-upstream-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GenericLocalUpstreamLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-local-upstream-label"; yang_parent_name = "label-info";
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::~GenericLocalUpstreamLabel()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-local-upstream-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-recovery-label";
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-recovery-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GenericRecoveryLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-recovery-label"; yang_parent_name = "label-info";
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::~GenericRecoveryLabel()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-recovery-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::LabelInfo()
    :
    	is_valid{YType::boolean, "is-valid"},
	 local_downstream_label{YType::uint32, "local-downstream-label"},
	 local_upstream_label{YType::uint32, "local-upstream-label"},
	 lsp_wrap_label{YType::uint32, "lsp-wrap-label"},
	 merge_point_label{YType::uint32, "merge-point-label"},
	 outgoing_downstream_label{YType::uint32, "outgoing-downstream-label"},
	 outgoing_upstream_label{YType::uint32, "outgoing-upstream-label"},
	 recovery_label{YType::uint32, "recovery-label"}
    	,
    generic_local_downstream_label(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel>())
	,generic_local_upstream_label(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel>())
	,generic_merge_point_label(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel>())
	,generic_outgoing_downstream_label(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel>())
	,generic_outgoing_upstream_label(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel>())
	,generic_recovery_label(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel>())
{
    generic_local_downstream_label->parent = this;
    children["generic-local-downstream-label"] = generic_local_downstream_label.get();

    generic_local_upstream_label->parent = this;
    children["generic-local-upstream-label"] = generic_local_upstream_label.get();

    generic_merge_point_label->parent = this;
    children["generic-merge-point-label"] = generic_merge_point_label.get();

    generic_outgoing_downstream_label->parent = this;
    children["generic-outgoing-downstream-label"] = generic_outgoing_downstream_label.get();

    generic_outgoing_upstream_label->parent = this;
    children["generic-outgoing-upstream-label"] = generic_outgoing_upstream_label.get();

    generic_recovery_label->parent = this;
    children["generic-recovery-label"] = generic_recovery_label.get();

    yang_name = "label-info"; yang_parent_name = "psb-detailed";
}

RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::~LabelInfo()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::has_data() const
{
    return is_valid.is_set
	|| local_downstream_label.is_set
	|| local_upstream_label.is_set
	|| lsp_wrap_label.is_set
	|| merge_point_label.is_set
	|| outgoing_downstream_label.is_set
	|| outgoing_upstream_label.is_set
	|| recovery_label.is_set
	|| (generic_local_downstream_label !=  nullptr && generic_local_downstream_label->has_data())
	|| (generic_local_upstream_label !=  nullptr && generic_local_upstream_label->has_data())
	|| (generic_merge_point_label !=  nullptr && generic_merge_point_label->has_data())
	|| (generic_outgoing_downstream_label !=  nullptr && generic_outgoing_downstream_label->has_data())
	|| (generic_outgoing_upstream_label !=  nullptr && generic_outgoing_upstream_label->has_data())
	|| (generic_recovery_label !=  nullptr && generic_recovery_label->has_data());
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::has_operation() const
{
    return is_set(operation)
	|| is_set(is_valid.operation)
	|| is_set(local_downstream_label.operation)
	|| is_set(local_upstream_label.operation)
	|| is_set(lsp_wrap_label.operation)
	|| is_set(merge_point_label.operation)
	|| is_set(outgoing_downstream_label.operation)
	|| is_set(outgoing_upstream_label.operation)
	|| is_set(recovery_label.operation)
	|| (generic_local_downstream_label !=  nullptr && generic_local_downstream_label->has_operation())
	|| (generic_local_upstream_label !=  nullptr && generic_local_upstream_label->has_operation())
	|| (generic_merge_point_label !=  nullptr && generic_merge_point_label->has_operation())
	|| (generic_outgoing_downstream_label !=  nullptr && generic_outgoing_downstream_label->has_operation())
	|| (generic_outgoing_upstream_label !=  nullptr && generic_outgoing_upstream_label->has_operation())
	|| (generic_recovery_label !=  nullptr && generic_recovery_label->has_operation());
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "label-info";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_valid.is_set || is_set(is_valid.operation)) leaf_name_data.push_back(is_valid.get_name_leafdata());
    if (local_downstream_label.is_set || is_set(local_downstream_label.operation)) leaf_name_data.push_back(local_downstream_label.get_name_leafdata());
    if (local_upstream_label.is_set || is_set(local_upstream_label.operation)) leaf_name_data.push_back(local_upstream_label.get_name_leafdata());
    if (lsp_wrap_label.is_set || is_set(lsp_wrap_label.operation)) leaf_name_data.push_back(lsp_wrap_label.get_name_leafdata());
    if (merge_point_label.is_set || is_set(merge_point_label.operation)) leaf_name_data.push_back(merge_point_label.get_name_leafdata());
    if (outgoing_downstream_label.is_set || is_set(outgoing_downstream_label.operation)) leaf_name_data.push_back(outgoing_downstream_label.get_name_leafdata());
    if (outgoing_upstream_label.is_set || is_set(outgoing_upstream_label.operation)) leaf_name_data.push_back(outgoing_upstream_label.get_name_leafdata());
    if (recovery_label.is_set || is_set(recovery_label.operation)) leaf_name_data.push_back(recovery_label.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generic-local-downstream-label")
    {
        if(generic_local_downstream_label != nullptr)
        {
            children["generic-local-downstream-label"] = generic_local_downstream_label.get();
        }
        else
        {
            generic_local_downstream_label = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel>();
            generic_local_downstream_label->parent = this;
            children["generic-local-downstream-label"] = generic_local_downstream_label.get();
        }
        return children.at("generic-local-downstream-label");
    }

    if(child_yang_name == "generic-local-upstream-label")
    {
        if(generic_local_upstream_label != nullptr)
        {
            children["generic-local-upstream-label"] = generic_local_upstream_label.get();
        }
        else
        {
            generic_local_upstream_label = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel>();
            generic_local_upstream_label->parent = this;
            children["generic-local-upstream-label"] = generic_local_upstream_label.get();
        }
        return children.at("generic-local-upstream-label");
    }

    if(child_yang_name == "generic-merge-point-label")
    {
        if(generic_merge_point_label != nullptr)
        {
            children["generic-merge-point-label"] = generic_merge_point_label.get();
        }
        else
        {
            generic_merge_point_label = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel>();
            generic_merge_point_label->parent = this;
            children["generic-merge-point-label"] = generic_merge_point_label.get();
        }
        return children.at("generic-merge-point-label");
    }

    if(child_yang_name == "generic-outgoing-downstream-label")
    {
        if(generic_outgoing_downstream_label != nullptr)
        {
            children["generic-outgoing-downstream-label"] = generic_outgoing_downstream_label.get();
        }
        else
        {
            generic_outgoing_downstream_label = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel>();
            generic_outgoing_downstream_label->parent = this;
            children["generic-outgoing-downstream-label"] = generic_outgoing_downstream_label.get();
        }
        return children.at("generic-outgoing-downstream-label");
    }

    if(child_yang_name == "generic-outgoing-upstream-label")
    {
        if(generic_outgoing_upstream_label != nullptr)
        {
            children["generic-outgoing-upstream-label"] = generic_outgoing_upstream_label.get();
        }
        else
        {
            generic_outgoing_upstream_label = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel>();
            generic_outgoing_upstream_label->parent = this;
            children["generic-outgoing-upstream-label"] = generic_outgoing_upstream_label.get();
        }
        return children.at("generic-outgoing-upstream-label");
    }

    if(child_yang_name == "generic-recovery-label")
    {
        if(generic_recovery_label != nullptr)
        {
            children["generic-recovery-label"] = generic_recovery_label.get();
        }
        else
        {
            generic_recovery_label = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel>();
            generic_recovery_label->parent = this;
            children["generic-recovery-label"] = generic_recovery_label.get();
        }
        return children.at("generic-recovery-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::get_children()
{
    if(children.find("generic-local-downstream-label") == children.end())
    {
        if(generic_local_downstream_label != nullptr)
        {
            children["generic-local-downstream-label"] = generic_local_downstream_label.get();
        }
    }

    if(children.find("generic-local-upstream-label") == children.end())
    {
        if(generic_local_upstream_label != nullptr)
        {
            children["generic-local-upstream-label"] = generic_local_upstream_label.get();
        }
    }

    if(children.find("generic-merge-point-label") == children.end())
    {
        if(generic_merge_point_label != nullptr)
        {
            children["generic-merge-point-label"] = generic_merge_point_label.get();
        }
    }

    if(children.find("generic-outgoing-downstream-label") == children.end())
    {
        if(generic_outgoing_downstream_label != nullptr)
        {
            children["generic-outgoing-downstream-label"] = generic_outgoing_downstream_label.get();
        }
    }

    if(children.find("generic-outgoing-upstream-label") == children.end())
    {
        if(generic_outgoing_upstream_label != nullptr)
        {
            children["generic-outgoing-upstream-label"] = generic_outgoing_upstream_label.get();
        }
    }

    if(children.find("generic-recovery-label") == children.end())
    {
        if(generic_recovery_label != nullptr)
        {
            children["generic-recovery-label"] = generic_recovery_label.get();
        }
    }

    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-valid")
    {
        is_valid = value;
    }
    if(value_path == "local-downstream-label")
    {
        local_downstream_label = value;
    }
    if(value_path == "local-upstream-label")
    {
        local_upstream_label = value;
    }
    if(value_path == "lsp-wrap-label")
    {
        lsp_wrap_label = value;
    }
    if(value_path == "merge-point-label")
    {
        merge_point_label = value;
    }
    if(value_path == "outgoing-downstream-label")
    {
        outgoing_downstream_label = value;
    }
    if(value_path == "outgoing-upstream-label")
    {
        outgoing_upstream_label = value;
    }
    if(value_path == "recovery-label")
    {
        recovery_label = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::ClassType::ClassType()
    :
    	class_type{YType::uint8, "class-type"},
	 is_class_type_info_valid{YType::boolean, "is-class-type-info-valid"}
{
    yang_name = "class-type"; yang_parent_name = "psb-detailed";
}

RsvpStandby::PsbDetaileds::PsbDetailed::ClassType::~ClassType()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::ClassType::has_data() const
{
    return class_type.is_set
	|| is_class_type_info_valid.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::ClassType::has_operation() const
{
    return is_set(operation)
	|| is_set(class_type.operation)
	|| is_set(is_class_type_info_valid.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::ClassType::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "class-type";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::ClassType::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (class_type.is_set || is_set(class_type.operation)) leaf_name_data.push_back(class_type.get_name_leafdata());
    if (is_class_type_info_valid.is_set || is_set(is_class_type_info_valid.operation)) leaf_name_data.push_back(is_class_type_info_valid.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::ClassType::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::ClassType::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::ClassType::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "class-type")
    {
        class_type = value;
    }
    if(value_path == "is-class-type-info-valid")
    {
        is_class_type_info_valid = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags::PolicyFlags()
    :
    	is_accepted{YType::boolean, "is-accepted"},
	 is_forwarding{YType::boolean, "is-forwarding"},
	 is_installed{YType::boolean, "is-installed"}
{
    yang_name = "policy-flags"; yang_parent_name = "pfc";
}

RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags::~PolicyFlags()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags::has_data() const
{
    return is_accepted.is_set
	|| is_forwarding.is_set
	|| is_installed.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_accepted.operation)
	|| is_set(is_forwarding.operation)
	|| is_set(is_installed.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/pfc/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_accepted.is_set || is_set(is_accepted.operation)) leaf_name_data.push_back(is_accepted.get_name_leafdata());
    if (is_forwarding.is_set || is_set(is_forwarding.operation)) leaf_name_data.push_back(is_forwarding.get_name_leafdata());
    if (is_installed.is_set || is_set(is_installed.operation)) leaf_name_data.push_back(is_installed.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-accepted")
    {
        is_accepted = value;
    }
    if(value_path == "is-forwarding")
    {
        is_forwarding = value;
    }
    if(value_path == "is-installed")
    {
        is_installed = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags::PolicyQueryFlags()
    :
    	is_bypass{YType::boolean, "is-bypass"},
	 is_needed{YType::boolean, "is-needed"},
	 is_report_required{YType::boolean, "is-report-required"},
	 is_resync{YType::boolean, "is-resync"}
{
    yang_name = "policy-query-flags"; yang_parent_name = "pfc";
}

RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags::~PolicyQueryFlags()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags::has_data() const
{
    return is_bypass.is_set
	|| is_needed.is_set
	|| is_report_required.is_set
	|| is_resync.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bypass.operation)
	|| is_set(is_needed.operation)
	|| is_set(is_report_required.operation)
	|| is_set(is_resync.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-query-flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/pfc/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bypass.is_set || is_set(is_bypass.operation)) leaf_name_data.push_back(is_bypass.get_name_leafdata());
    if (is_needed.is_set || is_set(is_needed.operation)) leaf_name_data.push_back(is_needed.get_name_leafdata());
    if (is_report_required.is_set || is_set(is_report_required.operation)) leaf_name_data.push_back(is_report_required.get_name_leafdata());
    if (is_resync.is_set || is_set(is_resync.operation)) leaf_name_data.push_back(is_resync.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bypass")
    {
        is_bypass = value;
    }
    if(value_path == "is-needed")
    {
        is_needed = value;
    }
    if(value_path == "is-report-required")
    {
        is_report_required = value;
    }
    if(value_path == "is-resync")
    {
        is_resync = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::Pfc()
    :
    	output_interface{YType::str, "output-interface"}
    	,
    policy_flags(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags>())
	,policy_query_flags(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags>())
{
    policy_flags->parent = this;
    children["policy-flags"] = policy_flags.get();

    policy_query_flags->parent = this;
    children["policy-query-flags"] = policy_query_flags.get();

    yang_name = "pfc"; yang_parent_name = "psb-detailed";
}

RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::~Pfc()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::has_data() const
{
    return output_interface.is_set
	|| (policy_flags !=  nullptr && policy_flags->has_data())
	|| (policy_query_flags !=  nullptr && policy_query_flags->has_data());
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::has_operation() const
{
    return is_set(operation)
	|| is_set(output_interface.operation)
	|| (policy_flags !=  nullptr && policy_flags->has_operation())
	|| (policy_query_flags !=  nullptr && policy_query_flags->has_operation());
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pfc";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (output_interface.is_set || is_set(output_interface.operation)) leaf_name_data.push_back(output_interface.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "policy-flags")
    {
        if(policy_flags != nullptr)
        {
            children["policy-flags"] = policy_flags.get();
        }
        else
        {
            policy_flags = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags>();
            policy_flags->parent = this;
            children["policy-flags"] = policy_flags.get();
        }
        return children.at("policy-flags");
    }

    if(child_yang_name == "policy-query-flags")
    {
        if(policy_query_flags != nullptr)
        {
            children["policy-query-flags"] = policy_query_flags.get();
        }
        else
        {
            policy_query_flags = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags>();
            policy_query_flags->parent = this;
            children["policy-query-flags"] = policy_query_flags.get();
        }
        return children.at("policy-query-flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::get_children()
{
    if(children.find("policy-flags") == children.end())
    {
        if(policy_flags != nullptr)
        {
            children["policy-flags"] = policy_flags.get();
        }
    }

    if(children.find("policy-query-flags") == children.end())
    {
        if(policy_query_flags != nullptr)
        {
            children["policy-query-flags"] = policy_query_flags.get();
        }
    }

    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::Pfc::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "output-interface")
    {
        output_interface = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject::Ipv4EroSubObject()
    :
    	ero_address{YType::str, "ero-address"},
	 is_strict_route{YType::boolean, "is-strict-route"},
	 prefix_length{YType::uint8, "prefix-length"}
{
    yang_name = "ipv4ero-sub-object"; yang_parent_name = "in-ero";
}

RsvpStandby::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject::~Ipv4EroSubObject()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject::has_data() const
{
    return ero_address.is_set
	|| is_strict_route.is_set
	|| prefix_length.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_address.operation)
	|| is_set(is_strict_route.operation)
	|| is_set(prefix_length.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4ero-sub-object";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/in-ero/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_address.is_set || is_set(ero_address.operation)) leaf_name_data.push_back(ero_address.get_name_leafdata());
    if (is_strict_route.is_set || is_set(is_strict_route.operation)) leaf_name_data.push_back(is_strict_route.get_name_leafdata());
    if (prefix_length.is_set || is_set(prefix_length.operation)) leaf_name_data.push_back(prefix_length.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-address")
    {
        ero_address = value;
    }
    if(value_path == "is-strict-route")
    {
        is_strict_route = value;
    }
    if(value_path == "prefix-length")
    {
        prefix_length = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject::UnnumberedEroSubObject()
    :
    	ero_interface_id{YType::uint32, "ero-interface-id"},
	 ero_router_id{YType::str, "ero-router-id"},
	 is_strict_route{YType::boolean, "is-strict-route"},
	 status{YType::enumeration, "status"}
{
    yang_name = "unnumbered-ero-sub-object"; yang_parent_name = "in-ero";
}

RsvpStandby::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject::~UnnumberedEroSubObject()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject::has_data() const
{
    return ero_interface_id.is_set
	|| ero_router_id.is_set
	|| is_strict_route.is_set
	|| status.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_interface_id.operation)
	|| is_set(ero_router_id.operation)
	|| is_set(is_strict_route.operation)
	|| is_set(status.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "unnumbered-ero-sub-object";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/in-ero/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_interface_id.is_set || is_set(ero_interface_id.operation)) leaf_name_data.push_back(ero_interface_id.get_name_leafdata());
    if (ero_router_id.is_set || is_set(ero_router_id.operation)) leaf_name_data.push_back(ero_router_id.get_name_leafdata());
    if (is_strict_route.is_set || is_set(is_strict_route.operation)) leaf_name_data.push_back(is_strict_route.get_name_leafdata());
    if (status.is_set || is_set(status.operation)) leaf_name_data.push_back(status.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-interface-id")
    {
        ero_interface_id = value;
    }
    if(value_path == "ero-router-id")
    {
        ero_router_id = value;
    }
    if(value_path == "is-strict-route")
    {
        is_strict_route = value;
    }
    if(value_path == "status")
    {
        status = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::InEro::InEro()
    :
    	ero_type{YType::enumeration, "ero-type"}
    	,
    ipv4ero_sub_object(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject>())
	,unnumbered_ero_sub_object(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject>())
{
    ipv4ero_sub_object->parent = this;
    children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();

    unnumbered_ero_sub_object->parent = this;
    children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();

    yang_name = "in-ero"; yang_parent_name = "psb-detailed";
}

RsvpStandby::PsbDetaileds::PsbDetailed::InEro::~InEro()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::InEro::has_data() const
{
    return ero_type.is_set
	|| (ipv4ero_sub_object !=  nullptr && ipv4ero_sub_object->has_data())
	|| (unnumbered_ero_sub_object !=  nullptr && unnumbered_ero_sub_object->has_data());
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::InEro::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_type.operation)
	|| (ipv4ero_sub_object !=  nullptr && ipv4ero_sub_object->has_operation())
	|| (unnumbered_ero_sub_object !=  nullptr && unnumbered_ero_sub_object->has_operation());
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::InEro::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "in-ero";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::InEro::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_type.is_set || is_set(ero_type.operation)) leaf_name_data.push_back(ero_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::InEro::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4ero-sub-object")
    {
        if(ipv4ero_sub_object != nullptr)
        {
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
        else
        {
            ipv4ero_sub_object = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject>();
            ipv4ero_sub_object->parent = this;
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
        return children.at("ipv4ero-sub-object");
    }

    if(child_yang_name == "unnumbered-ero-sub-object")
    {
        if(unnumbered_ero_sub_object != nullptr)
        {
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
        else
        {
            unnumbered_ero_sub_object = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject>();
            unnumbered_ero_sub_object->parent = this;
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
        return children.at("unnumbered-ero-sub-object");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::InEro::get_children()
{
    if(children.find("ipv4ero-sub-object") == children.end())
    {
        if(ipv4ero_sub_object != nullptr)
        {
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
    }

    if(children.find("unnumbered-ero-sub-object") == children.end())
    {
        if(unnumbered_ero_sub_object != nullptr)
        {
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
    }

    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::InEro::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-type")
    {
        ero_type = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject::Ipv4EroSubObject()
    :
    	ero_address{YType::str, "ero-address"},
	 is_strict_route{YType::boolean, "is-strict-route"},
	 prefix_length{YType::uint8, "prefix-length"}
{
    yang_name = "ipv4ero-sub-object"; yang_parent_name = "out-ero";
}

RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject::~Ipv4EroSubObject()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject::has_data() const
{
    return ero_address.is_set
	|| is_strict_route.is_set
	|| prefix_length.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_address.operation)
	|| is_set(is_strict_route.operation)
	|| is_set(prefix_length.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4ero-sub-object";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/out-ero/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_address.is_set || is_set(ero_address.operation)) leaf_name_data.push_back(ero_address.get_name_leafdata());
    if (is_strict_route.is_set || is_set(is_strict_route.operation)) leaf_name_data.push_back(is_strict_route.get_name_leafdata());
    if (prefix_length.is_set || is_set(prefix_length.operation)) leaf_name_data.push_back(prefix_length.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-address")
    {
        ero_address = value;
    }
    if(value_path == "is-strict-route")
    {
        is_strict_route = value;
    }
    if(value_path == "prefix-length")
    {
        prefix_length = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject::UnnumberedEroSubObject()
    :
    	ero_interface_id{YType::uint32, "ero-interface-id"},
	 ero_router_id{YType::str, "ero-router-id"},
	 is_strict_route{YType::boolean, "is-strict-route"},
	 status{YType::enumeration, "status"}
{
    yang_name = "unnumbered-ero-sub-object"; yang_parent_name = "out-ero";
}

RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject::~UnnumberedEroSubObject()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject::has_data() const
{
    return ero_interface_id.is_set
	|| ero_router_id.is_set
	|| is_strict_route.is_set
	|| status.is_set;
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_interface_id.operation)
	|| is_set(ero_router_id.operation)
	|| is_set(is_strict_route.operation)
	|| is_set(status.operation);
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "unnumbered-ero-sub-object";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/out-ero/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_interface_id.is_set || is_set(ero_interface_id.operation)) leaf_name_data.push_back(ero_interface_id.get_name_leafdata());
    if (ero_router_id.is_set || is_set(ero_router_id.operation)) leaf_name_data.push_back(ero_router_id.get_name_leafdata());
    if (is_strict_route.is_set || is_set(is_strict_route.operation)) leaf_name_data.push_back(is_strict_route.get_name_leafdata());
    if (status.is_set || is_set(status.operation)) leaf_name_data.push_back(status.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject::get_children()
{
    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-interface-id")
    {
        ero_interface_id = value;
    }
    if(value_path == "ero-router-id")
    {
        ero_router_id = value;
    }
    if(value_path == "is-strict-route")
    {
        is_strict_route = value;
    }
    if(value_path == "status")
    {
        status = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::OutEro()
    :
    	ero_type{YType::enumeration, "ero-type"}
    	,
    ipv4ero_sub_object(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject>())
	,unnumbered_ero_sub_object(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject>())
{
    ipv4ero_sub_object->parent = this;
    children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();

    unnumbered_ero_sub_object->parent = this;
    children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();

    yang_name = "out-ero"; yang_parent_name = "psb-detailed";
}

RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::~OutEro()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::has_data() const
{
    return ero_type.is_set
	|| (ipv4ero_sub_object !=  nullptr && ipv4ero_sub_object->has_data())
	|| (unnumbered_ero_sub_object !=  nullptr && unnumbered_ero_sub_object->has_data());
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_type.operation)
	|| (ipv4ero_sub_object !=  nullptr && ipv4ero_sub_object->has_operation())
	|| (unnumbered_ero_sub_object !=  nullptr && unnumbered_ero_sub_object->has_operation());
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "out-ero";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_type.is_set || is_set(ero_type.operation)) leaf_name_data.push_back(ero_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4ero-sub-object")
    {
        if(ipv4ero_sub_object != nullptr)
        {
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
        else
        {
            ipv4ero_sub_object = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject>();
            ipv4ero_sub_object->parent = this;
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
        return children.at("ipv4ero-sub-object");
    }

    if(child_yang_name == "unnumbered-ero-sub-object")
    {
        if(unnumbered_ero_sub_object != nullptr)
        {
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
        else
        {
            unnumbered_ero_sub_object = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject>();
            unnumbered_ero_sub_object->parent = this;
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
        return children.at("unnumbered-ero-sub-object");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::get_children()
{
    if(children.find("ipv4ero-sub-object") == children.end())
    {
        if(ipv4ero_sub_object != nullptr)
        {
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
    }

    if(children.find("unnumbered-ero-sub-object") == children.end())
    {
        if(unnumbered_ero_sub_object != nullptr)
        {
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
    }

    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::OutEro::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-type")
    {
        ero_type = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetailed::PsbDetailed()
    :
    	backup_tunnel_name{YType::str, "backup-tunnel-name"},
	 destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 input_interface{YType::str, "input-interface"},
	 is_in_ero_valid{YType::boolean, "is-in-ero-valid"},
	 is_out_ero_valid{YType::boolean, "is-out-ero-valid"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 protocol{YType::int32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::int32, "source-port"},
	 sub_group_id{YType::int32, "sub-group-id"},
	 sub_group_origin{YType::str, "sub-group-origin"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    class_type(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::ClassType>())
	,expiry_time(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::ExpiryTime>())
	,generic_traffic_spec(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec>())
	,header(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Header>())
	,hop(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Hop>())
	,label_info(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo>())
	,path_flags(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::PathFlags>())
	,policy_flags(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::PolicyFlags>())
	,policy_query_flags(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::PolicyQueryFlags>())
	,policy_source_info(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::PolicySourceInfo>())
	,s2l_sub_lsp(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::S2LSubLsp>())
	,session(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Session>())
	,session_attribute(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute>())
	,template_(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Template_>())
	,traffic_spec(std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::TrafficSpec>())
{
    class_type->parent = this;
    children["class-type"] = class_type.get();

    expiry_time->parent = this;
    children["expiry-time"] = expiry_time.get();

    generic_traffic_spec->parent = this;
    children["generic-traffic-spec"] = generic_traffic_spec.get();

    header->parent = this;
    children["header"] = header.get();

    hop->parent = this;
    children["hop"] = hop.get();

    label_info->parent = this;
    children["label-info"] = label_info.get();

    path_flags->parent = this;
    children["path-flags"] = path_flags.get();

    policy_flags->parent = this;
    children["policy-flags"] = policy_flags.get();

    policy_query_flags->parent = this;
    children["policy-query-flags"] = policy_query_flags.get();

    policy_source_info->parent = this;
    children["policy-source-info"] = policy_source_info.get();

    s2l_sub_lsp->parent = this;
    children["s2l-sub-lsp"] = s2l_sub_lsp.get();

    session->parent = this;
    children["session"] = session.get();

    session_attribute->parent = this;
    children["session-attribute"] = session_attribute.get();

    template_->parent = this;
    children["template"] = template_.get();

    traffic_spec->parent = this;
    children["traffic-spec"] = traffic_spec.get();

    yang_name = "psb-detailed"; yang_parent_name = "psb-detaileds";
}

RsvpStandby::PsbDetaileds::PsbDetailed::~PsbDetailed()
{
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::has_data() const
{
    for (std::size_t index=0; index<in_ero.size(); index++)
    {
        if(in_ero[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<out_ero.size(); index++)
    {
        if(out_ero[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<pfc.size(); index++)
    {
        if(pfc[index]->has_data())
            return true;
    }
    return backup_tunnel_name.is_set
	|| destination_address.is_set
	|| destination_port.is_set
	|| extended_tunnel_id.is_set
	|| input_interface.is_set
	|| is_in_ero_valid.is_set
	|| is_out_ero_valid.is_set
	|| p2mp_id.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set
	|| sub_group_origin.is_set
	|| vrf_name.is_set
	|| (class_type !=  nullptr && class_type->has_data())
	|| (expiry_time !=  nullptr && expiry_time->has_data())
	|| (generic_traffic_spec !=  nullptr && generic_traffic_spec->has_data())
	|| (header !=  nullptr && header->has_data())
	|| (hop !=  nullptr && hop->has_data())
	|| (label_info !=  nullptr && label_info->has_data())
	|| (path_flags !=  nullptr && path_flags->has_data())
	|| (policy_flags !=  nullptr && policy_flags->has_data())
	|| (policy_query_flags !=  nullptr && policy_query_flags->has_data())
	|| (policy_source_info !=  nullptr && policy_source_info->has_data())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_data())
	|| (session !=  nullptr && session->has_data())
	|| (session_attribute !=  nullptr && session_attribute->has_data())
	|| (template_ !=  nullptr && template_->has_data())
	|| (traffic_spec !=  nullptr && traffic_spec->has_data());
}

bool RsvpStandby::PsbDetaileds::PsbDetailed::has_operation() const
{
    for (std::size_t index=0; index<in_ero.size(); index++)
    {
        if(in_ero[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<out_ero.size(); index++)
    {
        if(out_ero[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<pfc.size(); index++)
    {
        if(pfc[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(backup_tunnel_name.operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(input_interface.operation)
	|| is_set(is_in_ero_valid.operation)
	|| is_set(is_out_ero_valid.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(sub_group_origin.operation)
	|| is_set(vrf_name.operation)
	|| (class_type !=  nullptr && class_type->has_operation())
	|| (expiry_time !=  nullptr && expiry_time->has_operation())
	|| (generic_traffic_spec !=  nullptr && generic_traffic_spec->has_operation())
	|| (header !=  nullptr && header->has_operation())
	|| (hop !=  nullptr && hop->has_operation())
	|| (label_info !=  nullptr && label_info->has_operation())
	|| (path_flags !=  nullptr && path_flags->has_operation())
	|| (policy_flags !=  nullptr && policy_flags->has_operation())
	|| (policy_query_flags !=  nullptr && policy_query_flags->has_operation())
	|| (policy_source_info !=  nullptr && policy_source_info->has_operation())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_operation())
	|| (session !=  nullptr && session->has_operation())
	|| (session_attribute !=  nullptr && session_attribute->has_operation())
	|| (template_ !=  nullptr && template_->has_operation())
	|| (traffic_spec !=  nullptr && traffic_spec->has_operation());
}

std::string RsvpStandby::PsbDetaileds::PsbDetailed::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "psb-detailed";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::PsbDetailed::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (backup_tunnel_name.is_set || is_set(backup_tunnel_name.operation)) leaf_name_data.push_back(backup_tunnel_name.get_name_leafdata());
    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (input_interface.is_set || is_set(input_interface.operation)) leaf_name_data.push_back(input_interface.get_name_leafdata());
    if (is_in_ero_valid.is_set || is_set(is_in_ero_valid.operation)) leaf_name_data.push_back(is_in_ero_valid.get_name_leafdata());
    if (is_out_ero_valid.is_set || is_set(is_out_ero_valid.operation)) leaf_name_data.push_back(is_out_ero_valid.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (sub_group_origin.is_set || is_set(sub_group_origin.operation)) leaf_name_data.push_back(sub_group_origin.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::PsbDetailed::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "class-type")
    {
        if(class_type != nullptr)
        {
            children["class-type"] = class_type.get();
        }
        else
        {
            class_type = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::ClassType>();
            class_type->parent = this;
            children["class-type"] = class_type.get();
        }
        return children.at("class-type");
    }

    if(child_yang_name == "expiry-time")
    {
        if(expiry_time != nullptr)
        {
            children["expiry-time"] = expiry_time.get();
        }
        else
        {
            expiry_time = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::ExpiryTime>();
            expiry_time->parent = this;
            children["expiry-time"] = expiry_time.get();
        }
        return children.at("expiry-time");
    }

    if(child_yang_name == "generic-traffic-spec")
    {
        if(generic_traffic_spec != nullptr)
        {
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
        else
        {
            generic_traffic_spec = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::GenericTrafficSpec>();
            generic_traffic_spec->parent = this;
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
        return children.at("generic-traffic-spec");
    }

    if(child_yang_name == "header")
    {
        if(header != nullptr)
        {
            children["header"] = header.get();
        }
        else
        {
            header = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Header>();
            header->parent = this;
            children["header"] = header.get();
        }
        return children.at("header");
    }

    if(child_yang_name == "hop")
    {
        if(hop != nullptr)
        {
            children["hop"] = hop.get();
        }
        else
        {
            hop = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Hop>();
            hop->parent = this;
            children["hop"] = hop.get();
        }
        return children.at("hop");
    }

    if(child_yang_name == "in-ero")
    {
        for(auto const & c : in_ero)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::InEro>();
        c->parent = this;
        in_ero.push_back(std::move(c));
        children[segment_path] = in_ero.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "label-info")
    {
        if(label_info != nullptr)
        {
            children["label-info"] = label_info.get();
        }
        else
        {
            label_info = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::LabelInfo>();
            label_info->parent = this;
            children["label-info"] = label_info.get();
        }
        return children.at("label-info");
    }

    if(child_yang_name == "out-ero")
    {
        for(auto const & c : out_ero)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::OutEro>();
        c->parent = this;
        out_ero.push_back(std::move(c));
        children[segment_path] = out_ero.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "path-flags")
    {
        if(path_flags != nullptr)
        {
            children["path-flags"] = path_flags.get();
        }
        else
        {
            path_flags = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::PathFlags>();
            path_flags->parent = this;
            children["path-flags"] = path_flags.get();
        }
        return children.at("path-flags");
    }

    if(child_yang_name == "pfc")
    {
        for(auto const & c : pfc)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Pfc>();
        c->parent = this;
        pfc.push_back(std::move(c));
        children[segment_path] = pfc.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "policy-flags")
    {
        if(policy_flags != nullptr)
        {
            children["policy-flags"] = policy_flags.get();
        }
        else
        {
            policy_flags = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::PolicyFlags>();
            policy_flags->parent = this;
            children["policy-flags"] = policy_flags.get();
        }
        return children.at("policy-flags");
    }

    if(child_yang_name == "policy-query-flags")
    {
        if(policy_query_flags != nullptr)
        {
            children["policy-query-flags"] = policy_query_flags.get();
        }
        else
        {
            policy_query_flags = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::PolicyQueryFlags>();
            policy_query_flags->parent = this;
            children["policy-query-flags"] = policy_query_flags.get();
        }
        return children.at("policy-query-flags");
    }

    if(child_yang_name == "policy-source-info")
    {
        if(policy_source_info != nullptr)
        {
            children["policy-source-info"] = policy_source_info.get();
        }
        else
        {
            policy_source_info = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::PolicySourceInfo>();
            policy_source_info->parent = this;
            children["policy-source-info"] = policy_source_info.get();
        }
        return children.at("policy-source-info");
    }

    if(child_yang_name == "s2l-sub-lsp")
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        else
        {
            s2l_sub_lsp = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::S2LSubLsp>();
            s2l_sub_lsp->parent = this;
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        return children.at("s2l-sub-lsp");
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    if(child_yang_name == "session-attribute")
    {
        if(session_attribute != nullptr)
        {
            children["session-attribute"] = session_attribute.get();
        }
        else
        {
            session_attribute = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::SessionAttribute>();
            session_attribute->parent = this;
            children["session-attribute"] = session_attribute.get();
        }
        return children.at("session-attribute");
    }

    if(child_yang_name == "template")
    {
        if(template_ != nullptr)
        {
            children["template"] = template_.get();
        }
        else
        {
            template_ = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::Template_>();
            template_->parent = this;
            children["template"] = template_.get();
        }
        return children.at("template");
    }

    if(child_yang_name == "traffic-spec")
    {
        if(traffic_spec != nullptr)
        {
            children["traffic-spec"] = traffic_spec.get();
        }
        else
        {
            traffic_spec = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed::TrafficSpec>();
            traffic_spec->parent = this;
            children["traffic-spec"] = traffic_spec.get();
        }
        return children.at("traffic-spec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::PsbDetailed::get_children()
{
    if(children.find("class-type") == children.end())
    {
        if(class_type != nullptr)
        {
            children["class-type"] = class_type.get();
        }
    }

    if(children.find("expiry-time") == children.end())
    {
        if(expiry_time != nullptr)
        {
            children["expiry-time"] = expiry_time.get();
        }
    }

    if(children.find("generic-traffic-spec") == children.end())
    {
        if(generic_traffic_spec != nullptr)
        {
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
    }

    if(children.find("header") == children.end())
    {
        if(header != nullptr)
        {
            children["header"] = header.get();
        }
    }

    if(children.find("hop") == children.end())
    {
        if(hop != nullptr)
        {
            children["hop"] = hop.get();
        }
    }

    for (auto const & c : in_ero)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("label-info") == children.end())
    {
        if(label_info != nullptr)
        {
            children["label-info"] = label_info.get();
        }
    }

    for (auto const & c : out_ero)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("path-flags") == children.end())
    {
        if(path_flags != nullptr)
        {
            children["path-flags"] = path_flags.get();
        }
    }

    for (auto const & c : pfc)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("policy-flags") == children.end())
    {
        if(policy_flags != nullptr)
        {
            children["policy-flags"] = policy_flags.get();
        }
    }

    if(children.find("policy-query-flags") == children.end())
    {
        if(policy_query_flags != nullptr)
        {
            children["policy-query-flags"] = policy_query_flags.get();
        }
    }

    if(children.find("policy-source-info") == children.end())
    {
        if(policy_source_info != nullptr)
        {
            children["policy-source-info"] = policy_source_info.get();
        }
    }

    if(children.find("s2l-sub-lsp") == children.end())
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
    }

    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    if(children.find("session-attribute") == children.end())
    {
        if(session_attribute != nullptr)
        {
            children["session-attribute"] = session_attribute.get();
        }
    }

    if(children.find("template") == children.end())
    {
        if(template_ != nullptr)
        {
            children["template"] = template_.get();
        }
    }

    if(children.find("traffic-spec") == children.end())
    {
        if(traffic_spec != nullptr)
        {
            children["traffic-spec"] = traffic_spec.get();
        }
    }

    return children;
}

void RsvpStandby::PsbDetaileds::PsbDetailed::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "backup-tunnel-name")
    {
        backup_tunnel_name = value;
    }
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "input-interface")
    {
        input_interface = value;
    }
    if(value_path == "is-in-ero-valid")
    {
        is_in_ero_valid = value;
    }
    if(value_path == "is-out-ero-valid")
    {
        is_out_ero_valid = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "sub-group-origin")
    {
        sub_group_origin = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

RsvpStandby::PsbDetaileds::PsbDetaileds()
{
    yang_name = "psb-detaileds"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::PsbDetaileds::~PsbDetaileds()
{
}

bool RsvpStandby::PsbDetaileds::has_data() const
{
    for (std::size_t index=0; index<psb_detailed.size(); index++)
    {
        if(psb_detailed[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::PsbDetaileds::has_operation() const
{
    for (std::size_t index=0; index<psb_detailed.size(); index++)
    {
        if(psb_detailed[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::PsbDetaileds::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "psb-detaileds";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbDetaileds::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbDetaileds::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "psb-detailed")
    {
        for(auto const & c : psb_detailed)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::PsbDetaileds::PsbDetailed>();
        c->parent = this;
        psb_detailed.push_back(std::move(c));
        children[segment_path] = psb_detailed.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbDetaileds::get_children()
{
    for (auto const & c : psb_detailed)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::PsbDetaileds::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::FrrSummary::PathStates::PathStates()
    :
    	active_instances{YType::uint32, "active-instances"},
	 active_wait_instances{YType::uint32, "active-wait-instances"},
	 ready_instances{YType::uint32, "ready-instances"},
	 total{YType::uint32, "total"}
{
    yang_name = "path-states"; yang_parent_name = "frr-summary";
}

RsvpStandby::FrrSummary::PathStates::~PathStates()
{
}

bool RsvpStandby::FrrSummary::PathStates::has_data() const
{
    return active_instances.is_set
	|| active_wait_instances.is_set
	|| ready_instances.is_set
	|| total.is_set;
}

bool RsvpStandby::FrrSummary::PathStates::has_operation() const
{
    return is_set(operation)
	|| is_set(active_instances.operation)
	|| is_set(active_wait_instances.operation)
	|| is_set(ready_instances.operation)
	|| is_set(total.operation);
}

std::string RsvpStandby::FrrSummary::PathStates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "path-states";

    return path_buffer.str();

}

EntityPath RsvpStandby::FrrSummary::PathStates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frr-summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (active_instances.is_set || is_set(active_instances.operation)) leaf_name_data.push_back(active_instances.get_name_leafdata());
    if (active_wait_instances.is_set || is_set(active_wait_instances.operation)) leaf_name_data.push_back(active_wait_instances.get_name_leafdata());
    if (ready_instances.is_set || is_set(ready_instances.operation)) leaf_name_data.push_back(ready_instances.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::FrrSummary::PathStates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::FrrSummary::PathStates::get_children()
{
    return children;
}

void RsvpStandby::FrrSummary::PathStates::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "active-instances")
    {
        active_instances = value;
    }
    if(value_path == "active-wait-instances")
    {
        active_wait_instances = value;
    }
    if(value_path == "ready-instances")
    {
        ready_instances = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

RsvpStandby::FrrSummary::ReservationStates::ReservationStates()
    :
    	active_instances{YType::uint32, "active-instances"},
	 active_wait_instances{YType::uint32, "active-wait-instances"},
	 ready_instances{YType::uint32, "ready-instances"},
	 total{YType::uint32, "total"}
{
    yang_name = "reservation-states"; yang_parent_name = "frr-summary";
}

RsvpStandby::FrrSummary::ReservationStates::~ReservationStates()
{
}

bool RsvpStandby::FrrSummary::ReservationStates::has_data() const
{
    return active_instances.is_set
	|| active_wait_instances.is_set
	|| ready_instances.is_set
	|| total.is_set;
}

bool RsvpStandby::FrrSummary::ReservationStates::has_operation() const
{
    return is_set(operation)
	|| is_set(active_instances.operation)
	|| is_set(active_wait_instances.operation)
	|| is_set(ready_instances.operation)
	|| is_set(total.operation);
}

std::string RsvpStandby::FrrSummary::ReservationStates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "reservation-states";

    return path_buffer.str();

}

EntityPath RsvpStandby::FrrSummary::ReservationStates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frr-summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (active_instances.is_set || is_set(active_instances.operation)) leaf_name_data.push_back(active_instances.get_name_leafdata());
    if (active_wait_instances.is_set || is_set(active_wait_instances.operation)) leaf_name_data.push_back(active_wait_instances.get_name_leafdata());
    if (ready_instances.is_set || is_set(ready_instances.operation)) leaf_name_data.push_back(ready_instances.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::FrrSummary::ReservationStates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::FrrSummary::ReservationStates::get_children()
{
    return children;
}

void RsvpStandby::FrrSummary::ReservationStates::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "active-instances")
    {
        active_instances = value;
    }
    if(value_path == "active-wait-instances")
    {
        active_wait_instances = value;
    }
    if(value_path == "ready-instances")
    {
        ready_instances = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

RsvpStandby::FrrSummary::FrrSummary()
    :
    path_states(std::make_unique<RsvpStandby::FrrSummary::PathStates>())
	,reservation_states(std::make_unique<RsvpStandby::FrrSummary::ReservationStates>())
{
    path_states->parent = this;
    children["path-states"] = path_states.get();

    reservation_states->parent = this;
    children["reservation-states"] = reservation_states.get();

    yang_name = "frr-summary"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::FrrSummary::~FrrSummary()
{
}

bool RsvpStandby::FrrSummary::has_data() const
{
    return (path_states !=  nullptr && path_states->has_data())
	|| (reservation_states !=  nullptr && reservation_states->has_data());
}

bool RsvpStandby::FrrSummary::has_operation() const
{
    return is_set(operation)
	|| (path_states !=  nullptr && path_states->has_operation())
	|| (reservation_states !=  nullptr && reservation_states->has_operation());
}

std::string RsvpStandby::FrrSummary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frr-summary";

    return path_buffer.str();

}

EntityPath RsvpStandby::FrrSummary::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::FrrSummary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "path-states")
    {
        if(path_states != nullptr)
        {
            children["path-states"] = path_states.get();
        }
        else
        {
            path_states = std::make_unique<RsvpStandby::FrrSummary::PathStates>();
            path_states->parent = this;
            children["path-states"] = path_states.get();
        }
        return children.at("path-states");
    }

    if(child_yang_name == "reservation-states")
    {
        if(reservation_states != nullptr)
        {
            children["reservation-states"] = reservation_states.get();
        }
        else
        {
            reservation_states = std::make_unique<RsvpStandby::FrrSummary::ReservationStates>();
            reservation_states->parent = this;
            children["reservation-states"] = reservation_states.get();
        }
        return children.at("reservation-states");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::FrrSummary::get_children()
{
    if(children.find("path-states") == children.end())
    {
        if(path_states != nullptr)
        {
            children["path-states"] = path_states.get();
        }
    }

    if(children.find("reservation-states") == children.end())
    {
        if(reservation_states != nullptr)
        {
            children["reservation-states"] = reservation_states.get();
        }
    }

    return children;
}

void RsvpStandby::FrrSummary::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::RsbDetaileds::RsbDetailed::FlowSpec::FlowSpec()
    :
    	flow_average_rate{YType::uint64, "flow-average-rate"},
	 flow_max_burst{YType::uint64, "flow-max-burst"},
	 flow_max_unit{YType::uint32, "flow-max-unit"},
	 flow_min_unit{YType::uint32, "flow-min-unit"},
	 flow_peak_rate{YType::uint64, "flow-peak-rate"},
	 flow_qos{YType::enumeration, "flow-qos"},
	 flow_requested_rate{YType::uint64, "flow-requested-rate"},
	 flow_slack{YType::uint32, "flow-slack"}
{
    yang_name = "flow-spec"; yang_parent_name = "rsb-detailed";
}

RsvpStandby::RsbDetaileds::RsbDetailed::FlowSpec::~FlowSpec()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::FlowSpec::has_data() const
{
    return flow_average_rate.is_set
	|| flow_max_burst.is_set
	|| flow_max_unit.is_set
	|| flow_min_unit.is_set
	|| flow_peak_rate.is_set
	|| flow_qos.is_set
	|| flow_requested_rate.is_set
	|| flow_slack.is_set;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::FlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_average_rate.operation)
	|| is_set(flow_max_burst.operation)
	|| is_set(flow_max_unit.operation)
	|| is_set(flow_min_unit.operation)
	|| is_set(flow_peak_rate.operation)
	|| is_set(flow_qos.operation)
	|| is_set(flow_requested_rate.operation)
	|| is_set(flow_slack.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::FlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flow-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::FlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_average_rate.is_set || is_set(flow_average_rate.operation)) leaf_name_data.push_back(flow_average_rate.get_name_leafdata());
    if (flow_max_burst.is_set || is_set(flow_max_burst.operation)) leaf_name_data.push_back(flow_max_burst.get_name_leafdata());
    if (flow_max_unit.is_set || is_set(flow_max_unit.operation)) leaf_name_data.push_back(flow_max_unit.get_name_leafdata());
    if (flow_min_unit.is_set || is_set(flow_min_unit.operation)) leaf_name_data.push_back(flow_min_unit.get_name_leafdata());
    if (flow_peak_rate.is_set || is_set(flow_peak_rate.operation)) leaf_name_data.push_back(flow_peak_rate.get_name_leafdata());
    if (flow_qos.is_set || is_set(flow_qos.operation)) leaf_name_data.push_back(flow_qos.get_name_leafdata());
    if (flow_requested_rate.is_set || is_set(flow_requested_rate.operation)) leaf_name_data.push_back(flow_requested_rate.get_name_leafdata());
    if (flow_slack.is_set || is_set(flow_slack.operation)) leaf_name_data.push_back(flow_slack.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::FlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::FlowSpec::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::FlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-average-rate")
    {
        flow_average_rate = value;
    }
    if(value_path == "flow-max-burst")
    {
        flow_max_burst = value;
    }
    if(value_path == "flow-max-unit")
    {
        flow_max_unit = value;
    }
    if(value_path == "flow-min-unit")
    {
        flow_min_unit = value;
    }
    if(value_path == "flow-peak-rate")
    {
        flow_peak_rate = value;
    }
    if(value_path == "flow-qos")
    {
        flow_qos = value;
    }
    if(value_path == "flow-requested-rate")
    {
        flow_requested_rate = value;
    }
    if(value_path == "flow-slack")
    {
        flow_slack = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec::G709OtnFlowSpec()
    :
    	flow_bit_rate{YType::uint64, "flow-bit-rate"},
	 flow_multiplier{YType::uint16, "flow-multiplier"},
	 flow_nvc{YType::uint16, "flow-nvc"},
	 flow_signal_type{YType::uint8, "flow-signal-type"}
{
    yang_name = "g709otn-flow-spec"; yang_parent_name = "generic-flow-spec";
}

RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec::~G709OtnFlowSpec()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec::has_data() const
{
    return flow_bit_rate.is_set
	|| flow_multiplier.is_set
	|| flow_nvc.is_set
	|| flow_signal_type.is_set;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_bit_rate.operation)
	|| is_set(flow_multiplier.operation)
	|| is_set(flow_nvc.operation)
	|| is_set(flow_signal_type.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-flow-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/generic-flow-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_bit_rate.is_set || is_set(flow_bit_rate.operation)) leaf_name_data.push_back(flow_bit_rate.get_name_leafdata());
    if (flow_multiplier.is_set || is_set(flow_multiplier.operation)) leaf_name_data.push_back(flow_multiplier.get_name_leafdata());
    if (flow_nvc.is_set || is_set(flow_nvc.operation)) leaf_name_data.push_back(flow_nvc.get_name_leafdata());
    if (flow_signal_type.is_set || is_set(flow_signal_type.operation)) leaf_name_data.push_back(flow_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-bit-rate")
    {
        flow_bit_rate = value;
    }
    if(value_path == "flow-multiplier")
    {
        flow_multiplier = value;
    }
    if(value_path == "flow-nvc")
    {
        flow_nvc = value;
    }
    if(value_path == "flow-signal-type")
    {
        flow_signal_type = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::GenericFlowSpec()
    :
    	flow_spec_type{YType::enumeration, "flow-spec-type"}
    	,
    g709otn_flow_spec(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec>())
{
    g709otn_flow_spec->parent = this;
    children["g709otn-flow-spec"] = g709otn_flow_spec.get();

    yang_name = "generic-flow-spec"; yang_parent_name = "rsb-detailed";
}

RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::~GenericFlowSpec()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::has_data() const
{
    return flow_spec_type.is_set
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_data());
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_spec_type.operation)
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_operation());
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-flow-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_spec_type.is_set || is_set(flow_spec_type.operation)) leaf_name_data.push_back(flow_spec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-flow-spec")
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        else
        {
            g709otn_flow_spec = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec>();
            g709otn_flow_spec->parent = this;
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        return children.at("g709otn-flow-spec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::get_children()
{
    if(children.find("g709otn-flow-spec") == children.end())
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
    }

    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-spec-type")
    {
        flow_spec_type = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::~RsvpSession()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::Session::Session()
    :
    rsvp_session(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "rsb-detailed";
}

RsvpStandby::RsbDetaileds::RsbDetailed::Session::~Session()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::Session::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::RsbDetaileds::RsbDetailed::S2LSubLsp::S2LSubLsp()
    :
    	s2l_destination_address{YType::str, "s2l-destination-address"}
{
    yang_name = "s2l-sub-lsp"; yang_parent_name = "rsb-detailed";
}

RsvpStandby::RsbDetaileds::RsbDetailed::S2LSubLsp::~S2LSubLsp()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::S2LSubLsp::has_data() const
{
    return s2l_destination_address.is_set;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::S2LSubLsp::has_operation() const
{
    return is_set(operation)
	|| is_set(s2l_destination_address.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::S2LSubLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "s2l-sub-lsp";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::S2LSubLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (s2l_destination_address.is_set || is_set(s2l_destination_address.operation)) leaf_name_data.push_back(s2l_destination_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::S2LSubLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::S2LSubLsp::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::S2LSubLsp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "s2l-destination-address")
    {
        s2l_destination_address = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::Style::Style()
    :
    	reservation_type{YType::enumeration, "reservation-type"}
{
    yang_name = "style"; yang_parent_name = "rsb-detailed";
}

RsvpStandby::RsbDetaileds::RsbDetailed::Style::~Style()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Style::has_data() const
{
    return reservation_type.is_set;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Style::has_operation() const
{
    return is_set(operation)
	|| is_set(reservation_type.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::Style::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "style";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::Style::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (reservation_type.is_set || is_set(reservation_type.operation)) leaf_name_data.push_back(reservation_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::Style::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::Style::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::Style::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "reservation-type")
    {
        reservation_type = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session::UdpIpv4Session()
    :
    	source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"}
{
    yang_name = "udp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session::~UdpIpv4Session()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session::has_data() const
{
    return source_address.is_set
	|| source_port.is_set;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "udp-ipv4-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/filter/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session::P2MpIpv4Session()
    :
    	p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"},
	 sub_group_id{YType::uint16, "sub-group-id"}
{
    yang_name = "p2mp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session::~P2MpIpv4Session()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session::has_data() const
{
    return p2mp_sub_group_origin.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "p2mp-ipv4-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/filter/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::RsvpFilter()
    :
    	filter_type{YType::enumeration, "filter-type"}
    	,
    p2mp_ipv4_session(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session>())
	,udp_ipv4_session(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session>())
{
    p2mp_ipv4_session->parent = this;
    children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();

    udp_ipv4_session->parent = this;
    children["udp-ipv4-session"] = udp_ipv4_session.get();

    yang_name = "rsvp-filter"; yang_parent_name = "filter";
}

RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::~RsvpFilter()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::has_data() const
{
    return filter_type.is_set
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_data())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_data());
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::has_operation() const
{
    return is_set(operation)
	|| is_set(filter_type.operation)
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_operation())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_operation());
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-filter";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (filter_type.is_set || is_set(filter_type.operation)) leaf_name_data.push_back(filter_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "p2mp-ipv4-session")
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        else
        {
            p2mp_ipv4_session = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session>();
            p2mp_ipv4_session->parent = this;
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        return children.at("p2mp-ipv4-session");
    }

    if(child_yang_name == "udp-ipv4-session")
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        else
        {
            udp_ipv4_session = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session>();
            udp_ipv4_session->parent = this;
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        return children.at("udp-ipv4-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::get_children()
{
    if(children.find("p2mp-ipv4-session") == children.end())
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
    }

    if(children.find("udp-ipv4-session") == children.end())
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
    }

    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "filter-type")
    {
        filter_type = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::Filter::Filter()
    :
    rsvp_filter(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter>())
{
    rsvp_filter->parent = this;
    children["rsvp-filter"] = rsvp_filter.get();

    yang_name = "filter"; yang_parent_name = "rsb-detailed";
}

RsvpStandby::RsbDetaileds::RsbDetailed::Filter::~Filter()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Filter::has_data() const
{
    return (rsvp_filter !=  nullptr && rsvp_filter->has_data());
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Filter::has_operation() const
{
    return is_set(operation)
	|| (rsvp_filter !=  nullptr && rsvp_filter->has_operation());
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::Filter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "filter";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::Filter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::Filter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-filter")
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
        else
        {
            rsvp_filter = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Filter::RsvpFilter>();
            rsvp_filter->parent = this;
            children["rsvp-filter"] = rsvp_filter.get();
        }
        return children.at("rsvp-filter");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::Filter::get_children()
{
    if(children.find("rsvp-filter") == children.end())
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
    }

    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::Filter::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::RsbDetaileds::RsbDetailed::RsbFlags::RsbFlags()
    :
    	is_local_receiver{YType::boolean, "is-local-receiver"},
	 is_local_repair{YType::boolean, "is-local-repair"},
	 is_lockout{YType::boolean, "is-lockout"},
	 is_merge_point{YType::boolean, "is-merge-point"},
	 is_message_id_valid{YType::boolean, "is-message-id-valid"}
{
    yang_name = "rsb-flags"; yang_parent_name = "rsb-detailed";
}

RsvpStandby::RsbDetaileds::RsbDetailed::RsbFlags::~RsbFlags()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::RsbFlags::has_data() const
{
    return is_local_receiver.is_set
	|| is_local_repair.is_set
	|| is_lockout.is_set
	|| is_merge_point.is_set
	|| is_message_id_valid.is_set;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::RsbFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_local_receiver.operation)
	|| is_set(is_local_repair.operation)
	|| is_set(is_lockout.operation)
	|| is_set(is_merge_point.operation)
	|| is_set(is_message_id_valid.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::RsbFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsb-flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::RsbFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_local_receiver.is_set || is_set(is_local_receiver.operation)) leaf_name_data.push_back(is_local_receiver.get_name_leafdata());
    if (is_local_repair.is_set || is_set(is_local_repair.operation)) leaf_name_data.push_back(is_local_repair.get_name_leafdata());
    if (is_lockout.is_set || is_set(is_lockout.operation)) leaf_name_data.push_back(is_lockout.get_name_leafdata());
    if (is_merge_point.is_set || is_set(is_merge_point.operation)) leaf_name_data.push_back(is_merge_point.get_name_leafdata());
    if (is_message_id_valid.is_set || is_set(is_message_id_valid.operation)) leaf_name_data.push_back(is_message_id_valid.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::RsbFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::RsbFlags::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::RsbFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-local-receiver")
    {
        is_local_receiver = value;
    }
    if(value_path == "is-local-repair")
    {
        is_local_repair = value;
    }
    if(value_path == "is-lockout")
    {
        is_lockout = value;
    }
    if(value_path == "is-merge-point")
    {
        is_merge_point = value;
    }
    if(value_path == "is-message-id-valid")
    {
        is_message_id_valid = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::Hop::Hop()
    :
    	neighbor_address{YType::str, "neighbor-address"},
	 neighbor_logical_interface_name{YType::str, "neighbor-logical-interface-name"}
{
    yang_name = "hop"; yang_parent_name = "rsb-detailed";
}

RsvpStandby::RsbDetaileds::RsbDetailed::Hop::~Hop()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Hop::has_data() const
{
    return neighbor_address.is_set
	|| neighbor_logical_interface_name.is_set;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Hop::has_operation() const
{
    return is_set(operation)
	|| is_set(neighbor_address.operation)
	|| is_set(neighbor_logical_interface_name.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::Hop::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hop";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::Hop::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (neighbor_logical_interface_name.is_set || is_set(neighbor_logical_interface_name.operation)) leaf_name_data.push_back(neighbor_logical_interface_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::Hop::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::Hop::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::Hop::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "neighbor-logical-interface-name")
    {
        neighbor_logical_interface_name = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::PolicySources::PolicySources()
    :
    	is_cable{YType::boolean, "is-cable"},
	 is_cops{YType::boolean, "is-cops"},
	 is_default{YType::boolean, "is-default"},
	 is_local{YType::boolean, "is-local"},
	 is_te_link{YType::boolean, "is-te-link"}
{
    yang_name = "policy-sources"; yang_parent_name = "rsb-detailed";
}

RsvpStandby::RsbDetaileds::RsbDetailed::PolicySources::~PolicySources()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::PolicySources::has_data() const
{
    return is_cable.is_set
	|| is_cops.is_set
	|| is_default.is_set
	|| is_local.is_set
	|| is_te_link.is_set;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::PolicySources::has_operation() const
{
    return is_set(operation)
	|| is_set(is_cable.operation)
	|| is_set(is_cops.operation)
	|| is_set(is_default.operation)
	|| is_set(is_local.operation)
	|| is_set(is_te_link.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::PolicySources::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-sources";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::PolicySources::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_cable.is_set || is_set(is_cable.operation)) leaf_name_data.push_back(is_cable.get_name_leafdata());
    if (is_cops.is_set || is_set(is_cops.operation)) leaf_name_data.push_back(is_cops.get_name_leafdata());
    if (is_default.is_set || is_set(is_default.operation)) leaf_name_data.push_back(is_default.get_name_leafdata());
    if (is_local.is_set || is_set(is_local.operation)) leaf_name_data.push_back(is_local.get_name_leafdata());
    if (is_te_link.is_set || is_set(is_te_link.operation)) leaf_name_data.push_back(is_te_link.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::PolicySources::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::PolicySources::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::PolicySources::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-cable")
    {
        is_cable = value;
    }
    if(value_path == "is-cops")
    {
        is_cops = value;
    }
    if(value_path == "is-default")
    {
        is_default = value;
    }
    if(value_path == "is-local")
    {
        is_local = value;
    }
    if(value_path == "is-te-link")
    {
        is_te_link = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::Header::Header()
    :
    	ip_source_address{YType::str, "ip-source-address"},
	 ip_tos{YType::uint8, "ip-tos"},
	 ip_ttl{YType::uint8, "ip-ttl"},
	 rsvp_header_flags{YType::uint8, "rsvp-header-flags"},
	 rsvp_message_type{YType::uint8, "rsvp-message-type"},
	 rsvp_ttl{YType::uint8, "rsvp-ttl"},
	 rsvp_version{YType::uint8, "rsvp-version"}
{
    yang_name = "header"; yang_parent_name = "rsb-detailed";
}

RsvpStandby::RsbDetaileds::RsbDetailed::Header::~Header()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Header::has_data() const
{
    return ip_source_address.is_set
	|| ip_tos.is_set
	|| ip_ttl.is_set
	|| rsvp_header_flags.is_set
	|| rsvp_message_type.is_set
	|| rsvp_ttl.is_set
	|| rsvp_version.is_set;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::Header::has_operation() const
{
    return is_set(operation)
	|| is_set(ip_source_address.operation)
	|| is_set(ip_tos.operation)
	|| is_set(ip_ttl.operation)
	|| is_set(rsvp_header_flags.operation)
	|| is_set(rsvp_message_type.operation)
	|| is_set(rsvp_ttl.operation)
	|| is_set(rsvp_version.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::Header::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "header";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::Header::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ip_source_address.is_set || is_set(ip_source_address.operation)) leaf_name_data.push_back(ip_source_address.get_name_leafdata());
    if (ip_tos.is_set || is_set(ip_tos.operation)) leaf_name_data.push_back(ip_tos.get_name_leafdata());
    if (ip_ttl.is_set || is_set(ip_ttl.operation)) leaf_name_data.push_back(ip_ttl.get_name_leafdata());
    if (rsvp_header_flags.is_set || is_set(rsvp_header_flags.operation)) leaf_name_data.push_back(rsvp_header_flags.get_name_leafdata());
    if (rsvp_message_type.is_set || is_set(rsvp_message_type.operation)) leaf_name_data.push_back(rsvp_message_type.get_name_leafdata());
    if (rsvp_ttl.is_set || is_set(rsvp_ttl.operation)) leaf_name_data.push_back(rsvp_ttl.get_name_leafdata());
    if (rsvp_version.is_set || is_set(rsvp_version.operation)) leaf_name_data.push_back(rsvp_version.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::Header::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::Header::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::Header::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ip-source-address")
    {
        ip_source_address = value;
    }
    if(value_path == "ip-tos")
    {
        ip_tos = value;
    }
    if(value_path == "ip-ttl")
    {
        ip_ttl = value;
    }
    if(value_path == "rsvp-header-flags")
    {
        rsvp_header_flags = value;
    }
    if(value_path == "rsvp-message-type")
    {
        rsvp_message_type = value;
    }
    if(value_path == "rsvp-ttl")
    {
        rsvp_ttl = value;
    }
    if(value_path == "rsvp-version")
    {
        rsvp_version = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::PolicyFlags::PolicyFlags()
    :
    	is_accepted{YType::boolean, "is-accepted"},
	 is_forwarding{YType::boolean, "is-forwarding"},
	 is_installed{YType::boolean, "is-installed"}
{
    yang_name = "policy-flags"; yang_parent_name = "rsb-detailed";
}

RsvpStandby::RsbDetaileds::RsbDetailed::PolicyFlags::~PolicyFlags()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::PolicyFlags::has_data() const
{
    return is_accepted.is_set
	|| is_forwarding.is_set
	|| is_installed.is_set;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::PolicyFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_accepted.operation)
	|| is_set(is_forwarding.operation)
	|| is_set(is_installed.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::PolicyFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::PolicyFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_accepted.is_set || is_set(is_accepted.operation)) leaf_name_data.push_back(is_accepted.get_name_leafdata());
    if (is_forwarding.is_set || is_set(is_forwarding.operation)) leaf_name_data.push_back(is_forwarding.get_name_leafdata());
    if (is_installed.is_set || is_set(is_installed.operation)) leaf_name_data.push_back(is_installed.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::PolicyFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::PolicyFlags::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::PolicyFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-accepted")
    {
        is_accepted = value;
    }
    if(value_path == "is-forwarding")
    {
        is_forwarding = value;
    }
    if(value_path == "is-installed")
    {
        is_installed = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::ExpiryTime::ExpiryTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "expiry-time"; yang_parent_name = "rsb-detailed";
}

RsvpStandby::RsbDetaileds::RsbDetailed::ExpiryTime::~ExpiryTime()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::ExpiryTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::ExpiryTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::ExpiryTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "expiry-time";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::ExpiryTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::ExpiryTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::ExpiryTime::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::ExpiryTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::PolicyQueryFlags::PolicyQueryFlags()
    :
    	is_bypass{YType::boolean, "is-bypass"},
	 is_needed{YType::boolean, "is-needed"},
	 is_report_required{YType::boolean, "is-report-required"},
	 is_resync{YType::boolean, "is-resync"}
{
    yang_name = "policy-query-flags"; yang_parent_name = "rsb-detailed";
}

RsvpStandby::RsbDetaileds::RsbDetailed::PolicyQueryFlags::~PolicyQueryFlags()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::PolicyQueryFlags::has_data() const
{
    return is_bypass.is_set
	|| is_needed.is_set
	|| is_report_required.is_set
	|| is_resync.is_set;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::PolicyQueryFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bypass.operation)
	|| is_set(is_needed.operation)
	|| is_set(is_report_required.operation)
	|| is_set(is_resync.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::PolicyQueryFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-query-flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::PolicyQueryFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bypass.is_set || is_set(is_bypass.operation)) leaf_name_data.push_back(is_bypass.get_name_leafdata());
    if (is_needed.is_set || is_set(is_needed.operation)) leaf_name_data.push_back(is_needed.get_name_leafdata());
    if (is_report_required.is_set || is_set(is_report_required.operation)) leaf_name_data.push_back(is_report_required.get_name_leafdata());
    if (is_resync.is_set || is_set(is_resync.operation)) leaf_name_data.push_back(is_resync.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::PolicyQueryFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::PolicyQueryFlags::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::PolicyQueryFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bypass")
    {
        is_bypass = value;
    }
    if(value_path == "is-needed")
    {
        is_needed = value;
    }
    if(value_path == "is-report-required")
    {
        is_report_required = value;
    }
    if(value_path == "is-resync")
    {
        is_resync = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-local-downstream-label";
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-local-downstream-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GenericLocalDownstreamLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-local-downstream-label"; yang_parent_name = "label-info";
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::~GenericLocalDownstreamLabel()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-local-downstream-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-outgoing-downstream-label";
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-outgoing-downstream-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GenericOutgoingDownstreamLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-outgoing-downstream-label"; yang_parent_name = "label-info";
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::~GenericOutgoingDownstreamLabel()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-outgoing-downstream-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-merge-point-label";
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-merge-point-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GenericMergePointLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-merge-point-label"; yang_parent_name = "label-info";
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::~GenericMergePointLabel()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-merge-point-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-outgoing-upstream-label";
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-outgoing-upstream-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GenericOutgoingUpstreamLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-outgoing-upstream-label"; yang_parent_name = "label-info";
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::~GenericOutgoingUpstreamLabel()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-outgoing-upstream-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-local-upstream-label";
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-local-upstream-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GenericLocalUpstreamLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-local-upstream-label"; yang_parent_name = "label-info";
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::~GenericLocalUpstreamLabel()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-local-upstream-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-recovery-label";
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-recovery-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::get_children()
{
    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GenericRecoveryLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-recovery-label"; yang_parent_name = "label-info";
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::~GenericRecoveryLabel()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-recovery-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::LabelInfo()
    :
    	is_valid{YType::boolean, "is-valid"},
	 local_downstream_label{YType::uint32, "local-downstream-label"},
	 local_upstream_label{YType::uint32, "local-upstream-label"},
	 lsp_wrap_label{YType::uint32, "lsp-wrap-label"},
	 merge_point_label{YType::uint32, "merge-point-label"},
	 outgoing_downstream_label{YType::uint32, "outgoing-downstream-label"},
	 outgoing_upstream_label{YType::uint32, "outgoing-upstream-label"},
	 recovery_label{YType::uint32, "recovery-label"}
    	,
    generic_local_downstream_label(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel>())
	,generic_local_upstream_label(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel>())
	,generic_merge_point_label(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel>())
	,generic_outgoing_downstream_label(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel>())
	,generic_outgoing_upstream_label(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel>())
	,generic_recovery_label(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel>())
{
    generic_local_downstream_label->parent = this;
    children["generic-local-downstream-label"] = generic_local_downstream_label.get();

    generic_local_upstream_label->parent = this;
    children["generic-local-upstream-label"] = generic_local_upstream_label.get();

    generic_merge_point_label->parent = this;
    children["generic-merge-point-label"] = generic_merge_point_label.get();

    generic_outgoing_downstream_label->parent = this;
    children["generic-outgoing-downstream-label"] = generic_outgoing_downstream_label.get();

    generic_outgoing_upstream_label->parent = this;
    children["generic-outgoing-upstream-label"] = generic_outgoing_upstream_label.get();

    generic_recovery_label->parent = this;
    children["generic-recovery-label"] = generic_recovery_label.get();

    yang_name = "label-info"; yang_parent_name = "rsb-detailed";
}

RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::~LabelInfo()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::has_data() const
{
    return is_valid.is_set
	|| local_downstream_label.is_set
	|| local_upstream_label.is_set
	|| lsp_wrap_label.is_set
	|| merge_point_label.is_set
	|| outgoing_downstream_label.is_set
	|| outgoing_upstream_label.is_set
	|| recovery_label.is_set
	|| (generic_local_downstream_label !=  nullptr && generic_local_downstream_label->has_data())
	|| (generic_local_upstream_label !=  nullptr && generic_local_upstream_label->has_data())
	|| (generic_merge_point_label !=  nullptr && generic_merge_point_label->has_data())
	|| (generic_outgoing_downstream_label !=  nullptr && generic_outgoing_downstream_label->has_data())
	|| (generic_outgoing_upstream_label !=  nullptr && generic_outgoing_upstream_label->has_data())
	|| (generic_recovery_label !=  nullptr && generic_recovery_label->has_data());
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::has_operation() const
{
    return is_set(operation)
	|| is_set(is_valid.operation)
	|| is_set(local_downstream_label.operation)
	|| is_set(local_upstream_label.operation)
	|| is_set(lsp_wrap_label.operation)
	|| is_set(merge_point_label.operation)
	|| is_set(outgoing_downstream_label.operation)
	|| is_set(outgoing_upstream_label.operation)
	|| is_set(recovery_label.operation)
	|| (generic_local_downstream_label !=  nullptr && generic_local_downstream_label->has_operation())
	|| (generic_local_upstream_label !=  nullptr && generic_local_upstream_label->has_operation())
	|| (generic_merge_point_label !=  nullptr && generic_merge_point_label->has_operation())
	|| (generic_outgoing_downstream_label !=  nullptr && generic_outgoing_downstream_label->has_operation())
	|| (generic_outgoing_upstream_label !=  nullptr && generic_outgoing_upstream_label->has_operation())
	|| (generic_recovery_label !=  nullptr && generic_recovery_label->has_operation());
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "label-info";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_valid.is_set || is_set(is_valid.operation)) leaf_name_data.push_back(is_valid.get_name_leafdata());
    if (local_downstream_label.is_set || is_set(local_downstream_label.operation)) leaf_name_data.push_back(local_downstream_label.get_name_leafdata());
    if (local_upstream_label.is_set || is_set(local_upstream_label.operation)) leaf_name_data.push_back(local_upstream_label.get_name_leafdata());
    if (lsp_wrap_label.is_set || is_set(lsp_wrap_label.operation)) leaf_name_data.push_back(lsp_wrap_label.get_name_leafdata());
    if (merge_point_label.is_set || is_set(merge_point_label.operation)) leaf_name_data.push_back(merge_point_label.get_name_leafdata());
    if (outgoing_downstream_label.is_set || is_set(outgoing_downstream_label.operation)) leaf_name_data.push_back(outgoing_downstream_label.get_name_leafdata());
    if (outgoing_upstream_label.is_set || is_set(outgoing_upstream_label.operation)) leaf_name_data.push_back(outgoing_upstream_label.get_name_leafdata());
    if (recovery_label.is_set || is_set(recovery_label.operation)) leaf_name_data.push_back(recovery_label.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generic-local-downstream-label")
    {
        if(generic_local_downstream_label != nullptr)
        {
            children["generic-local-downstream-label"] = generic_local_downstream_label.get();
        }
        else
        {
            generic_local_downstream_label = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel>();
            generic_local_downstream_label->parent = this;
            children["generic-local-downstream-label"] = generic_local_downstream_label.get();
        }
        return children.at("generic-local-downstream-label");
    }

    if(child_yang_name == "generic-local-upstream-label")
    {
        if(generic_local_upstream_label != nullptr)
        {
            children["generic-local-upstream-label"] = generic_local_upstream_label.get();
        }
        else
        {
            generic_local_upstream_label = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel>();
            generic_local_upstream_label->parent = this;
            children["generic-local-upstream-label"] = generic_local_upstream_label.get();
        }
        return children.at("generic-local-upstream-label");
    }

    if(child_yang_name == "generic-merge-point-label")
    {
        if(generic_merge_point_label != nullptr)
        {
            children["generic-merge-point-label"] = generic_merge_point_label.get();
        }
        else
        {
            generic_merge_point_label = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel>();
            generic_merge_point_label->parent = this;
            children["generic-merge-point-label"] = generic_merge_point_label.get();
        }
        return children.at("generic-merge-point-label");
    }

    if(child_yang_name == "generic-outgoing-downstream-label")
    {
        if(generic_outgoing_downstream_label != nullptr)
        {
            children["generic-outgoing-downstream-label"] = generic_outgoing_downstream_label.get();
        }
        else
        {
            generic_outgoing_downstream_label = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel>();
            generic_outgoing_downstream_label->parent = this;
            children["generic-outgoing-downstream-label"] = generic_outgoing_downstream_label.get();
        }
        return children.at("generic-outgoing-downstream-label");
    }

    if(child_yang_name == "generic-outgoing-upstream-label")
    {
        if(generic_outgoing_upstream_label != nullptr)
        {
            children["generic-outgoing-upstream-label"] = generic_outgoing_upstream_label.get();
        }
        else
        {
            generic_outgoing_upstream_label = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel>();
            generic_outgoing_upstream_label->parent = this;
            children["generic-outgoing-upstream-label"] = generic_outgoing_upstream_label.get();
        }
        return children.at("generic-outgoing-upstream-label");
    }

    if(child_yang_name == "generic-recovery-label")
    {
        if(generic_recovery_label != nullptr)
        {
            children["generic-recovery-label"] = generic_recovery_label.get();
        }
        else
        {
            generic_recovery_label = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel>();
            generic_recovery_label->parent = this;
            children["generic-recovery-label"] = generic_recovery_label.get();
        }
        return children.at("generic-recovery-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::get_children()
{
    if(children.find("generic-local-downstream-label") == children.end())
    {
        if(generic_local_downstream_label != nullptr)
        {
            children["generic-local-downstream-label"] = generic_local_downstream_label.get();
        }
    }

    if(children.find("generic-local-upstream-label") == children.end())
    {
        if(generic_local_upstream_label != nullptr)
        {
            children["generic-local-upstream-label"] = generic_local_upstream_label.get();
        }
    }

    if(children.find("generic-merge-point-label") == children.end())
    {
        if(generic_merge_point_label != nullptr)
        {
            children["generic-merge-point-label"] = generic_merge_point_label.get();
        }
    }

    if(children.find("generic-outgoing-downstream-label") == children.end())
    {
        if(generic_outgoing_downstream_label != nullptr)
        {
            children["generic-outgoing-downstream-label"] = generic_outgoing_downstream_label.get();
        }
    }

    if(children.find("generic-outgoing-upstream-label") == children.end())
    {
        if(generic_outgoing_upstream_label != nullptr)
        {
            children["generic-outgoing-upstream-label"] = generic_outgoing_upstream_label.get();
        }
    }

    if(children.find("generic-recovery-label") == children.end())
    {
        if(generic_recovery_label != nullptr)
        {
            children["generic-recovery-label"] = generic_recovery_label.get();
        }
    }

    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-valid")
    {
        is_valid = value;
    }
    if(value_path == "local-downstream-label")
    {
        local_downstream_label = value;
    }
    if(value_path == "local-upstream-label")
    {
        local_upstream_label = value;
    }
    if(value_path == "lsp-wrap-label")
    {
        lsp_wrap_label = value;
    }
    if(value_path == "merge-point-label")
    {
        merge_point_label = value;
    }
    if(value_path == "outgoing-downstream-label")
    {
        outgoing_downstream_label = value;
    }
    if(value_path == "outgoing-upstream-label")
    {
        outgoing_upstream_label = value;
    }
    if(value_path == "recovery-label")
    {
        recovery_label = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetailed::RsbDetailed()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 input_adjusted_interface{YType::str, "input-adjusted-interface"},
	 input_physical_interface{YType::str, "input-physical-interface"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 protocol{YType::int32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::int32, "source-port"},
	 sub_group_id{YType::int32, "sub-group-id"},
	 sub_group_origin{YType::str, "sub-group-origin"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    expiry_time(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::ExpiryTime>())
	,filter(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Filter>())
	,flow_spec(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::FlowSpec>())
	,generic_flow_spec(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec>())
	,header(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Header>())
	,hop(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Hop>())
	,label_info(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo>())
	,policy_flags(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::PolicyFlags>())
	,policy_query_flags(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::PolicyQueryFlags>())
	,policy_sources(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::PolicySources>())
	,rsb_flags(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::RsbFlags>())
	,s2l_sub_lsp(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::S2LSubLsp>())
	,session(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Session>())
	,style(std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Style>())
{
    expiry_time->parent = this;
    children["expiry-time"] = expiry_time.get();

    filter->parent = this;
    children["filter"] = filter.get();

    flow_spec->parent = this;
    children["flow-spec"] = flow_spec.get();

    generic_flow_spec->parent = this;
    children["generic-flow-spec"] = generic_flow_spec.get();

    header->parent = this;
    children["header"] = header.get();

    hop->parent = this;
    children["hop"] = hop.get();

    label_info->parent = this;
    children["label-info"] = label_info.get();

    policy_flags->parent = this;
    children["policy-flags"] = policy_flags.get();

    policy_query_flags->parent = this;
    children["policy-query-flags"] = policy_query_flags.get();

    policy_sources->parent = this;
    children["policy-sources"] = policy_sources.get();

    rsb_flags->parent = this;
    children["rsb-flags"] = rsb_flags.get();

    s2l_sub_lsp->parent = this;
    children["s2l-sub-lsp"] = s2l_sub_lsp.get();

    session->parent = this;
    children["session"] = session.get();

    style->parent = this;
    children["style"] = style.get();

    yang_name = "rsb-detailed"; yang_parent_name = "rsb-detaileds";
}

RsvpStandby::RsbDetaileds::RsbDetailed::~RsbDetailed()
{
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| extended_tunnel_id.is_set
	|| input_adjusted_interface.is_set
	|| input_physical_interface.is_set
	|| p2mp_id.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set
	|| sub_group_origin.is_set
	|| vrf_name.is_set
	|| (expiry_time !=  nullptr && expiry_time->has_data())
	|| (filter !=  nullptr && filter->has_data())
	|| (flow_spec !=  nullptr && flow_spec->has_data())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_data())
	|| (header !=  nullptr && header->has_data())
	|| (hop !=  nullptr && hop->has_data())
	|| (label_info !=  nullptr && label_info->has_data())
	|| (policy_flags !=  nullptr && policy_flags->has_data())
	|| (policy_query_flags !=  nullptr && policy_query_flags->has_data())
	|| (policy_sources !=  nullptr && policy_sources->has_data())
	|| (rsb_flags !=  nullptr && rsb_flags->has_data())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_data())
	|| (session !=  nullptr && session->has_data())
	|| (style !=  nullptr && style->has_data());
}

bool RsvpStandby::RsbDetaileds::RsbDetailed::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(input_adjusted_interface.operation)
	|| is_set(input_physical_interface.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(sub_group_origin.operation)
	|| is_set(vrf_name.operation)
	|| (expiry_time !=  nullptr && expiry_time->has_operation())
	|| (filter !=  nullptr && filter->has_operation())
	|| (flow_spec !=  nullptr && flow_spec->has_operation())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_operation())
	|| (header !=  nullptr && header->has_operation())
	|| (hop !=  nullptr && hop->has_operation())
	|| (label_info !=  nullptr && label_info->has_operation())
	|| (policy_flags !=  nullptr && policy_flags->has_operation())
	|| (policy_query_flags !=  nullptr && policy_query_flags->has_operation())
	|| (policy_sources !=  nullptr && policy_sources->has_operation())
	|| (rsb_flags !=  nullptr && rsb_flags->has_operation())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_operation())
	|| (session !=  nullptr && session->has_operation())
	|| (style !=  nullptr && style->has_operation());
}

std::string RsvpStandby::RsbDetaileds::RsbDetailed::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsb-detailed";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::RsbDetailed::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (input_adjusted_interface.is_set || is_set(input_adjusted_interface.operation)) leaf_name_data.push_back(input_adjusted_interface.get_name_leafdata());
    if (input_physical_interface.is_set || is_set(input_physical_interface.operation)) leaf_name_data.push_back(input_physical_interface.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (sub_group_origin.is_set || is_set(sub_group_origin.operation)) leaf_name_data.push_back(sub_group_origin.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::RsbDetailed::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "expiry-time")
    {
        if(expiry_time != nullptr)
        {
            children["expiry-time"] = expiry_time.get();
        }
        else
        {
            expiry_time = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::ExpiryTime>();
            expiry_time->parent = this;
            children["expiry-time"] = expiry_time.get();
        }
        return children.at("expiry-time");
    }

    if(child_yang_name == "filter")
    {
        if(filter != nullptr)
        {
            children["filter"] = filter.get();
        }
        else
        {
            filter = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Filter>();
            filter->parent = this;
            children["filter"] = filter.get();
        }
        return children.at("filter");
    }

    if(child_yang_name == "flow-spec")
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
        else
        {
            flow_spec = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::FlowSpec>();
            flow_spec->parent = this;
            children["flow-spec"] = flow_spec.get();
        }
        return children.at("flow-spec");
    }

    if(child_yang_name == "generic-flow-spec")
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        else
        {
            generic_flow_spec = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::GenericFlowSpec>();
            generic_flow_spec->parent = this;
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        return children.at("generic-flow-spec");
    }

    if(child_yang_name == "header")
    {
        if(header != nullptr)
        {
            children["header"] = header.get();
        }
        else
        {
            header = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Header>();
            header->parent = this;
            children["header"] = header.get();
        }
        return children.at("header");
    }

    if(child_yang_name == "hop")
    {
        if(hop != nullptr)
        {
            children["hop"] = hop.get();
        }
        else
        {
            hop = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Hop>();
            hop->parent = this;
            children["hop"] = hop.get();
        }
        return children.at("hop");
    }

    if(child_yang_name == "label-info")
    {
        if(label_info != nullptr)
        {
            children["label-info"] = label_info.get();
        }
        else
        {
            label_info = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::LabelInfo>();
            label_info->parent = this;
            children["label-info"] = label_info.get();
        }
        return children.at("label-info");
    }

    if(child_yang_name == "policy-flags")
    {
        if(policy_flags != nullptr)
        {
            children["policy-flags"] = policy_flags.get();
        }
        else
        {
            policy_flags = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::PolicyFlags>();
            policy_flags->parent = this;
            children["policy-flags"] = policy_flags.get();
        }
        return children.at("policy-flags");
    }

    if(child_yang_name == "policy-query-flags")
    {
        if(policy_query_flags != nullptr)
        {
            children["policy-query-flags"] = policy_query_flags.get();
        }
        else
        {
            policy_query_flags = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::PolicyQueryFlags>();
            policy_query_flags->parent = this;
            children["policy-query-flags"] = policy_query_flags.get();
        }
        return children.at("policy-query-flags");
    }

    if(child_yang_name == "policy-sources")
    {
        if(policy_sources != nullptr)
        {
            children["policy-sources"] = policy_sources.get();
        }
        else
        {
            policy_sources = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::PolicySources>();
            policy_sources->parent = this;
            children["policy-sources"] = policy_sources.get();
        }
        return children.at("policy-sources");
    }

    if(child_yang_name == "rsb-flags")
    {
        if(rsb_flags != nullptr)
        {
            children["rsb-flags"] = rsb_flags.get();
        }
        else
        {
            rsb_flags = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::RsbFlags>();
            rsb_flags->parent = this;
            children["rsb-flags"] = rsb_flags.get();
        }
        return children.at("rsb-flags");
    }

    if(child_yang_name == "s2l-sub-lsp")
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        else
        {
            s2l_sub_lsp = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::S2LSubLsp>();
            s2l_sub_lsp->parent = this;
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        return children.at("s2l-sub-lsp");
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    if(child_yang_name == "style")
    {
        if(style != nullptr)
        {
            children["style"] = style.get();
        }
        else
        {
            style = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed::Style>();
            style->parent = this;
            children["style"] = style.get();
        }
        return children.at("style");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::RsbDetailed::get_children()
{
    if(children.find("expiry-time") == children.end())
    {
        if(expiry_time != nullptr)
        {
            children["expiry-time"] = expiry_time.get();
        }
    }

    if(children.find("filter") == children.end())
    {
        if(filter != nullptr)
        {
            children["filter"] = filter.get();
        }
    }

    if(children.find("flow-spec") == children.end())
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
    }

    if(children.find("generic-flow-spec") == children.end())
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
    }

    if(children.find("header") == children.end())
    {
        if(header != nullptr)
        {
            children["header"] = header.get();
        }
    }

    if(children.find("hop") == children.end())
    {
        if(hop != nullptr)
        {
            children["hop"] = hop.get();
        }
    }

    if(children.find("label-info") == children.end())
    {
        if(label_info != nullptr)
        {
            children["label-info"] = label_info.get();
        }
    }

    if(children.find("policy-flags") == children.end())
    {
        if(policy_flags != nullptr)
        {
            children["policy-flags"] = policy_flags.get();
        }
    }

    if(children.find("policy-query-flags") == children.end())
    {
        if(policy_query_flags != nullptr)
        {
            children["policy-query-flags"] = policy_query_flags.get();
        }
    }

    if(children.find("policy-sources") == children.end())
    {
        if(policy_sources != nullptr)
        {
            children["policy-sources"] = policy_sources.get();
        }
    }

    if(children.find("rsb-flags") == children.end())
    {
        if(rsb_flags != nullptr)
        {
            children["rsb-flags"] = rsb_flags.get();
        }
    }

    if(children.find("s2l-sub-lsp") == children.end())
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
    }

    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    if(children.find("style") == children.end())
    {
        if(style != nullptr)
        {
            children["style"] = style.get();
        }
    }

    return children;
}

void RsvpStandby::RsbDetaileds::RsbDetailed::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "input-adjusted-interface")
    {
        input_adjusted_interface = value;
    }
    if(value_path == "input-physical-interface")
    {
        input_physical_interface = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "sub-group-origin")
    {
        sub_group_origin = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

RsvpStandby::RsbDetaileds::RsbDetaileds()
{
    yang_name = "rsb-detaileds"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::RsbDetaileds::~RsbDetaileds()
{
}

bool RsvpStandby::RsbDetaileds::has_data() const
{
    for (std::size_t index=0; index<rsb_detailed.size(); index++)
    {
        if(rsb_detailed[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::RsbDetaileds::has_operation() const
{
    for (std::size_t index=0; index<rsb_detailed.size(); index++)
    {
        if(rsb_detailed[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::RsbDetaileds::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsb-detaileds";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbDetaileds::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbDetaileds::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsb-detailed")
    {
        for(auto const & c : rsb_detailed)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::RsbDetaileds::RsbDetailed>();
        c->parent = this;
        rsb_detailed.push_back(std::move(c));
        children[segment_path] = rsb_detailed.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbDetaileds::get_children()
{
    for (auto const & c : rsb_detailed)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::RsbDetaileds::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface::PreStandardDsteInterface()
    :
    	allocated_bit_rate{YType::uint64, "allocated-bit-rate"},
	 is_max_bandwidth_absolute{YType::boolean, "is-max-bandwidth-absolute"},
	 is_max_subpool_bandwidth_absolute{YType::boolean, "is-max-subpool-bandwidth-absolute"},
	 max_bandwidth{YType::uint64, "max-bandwidth"},
	 max_flow_bandwidth{YType::uint64, "max-flow-bandwidth"},
	 max_subpool_bandwidth{YType::uint64, "max-subpool-bandwidth"}
{
    yang_name = "pre-standard-dste-interface"; yang_parent_name = "bandwidth-information";
}

RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface::~PreStandardDsteInterface()
{
}

bool RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface::has_data() const
{
    return allocated_bit_rate.is_set
	|| is_max_bandwidth_absolute.is_set
	|| is_max_subpool_bandwidth_absolute.is_set
	|| max_bandwidth.is_set
	|| max_flow_bandwidth.is_set
	|| max_subpool_bandwidth.is_set;
}

bool RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(allocated_bit_rate.operation)
	|| is_set(is_max_bandwidth_absolute.operation)
	|| is_set(is_max_subpool_bandwidth_absolute.operation)
	|| is_set(max_bandwidth.operation)
	|| is_set(max_flow_bandwidth.operation)
	|| is_set(max_subpool_bandwidth.operation);
}

std::string RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pre-standard-dste-interface";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (allocated_bit_rate.is_set || is_set(allocated_bit_rate.operation)) leaf_name_data.push_back(allocated_bit_rate.get_name_leafdata());
    if (is_max_bandwidth_absolute.is_set || is_set(is_max_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bandwidth_absolute.get_name_leafdata());
    if (is_max_subpool_bandwidth_absolute.is_set || is_set(is_max_subpool_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_subpool_bandwidth_absolute.get_name_leafdata());
    if (max_bandwidth.is_set || is_set(max_bandwidth.operation)) leaf_name_data.push_back(max_bandwidth.get_name_leafdata());
    if (max_flow_bandwidth.is_set || is_set(max_flow_bandwidth.operation)) leaf_name_data.push_back(max_flow_bandwidth.get_name_leafdata());
    if (max_subpool_bandwidth.is_set || is_set(max_subpool_bandwidth.operation)) leaf_name_data.push_back(max_subpool_bandwidth.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface::get_children()
{
    return children;
}

void RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "allocated-bit-rate")
    {
        allocated_bit_rate = value;
    }
    if(value_path == "is-max-bandwidth-absolute")
    {
        is_max_bandwidth_absolute = value;
    }
    if(value_path == "is-max-subpool-bandwidth-absolute")
    {
        is_max_subpool_bandwidth_absolute = value;
    }
    if(value_path == "max-bandwidth")
    {
        max_bandwidth = value;
    }
    if(value_path == "max-flow-bandwidth")
    {
        max_flow_bandwidth = value;
    }
    if(value_path == "max-subpool-bandwidth")
    {
        max_subpool_bandwidth = value;
    }
}

RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface::StandardDsteInterface()
    :
    	allocated_bit_rate{YType::uint64, "allocated-bit-rate"},
	 is_max_bandwidth_absolute{YType::boolean, "is-max-bandwidth-absolute"},
	 is_max_bc0_bandwidth_absolute{YType::boolean, "is-max-bc0-bandwidth-absolute"},
	 is_max_bc1_bandwidth_absolute{YType::boolean, "is-max-bc1-bandwidth-absolute"},
	 max_bandwidth{YType::uint64, "max-bandwidth"},
	 max_flow_bandwidth{YType::uint64, "max-flow-bandwidth"},
	 max_pool0_bandwidth{YType::uint64, "max-pool0-bandwidth"},
	 max_pool1_bandwidth{YType::uint64, "max-pool1-bandwidth"}
{
    yang_name = "standard-dste-interface"; yang_parent_name = "bandwidth-information";
}

RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface::~StandardDsteInterface()
{
}

bool RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface::has_data() const
{
    return allocated_bit_rate.is_set
	|| is_max_bandwidth_absolute.is_set
	|| is_max_bc0_bandwidth_absolute.is_set
	|| is_max_bc1_bandwidth_absolute.is_set
	|| max_bandwidth.is_set
	|| max_flow_bandwidth.is_set
	|| max_pool0_bandwidth.is_set
	|| max_pool1_bandwidth.is_set;
}

bool RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(allocated_bit_rate.operation)
	|| is_set(is_max_bandwidth_absolute.operation)
	|| is_set(is_max_bc0_bandwidth_absolute.operation)
	|| is_set(is_max_bc1_bandwidth_absolute.operation)
	|| is_set(max_bandwidth.operation)
	|| is_set(max_flow_bandwidth.operation)
	|| is_set(max_pool0_bandwidth.operation)
	|| is_set(max_pool1_bandwidth.operation);
}

std::string RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "standard-dste-interface";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (allocated_bit_rate.is_set || is_set(allocated_bit_rate.operation)) leaf_name_data.push_back(allocated_bit_rate.get_name_leafdata());
    if (is_max_bandwidth_absolute.is_set || is_set(is_max_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bandwidth_absolute.get_name_leafdata());
    if (is_max_bc0_bandwidth_absolute.is_set || is_set(is_max_bc0_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bc0_bandwidth_absolute.get_name_leafdata());
    if (is_max_bc1_bandwidth_absolute.is_set || is_set(is_max_bc1_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bc1_bandwidth_absolute.get_name_leafdata());
    if (max_bandwidth.is_set || is_set(max_bandwidth.operation)) leaf_name_data.push_back(max_bandwidth.get_name_leafdata());
    if (max_flow_bandwidth.is_set || is_set(max_flow_bandwidth.operation)) leaf_name_data.push_back(max_flow_bandwidth.get_name_leafdata());
    if (max_pool0_bandwidth.is_set || is_set(max_pool0_bandwidth.operation)) leaf_name_data.push_back(max_pool0_bandwidth.get_name_leafdata());
    if (max_pool1_bandwidth.is_set || is_set(max_pool1_bandwidth.operation)) leaf_name_data.push_back(max_pool1_bandwidth.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface::get_children()
{
    return children;
}

void RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "allocated-bit-rate")
    {
        allocated_bit_rate = value;
    }
    if(value_path == "is-max-bandwidth-absolute")
    {
        is_max_bandwidth_absolute = value;
    }
    if(value_path == "is-max-bc0-bandwidth-absolute")
    {
        is_max_bc0_bandwidth_absolute = value;
    }
    if(value_path == "is-max-bc1-bandwidth-absolute")
    {
        is_max_bc1_bandwidth_absolute = value;
    }
    if(value_path == "max-bandwidth")
    {
        max_bandwidth = value;
    }
    if(value_path == "max-flow-bandwidth")
    {
        max_flow_bandwidth = value;
    }
    if(value_path == "max-pool0-bandwidth")
    {
        max_pool0_bandwidth = value;
    }
    if(value_path == "max-pool1-bandwidth")
    {
        max_pool1_bandwidth = value;
    }
}

RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::BandwidthInformation()
    :
    	dste_mode{YType::enumeration, "dste-mode"}
    	,
    pre_standard_dste_interface(std::make_unique<RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface>())
	,standard_dste_interface(std::make_unique<RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface>())
{
    pre_standard_dste_interface->parent = this;
    children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();

    standard_dste_interface->parent = this;
    children["standard-dste-interface"] = standard_dste_interface.get();

    yang_name = "bandwidth-information"; yang_parent_name = "interface-summary";
}

RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::~BandwidthInformation()
{
}

bool RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::has_data() const
{
    return dste_mode.is_set
	|| (pre_standard_dste_interface !=  nullptr && pre_standard_dste_interface->has_data())
	|| (standard_dste_interface !=  nullptr && standard_dste_interface->has_data());
}

bool RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::has_operation() const
{
    return is_set(operation)
	|| is_set(dste_mode.operation)
	|| (pre_standard_dste_interface !=  nullptr && pre_standard_dste_interface->has_operation())
	|| (standard_dste_interface !=  nullptr && standard_dste_interface->has_operation());
}

std::string RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bandwidth-information";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (dste_mode.is_set || is_set(dste_mode.operation)) leaf_name_data.push_back(dste_mode.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "pre-standard-dste-interface")
    {
        if(pre_standard_dste_interface != nullptr)
        {
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
        else
        {
            pre_standard_dste_interface = std::make_unique<RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface>();
            pre_standard_dste_interface->parent = this;
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
        return children.at("pre-standard-dste-interface");
    }

    if(child_yang_name == "standard-dste-interface")
    {
        if(standard_dste_interface != nullptr)
        {
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
        else
        {
            standard_dste_interface = std::make_unique<RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface>();
            standard_dste_interface->parent = this;
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
        return children.at("standard-dste-interface");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::get_children()
{
    if(children.find("pre-standard-dste-interface") == children.end())
    {
        if(pre_standard_dste_interface != nullptr)
        {
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
    }

    if(children.find("standard-dste-interface") == children.end())
    {
        if(standard_dste_interface != nullptr)
        {
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
    }

    return children;
}

void RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "dste-mode")
    {
        dste_mode = value;
    }
}

RsvpStandby::InterfaceSummaries::InterfaceSummary::InterfaceSummary()
    :
    	interface_name{YType::str, "interface-name"},
	 interface_name_xr{YType::str, "interface-name-xr"},
	 paths_in{YType::uint32, "paths-in"},
	 paths_out{YType::uint32, "paths-out"},
	 reservations_in{YType::uint32, "reservations-in"},
	 reservations_out{YType::uint32, "reservations-out"}
    	,
    bandwidth_information(std::make_unique<RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation>())
{
    bandwidth_information->parent = this;
    children["bandwidth-information"] = bandwidth_information.get();

    yang_name = "interface-summary"; yang_parent_name = "interface-summaries";
}

RsvpStandby::InterfaceSummaries::InterfaceSummary::~InterfaceSummary()
{
}

bool RsvpStandby::InterfaceSummaries::InterfaceSummary::has_data() const
{
    return interface_name.is_set
	|| interface_name_xr.is_set
	|| paths_in.is_set
	|| paths_out.is_set
	|| reservations_in.is_set
	|| reservations_out.is_set
	|| (bandwidth_information !=  nullptr && bandwidth_information->has_data());
}

bool RsvpStandby::InterfaceSummaries::InterfaceSummary::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| is_set(interface_name_xr.operation)
	|| is_set(paths_in.operation)
	|| is_set(paths_out.operation)
	|| is_set(reservations_in.operation)
	|| is_set(reservations_out.operation)
	|| (bandwidth_information !=  nullptr && bandwidth_information->has_operation());
}

std::string RsvpStandby::InterfaceSummaries::InterfaceSummary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-summary" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceSummaries::InterfaceSummary::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-summaries/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (interface_name_xr.is_set || is_set(interface_name_xr.operation)) leaf_name_data.push_back(interface_name_xr.get_name_leafdata());
    if (paths_in.is_set || is_set(paths_in.operation)) leaf_name_data.push_back(paths_in.get_name_leafdata());
    if (paths_out.is_set || is_set(paths_out.operation)) leaf_name_data.push_back(paths_out.get_name_leafdata());
    if (reservations_in.is_set || is_set(reservations_in.operation)) leaf_name_data.push_back(reservations_in.get_name_leafdata());
    if (reservations_out.is_set || is_set(reservations_out.operation)) leaf_name_data.push_back(reservations_out.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceSummaries::InterfaceSummary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "bandwidth-information")
    {
        if(bandwidth_information != nullptr)
        {
            children["bandwidth-information"] = bandwidth_information.get();
        }
        else
        {
            bandwidth_information = std::make_unique<RsvpStandby::InterfaceSummaries::InterfaceSummary::BandwidthInformation>();
            bandwidth_information->parent = this;
            children["bandwidth-information"] = bandwidth_information.get();
        }
        return children.at("bandwidth-information");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceSummaries::InterfaceSummary::get_children()
{
    if(children.find("bandwidth-information") == children.end())
    {
        if(bandwidth_information != nullptr)
        {
            children["bandwidth-information"] = bandwidth_information.get();
        }
    }

    return children;
}

void RsvpStandby::InterfaceSummaries::InterfaceSummary::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "interface-name-xr")
    {
        interface_name_xr = value;
    }
    if(value_path == "paths-in")
    {
        paths_in = value;
    }
    if(value_path == "paths-out")
    {
        paths_out = value;
    }
    if(value_path == "reservations-in")
    {
        reservations_in = value;
    }
    if(value_path == "reservations-out")
    {
        reservations_out = value;
    }
}

RsvpStandby::InterfaceSummaries::InterfaceSummaries()
{
    yang_name = "interface-summaries"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::InterfaceSummaries::~InterfaceSummaries()
{
}

bool RsvpStandby::InterfaceSummaries::has_data() const
{
    for (std::size_t index=0; index<interface_summary.size(); index++)
    {
        if(interface_summary[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::InterfaceSummaries::has_operation() const
{
    for (std::size_t index=0; index<interface_summary.size(); index++)
    {
        if(interface_summary[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::InterfaceSummaries::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-summaries";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceSummaries::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceSummaries::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-summary")
    {
        for(auto const & c : interface_summary)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::InterfaceSummaries::InterfaceSummary>();
        c->parent = this;
        interface_summary.push_back(std::move(c));
        children[segment_path] = interface_summary.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceSummaries::get_children()
{
    for (auto const & c : interface_summary)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::InterfaceSummaries::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::HelloInstanceBriefs::HelloInstanceBrief::HelloInstanceBrief()
    :
    	destination_address{YType::str, "destination-address"},
	 source_address{YType::str, "source-address"},
	 destination_address_xr{YType::str, "destination-address-xr"},
	 hello_interface{YType::str, "hello-interface"},
	 instance_type{YType::enumeration, "instance-type"},
	 lost_communication_total{YType::uint16, "lost-communication-total"},
	 neighbor_hello_state{YType::enumeration, "neighbor-hello-state"},
	 source_address_xr{YType::str, "source-address-xr"}
{
    yang_name = "hello-instance-brief"; yang_parent_name = "hello-instance-briefs";
}

RsvpStandby::HelloInstanceBriefs::HelloInstanceBrief::~HelloInstanceBrief()
{
}

bool RsvpStandby::HelloInstanceBriefs::HelloInstanceBrief::has_data() const
{
    return destination_address.is_set
	|| source_address.is_set
	|| destination_address_xr.is_set
	|| hello_interface.is_set
	|| instance_type.is_set
	|| lost_communication_total.is_set
	|| neighbor_hello_state.is_set
	|| source_address_xr.is_set;
}

bool RsvpStandby::HelloInstanceBriefs::HelloInstanceBrief::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(source_address.operation)
	|| is_set(destination_address_xr.operation)
	|| is_set(hello_interface.operation)
	|| is_set(instance_type.operation)
	|| is_set(lost_communication_total.operation)
	|| is_set(neighbor_hello_state.operation)
	|| is_set(source_address_xr.operation);
}

std::string RsvpStandby::HelloInstanceBriefs::HelloInstanceBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hello-instance-brief" <<"[destination-address='" <<destination_address.get() <<"']" <<"[source-address='" <<source_address.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::HelloInstanceBriefs::HelloInstanceBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/hello-instance-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (destination_address_xr.is_set || is_set(destination_address_xr.operation)) leaf_name_data.push_back(destination_address_xr.get_name_leafdata());
    if (hello_interface.is_set || is_set(hello_interface.operation)) leaf_name_data.push_back(hello_interface.get_name_leafdata());
    if (instance_type.is_set || is_set(instance_type.operation)) leaf_name_data.push_back(instance_type.get_name_leafdata());
    if (lost_communication_total.is_set || is_set(lost_communication_total.operation)) leaf_name_data.push_back(lost_communication_total.get_name_leafdata());
    if (neighbor_hello_state.is_set || is_set(neighbor_hello_state.operation)) leaf_name_data.push_back(neighbor_hello_state.get_name_leafdata());
    if (source_address_xr.is_set || is_set(source_address_xr.operation)) leaf_name_data.push_back(source_address_xr.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::HelloInstanceBriefs::HelloInstanceBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::HelloInstanceBriefs::HelloInstanceBrief::get_children()
{
    return children;
}

void RsvpStandby::HelloInstanceBriefs::HelloInstanceBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "destination-address-xr")
    {
        destination_address_xr = value;
    }
    if(value_path == "hello-interface")
    {
        hello_interface = value;
    }
    if(value_path == "instance-type")
    {
        instance_type = value;
    }
    if(value_path == "lost-communication-total")
    {
        lost_communication_total = value;
    }
    if(value_path == "neighbor-hello-state")
    {
        neighbor_hello_state = value;
    }
    if(value_path == "source-address-xr")
    {
        source_address_xr = value;
    }
}

RsvpStandby::HelloInstanceBriefs::HelloInstanceBriefs()
{
    yang_name = "hello-instance-briefs"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::HelloInstanceBriefs::~HelloInstanceBriefs()
{
}

bool RsvpStandby::HelloInstanceBriefs::has_data() const
{
    for (std::size_t index=0; index<hello_instance_brief.size(); index++)
    {
        if(hello_instance_brief[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::HelloInstanceBriefs::has_operation() const
{
    for (std::size_t index=0; index<hello_instance_brief.size(); index++)
    {
        if(hello_instance_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::HelloInstanceBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hello-instance-briefs";

    return path_buffer.str();

}

EntityPath RsvpStandby::HelloInstanceBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::HelloInstanceBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "hello-instance-brief")
    {
        for(auto const & c : hello_instance_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::HelloInstanceBriefs::HelloInstanceBrief>();
        c->parent = this;
        hello_instance_brief.push_back(std::move(c));
        children[segment_path] = hello_instance_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::HelloInstanceBriefs::get_children()
{
    for (auto const & c : hello_instance_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::HelloInstanceBriefs::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::AuthenticationDetails::AuthenticationDetail::AuthCompact::AuthCompact()
    :
    	destination_address_xr{YType::str, "destination-address-xr"},
	 direction{YType::enumeration, "direction"},
	 key_id{YType::uint64, "key-id"},
	 key_id_valid{YType::uint32, "key-id-valid"},
	 key_source{YType::str, "key-source"},
	 key_type{YType::enumeration, "key-type"},
	 neighbor_address{YType::str, "neighbor-address"},
	 source_address_xr{YType::str, "source-address-xr"}
{
    yang_name = "auth-compact"; yang_parent_name = "authentication-detail";
}

RsvpStandby::AuthenticationDetails::AuthenticationDetail::AuthCompact::~AuthCompact()
{
}

bool RsvpStandby::AuthenticationDetails::AuthenticationDetail::AuthCompact::has_data() const
{
    return destination_address_xr.is_set
	|| direction.is_set
	|| key_id.is_set
	|| key_id_valid.is_set
	|| key_source.is_set
	|| key_type.is_set
	|| neighbor_address.is_set
	|| source_address_xr.is_set;
}

bool RsvpStandby::AuthenticationDetails::AuthenticationDetail::AuthCompact::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address_xr.operation)
	|| is_set(direction.operation)
	|| is_set(key_id.operation)
	|| is_set(key_id_valid.operation)
	|| is_set(key_source.operation)
	|| is_set(key_type.operation)
	|| is_set(neighbor_address.operation)
	|| is_set(source_address_xr.operation);
}

std::string RsvpStandby::AuthenticationDetails::AuthenticationDetail::AuthCompact::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "auth-compact";

    return path_buffer.str();

}

EntityPath RsvpStandby::AuthenticationDetails::AuthenticationDetail::AuthCompact::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address_xr.is_set || is_set(destination_address_xr.operation)) leaf_name_data.push_back(destination_address_xr.get_name_leafdata());
    if (direction.is_set || is_set(direction.operation)) leaf_name_data.push_back(direction.get_name_leafdata());
    if (key_id.is_set || is_set(key_id.operation)) leaf_name_data.push_back(key_id.get_name_leafdata());
    if (key_id_valid.is_set || is_set(key_id_valid.operation)) leaf_name_data.push_back(key_id_valid.get_name_leafdata());
    if (key_source.is_set || is_set(key_source.operation)) leaf_name_data.push_back(key_source.get_name_leafdata());
    if (key_type.is_set || is_set(key_type.operation)) leaf_name_data.push_back(key_type.get_name_leafdata());
    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (source_address_xr.is_set || is_set(source_address_xr.operation)) leaf_name_data.push_back(source_address_xr.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::AuthenticationDetails::AuthenticationDetail::AuthCompact::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::AuthenticationDetails::AuthenticationDetail::AuthCompact::get_children()
{
    return children;
}

void RsvpStandby::AuthenticationDetails::AuthenticationDetail::AuthCompact::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address-xr")
    {
        destination_address_xr = value;
    }
    if(value_path == "direction")
    {
        direction = value;
    }
    if(value_path == "key-id")
    {
        key_id = value;
    }
    if(value_path == "key-id-valid")
    {
        key_id_valid = value;
    }
    if(value_path == "key-source")
    {
        key_source = value;
    }
    if(value_path == "key-type")
    {
        key_type = value;
    }
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "source-address-xr")
    {
        source_address_xr = value;
    }
}

RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters::Counters()
    :
    	authentication_challenge_responses_sent{YType::uint32, "authentication-challenge-responses-sent"},
	 authentication_failures{YType::uint32, "authentication-failures"},
	 authentication_send_challenges_received{YType::uint32, "authentication-send-challenges-received"},
	 authentication_sent{YType::uint32, "authentication-sent"}
{
    yang_name = "counters"; yang_parent_name = "send-info";
}

RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters::~Counters()
{
}

bool RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters::has_data() const
{
    return authentication_challenge_responses_sent.is_set
	|| authentication_failures.is_set
	|| authentication_send_challenges_received.is_set
	|| authentication_sent.is_set;
}

bool RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters::has_operation() const
{
    return is_set(operation)
	|| is_set(authentication_challenge_responses_sent.operation)
	|| is_set(authentication_failures.operation)
	|| is_set(authentication_send_challenges_received.operation)
	|| is_set(authentication_sent.operation);
}

std::string RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "counters";

    return path_buffer.str();

}

EntityPath RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (authentication_challenge_responses_sent.is_set || is_set(authentication_challenge_responses_sent.operation)) leaf_name_data.push_back(authentication_challenge_responses_sent.get_name_leafdata());
    if (authentication_failures.is_set || is_set(authentication_failures.operation)) leaf_name_data.push_back(authentication_failures.get_name_leafdata());
    if (authentication_send_challenges_received.is_set || is_set(authentication_send_challenges_received.operation)) leaf_name_data.push_back(authentication_send_challenges_received.get_name_leafdata());
    if (authentication_sent.is_set || is_set(authentication_sent.operation)) leaf_name_data.push_back(authentication_sent.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters::get_children()
{
    return children;
}

void RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "authentication-challenge-responses-sent")
    {
        authentication_challenge_responses_sent = value;
    }
    if(value_path == "authentication-failures")
    {
        authentication_failures = value;
    }
    if(value_path == "authentication-send-challenges-received")
    {
        authentication_send_challenges_received = value;
    }
    if(value_path == "authentication-sent")
    {
        authentication_sent = value;
    }
}

RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::SendInfo()
    :
    	sequence{YType::uint64, "sequence"}
    	,
    counters(std::make_unique<RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters>())
{
    counters->parent = this;
    children["counters"] = counters.get();

    yang_name = "send-info"; yang_parent_name = "direction-info";
}

RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::~SendInfo()
{
}

bool RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::has_data() const
{
    return sequence.is_set
	|| (counters !=  nullptr && counters->has_data());
}

bool RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::has_operation() const
{
    return is_set(operation)
	|| is_set(sequence.operation)
	|| (counters !=  nullptr && counters->has_operation());
}

std::string RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "send-info";

    return path_buffer.str();

}

EntityPath RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (sequence.is_set || is_set(sequence.operation)) leaf_name_data.push_back(sequence.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "counters")
    {
        if(counters != nullptr)
        {
            children["counters"] = counters.get();
        }
        else
        {
            counters = std::make_unique<RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters>();
            counters->parent = this;
            children["counters"] = counters.get();
        }
        return children.at("counters");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::get_children()
{
    if(children.find("counters") == children.end())
    {
        if(counters != nullptr)
        {
            children["counters"] = counters.get();
        }
    }

    return children;
}

void RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "sequence")
    {
        sequence = value;
    }
}

RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters::Counters()
    :
    	authentication_received_bad_digest{YType::uint32, "authentication-received-bad-digest"},
	 authentication_received_bad_message_format{YType::uint32, "authentication-received-bad-message-format"},
	 authentication_received_challenge_response{YType::uint32, "authentication-received-challenge-response"},
	 authentication_received_challenge_timeouts{YType::uint32, "authentication-received-challenge-timeouts"},
	 authentication_received_challenges_resent{YType::uint32, "authentication-received-challenges-resent"},
	 authentication_received_challenges_response_duplicate{YType::uint32, "authentication-received-challenges-response-duplicate"},
	 authentication_received_challenges_sent{YType::uint32, "authentication-received-challenges-sent"},
	 authentication_received_during_challenge{YType::uint32, "authentication-received-during-challenge"},
	 authentication_received_incomplete{YType::uint32, "authentication-received-incomplete"},
	 authentication_received_no_integrity{YType::uint32, "authentication-received-no-integrity"},
	 authentication_received_response_late{YType::uint32, "authentication-received-response-late"},
	 authentication_received_sequence_number_duplicate{YType::uint32, "authentication-received-sequence-number-duplicate"},
	 authentication_received_sequence_number_outof_range{YType::uint32, "authentication-received-sequence-number-outof-range"},
	 authentication_received_valid_messages{YType::uint32, "authentication-received-valid-messages"},
	 authentication_received_wrong_challenges_response{YType::uint32, "authentication-received-wrong-challenges-response"},
	 authentication_received_wrong_digest_type{YType::uint32, "authentication-received-wrong-digest-type"}
{
    yang_name = "counters"; yang_parent_name = "receive-info";
}

RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters::~Counters()
{
}

bool RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters::has_data() const
{
    return authentication_received_bad_digest.is_set
	|| authentication_received_bad_message_format.is_set
	|| authentication_received_challenge_response.is_set
	|| authentication_received_challenge_timeouts.is_set
	|| authentication_received_challenges_resent.is_set
	|| authentication_received_challenges_response_duplicate.is_set
	|| authentication_received_challenges_sent.is_set
	|| authentication_received_during_challenge.is_set
	|| authentication_received_incomplete.is_set
	|| authentication_received_no_integrity.is_set
	|| authentication_received_response_late.is_set
	|| authentication_received_sequence_number_duplicate.is_set
	|| authentication_received_sequence_number_outof_range.is_set
	|| authentication_received_valid_messages.is_set
	|| authentication_received_wrong_challenges_response.is_set
	|| authentication_received_wrong_digest_type.is_set;
}

bool RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters::has_operation() const
{
    return is_set(operation)
	|| is_set(authentication_received_bad_digest.operation)
	|| is_set(authentication_received_bad_message_format.operation)
	|| is_set(authentication_received_challenge_response.operation)
	|| is_set(authentication_received_challenge_timeouts.operation)
	|| is_set(authentication_received_challenges_resent.operation)
	|| is_set(authentication_received_challenges_response_duplicate.operation)
	|| is_set(authentication_received_challenges_sent.operation)
	|| is_set(authentication_received_during_challenge.operation)
	|| is_set(authentication_received_incomplete.operation)
	|| is_set(authentication_received_no_integrity.operation)
	|| is_set(authentication_received_response_late.operation)
	|| is_set(authentication_received_sequence_number_duplicate.operation)
	|| is_set(authentication_received_sequence_number_outof_range.operation)
	|| is_set(authentication_received_valid_messages.operation)
	|| is_set(authentication_received_wrong_challenges_response.operation)
	|| is_set(authentication_received_wrong_digest_type.operation);
}

std::string RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "counters";

    return path_buffer.str();

}

EntityPath RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (authentication_received_bad_digest.is_set || is_set(authentication_received_bad_digest.operation)) leaf_name_data.push_back(authentication_received_bad_digest.get_name_leafdata());
    if (authentication_received_bad_message_format.is_set || is_set(authentication_received_bad_message_format.operation)) leaf_name_data.push_back(authentication_received_bad_message_format.get_name_leafdata());
    if (authentication_received_challenge_response.is_set || is_set(authentication_received_challenge_response.operation)) leaf_name_data.push_back(authentication_received_challenge_response.get_name_leafdata());
    if (authentication_received_challenge_timeouts.is_set || is_set(authentication_received_challenge_timeouts.operation)) leaf_name_data.push_back(authentication_received_challenge_timeouts.get_name_leafdata());
    if (authentication_received_challenges_resent.is_set || is_set(authentication_received_challenges_resent.operation)) leaf_name_data.push_back(authentication_received_challenges_resent.get_name_leafdata());
    if (authentication_received_challenges_response_duplicate.is_set || is_set(authentication_received_challenges_response_duplicate.operation)) leaf_name_data.push_back(authentication_received_challenges_response_duplicate.get_name_leafdata());
    if (authentication_received_challenges_sent.is_set || is_set(authentication_received_challenges_sent.operation)) leaf_name_data.push_back(authentication_received_challenges_sent.get_name_leafdata());
    if (authentication_received_during_challenge.is_set || is_set(authentication_received_during_challenge.operation)) leaf_name_data.push_back(authentication_received_during_challenge.get_name_leafdata());
    if (authentication_received_incomplete.is_set || is_set(authentication_received_incomplete.operation)) leaf_name_data.push_back(authentication_received_incomplete.get_name_leafdata());
    if (authentication_received_no_integrity.is_set || is_set(authentication_received_no_integrity.operation)) leaf_name_data.push_back(authentication_received_no_integrity.get_name_leafdata());
    if (authentication_received_response_late.is_set || is_set(authentication_received_response_late.operation)) leaf_name_data.push_back(authentication_received_response_late.get_name_leafdata());
    if (authentication_received_sequence_number_duplicate.is_set || is_set(authentication_received_sequence_number_duplicate.operation)) leaf_name_data.push_back(authentication_received_sequence_number_duplicate.get_name_leafdata());
    if (authentication_received_sequence_number_outof_range.is_set || is_set(authentication_received_sequence_number_outof_range.operation)) leaf_name_data.push_back(authentication_received_sequence_number_outof_range.get_name_leafdata());
    if (authentication_received_valid_messages.is_set || is_set(authentication_received_valid_messages.operation)) leaf_name_data.push_back(authentication_received_valid_messages.get_name_leafdata());
    if (authentication_received_wrong_challenges_response.is_set || is_set(authentication_received_wrong_challenges_response.operation)) leaf_name_data.push_back(authentication_received_wrong_challenges_response.get_name_leafdata());
    if (authentication_received_wrong_digest_type.is_set || is_set(authentication_received_wrong_digest_type.operation)) leaf_name_data.push_back(authentication_received_wrong_digest_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters::get_children()
{
    return children;
}

void RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "authentication-received-bad-digest")
    {
        authentication_received_bad_digest = value;
    }
    if(value_path == "authentication-received-bad-message-format")
    {
        authentication_received_bad_message_format = value;
    }
    if(value_path == "authentication-received-challenge-response")
    {
        authentication_received_challenge_response = value;
    }
    if(value_path == "authentication-received-challenge-timeouts")
    {
        authentication_received_challenge_timeouts = value;
    }
    if(value_path == "authentication-received-challenges-resent")
    {
        authentication_received_challenges_resent = value;
    }
    if(value_path == "authentication-received-challenges-response-duplicate")
    {
        authentication_received_challenges_response_duplicate = value;
    }
    if(value_path == "authentication-received-challenges-sent")
    {
        authentication_received_challenges_sent = value;
    }
    if(value_path == "authentication-received-during-challenge")
    {
        authentication_received_during_challenge = value;
    }
    if(value_path == "authentication-received-incomplete")
    {
        authentication_received_incomplete = value;
    }
    if(value_path == "authentication-received-no-integrity")
    {
        authentication_received_no_integrity = value;
    }
    if(value_path == "authentication-received-response-late")
    {
        authentication_received_response_late = value;
    }
    if(value_path == "authentication-received-sequence-number-duplicate")
    {
        authentication_received_sequence_number_duplicate = value;
    }
    if(value_path == "authentication-received-sequence-number-outof-range")
    {
        authentication_received_sequence_number_outof_range = value;
    }
    if(value_path == "authentication-received-valid-messages")
    {
        authentication_received_valid_messages = value;
    }
    if(value_path == "authentication-received-wrong-challenges-response")
    {
        authentication_received_wrong_challenges_response = value;
    }
    if(value_path == "authentication-received-wrong-digest-type")
    {
        authentication_received_wrong_digest_type = value;
    }
}

RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::ReceiveInfo()
    :
    	sequence{YType::uint64, "sequence"},
	 sequence_window{YType::uint64, "sequence-window"},
	 sequence_window_count{YType::uint32, "sequence-window-count"},
	 sequence_window_size{YType::uint32, "sequence-window-size"}
    	,
    counters(std::make_unique<RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters>())
{
    counters->parent = this;
    children["counters"] = counters.get();

    yang_name = "receive-info"; yang_parent_name = "direction-info";
}

RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::~ReceiveInfo()
{
}

bool RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::has_data() const
{
    for (auto const & leaf : sequence_window.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return sequence.is_set
	|| sequence_window_count.is_set
	|| sequence_window_size.is_set
	|| (counters !=  nullptr && counters->has_data());
}

bool RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::has_operation() const
{
    for (auto const & leaf : sequence_window.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(sequence.operation)
	|| is_set(sequence_window.operation)
	|| is_set(sequence_window_count.operation)
	|| is_set(sequence_window_size.operation)
	|| (counters !=  nullptr && counters->has_operation());
}

std::string RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "receive-info";

    return path_buffer.str();

}

EntityPath RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (sequence.is_set || is_set(sequence.operation)) leaf_name_data.push_back(sequence.get_name_leafdata());
    if (sequence_window_count.is_set || is_set(sequence_window_count.operation)) leaf_name_data.push_back(sequence_window_count.get_name_leafdata());
    if (sequence_window_size.is_set || is_set(sequence_window_size.operation)) leaf_name_data.push_back(sequence_window_size.get_name_leafdata());

    auto sequence_window_name_datas = sequence_window.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), sequence_window_name_datas.begin(), sequence_window_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "counters")
    {
        if(counters != nullptr)
        {
            children["counters"] = counters.get();
        }
        else
        {
            counters = std::make_unique<RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters>();
            counters->parent = this;
            children["counters"] = counters.get();
        }
        return children.at("counters");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::get_children()
{
    if(children.find("counters") == children.end())
    {
        if(counters != nullptr)
        {
            children["counters"] = counters.get();
        }
    }

    return children;
}

void RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "sequence")
    {
        sequence = value;
    }
    if(value_path == "sequence-window")
    {
        sequence_window.append(value);
    }
    if(value_path == "sequence-window-count")
    {
        sequence_window_count = value;
    }
    if(value_path == "sequence-window-size")
    {
        sequence_window_size = value;
    }
}

RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::DirectionInfo()
    :
    	auth_direction{YType::enumeration, "auth-direction"}
    	,
    receive_info(std::make_unique<RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo>())
	,send_info(std::make_unique<RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo>())
{
    receive_info->parent = this;
    children["receive-info"] = receive_info.get();

    send_info->parent = this;
    children["send-info"] = send_info.get();

    yang_name = "direction-info"; yang_parent_name = "authentication-detail";
}

RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::~DirectionInfo()
{
}

bool RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::has_data() const
{
    return auth_direction.is_set
	|| (receive_info !=  nullptr && receive_info->has_data())
	|| (send_info !=  nullptr && send_info->has_data());
}

bool RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::has_operation() const
{
    return is_set(operation)
	|| is_set(auth_direction.operation)
	|| (receive_info !=  nullptr && receive_info->has_operation())
	|| (send_info !=  nullptr && send_info->has_operation());
}

std::string RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "direction-info";

    return path_buffer.str();

}

EntityPath RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (auth_direction.is_set || is_set(auth_direction.operation)) leaf_name_data.push_back(auth_direction.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "receive-info")
    {
        if(receive_info != nullptr)
        {
            children["receive-info"] = receive_info.get();
        }
        else
        {
            receive_info = std::make_unique<RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo>();
            receive_info->parent = this;
            children["receive-info"] = receive_info.get();
        }
        return children.at("receive-info");
    }

    if(child_yang_name == "send-info")
    {
        if(send_info != nullptr)
        {
            children["send-info"] = send_info.get();
        }
        else
        {
            send_info = std::make_unique<RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo>();
            send_info->parent = this;
            children["send-info"] = send_info.get();
        }
        return children.at("send-info");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::get_children()
{
    if(children.find("receive-info") == children.end())
    {
        if(receive_info != nullptr)
        {
            children["receive-info"] = receive_info.get();
        }
    }

    if(children.find("send-info") == children.end())
    {
        if(send_info != nullptr)
        {
            children["send-info"] = send_info.get();
        }
    }

    return children;
}

void RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "auth-direction")
    {
        auth_direction = value;
    }
}

RsvpStandby::AuthenticationDetails::AuthenticationDetail::AuthenticationDetail()
    :
    	destination_address{YType::str, "destination-address"},
	 interface_name{YType::str, "interface-name"},
	 mode_id{YType::enumeration, "mode-id"},
	 source_address{YType::str, "source-address"},
	 challenge_status{YType::enumeration, "challenge-status"},
	 key_digest_info{YType::uint32, "key-digest-info"},
	 key_status{YType::uint32, "key-status"},
	 lifetime{YType::uint32, "lifetime"},
	 lifetime_left{YType::uint32, "lifetime-left"}
    	,
    auth_compact(std::make_unique<RsvpStandby::AuthenticationDetails::AuthenticationDetail::AuthCompact>())
	,direction_info(std::make_unique<RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo>())
{
    auth_compact->parent = this;
    children["auth-compact"] = auth_compact.get();

    direction_info->parent = this;
    children["direction-info"] = direction_info.get();

    yang_name = "authentication-detail"; yang_parent_name = "authentication-details";
}

RsvpStandby::AuthenticationDetails::AuthenticationDetail::~AuthenticationDetail()
{
}

bool RsvpStandby::AuthenticationDetails::AuthenticationDetail::has_data() const
{
    return destination_address.is_set
	|| interface_name.is_set
	|| mode_id.is_set
	|| source_address.is_set
	|| challenge_status.is_set
	|| key_digest_info.is_set
	|| key_status.is_set
	|| lifetime.is_set
	|| lifetime_left.is_set
	|| (auth_compact !=  nullptr && auth_compact->has_data())
	|| (direction_info !=  nullptr && direction_info->has_data());
}

bool RsvpStandby::AuthenticationDetails::AuthenticationDetail::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(interface_name.operation)
	|| is_set(mode_id.operation)
	|| is_set(source_address.operation)
	|| is_set(challenge_status.operation)
	|| is_set(key_digest_info.operation)
	|| is_set(key_status.operation)
	|| is_set(lifetime.operation)
	|| is_set(lifetime_left.operation)
	|| (auth_compact !=  nullptr && auth_compact->has_operation())
	|| (direction_info !=  nullptr && direction_info->has_operation());
}

std::string RsvpStandby::AuthenticationDetails::AuthenticationDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "authentication-detail" <<"[destination-address='" <<destination_address.get() <<"']" <<"[interface-name='" <<interface_name.get() <<"']" <<"[mode-id='" <<mode_id.get() <<"']" <<"[source-address='" <<source_address.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::AuthenticationDetails::AuthenticationDetail::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/authentication-details/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (mode_id.is_set || is_set(mode_id.operation)) leaf_name_data.push_back(mode_id.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (challenge_status.is_set || is_set(challenge_status.operation)) leaf_name_data.push_back(challenge_status.get_name_leafdata());
    if (key_digest_info.is_set || is_set(key_digest_info.operation)) leaf_name_data.push_back(key_digest_info.get_name_leafdata());
    if (key_status.is_set || is_set(key_status.operation)) leaf_name_data.push_back(key_status.get_name_leafdata());
    if (lifetime.is_set || is_set(lifetime.operation)) leaf_name_data.push_back(lifetime.get_name_leafdata());
    if (lifetime_left.is_set || is_set(lifetime_left.operation)) leaf_name_data.push_back(lifetime_left.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::AuthenticationDetails::AuthenticationDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "auth-compact")
    {
        if(auth_compact != nullptr)
        {
            children["auth-compact"] = auth_compact.get();
        }
        else
        {
            auth_compact = std::make_unique<RsvpStandby::AuthenticationDetails::AuthenticationDetail::AuthCompact>();
            auth_compact->parent = this;
            children["auth-compact"] = auth_compact.get();
        }
        return children.at("auth-compact");
    }

    if(child_yang_name == "direction-info")
    {
        if(direction_info != nullptr)
        {
            children["direction-info"] = direction_info.get();
        }
        else
        {
            direction_info = std::make_unique<RsvpStandby::AuthenticationDetails::AuthenticationDetail::DirectionInfo>();
            direction_info->parent = this;
            children["direction-info"] = direction_info.get();
        }
        return children.at("direction-info");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::AuthenticationDetails::AuthenticationDetail::get_children()
{
    if(children.find("auth-compact") == children.end())
    {
        if(auth_compact != nullptr)
        {
            children["auth-compact"] = auth_compact.get();
        }
    }

    if(children.find("direction-info") == children.end())
    {
        if(direction_info != nullptr)
        {
            children["direction-info"] = direction_info.get();
        }
    }

    return children;
}

void RsvpStandby::AuthenticationDetails::AuthenticationDetail::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "mode-id")
    {
        mode_id = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "challenge-status")
    {
        challenge_status = value;
    }
    if(value_path == "key-digest-info")
    {
        key_digest_info = value;
    }
    if(value_path == "key-status")
    {
        key_status = value;
    }
    if(value_path == "lifetime")
    {
        lifetime = value;
    }
    if(value_path == "lifetime-left")
    {
        lifetime_left = value;
    }
}

RsvpStandby::AuthenticationDetails::AuthenticationDetails()
{
    yang_name = "authentication-details"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::AuthenticationDetails::~AuthenticationDetails()
{
}

bool RsvpStandby::AuthenticationDetails::has_data() const
{
    for (std::size_t index=0; index<authentication_detail.size(); index++)
    {
        if(authentication_detail[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::AuthenticationDetails::has_operation() const
{
    for (std::size_t index=0; index<authentication_detail.size(); index++)
    {
        if(authentication_detail[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::AuthenticationDetails::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "authentication-details";

    return path_buffer.str();

}

EntityPath RsvpStandby::AuthenticationDetails::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::AuthenticationDetails::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "authentication-detail")
    {
        for(auto const & c : authentication_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::AuthenticationDetails::AuthenticationDetail>();
        c->parent = this;
        authentication_detail.push_back(std::move(c));
        children[segment_path] = authentication_detail.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::AuthenticationDetails::get_children()
{
    for (auto const & c : authentication_detail)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::AuthenticationDetails::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::~RsvpSession()
{
}

bool RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

RsvpStandby::RsbBriefs::RsbBrief::Session::Session()
    :
    rsvp_session(std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "rsb-brief";
}

RsvpStandby::RsbBriefs::RsbBrief::Session::~Session()
{
}

bool RsvpStandby::RsbBriefs::RsbBrief::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool RsvpStandby::RsbBriefs::RsbBrief::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string RsvpStandby::RsbBriefs::RsbBrief::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbBriefs::RsbBrief::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbBriefs::RsbBrief::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbBriefs::RsbBrief::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void RsvpStandby::RsbBriefs::RsbBrief::Session::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::RsbBriefs::RsbBrief::S2LSubLsp::S2LSubLsp()
    :
    	s2l_destination_address{YType::str, "s2l-destination-address"}
{
    yang_name = "s2l-sub-lsp"; yang_parent_name = "rsb-brief";
}

RsvpStandby::RsbBriefs::RsbBrief::S2LSubLsp::~S2LSubLsp()
{
}

bool RsvpStandby::RsbBriefs::RsbBrief::S2LSubLsp::has_data() const
{
    return s2l_destination_address.is_set;
}

bool RsvpStandby::RsbBriefs::RsbBrief::S2LSubLsp::has_operation() const
{
    return is_set(operation)
	|| is_set(s2l_destination_address.operation);
}

std::string RsvpStandby::RsbBriefs::RsbBrief::S2LSubLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "s2l-sub-lsp";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbBriefs::RsbBrief::S2LSubLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (s2l_destination_address.is_set || is_set(s2l_destination_address.operation)) leaf_name_data.push_back(s2l_destination_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbBriefs::RsbBrief::S2LSubLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbBriefs::RsbBrief::S2LSubLsp::get_children()
{
    return children;
}

void RsvpStandby::RsbBriefs::RsbBrief::S2LSubLsp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "s2l-destination-address")
    {
        s2l_destination_address = value;
    }
}

RsvpStandby::RsbBriefs::RsbBrief::FlowSpec::FlowSpec()
    :
    	flow_average_rate{YType::uint64, "flow-average-rate"},
	 flow_max_burst{YType::uint64, "flow-max-burst"},
	 flow_max_unit{YType::uint32, "flow-max-unit"},
	 flow_min_unit{YType::uint32, "flow-min-unit"},
	 flow_peak_rate{YType::uint64, "flow-peak-rate"},
	 flow_qos{YType::enumeration, "flow-qos"},
	 flow_requested_rate{YType::uint64, "flow-requested-rate"},
	 flow_slack{YType::uint32, "flow-slack"}
{
    yang_name = "flow-spec"; yang_parent_name = "rsb-brief";
}

RsvpStandby::RsbBriefs::RsbBrief::FlowSpec::~FlowSpec()
{
}

bool RsvpStandby::RsbBriefs::RsbBrief::FlowSpec::has_data() const
{
    return flow_average_rate.is_set
	|| flow_max_burst.is_set
	|| flow_max_unit.is_set
	|| flow_min_unit.is_set
	|| flow_peak_rate.is_set
	|| flow_qos.is_set
	|| flow_requested_rate.is_set
	|| flow_slack.is_set;
}

bool RsvpStandby::RsbBriefs::RsbBrief::FlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_average_rate.operation)
	|| is_set(flow_max_burst.operation)
	|| is_set(flow_max_unit.operation)
	|| is_set(flow_min_unit.operation)
	|| is_set(flow_peak_rate.operation)
	|| is_set(flow_qos.operation)
	|| is_set(flow_requested_rate.operation)
	|| is_set(flow_slack.operation);
}

std::string RsvpStandby::RsbBriefs::RsbBrief::FlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flow-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbBriefs::RsbBrief::FlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_average_rate.is_set || is_set(flow_average_rate.operation)) leaf_name_data.push_back(flow_average_rate.get_name_leafdata());
    if (flow_max_burst.is_set || is_set(flow_max_burst.operation)) leaf_name_data.push_back(flow_max_burst.get_name_leafdata());
    if (flow_max_unit.is_set || is_set(flow_max_unit.operation)) leaf_name_data.push_back(flow_max_unit.get_name_leafdata());
    if (flow_min_unit.is_set || is_set(flow_min_unit.operation)) leaf_name_data.push_back(flow_min_unit.get_name_leafdata());
    if (flow_peak_rate.is_set || is_set(flow_peak_rate.operation)) leaf_name_data.push_back(flow_peak_rate.get_name_leafdata());
    if (flow_qos.is_set || is_set(flow_qos.operation)) leaf_name_data.push_back(flow_qos.get_name_leafdata());
    if (flow_requested_rate.is_set || is_set(flow_requested_rate.operation)) leaf_name_data.push_back(flow_requested_rate.get_name_leafdata());
    if (flow_slack.is_set || is_set(flow_slack.operation)) leaf_name_data.push_back(flow_slack.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbBriefs::RsbBrief::FlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbBriefs::RsbBrief::FlowSpec::get_children()
{
    return children;
}

void RsvpStandby::RsbBriefs::RsbBrief::FlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-average-rate")
    {
        flow_average_rate = value;
    }
    if(value_path == "flow-max-burst")
    {
        flow_max_burst = value;
    }
    if(value_path == "flow-max-unit")
    {
        flow_max_unit = value;
    }
    if(value_path == "flow-min-unit")
    {
        flow_min_unit = value;
    }
    if(value_path == "flow-peak-rate")
    {
        flow_peak_rate = value;
    }
    if(value_path == "flow-qos")
    {
        flow_qos = value;
    }
    if(value_path == "flow-requested-rate")
    {
        flow_requested_rate = value;
    }
    if(value_path == "flow-slack")
    {
        flow_slack = value;
    }
}

RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec::G709OtnFlowSpec()
    :
    	flow_bit_rate{YType::uint64, "flow-bit-rate"},
	 flow_multiplier{YType::uint16, "flow-multiplier"},
	 flow_nvc{YType::uint16, "flow-nvc"},
	 flow_signal_type{YType::uint8, "flow-signal-type"}
{
    yang_name = "g709otn-flow-spec"; yang_parent_name = "generic-flow-spec";
}

RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec::~G709OtnFlowSpec()
{
}

bool RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec::has_data() const
{
    return flow_bit_rate.is_set
	|| flow_multiplier.is_set
	|| flow_nvc.is_set
	|| flow_signal_type.is_set;
}

bool RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_bit_rate.operation)
	|| is_set(flow_multiplier.operation)
	|| is_set(flow_nvc.operation)
	|| is_set(flow_signal_type.operation);
}

std::string RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-flow-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/generic-flow-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_bit_rate.is_set || is_set(flow_bit_rate.operation)) leaf_name_data.push_back(flow_bit_rate.get_name_leafdata());
    if (flow_multiplier.is_set || is_set(flow_multiplier.operation)) leaf_name_data.push_back(flow_multiplier.get_name_leafdata());
    if (flow_nvc.is_set || is_set(flow_nvc.operation)) leaf_name_data.push_back(flow_nvc.get_name_leafdata());
    if (flow_signal_type.is_set || is_set(flow_signal_type.operation)) leaf_name_data.push_back(flow_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec::get_children()
{
    return children;
}

void RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-bit-rate")
    {
        flow_bit_rate = value;
    }
    if(value_path == "flow-multiplier")
    {
        flow_multiplier = value;
    }
    if(value_path == "flow-nvc")
    {
        flow_nvc = value;
    }
    if(value_path == "flow-signal-type")
    {
        flow_signal_type = value;
    }
}

RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::GenericFlowSpec()
    :
    	flow_spec_type{YType::enumeration, "flow-spec-type"}
    	,
    g709otn_flow_spec(std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec>())
{
    g709otn_flow_spec->parent = this;
    children["g709otn-flow-spec"] = g709otn_flow_spec.get();

    yang_name = "generic-flow-spec"; yang_parent_name = "rsb-brief";
}

RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::~GenericFlowSpec()
{
}

bool RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::has_data() const
{
    return flow_spec_type.is_set
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_data());
}

bool RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_spec_type.operation)
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_operation());
}

std::string RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-flow-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_spec_type.is_set || is_set(flow_spec_type.operation)) leaf_name_data.push_back(flow_spec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-flow-spec")
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        else
        {
            g709otn_flow_spec = std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec>();
            g709otn_flow_spec->parent = this;
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        return children.at("g709otn-flow-spec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::get_children()
{
    if(children.find("g709otn-flow-spec") == children.end())
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
    }

    return children;
}

void RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-spec-type")
    {
        flow_spec_type = value;
    }
}

RsvpStandby::RsbBriefs::RsbBrief::Style::Style()
    :
    	reservation_type{YType::enumeration, "reservation-type"}
{
    yang_name = "style"; yang_parent_name = "rsb-brief";
}

RsvpStandby::RsbBriefs::RsbBrief::Style::~Style()
{
}

bool RsvpStandby::RsbBriefs::RsbBrief::Style::has_data() const
{
    return reservation_type.is_set;
}

bool RsvpStandby::RsbBriefs::RsbBrief::Style::has_operation() const
{
    return is_set(operation)
	|| is_set(reservation_type.operation);
}

std::string RsvpStandby::RsbBriefs::RsbBrief::Style::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "style";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbBriefs::RsbBrief::Style::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (reservation_type.is_set || is_set(reservation_type.operation)) leaf_name_data.push_back(reservation_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbBriefs::RsbBrief::Style::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbBriefs::RsbBrief::Style::get_children()
{
    return children;
}

void RsvpStandby::RsbBriefs::RsbBrief::Style::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "reservation-type")
    {
        reservation_type = value;
    }
}

RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session::UdpIpv4Session()
    :
    	source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"}
{
    yang_name = "udp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session::~UdpIpv4Session()
{
}

bool RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session::has_data() const
{
    return source_address.is_set
	|| source_port.is_set;
}

bool RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation);
}

std::string RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "udp-ipv4-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/filter/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session::get_children()
{
    return children;
}

void RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
}

RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session::P2MpIpv4Session()
    :
    	p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"},
	 sub_group_id{YType::uint16, "sub-group-id"}
{
    yang_name = "p2mp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session::~P2MpIpv4Session()
{
}

bool RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session::has_data() const
{
    return p2mp_sub_group_origin.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set;
}

bool RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation);
}

std::string RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "p2mp-ipv4-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/filter/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session::get_children()
{
    return children;
}

void RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
}

RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::RsvpFilter()
    :
    	filter_type{YType::enumeration, "filter-type"}
    	,
    p2mp_ipv4_session(std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session>())
	,udp_ipv4_session(std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session>())
{
    p2mp_ipv4_session->parent = this;
    children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();

    udp_ipv4_session->parent = this;
    children["udp-ipv4-session"] = udp_ipv4_session.get();

    yang_name = "rsvp-filter"; yang_parent_name = "filter";
}

RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::~RsvpFilter()
{
}

bool RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::has_data() const
{
    return filter_type.is_set
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_data())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_data());
}

bool RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::has_operation() const
{
    return is_set(operation)
	|| is_set(filter_type.operation)
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_operation())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_operation());
}

std::string RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-filter";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (filter_type.is_set || is_set(filter_type.operation)) leaf_name_data.push_back(filter_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "p2mp-ipv4-session")
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        else
        {
            p2mp_ipv4_session = std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session>();
            p2mp_ipv4_session->parent = this;
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        return children.at("p2mp-ipv4-session");
    }

    if(child_yang_name == "udp-ipv4-session")
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        else
        {
            udp_ipv4_session = std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session>();
            udp_ipv4_session->parent = this;
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        return children.at("udp-ipv4-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::get_children()
{
    if(children.find("p2mp-ipv4-session") == children.end())
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
    }

    if(children.find("udp-ipv4-session") == children.end())
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
    }

    return children;
}

void RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "filter-type")
    {
        filter_type = value;
    }
}

RsvpStandby::RsbBriefs::RsbBrief::Filter::Filter()
    :
    rsvp_filter(std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter>())
{
    rsvp_filter->parent = this;
    children["rsvp-filter"] = rsvp_filter.get();

    yang_name = "filter"; yang_parent_name = "rsb-brief";
}

RsvpStandby::RsbBriefs::RsbBrief::Filter::~Filter()
{
}

bool RsvpStandby::RsbBriefs::RsbBrief::Filter::has_data() const
{
    return (rsvp_filter !=  nullptr && rsvp_filter->has_data());
}

bool RsvpStandby::RsbBriefs::RsbBrief::Filter::has_operation() const
{
    return is_set(operation)
	|| (rsvp_filter !=  nullptr && rsvp_filter->has_operation());
}

std::string RsvpStandby::RsbBriefs::RsbBrief::Filter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "filter";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbBriefs::RsbBrief::Filter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbBriefs::RsbBrief::Filter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-filter")
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
        else
        {
            rsvp_filter = std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Filter::RsvpFilter>();
            rsvp_filter->parent = this;
            children["rsvp-filter"] = rsvp_filter.get();
        }
        return children.at("rsvp-filter");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbBriefs::RsbBrief::Filter::get_children()
{
    if(children.find("rsvp-filter") == children.end())
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
    }

    return children;
}

void RsvpStandby::RsbBriefs::RsbBrief::Filter::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::RsbBriefs::RsbBrief::RsbBrief()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 input_interface{YType::str, "input-interface"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 protocol{YType::int32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::int32, "source-port"},
	 sub_group_id{YType::int32, "sub-group-id"},
	 sub_group_origin{YType::str, "sub-group-origin"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    filter(std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Filter>())
	,flow_spec(std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::FlowSpec>())
	,generic_flow_spec(std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec>())
	,s2l_sub_lsp(std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::S2LSubLsp>())
	,session(std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Session>())
	,style(std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Style>())
{
    filter->parent = this;
    children["filter"] = filter.get();

    flow_spec->parent = this;
    children["flow-spec"] = flow_spec.get();

    generic_flow_spec->parent = this;
    children["generic-flow-spec"] = generic_flow_spec.get();

    s2l_sub_lsp->parent = this;
    children["s2l-sub-lsp"] = s2l_sub_lsp.get();

    session->parent = this;
    children["session"] = session.get();

    style->parent = this;
    children["style"] = style.get();

    yang_name = "rsb-brief"; yang_parent_name = "rsb-briefs";
}

RsvpStandby::RsbBriefs::RsbBrief::~RsbBrief()
{
}

bool RsvpStandby::RsbBriefs::RsbBrief::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| extended_tunnel_id.is_set
	|| input_interface.is_set
	|| p2mp_id.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set
	|| sub_group_origin.is_set
	|| vrf_name.is_set
	|| (filter !=  nullptr && filter->has_data())
	|| (flow_spec !=  nullptr && flow_spec->has_data())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_data())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_data())
	|| (session !=  nullptr && session->has_data())
	|| (style !=  nullptr && style->has_data());
}

bool RsvpStandby::RsbBriefs::RsbBrief::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(input_interface.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(sub_group_origin.operation)
	|| is_set(vrf_name.operation)
	|| (filter !=  nullptr && filter->has_operation())
	|| (flow_spec !=  nullptr && flow_spec->has_operation())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_operation())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_operation())
	|| (session !=  nullptr && session->has_operation())
	|| (style !=  nullptr && style->has_operation());
}

std::string RsvpStandby::RsbBriefs::RsbBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsb-brief";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbBriefs::RsbBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (input_interface.is_set || is_set(input_interface.operation)) leaf_name_data.push_back(input_interface.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (sub_group_origin.is_set || is_set(sub_group_origin.operation)) leaf_name_data.push_back(sub_group_origin.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbBriefs::RsbBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "filter")
    {
        if(filter != nullptr)
        {
            children["filter"] = filter.get();
        }
        else
        {
            filter = std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Filter>();
            filter->parent = this;
            children["filter"] = filter.get();
        }
        return children.at("filter");
    }

    if(child_yang_name == "flow-spec")
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
        else
        {
            flow_spec = std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::FlowSpec>();
            flow_spec->parent = this;
            children["flow-spec"] = flow_spec.get();
        }
        return children.at("flow-spec");
    }

    if(child_yang_name == "generic-flow-spec")
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        else
        {
            generic_flow_spec = std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::GenericFlowSpec>();
            generic_flow_spec->parent = this;
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        return children.at("generic-flow-spec");
    }

    if(child_yang_name == "s2l-sub-lsp")
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        else
        {
            s2l_sub_lsp = std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::S2LSubLsp>();
            s2l_sub_lsp->parent = this;
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        return children.at("s2l-sub-lsp");
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    if(child_yang_name == "style")
    {
        if(style != nullptr)
        {
            children["style"] = style.get();
        }
        else
        {
            style = std::make_unique<RsvpStandby::RsbBriefs::RsbBrief::Style>();
            style->parent = this;
            children["style"] = style.get();
        }
        return children.at("style");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbBriefs::RsbBrief::get_children()
{
    if(children.find("filter") == children.end())
    {
        if(filter != nullptr)
        {
            children["filter"] = filter.get();
        }
    }

    if(children.find("flow-spec") == children.end())
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
    }

    if(children.find("generic-flow-spec") == children.end())
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
    }

    if(children.find("s2l-sub-lsp") == children.end())
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
    }

    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    if(children.find("style") == children.end())
    {
        if(style != nullptr)
        {
            children["style"] = style.get();
        }
    }

    return children;
}

void RsvpStandby::RsbBriefs::RsbBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "input-interface")
    {
        input_interface = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "sub-group-origin")
    {
        sub_group_origin = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

RsvpStandby::RsbBriefs::RsbBriefs()
{
    yang_name = "rsb-briefs"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::RsbBriefs::~RsbBriefs()
{
}

bool RsvpStandby::RsbBriefs::has_data() const
{
    for (std::size_t index=0; index<rsb_brief.size(); index++)
    {
        if(rsb_brief[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::RsbBriefs::has_operation() const
{
    for (std::size_t index=0; index<rsb_brief.size(); index++)
    {
        if(rsb_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::RsbBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsb-briefs";

    return path_buffer.str();

}

EntityPath RsvpStandby::RsbBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RsbBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsb-brief")
    {
        for(auto const & c : rsb_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::RsbBriefs::RsbBrief>();
        c->parent = this;
        rsb_brief.push_back(std::move(c));
        children[segment_path] = rsb_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RsbBriefs::get_children()
{
    for (auto const & c : rsb_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::RsbBriefs::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::OpenConfig::GlobalCounters::GlobalCounters()
    :
    	in_ack_messages{YType::uint64, "in-ack-messages"},
	 in_hello_messages{YType::uint64, "in-hello-messages"},
	 in_path_error_messages{YType::uint64, "in-path-error-messages"},
	 in_path_messages{YType::uint64, "in-path-messages"},
	 in_path_tear_messages{YType::uint64, "in-path-tear-messages"},
	 in_reservation_error_messages{YType::uint64, "in-reservation-error-messages"},
	 in_reservation_messages{YType::uint64, "in-reservation-messages"},
	 in_reservation_tear_messages{YType::uint64, "in-reservation-tear-messages"},
	 in_srefresh_messages{YType::uint64, "in-srefresh-messages"},
	 out_ack_messages{YType::uint64, "out-ack-messages"},
	 out_hello_messages{YType::uint64, "out-hello-messages"},
	 out_path_error_messages{YType::uint64, "out-path-error-messages"},
	 out_path_messages{YType::uint64, "out-path-messages"},
	 out_path_tear_messages{YType::uint64, "out-path-tear-messages"},
	 out_reservation_error_messages{YType::uint64, "out-reservation-error-messages"},
	 out_reservation_messages{YType::uint64, "out-reservation-messages"},
	 out_reservation_tear_messages{YType::uint64, "out-reservation-tear-messages"},
	 out_srefresh_messages{YType::uint64, "out-srefresh-messages"},
	 path_timeouts{YType::uint64, "path-timeouts"},
	 rate_limited_messages{YType::uint64, "rate-limited-messages"},
	 reservation_timeouts{YType::uint64, "reservation-timeouts"}
{
    yang_name = "global-counters"; yang_parent_name = "open-config";
}

RsvpStandby::OpenConfig::GlobalCounters::~GlobalCounters()
{
}

bool RsvpStandby::OpenConfig::GlobalCounters::has_data() const
{
    return in_ack_messages.is_set
	|| in_hello_messages.is_set
	|| in_path_error_messages.is_set
	|| in_path_messages.is_set
	|| in_path_tear_messages.is_set
	|| in_reservation_error_messages.is_set
	|| in_reservation_messages.is_set
	|| in_reservation_tear_messages.is_set
	|| in_srefresh_messages.is_set
	|| out_ack_messages.is_set
	|| out_hello_messages.is_set
	|| out_path_error_messages.is_set
	|| out_path_messages.is_set
	|| out_path_tear_messages.is_set
	|| out_reservation_error_messages.is_set
	|| out_reservation_messages.is_set
	|| out_reservation_tear_messages.is_set
	|| out_srefresh_messages.is_set
	|| path_timeouts.is_set
	|| rate_limited_messages.is_set
	|| reservation_timeouts.is_set;
}

bool RsvpStandby::OpenConfig::GlobalCounters::has_operation() const
{
    return is_set(operation)
	|| is_set(in_ack_messages.operation)
	|| is_set(in_hello_messages.operation)
	|| is_set(in_path_error_messages.operation)
	|| is_set(in_path_messages.operation)
	|| is_set(in_path_tear_messages.operation)
	|| is_set(in_reservation_error_messages.operation)
	|| is_set(in_reservation_messages.operation)
	|| is_set(in_reservation_tear_messages.operation)
	|| is_set(in_srefresh_messages.operation)
	|| is_set(out_ack_messages.operation)
	|| is_set(out_hello_messages.operation)
	|| is_set(out_path_error_messages.operation)
	|| is_set(out_path_messages.operation)
	|| is_set(out_path_tear_messages.operation)
	|| is_set(out_reservation_error_messages.operation)
	|| is_set(out_reservation_messages.operation)
	|| is_set(out_reservation_tear_messages.operation)
	|| is_set(out_srefresh_messages.operation)
	|| is_set(path_timeouts.operation)
	|| is_set(rate_limited_messages.operation)
	|| is_set(reservation_timeouts.operation);
}

std::string RsvpStandby::OpenConfig::GlobalCounters::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "global-counters";

    return path_buffer.str();

}

EntityPath RsvpStandby::OpenConfig::GlobalCounters::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/open-config/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (in_ack_messages.is_set || is_set(in_ack_messages.operation)) leaf_name_data.push_back(in_ack_messages.get_name_leafdata());
    if (in_hello_messages.is_set || is_set(in_hello_messages.operation)) leaf_name_data.push_back(in_hello_messages.get_name_leafdata());
    if (in_path_error_messages.is_set || is_set(in_path_error_messages.operation)) leaf_name_data.push_back(in_path_error_messages.get_name_leafdata());
    if (in_path_messages.is_set || is_set(in_path_messages.operation)) leaf_name_data.push_back(in_path_messages.get_name_leafdata());
    if (in_path_tear_messages.is_set || is_set(in_path_tear_messages.operation)) leaf_name_data.push_back(in_path_tear_messages.get_name_leafdata());
    if (in_reservation_error_messages.is_set || is_set(in_reservation_error_messages.operation)) leaf_name_data.push_back(in_reservation_error_messages.get_name_leafdata());
    if (in_reservation_messages.is_set || is_set(in_reservation_messages.operation)) leaf_name_data.push_back(in_reservation_messages.get_name_leafdata());
    if (in_reservation_tear_messages.is_set || is_set(in_reservation_tear_messages.operation)) leaf_name_data.push_back(in_reservation_tear_messages.get_name_leafdata());
    if (in_srefresh_messages.is_set || is_set(in_srefresh_messages.operation)) leaf_name_data.push_back(in_srefresh_messages.get_name_leafdata());
    if (out_ack_messages.is_set || is_set(out_ack_messages.operation)) leaf_name_data.push_back(out_ack_messages.get_name_leafdata());
    if (out_hello_messages.is_set || is_set(out_hello_messages.operation)) leaf_name_data.push_back(out_hello_messages.get_name_leafdata());
    if (out_path_error_messages.is_set || is_set(out_path_error_messages.operation)) leaf_name_data.push_back(out_path_error_messages.get_name_leafdata());
    if (out_path_messages.is_set || is_set(out_path_messages.operation)) leaf_name_data.push_back(out_path_messages.get_name_leafdata());
    if (out_path_tear_messages.is_set || is_set(out_path_tear_messages.operation)) leaf_name_data.push_back(out_path_tear_messages.get_name_leafdata());
    if (out_reservation_error_messages.is_set || is_set(out_reservation_error_messages.operation)) leaf_name_data.push_back(out_reservation_error_messages.get_name_leafdata());
    if (out_reservation_messages.is_set || is_set(out_reservation_messages.operation)) leaf_name_data.push_back(out_reservation_messages.get_name_leafdata());
    if (out_reservation_tear_messages.is_set || is_set(out_reservation_tear_messages.operation)) leaf_name_data.push_back(out_reservation_tear_messages.get_name_leafdata());
    if (out_srefresh_messages.is_set || is_set(out_srefresh_messages.operation)) leaf_name_data.push_back(out_srefresh_messages.get_name_leafdata());
    if (path_timeouts.is_set || is_set(path_timeouts.operation)) leaf_name_data.push_back(path_timeouts.get_name_leafdata());
    if (rate_limited_messages.is_set || is_set(rate_limited_messages.operation)) leaf_name_data.push_back(rate_limited_messages.get_name_leafdata());
    if (reservation_timeouts.is_set || is_set(reservation_timeouts.operation)) leaf_name_data.push_back(reservation_timeouts.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::OpenConfig::GlobalCounters::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::OpenConfig::GlobalCounters::get_children()
{
    return children;
}

void RsvpStandby::OpenConfig::GlobalCounters::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "in-ack-messages")
    {
        in_ack_messages = value;
    }
    if(value_path == "in-hello-messages")
    {
        in_hello_messages = value;
    }
    if(value_path == "in-path-error-messages")
    {
        in_path_error_messages = value;
    }
    if(value_path == "in-path-messages")
    {
        in_path_messages = value;
    }
    if(value_path == "in-path-tear-messages")
    {
        in_path_tear_messages = value;
    }
    if(value_path == "in-reservation-error-messages")
    {
        in_reservation_error_messages = value;
    }
    if(value_path == "in-reservation-messages")
    {
        in_reservation_messages = value;
    }
    if(value_path == "in-reservation-tear-messages")
    {
        in_reservation_tear_messages = value;
    }
    if(value_path == "in-srefresh-messages")
    {
        in_srefresh_messages = value;
    }
    if(value_path == "out-ack-messages")
    {
        out_ack_messages = value;
    }
    if(value_path == "out-hello-messages")
    {
        out_hello_messages = value;
    }
    if(value_path == "out-path-error-messages")
    {
        out_path_error_messages = value;
    }
    if(value_path == "out-path-messages")
    {
        out_path_messages = value;
    }
    if(value_path == "out-path-tear-messages")
    {
        out_path_tear_messages = value;
    }
    if(value_path == "out-reservation-error-messages")
    {
        out_reservation_error_messages = value;
    }
    if(value_path == "out-reservation-messages")
    {
        out_reservation_messages = value;
    }
    if(value_path == "out-reservation-tear-messages")
    {
        out_reservation_tear_messages = value;
    }
    if(value_path == "out-srefresh-messages")
    {
        out_srefresh_messages = value;
    }
    if(value_path == "path-timeouts")
    {
        path_timeouts = value;
    }
    if(value_path == "rate-limited-messages")
    {
        rate_limited_messages = value;
    }
    if(value_path == "reservation-timeouts")
    {
        reservation_timeouts = value;
    }
}

RsvpStandby::OpenConfig::InterfaceCounters::InterfaceCounter::InterfaceCounter()
    :
    	interface_name{YType::str, "interface-name"},
	 in_ack_messages{YType::uint64, "in-ack-messages"},
	 in_hello_messages{YType::uint64, "in-hello-messages"},
	 in_path_error_messages{YType::uint64, "in-path-error-messages"},
	 in_path_messages{YType::uint64, "in-path-messages"},
	 in_path_tear_messages{YType::uint64, "in-path-tear-messages"},
	 in_reservation_error_messages{YType::uint64, "in-reservation-error-messages"},
	 in_reservation_messages{YType::uint64, "in-reservation-messages"},
	 in_reservation_tear_messages{YType::uint64, "in-reservation-tear-messages"},
	 in_srefresh_messages{YType::uint64, "in-srefresh-messages"},
	 interface_name_xr{YType::str, "interface-name-xr"},
	 out_ack_messages{YType::uint64, "out-ack-messages"},
	 out_hello_messages{YType::uint64, "out-hello-messages"},
	 out_path_error_messages{YType::uint64, "out-path-error-messages"},
	 out_path_messages{YType::uint64, "out-path-messages"},
	 out_path_tear_messages{YType::uint64, "out-path-tear-messages"},
	 out_reservation_error_messages{YType::uint64, "out-reservation-error-messages"},
	 out_reservation_messages{YType::uint64, "out-reservation-messages"},
	 out_reservation_tear_messages{YType::uint64, "out-reservation-tear-messages"},
	 out_srefresh_messages{YType::uint64, "out-srefresh-messages"}
{
    yang_name = "interface-counter"; yang_parent_name = "interface-counters";
}

RsvpStandby::OpenConfig::InterfaceCounters::InterfaceCounter::~InterfaceCounter()
{
}

bool RsvpStandby::OpenConfig::InterfaceCounters::InterfaceCounter::has_data() const
{
    return interface_name.is_set
	|| in_ack_messages.is_set
	|| in_hello_messages.is_set
	|| in_path_error_messages.is_set
	|| in_path_messages.is_set
	|| in_path_tear_messages.is_set
	|| in_reservation_error_messages.is_set
	|| in_reservation_messages.is_set
	|| in_reservation_tear_messages.is_set
	|| in_srefresh_messages.is_set
	|| interface_name_xr.is_set
	|| out_ack_messages.is_set
	|| out_hello_messages.is_set
	|| out_path_error_messages.is_set
	|| out_path_messages.is_set
	|| out_path_tear_messages.is_set
	|| out_reservation_error_messages.is_set
	|| out_reservation_messages.is_set
	|| out_reservation_tear_messages.is_set
	|| out_srefresh_messages.is_set;
}

bool RsvpStandby::OpenConfig::InterfaceCounters::InterfaceCounter::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| is_set(in_ack_messages.operation)
	|| is_set(in_hello_messages.operation)
	|| is_set(in_path_error_messages.operation)
	|| is_set(in_path_messages.operation)
	|| is_set(in_path_tear_messages.operation)
	|| is_set(in_reservation_error_messages.operation)
	|| is_set(in_reservation_messages.operation)
	|| is_set(in_reservation_tear_messages.operation)
	|| is_set(in_srefresh_messages.operation)
	|| is_set(interface_name_xr.operation)
	|| is_set(out_ack_messages.operation)
	|| is_set(out_hello_messages.operation)
	|| is_set(out_path_error_messages.operation)
	|| is_set(out_path_messages.operation)
	|| is_set(out_path_tear_messages.operation)
	|| is_set(out_reservation_error_messages.operation)
	|| is_set(out_reservation_messages.operation)
	|| is_set(out_reservation_tear_messages.operation)
	|| is_set(out_srefresh_messages.operation);
}

std::string RsvpStandby::OpenConfig::InterfaceCounters::InterfaceCounter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-counter" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::OpenConfig::InterfaceCounters::InterfaceCounter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/open-config/interface-counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (in_ack_messages.is_set || is_set(in_ack_messages.operation)) leaf_name_data.push_back(in_ack_messages.get_name_leafdata());
    if (in_hello_messages.is_set || is_set(in_hello_messages.operation)) leaf_name_data.push_back(in_hello_messages.get_name_leafdata());
    if (in_path_error_messages.is_set || is_set(in_path_error_messages.operation)) leaf_name_data.push_back(in_path_error_messages.get_name_leafdata());
    if (in_path_messages.is_set || is_set(in_path_messages.operation)) leaf_name_data.push_back(in_path_messages.get_name_leafdata());
    if (in_path_tear_messages.is_set || is_set(in_path_tear_messages.operation)) leaf_name_data.push_back(in_path_tear_messages.get_name_leafdata());
    if (in_reservation_error_messages.is_set || is_set(in_reservation_error_messages.operation)) leaf_name_data.push_back(in_reservation_error_messages.get_name_leafdata());
    if (in_reservation_messages.is_set || is_set(in_reservation_messages.operation)) leaf_name_data.push_back(in_reservation_messages.get_name_leafdata());
    if (in_reservation_tear_messages.is_set || is_set(in_reservation_tear_messages.operation)) leaf_name_data.push_back(in_reservation_tear_messages.get_name_leafdata());
    if (in_srefresh_messages.is_set || is_set(in_srefresh_messages.operation)) leaf_name_data.push_back(in_srefresh_messages.get_name_leafdata());
    if (interface_name_xr.is_set || is_set(interface_name_xr.operation)) leaf_name_data.push_back(interface_name_xr.get_name_leafdata());
    if (out_ack_messages.is_set || is_set(out_ack_messages.operation)) leaf_name_data.push_back(out_ack_messages.get_name_leafdata());
    if (out_hello_messages.is_set || is_set(out_hello_messages.operation)) leaf_name_data.push_back(out_hello_messages.get_name_leafdata());
    if (out_path_error_messages.is_set || is_set(out_path_error_messages.operation)) leaf_name_data.push_back(out_path_error_messages.get_name_leafdata());
    if (out_path_messages.is_set || is_set(out_path_messages.operation)) leaf_name_data.push_back(out_path_messages.get_name_leafdata());
    if (out_path_tear_messages.is_set || is_set(out_path_tear_messages.operation)) leaf_name_data.push_back(out_path_tear_messages.get_name_leafdata());
    if (out_reservation_error_messages.is_set || is_set(out_reservation_error_messages.operation)) leaf_name_data.push_back(out_reservation_error_messages.get_name_leafdata());
    if (out_reservation_messages.is_set || is_set(out_reservation_messages.operation)) leaf_name_data.push_back(out_reservation_messages.get_name_leafdata());
    if (out_reservation_tear_messages.is_set || is_set(out_reservation_tear_messages.operation)) leaf_name_data.push_back(out_reservation_tear_messages.get_name_leafdata());
    if (out_srefresh_messages.is_set || is_set(out_srefresh_messages.operation)) leaf_name_data.push_back(out_srefresh_messages.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::OpenConfig::InterfaceCounters::InterfaceCounter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::OpenConfig::InterfaceCounters::InterfaceCounter::get_children()
{
    return children;
}

void RsvpStandby::OpenConfig::InterfaceCounters::InterfaceCounter::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "in-ack-messages")
    {
        in_ack_messages = value;
    }
    if(value_path == "in-hello-messages")
    {
        in_hello_messages = value;
    }
    if(value_path == "in-path-error-messages")
    {
        in_path_error_messages = value;
    }
    if(value_path == "in-path-messages")
    {
        in_path_messages = value;
    }
    if(value_path == "in-path-tear-messages")
    {
        in_path_tear_messages = value;
    }
    if(value_path == "in-reservation-error-messages")
    {
        in_reservation_error_messages = value;
    }
    if(value_path == "in-reservation-messages")
    {
        in_reservation_messages = value;
    }
    if(value_path == "in-reservation-tear-messages")
    {
        in_reservation_tear_messages = value;
    }
    if(value_path == "in-srefresh-messages")
    {
        in_srefresh_messages = value;
    }
    if(value_path == "interface-name-xr")
    {
        interface_name_xr = value;
    }
    if(value_path == "out-ack-messages")
    {
        out_ack_messages = value;
    }
    if(value_path == "out-hello-messages")
    {
        out_hello_messages = value;
    }
    if(value_path == "out-path-error-messages")
    {
        out_path_error_messages = value;
    }
    if(value_path == "out-path-messages")
    {
        out_path_messages = value;
    }
    if(value_path == "out-path-tear-messages")
    {
        out_path_tear_messages = value;
    }
    if(value_path == "out-reservation-error-messages")
    {
        out_reservation_error_messages = value;
    }
    if(value_path == "out-reservation-messages")
    {
        out_reservation_messages = value;
    }
    if(value_path == "out-reservation-tear-messages")
    {
        out_reservation_tear_messages = value;
    }
    if(value_path == "out-srefresh-messages")
    {
        out_srefresh_messages = value;
    }
}

RsvpStandby::OpenConfig::InterfaceCounters::InterfaceCounters()
{
    yang_name = "interface-counters"; yang_parent_name = "open-config";
}

RsvpStandby::OpenConfig::InterfaceCounters::~InterfaceCounters()
{
}

bool RsvpStandby::OpenConfig::InterfaceCounters::has_data() const
{
    for (std::size_t index=0; index<interface_counter.size(); index++)
    {
        if(interface_counter[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::OpenConfig::InterfaceCounters::has_operation() const
{
    for (std::size_t index=0; index<interface_counter.size(); index++)
    {
        if(interface_counter[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::OpenConfig::InterfaceCounters::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-counters";

    return path_buffer.str();

}

EntityPath RsvpStandby::OpenConfig::InterfaceCounters::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/open-config/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::OpenConfig::InterfaceCounters::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-counter")
    {
        for(auto const & c : interface_counter)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::OpenConfig::InterfaceCounters::InterfaceCounter>();
        c->parent = this;
        interface_counter.push_back(std::move(c));
        children[segment_path] = interface_counter.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::OpenConfig::InterfaceCounters::get_children()
{
    for (auto const & c : interface_counter)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::OpenConfig::InterfaceCounters::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::OpenConfig::OpenConfig()
    :
    global_counters(std::make_unique<RsvpStandby::OpenConfig::GlobalCounters>())
	,interface_counters(std::make_unique<RsvpStandby::OpenConfig::InterfaceCounters>())
{
    global_counters->parent = this;
    children["global-counters"] = global_counters.get();

    interface_counters->parent = this;
    children["interface-counters"] = interface_counters.get();

    yang_name = "open-config"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::OpenConfig::~OpenConfig()
{
}

bool RsvpStandby::OpenConfig::has_data() const
{
    return (global_counters !=  nullptr && global_counters->has_data())
	|| (interface_counters !=  nullptr && interface_counters->has_data());
}

bool RsvpStandby::OpenConfig::has_operation() const
{
    return is_set(operation)
	|| (global_counters !=  nullptr && global_counters->has_operation())
	|| (interface_counters !=  nullptr && interface_counters->has_operation());
}

std::string RsvpStandby::OpenConfig::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "open-config";

    return path_buffer.str();

}

EntityPath RsvpStandby::OpenConfig::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::OpenConfig::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "global-counters")
    {
        if(global_counters != nullptr)
        {
            children["global-counters"] = global_counters.get();
        }
        else
        {
            global_counters = std::make_unique<RsvpStandby::OpenConfig::GlobalCounters>();
            global_counters->parent = this;
            children["global-counters"] = global_counters.get();
        }
        return children.at("global-counters");
    }

    if(child_yang_name == "interface-counters")
    {
        if(interface_counters != nullptr)
        {
            children["interface-counters"] = interface_counters.get();
        }
        else
        {
            interface_counters = std::make_unique<RsvpStandby::OpenConfig::InterfaceCounters>();
            interface_counters->parent = this;
            children["interface-counters"] = interface_counters.get();
        }
        return children.at("interface-counters");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::OpenConfig::get_children()
{
    if(children.find("global-counters") == children.end())
    {
        if(global_counters != nullptr)
        {
            children["global-counters"] = global_counters.get();
        }
    }

    if(children.find("interface-counters") == children.end())
    {
        if(interface_counters != nullptr)
        {
            children["interface-counters"] = interface_counters.get();
        }
    }

    return children;
}

void RsvpStandby::OpenConfig::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages::ReceivedMessages()
    :
    	ack{YType::uint32, "ack"},
	 bundle{YType::uint32, "bundle"},
	 challenge{YType::uint32, "challenge"},
	 hello{YType::uint32, "hello"},
	 path{YType::uint32, "path"},
	 path_error{YType::uint32, "path-error"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation{YType::uint32, "reservation"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 reservation_error{YType::uint32, "reservation-error"},
	 reservation_tear{YType::uint32, "reservation-tear"},
	 response{YType::uint32, "response"},
	 srefresh{YType::uint32, "srefresh"}
{
    yang_name = "received-messages"; yang_parent_name = "interface-message";
}

RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages::~ReceivedMessages()
{
}

bool RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages::has_data() const
{
    return ack.is_set
	|| bundle.is_set
	|| challenge.is_set
	|| hello.is_set
	|| path.is_set
	|| path_error.is_set
	|| path_tear.is_set
	|| reservation.is_set
	|| reservation_confirm.is_set
	|| reservation_error.is_set
	|| reservation_tear.is_set
	|| response.is_set
	|| srefresh.is_set;
}

bool RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(ack.operation)
	|| is_set(bundle.operation)
	|| is_set(challenge.operation)
	|| is_set(hello.operation)
	|| is_set(path.operation)
	|| is_set(path_error.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(reservation_error.operation)
	|| is_set(reservation_tear.operation)
	|| is_set(response.operation)
	|| is_set(srefresh.operation);
}

std::string RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "received-messages";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ack.is_set || is_set(ack.operation)) leaf_name_data.push_back(ack.get_name_leafdata());
    if (bundle.is_set || is_set(bundle.operation)) leaf_name_data.push_back(bundle.get_name_leafdata());
    if (challenge.is_set || is_set(challenge.operation)) leaf_name_data.push_back(challenge.get_name_leafdata());
    if (hello.is_set || is_set(hello.operation)) leaf_name_data.push_back(hello.get_name_leafdata());
    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_error.is_set || is_set(path_error.operation)) leaf_name_data.push_back(path_error.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation.is_set || is_set(reservation.operation)) leaf_name_data.push_back(reservation.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (reservation_error.is_set || is_set(reservation_error.operation)) leaf_name_data.push_back(reservation_error.get_name_leafdata());
    if (reservation_tear.is_set || is_set(reservation_tear.operation)) leaf_name_data.push_back(reservation_tear.get_name_leafdata());
    if (response.is_set || is_set(response.operation)) leaf_name_data.push_back(response.get_name_leafdata());
    if (srefresh.is_set || is_set(srefresh.operation)) leaf_name_data.push_back(srefresh.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages::get_children()
{
    return children;
}

void RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ack")
    {
        ack = value;
    }
    if(value_path == "bundle")
    {
        bundle = value;
    }
    if(value_path == "challenge")
    {
        challenge = value;
    }
    if(value_path == "hello")
    {
        hello = value;
    }
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-error")
    {
        path_error = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation")
    {
        reservation = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "reservation-error")
    {
        reservation_error = value;
    }
    if(value_path == "reservation-tear")
    {
        reservation_tear = value;
    }
    if(value_path == "response")
    {
        response = value;
    }
    if(value_path == "srefresh")
    {
        srefresh = value;
    }
}

RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages::TransmittedMessages()
    :
    	ack{YType::uint32, "ack"},
	 bundle{YType::uint32, "bundle"},
	 challenge{YType::uint32, "challenge"},
	 hello{YType::uint32, "hello"},
	 path{YType::uint32, "path"},
	 path_error{YType::uint32, "path-error"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation{YType::uint32, "reservation"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 reservation_error{YType::uint32, "reservation-error"},
	 reservation_tear{YType::uint32, "reservation-tear"},
	 response{YType::uint32, "response"},
	 srefresh{YType::uint32, "srefresh"}
{
    yang_name = "transmitted-messages"; yang_parent_name = "interface-message";
}

RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages::~TransmittedMessages()
{
}

bool RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages::has_data() const
{
    return ack.is_set
	|| bundle.is_set
	|| challenge.is_set
	|| hello.is_set
	|| path.is_set
	|| path_error.is_set
	|| path_tear.is_set
	|| reservation.is_set
	|| reservation_confirm.is_set
	|| reservation_error.is_set
	|| reservation_tear.is_set
	|| response.is_set
	|| srefresh.is_set;
}

bool RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(ack.operation)
	|| is_set(bundle.operation)
	|| is_set(challenge.operation)
	|| is_set(hello.operation)
	|| is_set(path.operation)
	|| is_set(path_error.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(reservation_error.operation)
	|| is_set(reservation_tear.operation)
	|| is_set(response.operation)
	|| is_set(srefresh.operation);
}

std::string RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "transmitted-messages";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ack.is_set || is_set(ack.operation)) leaf_name_data.push_back(ack.get_name_leafdata());
    if (bundle.is_set || is_set(bundle.operation)) leaf_name_data.push_back(bundle.get_name_leafdata());
    if (challenge.is_set || is_set(challenge.operation)) leaf_name_data.push_back(challenge.get_name_leafdata());
    if (hello.is_set || is_set(hello.operation)) leaf_name_data.push_back(hello.get_name_leafdata());
    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_error.is_set || is_set(path_error.operation)) leaf_name_data.push_back(path_error.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation.is_set || is_set(reservation.operation)) leaf_name_data.push_back(reservation.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (reservation_error.is_set || is_set(reservation_error.operation)) leaf_name_data.push_back(reservation_error.get_name_leafdata());
    if (reservation_tear.is_set || is_set(reservation_tear.operation)) leaf_name_data.push_back(reservation_tear.get_name_leafdata());
    if (response.is_set || is_set(response.operation)) leaf_name_data.push_back(response.get_name_leafdata());
    if (srefresh.is_set || is_set(srefresh.operation)) leaf_name_data.push_back(srefresh.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages::get_children()
{
    return children;
}

void RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ack")
    {
        ack = value;
    }
    if(value_path == "bundle")
    {
        bundle = value;
    }
    if(value_path == "challenge")
    {
        challenge = value;
    }
    if(value_path == "hello")
    {
        hello = value;
    }
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-error")
    {
        path_error = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation")
    {
        reservation = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "reservation-error")
    {
        reservation_error = value;
    }
    if(value_path == "reservation-tear")
    {
        reservation_tear = value;
    }
    if(value_path == "response")
    {
        response = value;
    }
    if(value_path == "srefresh")
    {
        srefresh = value;
    }
}

RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages::BundleReceivedMessages()
    :
    	ack{YType::uint32, "ack"},
	 bundle{YType::uint32, "bundle"},
	 challenge{YType::uint32, "challenge"},
	 hello{YType::uint32, "hello"},
	 path{YType::uint32, "path"},
	 path_error{YType::uint32, "path-error"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation{YType::uint32, "reservation"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 reservation_error{YType::uint32, "reservation-error"},
	 reservation_tear{YType::uint32, "reservation-tear"},
	 response{YType::uint32, "response"},
	 srefresh{YType::uint32, "srefresh"}
{
    yang_name = "bundle-received-messages"; yang_parent_name = "interface-message";
}

RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages::~BundleReceivedMessages()
{
}

bool RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages::has_data() const
{
    return ack.is_set
	|| bundle.is_set
	|| challenge.is_set
	|| hello.is_set
	|| path.is_set
	|| path_error.is_set
	|| path_tear.is_set
	|| reservation.is_set
	|| reservation_confirm.is_set
	|| reservation_error.is_set
	|| reservation_tear.is_set
	|| response.is_set
	|| srefresh.is_set;
}

bool RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(ack.operation)
	|| is_set(bundle.operation)
	|| is_set(challenge.operation)
	|| is_set(hello.operation)
	|| is_set(path.operation)
	|| is_set(path_error.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(reservation_error.operation)
	|| is_set(reservation_tear.operation)
	|| is_set(response.operation)
	|| is_set(srefresh.operation);
}

std::string RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bundle-received-messages";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ack.is_set || is_set(ack.operation)) leaf_name_data.push_back(ack.get_name_leafdata());
    if (bundle.is_set || is_set(bundle.operation)) leaf_name_data.push_back(bundle.get_name_leafdata());
    if (challenge.is_set || is_set(challenge.operation)) leaf_name_data.push_back(challenge.get_name_leafdata());
    if (hello.is_set || is_set(hello.operation)) leaf_name_data.push_back(hello.get_name_leafdata());
    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_error.is_set || is_set(path_error.operation)) leaf_name_data.push_back(path_error.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation.is_set || is_set(reservation.operation)) leaf_name_data.push_back(reservation.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (reservation_error.is_set || is_set(reservation_error.operation)) leaf_name_data.push_back(reservation_error.get_name_leafdata());
    if (reservation_tear.is_set || is_set(reservation_tear.operation)) leaf_name_data.push_back(reservation_tear.get_name_leafdata());
    if (response.is_set || is_set(response.operation)) leaf_name_data.push_back(response.get_name_leafdata());
    if (srefresh.is_set || is_set(srefresh.operation)) leaf_name_data.push_back(srefresh.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages::get_children()
{
    return children;
}

void RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ack")
    {
        ack = value;
    }
    if(value_path == "bundle")
    {
        bundle = value;
    }
    if(value_path == "challenge")
    {
        challenge = value;
    }
    if(value_path == "hello")
    {
        hello = value;
    }
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-error")
    {
        path_error = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation")
    {
        reservation = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "reservation-error")
    {
        reservation_error = value;
    }
    if(value_path == "reservation-tear")
    {
        reservation_tear = value;
    }
    if(value_path == "response")
    {
        response = value;
    }
    if(value_path == "srefresh")
    {
        srefresh = value;
    }
}

RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages::BundleTransmittedMessages()
    :
    	ack{YType::uint32, "ack"},
	 bundle{YType::uint32, "bundle"},
	 challenge{YType::uint32, "challenge"},
	 hello{YType::uint32, "hello"},
	 path{YType::uint32, "path"},
	 path_error{YType::uint32, "path-error"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation{YType::uint32, "reservation"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 reservation_error{YType::uint32, "reservation-error"},
	 reservation_tear{YType::uint32, "reservation-tear"},
	 response{YType::uint32, "response"},
	 srefresh{YType::uint32, "srefresh"}
{
    yang_name = "bundle-transmitted-messages"; yang_parent_name = "interface-message";
}

RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages::~BundleTransmittedMessages()
{
}

bool RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages::has_data() const
{
    return ack.is_set
	|| bundle.is_set
	|| challenge.is_set
	|| hello.is_set
	|| path.is_set
	|| path_error.is_set
	|| path_tear.is_set
	|| reservation.is_set
	|| reservation_confirm.is_set
	|| reservation_error.is_set
	|| reservation_tear.is_set
	|| response.is_set
	|| srefresh.is_set;
}

bool RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(ack.operation)
	|| is_set(bundle.operation)
	|| is_set(challenge.operation)
	|| is_set(hello.operation)
	|| is_set(path.operation)
	|| is_set(path_error.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(reservation_error.operation)
	|| is_set(reservation_tear.operation)
	|| is_set(response.operation)
	|| is_set(srefresh.operation);
}

std::string RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bundle-transmitted-messages";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ack.is_set || is_set(ack.operation)) leaf_name_data.push_back(ack.get_name_leafdata());
    if (bundle.is_set || is_set(bundle.operation)) leaf_name_data.push_back(bundle.get_name_leafdata());
    if (challenge.is_set || is_set(challenge.operation)) leaf_name_data.push_back(challenge.get_name_leafdata());
    if (hello.is_set || is_set(hello.operation)) leaf_name_data.push_back(hello.get_name_leafdata());
    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_error.is_set || is_set(path_error.operation)) leaf_name_data.push_back(path_error.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation.is_set || is_set(reservation.operation)) leaf_name_data.push_back(reservation.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (reservation_error.is_set || is_set(reservation_error.operation)) leaf_name_data.push_back(reservation_error.get_name_leafdata());
    if (reservation_tear.is_set || is_set(reservation_tear.operation)) leaf_name_data.push_back(reservation_tear.get_name_leafdata());
    if (response.is_set || is_set(response.operation)) leaf_name_data.push_back(response.get_name_leafdata());
    if (srefresh.is_set || is_set(srefresh.operation)) leaf_name_data.push_back(srefresh.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages::get_children()
{
    return children;
}

void RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ack")
    {
        ack = value;
    }
    if(value_path == "bundle")
    {
        bundle = value;
    }
    if(value_path == "challenge")
    {
        challenge = value;
    }
    if(value_path == "hello")
    {
        hello = value;
    }
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-error")
    {
        path_error = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation")
    {
        reservation = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "reservation-error")
    {
        reservation_error = value;
    }
    if(value_path == "reservation-tear")
    {
        reservation_tear = value;
    }
    if(value_path == "response")
    {
        response = value;
    }
    if(value_path == "srefresh")
    {
        srefresh = value;
    }
}

RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::InterfaceMessage()
    :
    	interface_name{YType::str, "interface-name"},
	 out_of_order_messages{YType::uint32, "out-of-order-messages"},
	 rate_limited_messages{YType::uint32, "rate-limited-messages"},
	 retransmitted_messages{YType::uint32, "retransmitted-messages"}
    	,
    bundle_received_messages(std::make_unique<RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages>())
	,bundle_transmitted_messages(std::make_unique<RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages>())
	,received_messages(std::make_unique<RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages>())
	,transmitted_messages(std::make_unique<RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages>())
{
    bundle_received_messages->parent = this;
    children["bundle-received-messages"] = bundle_received_messages.get();

    bundle_transmitted_messages->parent = this;
    children["bundle-transmitted-messages"] = bundle_transmitted_messages.get();

    received_messages->parent = this;
    children["received-messages"] = received_messages.get();

    transmitted_messages->parent = this;
    children["transmitted-messages"] = transmitted_messages.get();

    yang_name = "interface-message"; yang_parent_name = "interface-messages";
}

RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::~InterfaceMessage()
{
}

bool RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::has_data() const
{
    return interface_name.is_set
	|| out_of_order_messages.is_set
	|| rate_limited_messages.is_set
	|| retransmitted_messages.is_set
	|| (bundle_received_messages !=  nullptr && bundle_received_messages->has_data())
	|| (bundle_transmitted_messages !=  nullptr && bundle_transmitted_messages->has_data())
	|| (received_messages !=  nullptr && received_messages->has_data())
	|| (transmitted_messages !=  nullptr && transmitted_messages->has_data());
}

bool RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| is_set(out_of_order_messages.operation)
	|| is_set(rate_limited_messages.operation)
	|| is_set(retransmitted_messages.operation)
	|| (bundle_received_messages !=  nullptr && bundle_received_messages->has_operation())
	|| (bundle_transmitted_messages !=  nullptr && bundle_transmitted_messages->has_operation())
	|| (received_messages !=  nullptr && received_messages->has_operation())
	|| (transmitted_messages !=  nullptr && transmitted_messages->has_operation());
}

std::string RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-message" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/interface-messages/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (out_of_order_messages.is_set || is_set(out_of_order_messages.operation)) leaf_name_data.push_back(out_of_order_messages.get_name_leafdata());
    if (rate_limited_messages.is_set || is_set(rate_limited_messages.operation)) leaf_name_data.push_back(rate_limited_messages.get_name_leafdata());
    if (retransmitted_messages.is_set || is_set(retransmitted_messages.operation)) leaf_name_data.push_back(retransmitted_messages.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "bundle-received-messages")
    {
        if(bundle_received_messages != nullptr)
        {
            children["bundle-received-messages"] = bundle_received_messages.get();
        }
        else
        {
            bundle_received_messages = std::make_unique<RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages>();
            bundle_received_messages->parent = this;
            children["bundle-received-messages"] = bundle_received_messages.get();
        }
        return children.at("bundle-received-messages");
    }

    if(child_yang_name == "bundle-transmitted-messages")
    {
        if(bundle_transmitted_messages != nullptr)
        {
            children["bundle-transmitted-messages"] = bundle_transmitted_messages.get();
        }
        else
        {
            bundle_transmitted_messages = std::make_unique<RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages>();
            bundle_transmitted_messages->parent = this;
            children["bundle-transmitted-messages"] = bundle_transmitted_messages.get();
        }
        return children.at("bundle-transmitted-messages");
    }

    if(child_yang_name == "received-messages")
    {
        if(received_messages != nullptr)
        {
            children["received-messages"] = received_messages.get();
        }
        else
        {
            received_messages = std::make_unique<RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages>();
            received_messages->parent = this;
            children["received-messages"] = received_messages.get();
        }
        return children.at("received-messages");
    }

    if(child_yang_name == "transmitted-messages")
    {
        if(transmitted_messages != nullptr)
        {
            children["transmitted-messages"] = transmitted_messages.get();
        }
        else
        {
            transmitted_messages = std::make_unique<RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages>();
            transmitted_messages->parent = this;
            children["transmitted-messages"] = transmitted_messages.get();
        }
        return children.at("transmitted-messages");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::get_children()
{
    if(children.find("bundle-received-messages") == children.end())
    {
        if(bundle_received_messages != nullptr)
        {
            children["bundle-received-messages"] = bundle_received_messages.get();
        }
    }

    if(children.find("bundle-transmitted-messages") == children.end())
    {
        if(bundle_transmitted_messages != nullptr)
        {
            children["bundle-transmitted-messages"] = bundle_transmitted_messages.get();
        }
    }

    if(children.find("received-messages") == children.end())
    {
        if(received_messages != nullptr)
        {
            children["received-messages"] = received_messages.get();
        }
    }

    if(children.find("transmitted-messages") == children.end())
    {
        if(transmitted_messages != nullptr)
        {
            children["transmitted-messages"] = transmitted_messages.get();
        }
    }

    return children;
}

void RsvpStandby::Counters::InterfaceMessages::InterfaceMessage::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "out-of-order-messages")
    {
        out_of_order_messages = value;
    }
    if(value_path == "rate-limited-messages")
    {
        rate_limited_messages = value;
    }
    if(value_path == "retransmitted-messages")
    {
        retransmitted_messages = value;
    }
}

RsvpStandby::Counters::InterfaceMessages::InterfaceMessages()
{
    yang_name = "interface-messages"; yang_parent_name = "counters";
}

RsvpStandby::Counters::InterfaceMessages::~InterfaceMessages()
{
}

bool RsvpStandby::Counters::InterfaceMessages::has_data() const
{
    for (std::size_t index=0; index<interface_message.size(); index++)
    {
        if(interface_message[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::Counters::InterfaceMessages::has_operation() const
{
    for (std::size_t index=0; index<interface_message.size(); index++)
    {
        if(interface_message[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::Counters::InterfaceMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-messages";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::InterfaceMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::InterfaceMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-message")
    {
        for(auto const & c : interface_message)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::Counters::InterfaceMessages::InterfaceMessage>();
        c->parent = this;
        interface_message.push_back(std::move(c));
        children[segment_path] = interface_message.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::InterfaceMessages::get_children()
{
    for (auto const & c : interface_message)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::Counters::InterfaceMessages::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::Counters::MessageSummary::ReceivedMessages::ReceivedMessages()
    :
    	ack{YType::uint32, "ack"},
	 bundle{YType::uint32, "bundle"},
	 challenge{YType::uint32, "challenge"},
	 hello{YType::uint32, "hello"},
	 path{YType::uint32, "path"},
	 path_error{YType::uint32, "path-error"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation{YType::uint32, "reservation"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 reservation_error{YType::uint32, "reservation-error"},
	 reservation_tear{YType::uint32, "reservation-tear"},
	 response{YType::uint32, "response"},
	 srefresh{YType::uint32, "srefresh"}
{
    yang_name = "received-messages"; yang_parent_name = "message-summary";
}

RsvpStandby::Counters::MessageSummary::ReceivedMessages::~ReceivedMessages()
{
}

bool RsvpStandby::Counters::MessageSummary::ReceivedMessages::has_data() const
{
    return ack.is_set
	|| bundle.is_set
	|| challenge.is_set
	|| hello.is_set
	|| path.is_set
	|| path_error.is_set
	|| path_tear.is_set
	|| reservation.is_set
	|| reservation_confirm.is_set
	|| reservation_error.is_set
	|| reservation_tear.is_set
	|| response.is_set
	|| srefresh.is_set;
}

bool RsvpStandby::Counters::MessageSummary::ReceivedMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(ack.operation)
	|| is_set(bundle.operation)
	|| is_set(challenge.operation)
	|| is_set(hello.operation)
	|| is_set(path.operation)
	|| is_set(path_error.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(reservation_error.operation)
	|| is_set(reservation_tear.operation)
	|| is_set(response.operation)
	|| is_set(srefresh.operation);
}

std::string RsvpStandby::Counters::MessageSummary::ReceivedMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "received-messages";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::MessageSummary::ReceivedMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/message-summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ack.is_set || is_set(ack.operation)) leaf_name_data.push_back(ack.get_name_leafdata());
    if (bundle.is_set || is_set(bundle.operation)) leaf_name_data.push_back(bundle.get_name_leafdata());
    if (challenge.is_set || is_set(challenge.operation)) leaf_name_data.push_back(challenge.get_name_leafdata());
    if (hello.is_set || is_set(hello.operation)) leaf_name_data.push_back(hello.get_name_leafdata());
    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_error.is_set || is_set(path_error.operation)) leaf_name_data.push_back(path_error.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation.is_set || is_set(reservation.operation)) leaf_name_data.push_back(reservation.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (reservation_error.is_set || is_set(reservation_error.operation)) leaf_name_data.push_back(reservation_error.get_name_leafdata());
    if (reservation_tear.is_set || is_set(reservation_tear.operation)) leaf_name_data.push_back(reservation_tear.get_name_leafdata());
    if (response.is_set || is_set(response.operation)) leaf_name_data.push_back(response.get_name_leafdata());
    if (srefresh.is_set || is_set(srefresh.operation)) leaf_name_data.push_back(srefresh.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::MessageSummary::ReceivedMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::MessageSummary::ReceivedMessages::get_children()
{
    return children;
}

void RsvpStandby::Counters::MessageSummary::ReceivedMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ack")
    {
        ack = value;
    }
    if(value_path == "bundle")
    {
        bundle = value;
    }
    if(value_path == "challenge")
    {
        challenge = value;
    }
    if(value_path == "hello")
    {
        hello = value;
    }
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-error")
    {
        path_error = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation")
    {
        reservation = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "reservation-error")
    {
        reservation_error = value;
    }
    if(value_path == "reservation-tear")
    {
        reservation_tear = value;
    }
    if(value_path == "response")
    {
        response = value;
    }
    if(value_path == "srefresh")
    {
        srefresh = value;
    }
}

RsvpStandby::Counters::MessageSummary::TransmittedMessages::TransmittedMessages()
    :
    	ack{YType::uint32, "ack"},
	 bundle{YType::uint32, "bundle"},
	 challenge{YType::uint32, "challenge"},
	 hello{YType::uint32, "hello"},
	 path{YType::uint32, "path"},
	 path_error{YType::uint32, "path-error"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation{YType::uint32, "reservation"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 reservation_error{YType::uint32, "reservation-error"},
	 reservation_tear{YType::uint32, "reservation-tear"},
	 response{YType::uint32, "response"},
	 srefresh{YType::uint32, "srefresh"}
{
    yang_name = "transmitted-messages"; yang_parent_name = "message-summary";
}

RsvpStandby::Counters::MessageSummary::TransmittedMessages::~TransmittedMessages()
{
}

bool RsvpStandby::Counters::MessageSummary::TransmittedMessages::has_data() const
{
    return ack.is_set
	|| bundle.is_set
	|| challenge.is_set
	|| hello.is_set
	|| path.is_set
	|| path_error.is_set
	|| path_tear.is_set
	|| reservation.is_set
	|| reservation_confirm.is_set
	|| reservation_error.is_set
	|| reservation_tear.is_set
	|| response.is_set
	|| srefresh.is_set;
}

bool RsvpStandby::Counters::MessageSummary::TransmittedMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(ack.operation)
	|| is_set(bundle.operation)
	|| is_set(challenge.operation)
	|| is_set(hello.operation)
	|| is_set(path.operation)
	|| is_set(path_error.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(reservation_error.operation)
	|| is_set(reservation_tear.operation)
	|| is_set(response.operation)
	|| is_set(srefresh.operation);
}

std::string RsvpStandby::Counters::MessageSummary::TransmittedMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "transmitted-messages";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::MessageSummary::TransmittedMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/message-summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ack.is_set || is_set(ack.operation)) leaf_name_data.push_back(ack.get_name_leafdata());
    if (bundle.is_set || is_set(bundle.operation)) leaf_name_data.push_back(bundle.get_name_leafdata());
    if (challenge.is_set || is_set(challenge.operation)) leaf_name_data.push_back(challenge.get_name_leafdata());
    if (hello.is_set || is_set(hello.operation)) leaf_name_data.push_back(hello.get_name_leafdata());
    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_error.is_set || is_set(path_error.operation)) leaf_name_data.push_back(path_error.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation.is_set || is_set(reservation.operation)) leaf_name_data.push_back(reservation.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (reservation_error.is_set || is_set(reservation_error.operation)) leaf_name_data.push_back(reservation_error.get_name_leafdata());
    if (reservation_tear.is_set || is_set(reservation_tear.operation)) leaf_name_data.push_back(reservation_tear.get_name_leafdata());
    if (response.is_set || is_set(response.operation)) leaf_name_data.push_back(response.get_name_leafdata());
    if (srefresh.is_set || is_set(srefresh.operation)) leaf_name_data.push_back(srefresh.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::MessageSummary::TransmittedMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::MessageSummary::TransmittedMessages::get_children()
{
    return children;
}

void RsvpStandby::Counters::MessageSummary::TransmittedMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ack")
    {
        ack = value;
    }
    if(value_path == "bundle")
    {
        bundle = value;
    }
    if(value_path == "challenge")
    {
        challenge = value;
    }
    if(value_path == "hello")
    {
        hello = value;
    }
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-error")
    {
        path_error = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation")
    {
        reservation = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "reservation-error")
    {
        reservation_error = value;
    }
    if(value_path == "reservation-tear")
    {
        reservation_tear = value;
    }
    if(value_path == "response")
    {
        response = value;
    }
    if(value_path == "srefresh")
    {
        srefresh = value;
    }
}

RsvpStandby::Counters::MessageSummary::BundleReceivedMessages::BundleReceivedMessages()
    :
    	ack{YType::uint32, "ack"},
	 bundle{YType::uint32, "bundle"},
	 challenge{YType::uint32, "challenge"},
	 hello{YType::uint32, "hello"},
	 path{YType::uint32, "path"},
	 path_error{YType::uint32, "path-error"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation{YType::uint32, "reservation"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 reservation_error{YType::uint32, "reservation-error"},
	 reservation_tear{YType::uint32, "reservation-tear"},
	 response{YType::uint32, "response"},
	 srefresh{YType::uint32, "srefresh"}
{
    yang_name = "bundle-received-messages"; yang_parent_name = "message-summary";
}

RsvpStandby::Counters::MessageSummary::BundleReceivedMessages::~BundleReceivedMessages()
{
}

bool RsvpStandby::Counters::MessageSummary::BundleReceivedMessages::has_data() const
{
    return ack.is_set
	|| bundle.is_set
	|| challenge.is_set
	|| hello.is_set
	|| path.is_set
	|| path_error.is_set
	|| path_tear.is_set
	|| reservation.is_set
	|| reservation_confirm.is_set
	|| reservation_error.is_set
	|| reservation_tear.is_set
	|| response.is_set
	|| srefresh.is_set;
}

bool RsvpStandby::Counters::MessageSummary::BundleReceivedMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(ack.operation)
	|| is_set(bundle.operation)
	|| is_set(challenge.operation)
	|| is_set(hello.operation)
	|| is_set(path.operation)
	|| is_set(path_error.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(reservation_error.operation)
	|| is_set(reservation_tear.operation)
	|| is_set(response.operation)
	|| is_set(srefresh.operation);
}

std::string RsvpStandby::Counters::MessageSummary::BundleReceivedMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bundle-received-messages";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::MessageSummary::BundleReceivedMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/message-summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ack.is_set || is_set(ack.operation)) leaf_name_data.push_back(ack.get_name_leafdata());
    if (bundle.is_set || is_set(bundle.operation)) leaf_name_data.push_back(bundle.get_name_leafdata());
    if (challenge.is_set || is_set(challenge.operation)) leaf_name_data.push_back(challenge.get_name_leafdata());
    if (hello.is_set || is_set(hello.operation)) leaf_name_data.push_back(hello.get_name_leafdata());
    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_error.is_set || is_set(path_error.operation)) leaf_name_data.push_back(path_error.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation.is_set || is_set(reservation.operation)) leaf_name_data.push_back(reservation.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (reservation_error.is_set || is_set(reservation_error.operation)) leaf_name_data.push_back(reservation_error.get_name_leafdata());
    if (reservation_tear.is_set || is_set(reservation_tear.operation)) leaf_name_data.push_back(reservation_tear.get_name_leafdata());
    if (response.is_set || is_set(response.operation)) leaf_name_data.push_back(response.get_name_leafdata());
    if (srefresh.is_set || is_set(srefresh.operation)) leaf_name_data.push_back(srefresh.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::MessageSummary::BundleReceivedMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::MessageSummary::BundleReceivedMessages::get_children()
{
    return children;
}

void RsvpStandby::Counters::MessageSummary::BundleReceivedMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ack")
    {
        ack = value;
    }
    if(value_path == "bundle")
    {
        bundle = value;
    }
    if(value_path == "challenge")
    {
        challenge = value;
    }
    if(value_path == "hello")
    {
        hello = value;
    }
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-error")
    {
        path_error = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation")
    {
        reservation = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "reservation-error")
    {
        reservation_error = value;
    }
    if(value_path == "reservation-tear")
    {
        reservation_tear = value;
    }
    if(value_path == "response")
    {
        response = value;
    }
    if(value_path == "srefresh")
    {
        srefresh = value;
    }
}

RsvpStandby::Counters::MessageSummary::BundleTransmittedMessages::BundleTransmittedMessages()
    :
    	ack{YType::uint32, "ack"},
	 bundle{YType::uint32, "bundle"},
	 challenge{YType::uint32, "challenge"},
	 hello{YType::uint32, "hello"},
	 path{YType::uint32, "path"},
	 path_error{YType::uint32, "path-error"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation{YType::uint32, "reservation"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 reservation_error{YType::uint32, "reservation-error"},
	 reservation_tear{YType::uint32, "reservation-tear"},
	 response{YType::uint32, "response"},
	 srefresh{YType::uint32, "srefresh"}
{
    yang_name = "bundle-transmitted-messages"; yang_parent_name = "message-summary";
}

RsvpStandby::Counters::MessageSummary::BundleTransmittedMessages::~BundleTransmittedMessages()
{
}

bool RsvpStandby::Counters::MessageSummary::BundleTransmittedMessages::has_data() const
{
    return ack.is_set
	|| bundle.is_set
	|| challenge.is_set
	|| hello.is_set
	|| path.is_set
	|| path_error.is_set
	|| path_tear.is_set
	|| reservation.is_set
	|| reservation_confirm.is_set
	|| reservation_error.is_set
	|| reservation_tear.is_set
	|| response.is_set
	|| srefresh.is_set;
}

bool RsvpStandby::Counters::MessageSummary::BundleTransmittedMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(ack.operation)
	|| is_set(bundle.operation)
	|| is_set(challenge.operation)
	|| is_set(hello.operation)
	|| is_set(path.operation)
	|| is_set(path_error.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(reservation_error.operation)
	|| is_set(reservation_tear.operation)
	|| is_set(response.operation)
	|| is_set(srefresh.operation);
}

std::string RsvpStandby::Counters::MessageSummary::BundleTransmittedMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bundle-transmitted-messages";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::MessageSummary::BundleTransmittedMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/message-summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ack.is_set || is_set(ack.operation)) leaf_name_data.push_back(ack.get_name_leafdata());
    if (bundle.is_set || is_set(bundle.operation)) leaf_name_data.push_back(bundle.get_name_leafdata());
    if (challenge.is_set || is_set(challenge.operation)) leaf_name_data.push_back(challenge.get_name_leafdata());
    if (hello.is_set || is_set(hello.operation)) leaf_name_data.push_back(hello.get_name_leafdata());
    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_error.is_set || is_set(path_error.operation)) leaf_name_data.push_back(path_error.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation.is_set || is_set(reservation.operation)) leaf_name_data.push_back(reservation.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (reservation_error.is_set || is_set(reservation_error.operation)) leaf_name_data.push_back(reservation_error.get_name_leafdata());
    if (reservation_tear.is_set || is_set(reservation_tear.operation)) leaf_name_data.push_back(reservation_tear.get_name_leafdata());
    if (response.is_set || is_set(response.operation)) leaf_name_data.push_back(response.get_name_leafdata());
    if (srefresh.is_set || is_set(srefresh.operation)) leaf_name_data.push_back(srefresh.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::MessageSummary::BundleTransmittedMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::MessageSummary::BundleTransmittedMessages::get_children()
{
    return children;
}

void RsvpStandby::Counters::MessageSummary::BundleTransmittedMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ack")
    {
        ack = value;
    }
    if(value_path == "bundle")
    {
        bundle = value;
    }
    if(value_path == "challenge")
    {
        challenge = value;
    }
    if(value_path == "hello")
    {
        hello = value;
    }
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-error")
    {
        path_error = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation")
    {
        reservation = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "reservation-error")
    {
        reservation_error = value;
    }
    if(value_path == "reservation-tear")
    {
        reservation_tear = value;
    }
    if(value_path == "response")
    {
        response = value;
    }
    if(value_path == "srefresh")
    {
        srefresh = value;
    }
}

RsvpStandby::Counters::MessageSummary::MessageSummary()
    :
    	out_of_order_messages{YType::uint32, "out-of-order-messages"},
	 rate_limited_messages{YType::uint32, "rate-limited-messages"},
	 retransmitted_messages{YType::uint32, "retransmitted-messages"}
    	,
    bundle_received_messages(std::make_unique<RsvpStandby::Counters::MessageSummary::BundleReceivedMessages>())
	,bundle_transmitted_messages(std::make_unique<RsvpStandby::Counters::MessageSummary::BundleTransmittedMessages>())
	,received_messages(std::make_unique<RsvpStandby::Counters::MessageSummary::ReceivedMessages>())
	,transmitted_messages(std::make_unique<RsvpStandby::Counters::MessageSummary::TransmittedMessages>())
{
    bundle_received_messages->parent = this;
    children["bundle-received-messages"] = bundle_received_messages.get();

    bundle_transmitted_messages->parent = this;
    children["bundle-transmitted-messages"] = bundle_transmitted_messages.get();

    received_messages->parent = this;
    children["received-messages"] = received_messages.get();

    transmitted_messages->parent = this;
    children["transmitted-messages"] = transmitted_messages.get();

    yang_name = "message-summary"; yang_parent_name = "counters";
}

RsvpStandby::Counters::MessageSummary::~MessageSummary()
{
}

bool RsvpStandby::Counters::MessageSummary::has_data() const
{
    return out_of_order_messages.is_set
	|| rate_limited_messages.is_set
	|| retransmitted_messages.is_set
	|| (bundle_received_messages !=  nullptr && bundle_received_messages->has_data())
	|| (bundle_transmitted_messages !=  nullptr && bundle_transmitted_messages->has_data())
	|| (received_messages !=  nullptr && received_messages->has_data())
	|| (transmitted_messages !=  nullptr && transmitted_messages->has_data());
}

bool RsvpStandby::Counters::MessageSummary::has_operation() const
{
    return is_set(operation)
	|| is_set(out_of_order_messages.operation)
	|| is_set(rate_limited_messages.operation)
	|| is_set(retransmitted_messages.operation)
	|| (bundle_received_messages !=  nullptr && bundle_received_messages->has_operation())
	|| (bundle_transmitted_messages !=  nullptr && bundle_transmitted_messages->has_operation())
	|| (received_messages !=  nullptr && received_messages->has_operation())
	|| (transmitted_messages !=  nullptr && transmitted_messages->has_operation());
}

std::string RsvpStandby::Counters::MessageSummary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "message-summary";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::MessageSummary::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (out_of_order_messages.is_set || is_set(out_of_order_messages.operation)) leaf_name_data.push_back(out_of_order_messages.get_name_leafdata());
    if (rate_limited_messages.is_set || is_set(rate_limited_messages.operation)) leaf_name_data.push_back(rate_limited_messages.get_name_leafdata());
    if (retransmitted_messages.is_set || is_set(retransmitted_messages.operation)) leaf_name_data.push_back(retransmitted_messages.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::MessageSummary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "bundle-received-messages")
    {
        if(bundle_received_messages != nullptr)
        {
            children["bundle-received-messages"] = bundle_received_messages.get();
        }
        else
        {
            bundle_received_messages = std::make_unique<RsvpStandby::Counters::MessageSummary::BundleReceivedMessages>();
            bundle_received_messages->parent = this;
            children["bundle-received-messages"] = bundle_received_messages.get();
        }
        return children.at("bundle-received-messages");
    }

    if(child_yang_name == "bundle-transmitted-messages")
    {
        if(bundle_transmitted_messages != nullptr)
        {
            children["bundle-transmitted-messages"] = bundle_transmitted_messages.get();
        }
        else
        {
            bundle_transmitted_messages = std::make_unique<RsvpStandby::Counters::MessageSummary::BundleTransmittedMessages>();
            bundle_transmitted_messages->parent = this;
            children["bundle-transmitted-messages"] = bundle_transmitted_messages.get();
        }
        return children.at("bundle-transmitted-messages");
    }

    if(child_yang_name == "received-messages")
    {
        if(received_messages != nullptr)
        {
            children["received-messages"] = received_messages.get();
        }
        else
        {
            received_messages = std::make_unique<RsvpStandby::Counters::MessageSummary::ReceivedMessages>();
            received_messages->parent = this;
            children["received-messages"] = received_messages.get();
        }
        return children.at("received-messages");
    }

    if(child_yang_name == "transmitted-messages")
    {
        if(transmitted_messages != nullptr)
        {
            children["transmitted-messages"] = transmitted_messages.get();
        }
        else
        {
            transmitted_messages = std::make_unique<RsvpStandby::Counters::MessageSummary::TransmittedMessages>();
            transmitted_messages->parent = this;
            children["transmitted-messages"] = transmitted_messages.get();
        }
        return children.at("transmitted-messages");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::MessageSummary::get_children()
{
    if(children.find("bundle-received-messages") == children.end())
    {
        if(bundle_received_messages != nullptr)
        {
            children["bundle-received-messages"] = bundle_received_messages.get();
        }
    }

    if(children.find("bundle-transmitted-messages") == children.end())
    {
        if(bundle_transmitted_messages != nullptr)
        {
            children["bundle-transmitted-messages"] = bundle_transmitted_messages.get();
        }
    }

    if(children.find("received-messages") == children.end())
    {
        if(received_messages != nullptr)
        {
            children["received-messages"] = received_messages.get();
        }
    }

    if(children.find("transmitted-messages") == children.end())
    {
        if(transmitted_messages != nullptr)
        {
            children["transmitted-messages"] = transmitted_messages.get();
        }
    }

    return children;
}

void RsvpStandby::Counters::MessageSummary::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "out-of-order-messages")
    {
        out_of_order_messages = value;
    }
    if(value_path == "rate-limited-messages")
    {
        rate_limited_messages = value;
    }
    if(value_path == "retransmitted-messages")
    {
        retransmitted_messages = value;
    }
}

RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Forwarded::Forwarded()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "forwarded"; yang_parent_name = "access";
}

RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Forwarded::~Forwarded()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Forwarded::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Forwarded::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Forwarded::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "forwarded";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Forwarded::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Forwarded::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Forwarded::get_children()
{
    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Forwarded::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

RsvpStandby::Counters::PrefixFiltering::Accesses::Access::LocallyDestined::LocallyDestined()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "locally-destined"; yang_parent_name = "access";
}

RsvpStandby::Counters::PrefixFiltering::Accesses::Access::LocallyDestined::~LocallyDestined()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Accesses::Access::LocallyDestined::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool RsvpStandby::Counters::PrefixFiltering::Accesses::Access::LocallyDestined::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string RsvpStandby::Counters::PrefixFiltering::Accesses::Access::LocallyDestined::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "locally-destined";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Accesses::Access::LocallyDestined::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Accesses::Access::LocallyDestined::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Accesses::Access::LocallyDestined::get_children()
{
    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Accesses::Access::LocallyDestined::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Dropped::Dropped()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "dropped"; yang_parent_name = "access";
}

RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Dropped::~Dropped()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Dropped::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Dropped::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Dropped::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "dropped";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Dropped::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Dropped::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Dropped::get_children()
{
    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Dropped::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Total::Total()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "total"; yang_parent_name = "access";
}

RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Total::~Total()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Total::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Total::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Total::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "total";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Total::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Total::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Total::get_children()
{
    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Total::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Access()
    :
    	access_list_name{YType::str, "access-list-name"}
    	,
    dropped(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Dropped>())
	,forwarded(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Forwarded>())
	,locally_destined(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Accesses::Access::LocallyDestined>())
	,total(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Total>())
{
    dropped->parent = this;
    children["dropped"] = dropped.get();

    forwarded->parent = this;
    children["forwarded"] = forwarded.get();

    locally_destined->parent = this;
    children["locally-destined"] = locally_destined.get();

    total->parent = this;
    children["total"] = total.get();

    yang_name = "access"; yang_parent_name = "accesses";
}

RsvpStandby::Counters::PrefixFiltering::Accesses::Access::~Access()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Accesses::Access::has_data() const
{
    return access_list_name.is_set
	|| (dropped !=  nullptr && dropped->has_data())
	|| (forwarded !=  nullptr && forwarded->has_data())
	|| (locally_destined !=  nullptr && locally_destined->has_data())
	|| (total !=  nullptr && total->has_data());
}

bool RsvpStandby::Counters::PrefixFiltering::Accesses::Access::has_operation() const
{
    return is_set(operation)
	|| is_set(access_list_name.operation)
	|| (dropped !=  nullptr && dropped->has_operation())
	|| (forwarded !=  nullptr && forwarded->has_operation())
	|| (locally_destined !=  nullptr && locally_destined->has_operation())
	|| (total !=  nullptr && total->has_operation());
}

std::string RsvpStandby::Counters::PrefixFiltering::Accesses::Access::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "access" <<"[access-list-name='" <<access_list_name.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Accesses::Access::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/accesses/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (access_list_name.is_set || is_set(access_list_name.operation)) leaf_name_data.push_back(access_list_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Accesses::Access::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "dropped")
    {
        if(dropped != nullptr)
        {
            children["dropped"] = dropped.get();
        }
        else
        {
            dropped = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Dropped>();
            dropped->parent = this;
            children["dropped"] = dropped.get();
        }
        return children.at("dropped");
    }

    if(child_yang_name == "forwarded")
    {
        if(forwarded != nullptr)
        {
            children["forwarded"] = forwarded.get();
        }
        else
        {
            forwarded = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Forwarded>();
            forwarded->parent = this;
            children["forwarded"] = forwarded.get();
        }
        return children.at("forwarded");
    }

    if(child_yang_name == "locally-destined")
    {
        if(locally_destined != nullptr)
        {
            children["locally-destined"] = locally_destined.get();
        }
        else
        {
            locally_destined = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Accesses::Access::LocallyDestined>();
            locally_destined->parent = this;
            children["locally-destined"] = locally_destined.get();
        }
        return children.at("locally-destined");
    }

    if(child_yang_name == "total")
    {
        if(total != nullptr)
        {
            children["total"] = total.get();
        }
        else
        {
            total = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Accesses::Access::Total>();
            total->parent = this;
            children["total"] = total.get();
        }
        return children.at("total");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Accesses::Access::get_children()
{
    if(children.find("dropped") == children.end())
    {
        if(dropped != nullptr)
        {
            children["dropped"] = dropped.get();
        }
    }

    if(children.find("forwarded") == children.end())
    {
        if(forwarded != nullptr)
        {
            children["forwarded"] = forwarded.get();
        }
    }

    if(children.find("locally-destined") == children.end())
    {
        if(locally_destined != nullptr)
        {
            children["locally-destined"] = locally_destined.get();
        }
    }

    if(children.find("total") == children.end())
    {
        if(total != nullptr)
        {
            children["total"] = total.get();
        }
    }

    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Accesses::Access::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "access-list-name")
    {
        access_list_name = value;
    }
}

RsvpStandby::Counters::PrefixFiltering::Accesses::Accesses()
{
    yang_name = "accesses"; yang_parent_name = "prefix-filtering";
}

RsvpStandby::Counters::PrefixFiltering::Accesses::~Accesses()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Accesses::has_data() const
{
    for (std::size_t index=0; index<access.size(); index++)
    {
        if(access[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::Counters::PrefixFiltering::Accesses::has_operation() const
{
    for (std::size_t index=0; index<access.size(); index++)
    {
        if(access[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::Counters::PrefixFiltering::Accesses::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "accesses";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Accesses::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Accesses::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "access")
    {
        for(auto const & c : access)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Accesses::Access>();
        c->parent = this;
        access.push_back(std::move(c));
        children[segment_path] = access.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Accesses::get_children()
{
    for (auto const & c : access)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Accesses::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Forwarded::Forwarded()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "forwarded"; yang_parent_name = "summary";
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Forwarded::~Forwarded()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Forwarded::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Forwarded::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Forwarded::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "forwarded";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Forwarded::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Forwarded::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Forwarded::get_children()
{
    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Forwarded::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined::LocallyDestined()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "locally-destined"; yang_parent_name = "summary";
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined::~LocallyDestined()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "locally-destined";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined::get_children()
{
    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Dropped::Dropped()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "dropped"; yang_parent_name = "summary";
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Dropped::~Dropped()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Dropped::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Dropped::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Dropped::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "dropped";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Dropped::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Dropped::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Dropped::get_children()
{
    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Dropped::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped::DefaultActionDropped()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "default-action-dropped"; yang_parent_name = "summary";
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped::~DefaultActionDropped()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "default-action-dropped";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped::get_children()
{
    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed::DefaultActionProcessed()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "default-action-processed"; yang_parent_name = "summary";
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed::~DefaultActionProcessed()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "default-action-processed";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed::get_children()
{
    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Total::Total()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "total"; yang_parent_name = "summary";
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Total::~Total()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Total::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Total::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Total::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "total";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Total::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Total::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Total::get_children()
{
    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Total::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Summary()
    :
    default_action_dropped(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped>())
	,default_action_processed(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed>())
	,dropped(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Dropped>())
	,forwarded(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Forwarded>())
	,locally_destined(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined>())
	,total(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Total>())
{
    default_action_dropped->parent = this;
    children["default-action-dropped"] = default_action_dropped.get();

    default_action_processed->parent = this;
    children["default-action-processed"] = default_action_processed.get();

    dropped->parent = this;
    children["dropped"] = dropped.get();

    forwarded->parent = this;
    children["forwarded"] = forwarded.get();

    locally_destined->parent = this;
    children["locally-destined"] = locally_destined.get();

    total->parent = this;
    children["total"] = total.get();

    yang_name = "summary"; yang_parent_name = "interfaces";
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::~Summary()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::has_data() const
{
    return (default_action_dropped !=  nullptr && default_action_dropped->has_data())
	|| (default_action_processed !=  nullptr && default_action_processed->has_data())
	|| (dropped !=  nullptr && dropped->has_data())
	|| (forwarded !=  nullptr && forwarded->has_data())
	|| (locally_destined !=  nullptr && locally_destined->has_data())
	|| (total !=  nullptr && total->has_data());
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::has_operation() const
{
    return is_set(operation)
	|| (default_action_dropped !=  nullptr && default_action_dropped->has_operation())
	|| (default_action_processed !=  nullptr && default_action_processed->has_operation())
	|| (dropped !=  nullptr && dropped->has_operation())
	|| (forwarded !=  nullptr && forwarded->has_operation())
	|| (locally_destined !=  nullptr && locally_destined->has_operation())
	|| (total !=  nullptr && total->has_operation());
}

std::string RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "summary";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "default-action-dropped")
    {
        if(default_action_dropped != nullptr)
        {
            children["default-action-dropped"] = default_action_dropped.get();
        }
        else
        {
            default_action_dropped = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped>();
            default_action_dropped->parent = this;
            children["default-action-dropped"] = default_action_dropped.get();
        }
        return children.at("default-action-dropped");
    }

    if(child_yang_name == "default-action-processed")
    {
        if(default_action_processed != nullptr)
        {
            children["default-action-processed"] = default_action_processed.get();
        }
        else
        {
            default_action_processed = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed>();
            default_action_processed->parent = this;
            children["default-action-processed"] = default_action_processed.get();
        }
        return children.at("default-action-processed");
    }

    if(child_yang_name == "dropped")
    {
        if(dropped != nullptr)
        {
            children["dropped"] = dropped.get();
        }
        else
        {
            dropped = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Dropped>();
            dropped->parent = this;
            children["dropped"] = dropped.get();
        }
        return children.at("dropped");
    }

    if(child_yang_name == "forwarded")
    {
        if(forwarded != nullptr)
        {
            children["forwarded"] = forwarded.get();
        }
        else
        {
            forwarded = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Forwarded>();
            forwarded->parent = this;
            children["forwarded"] = forwarded.get();
        }
        return children.at("forwarded");
    }

    if(child_yang_name == "locally-destined")
    {
        if(locally_destined != nullptr)
        {
            children["locally-destined"] = locally_destined.get();
        }
        else
        {
            locally_destined = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined>();
            locally_destined->parent = this;
            children["locally-destined"] = locally_destined.get();
        }
        return children.at("locally-destined");
    }

    if(child_yang_name == "total")
    {
        if(total != nullptr)
        {
            children["total"] = total.get();
        }
        else
        {
            total = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::Total>();
            total->parent = this;
            children["total"] = total.get();
        }
        return children.at("total");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::get_children()
{
    if(children.find("default-action-dropped") == children.end())
    {
        if(default_action_dropped != nullptr)
        {
            children["default-action-dropped"] = default_action_dropped.get();
        }
    }

    if(children.find("default-action-processed") == children.end())
    {
        if(default_action_processed != nullptr)
        {
            children["default-action-processed"] = default_action_processed.get();
        }
    }

    if(children.find("dropped") == children.end())
    {
        if(dropped != nullptr)
        {
            children["dropped"] = dropped.get();
        }
    }

    if(children.find("forwarded") == children.end())
    {
        if(forwarded != nullptr)
        {
            children["forwarded"] = forwarded.get();
        }
    }

    if(children.find("locally-destined") == children.end())
    {
        if(locally_destined != nullptr)
        {
            children["locally-destined"] = locally_destined.get();
        }
    }

    if(children.find("total") == children.end())
    {
        if(total != nullptr)
        {
            children["total"] = total.get();
        }
    }

    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded::Forwarded()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "forwarded"; yang_parent_name = "interface";
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded::~Forwarded()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "forwarded";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded::get_children()
{
    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined::LocallyDestined()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "locally-destined"; yang_parent_name = "interface";
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined::~LocallyDestined()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "locally-destined";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined::get_children()
{
    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped::Dropped()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "dropped"; yang_parent_name = "interface";
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped::~Dropped()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "dropped";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped::get_children()
{
    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped::DefaultActionDropped()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "default-action-dropped"; yang_parent_name = "interface";
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped::~DefaultActionDropped()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "default-action-dropped";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped::get_children()
{
    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed::DefaultActionProcessed()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "default-action-processed"; yang_parent_name = "interface";
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed::~DefaultActionProcessed()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "default-action-processed";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed::get_children()
{
    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total::Total()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "total"; yang_parent_name = "interface";
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total::~Total()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "total";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total::get_children()
{
    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Interface()
    :
    	interface_name{YType::str, "interface-name"}
    	,
    default_action_dropped(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped>())
	,default_action_processed(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed>())
	,dropped(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped>())
	,forwarded(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded>())
	,locally_destined(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined>())
	,total(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total>())
{
    default_action_dropped->parent = this;
    children["default-action-dropped"] = default_action_dropped.get();

    default_action_processed->parent = this;
    children["default-action-processed"] = default_action_processed.get();

    dropped->parent = this;
    children["dropped"] = dropped.get();

    forwarded->parent = this;
    children["forwarded"] = forwarded.get();

    locally_destined->parent = this;
    children["locally-destined"] = locally_destined.get();

    total->parent = this;
    children["total"] = total.get();

    yang_name = "interface"; yang_parent_name = "interfaces";
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::~Interface()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::has_data() const
{
    return interface_name.is_set
	|| (default_action_dropped !=  nullptr && default_action_dropped->has_data())
	|| (default_action_processed !=  nullptr && default_action_processed->has_data())
	|| (dropped !=  nullptr && dropped->has_data())
	|| (forwarded !=  nullptr && forwarded->has_data())
	|| (locally_destined !=  nullptr && locally_destined->has_data())
	|| (total !=  nullptr && total->has_data());
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| (default_action_dropped !=  nullptr && default_action_dropped->has_operation())
	|| (default_action_processed !=  nullptr && default_action_processed->has_operation())
	|| (dropped !=  nullptr && dropped->has_operation())
	|| (forwarded !=  nullptr && forwarded->has_operation())
	|| (locally_destined !=  nullptr && locally_destined->has_operation())
	|| (total !=  nullptr && total->has_operation());
}

std::string RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/interfaces/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "default-action-dropped")
    {
        if(default_action_dropped != nullptr)
        {
            children["default-action-dropped"] = default_action_dropped.get();
        }
        else
        {
            default_action_dropped = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped>();
            default_action_dropped->parent = this;
            children["default-action-dropped"] = default_action_dropped.get();
        }
        return children.at("default-action-dropped");
    }

    if(child_yang_name == "default-action-processed")
    {
        if(default_action_processed != nullptr)
        {
            children["default-action-processed"] = default_action_processed.get();
        }
        else
        {
            default_action_processed = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed>();
            default_action_processed->parent = this;
            children["default-action-processed"] = default_action_processed.get();
        }
        return children.at("default-action-processed");
    }

    if(child_yang_name == "dropped")
    {
        if(dropped != nullptr)
        {
            children["dropped"] = dropped.get();
        }
        else
        {
            dropped = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped>();
            dropped->parent = this;
            children["dropped"] = dropped.get();
        }
        return children.at("dropped");
    }

    if(child_yang_name == "forwarded")
    {
        if(forwarded != nullptr)
        {
            children["forwarded"] = forwarded.get();
        }
        else
        {
            forwarded = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded>();
            forwarded->parent = this;
            children["forwarded"] = forwarded.get();
        }
        return children.at("forwarded");
    }

    if(child_yang_name == "locally-destined")
    {
        if(locally_destined != nullptr)
        {
            children["locally-destined"] = locally_destined.get();
        }
        else
        {
            locally_destined = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined>();
            locally_destined->parent = this;
            children["locally-destined"] = locally_destined.get();
        }
        return children.at("locally-destined");
    }

    if(child_yang_name == "total")
    {
        if(total != nullptr)
        {
            children["total"] = total.get();
        }
        else
        {
            total = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total>();
            total->parent = this;
            children["total"] = total.get();
        }
        return children.at("total");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::get_children()
{
    if(children.find("default-action-dropped") == children.end())
    {
        if(default_action_dropped != nullptr)
        {
            children["default-action-dropped"] = default_action_dropped.get();
        }
    }

    if(children.find("default-action-processed") == children.end())
    {
        if(default_action_processed != nullptr)
        {
            children["default-action-processed"] = default_action_processed.get();
        }
    }

    if(children.find("dropped") == children.end())
    {
        if(dropped != nullptr)
        {
            children["dropped"] = dropped.get();
        }
    }

    if(children.find("forwarded") == children.end())
    {
        if(forwarded != nullptr)
        {
            children["forwarded"] = forwarded.get();
        }
    }

    if(children.find("locally-destined") == children.end())
    {
        if(locally_destined != nullptr)
        {
            children["locally-destined"] = locally_destined.get();
        }
    }

    if(children.find("total") == children.end())
    {
        if(total != nullptr)
        {
            children["total"] = total.get();
        }
    }

    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interfaces_()
{
    yang_name = "interfaces"; yang_parent_name = "interfaces";
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::~Interfaces_()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::has_data() const
{
    for (std::size_t index=0; index<interface.size(); index++)
    {
        if(interface[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::has_operation() const
{
    for (std::size_t index=0; index<interface.size(); index++)
    {
        if(interface[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interfaces";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface")
    {
        for(auto const & c : interface)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface>();
        c->parent = this;
        interface.push_back(std::move(c));
        children[segment_path] = interface.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::get_children()
{
    for (auto const & c : interface)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces()
    :
    interfaces(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_>())
	,summary(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary>())
{
    interfaces->parent = this;
    children["interfaces"] = interfaces.get();

    summary->parent = this;
    children["summary"] = summary.get();

    yang_name = "interfaces"; yang_parent_name = "prefix-filtering";
}

RsvpStandby::Counters::PrefixFiltering::Interfaces::~Interfaces()
{
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::has_data() const
{
    return (interfaces !=  nullptr && interfaces->has_data())
	|| (summary !=  nullptr && summary->has_data());
}

bool RsvpStandby::Counters::PrefixFiltering::Interfaces::has_operation() const
{
    return is_set(operation)
	|| (interfaces !=  nullptr && interfaces->has_operation())
	|| (summary !=  nullptr && summary->has_operation());
}

std::string RsvpStandby::Counters::PrefixFiltering::Interfaces::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interfaces";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::Interfaces::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::Interfaces::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interfaces")
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
        else
        {
            interfaces = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Interfaces_>();
            interfaces->parent = this;
            children["interfaces"] = interfaces.get();
        }
        return children.at("interfaces");
    }

    if(child_yang_name == "summary")
    {
        if(summary != nullptr)
        {
            children["summary"] = summary.get();
        }
        else
        {
            summary = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces::Summary>();
            summary->parent = this;
            children["summary"] = summary.get();
        }
        return children.at("summary");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::Interfaces::get_children()
{
    if(children.find("interfaces") == children.end())
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
    }

    if(children.find("summary") == children.end())
    {
        if(summary != nullptr)
        {
            children["summary"] = summary.get();
        }
    }

    return children;
}

void RsvpStandby::Counters::PrefixFiltering::Interfaces::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::Counters::PrefixFiltering::PrefixFiltering()
    :
    accesses(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Accesses>())
	,interfaces(std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces>())
{
    accesses->parent = this;
    children["accesses"] = accesses.get();

    interfaces->parent = this;
    children["interfaces"] = interfaces.get();

    yang_name = "prefix-filtering"; yang_parent_name = "counters";
}

RsvpStandby::Counters::PrefixFiltering::~PrefixFiltering()
{
}

bool RsvpStandby::Counters::PrefixFiltering::has_data() const
{
    return (accesses !=  nullptr && accesses->has_data())
	|| (interfaces !=  nullptr && interfaces->has_data());
}

bool RsvpStandby::Counters::PrefixFiltering::has_operation() const
{
    return is_set(operation)
	|| (accesses !=  nullptr && accesses->has_operation())
	|| (interfaces !=  nullptr && interfaces->has_operation());
}

std::string RsvpStandby::Counters::PrefixFiltering::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "prefix-filtering";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::PrefixFiltering::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::PrefixFiltering::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "accesses")
    {
        if(accesses != nullptr)
        {
            children["accesses"] = accesses.get();
        }
        else
        {
            accesses = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Accesses>();
            accesses->parent = this;
            children["accesses"] = accesses.get();
        }
        return children.at("accesses");
    }

    if(child_yang_name == "interfaces")
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
        else
        {
            interfaces = std::make_unique<RsvpStandby::Counters::PrefixFiltering::Interfaces>();
            interfaces->parent = this;
            children["interfaces"] = interfaces.get();
        }
        return children.at("interfaces");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::PrefixFiltering::get_children()
{
    if(children.find("accesses") == children.end())
    {
        if(accesses != nullptr)
        {
            children["accesses"] = accesses.get();
        }
    }

    if(children.find("interfaces") == children.end())
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
    }

    return children;
}

void RsvpStandby::Counters::PrefixFiltering::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::Counters::OutOfResource::Interfaces::Summary::Summary()
    :
    	dropped_path_messages{YType::uint32, "dropped-path-messages"}
{
    yang_name = "summary"; yang_parent_name = "interfaces";
}

RsvpStandby::Counters::OutOfResource::Interfaces::Summary::~Summary()
{
}

bool RsvpStandby::Counters::OutOfResource::Interfaces::Summary::has_data() const
{
    return dropped_path_messages.is_set;
}

bool RsvpStandby::Counters::OutOfResource::Interfaces::Summary::has_operation() const
{
    return is_set(operation)
	|| is_set(dropped_path_messages.operation);
}

std::string RsvpStandby::Counters::OutOfResource::Interfaces::Summary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "summary";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::OutOfResource::Interfaces::Summary::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/out-of-resource/interfaces/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (dropped_path_messages.is_set || is_set(dropped_path_messages.operation)) leaf_name_data.push_back(dropped_path_messages.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::OutOfResource::Interfaces::Summary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::OutOfResource::Interfaces::Summary::get_children()
{
    return children;
}

void RsvpStandby::Counters::OutOfResource::Interfaces::Summary::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "dropped-path-messages")
    {
        dropped_path_messages = value;
    }
}

RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_::Interface::Interface()
    :
    	interface_name{YType::str, "interface-name"},
	 dropped_path_messages{YType::uint32, "dropped-path-messages"}
{
    yang_name = "interface"; yang_parent_name = "interfaces";
}

RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_::Interface::~Interface()
{
}

bool RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_::Interface::has_data() const
{
    return interface_name.is_set
	|| dropped_path_messages.is_set;
}

bool RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_::Interface::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| is_set(dropped_path_messages.operation);
}

std::string RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_::Interface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_::Interface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/out-of-resource/interfaces/interfaces/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (dropped_path_messages.is_set || is_set(dropped_path_messages.operation)) leaf_name_data.push_back(dropped_path_messages.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_::Interface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_::Interface::get_children()
{
    return children;
}

void RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_::Interface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "dropped-path-messages")
    {
        dropped_path_messages = value;
    }
}

RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_::Interfaces_()
{
    yang_name = "interfaces"; yang_parent_name = "interfaces";
}

RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_::~Interfaces_()
{
}

bool RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_::has_data() const
{
    for (std::size_t index=0; index<interface.size(); index++)
    {
        if(interface[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_::has_operation() const
{
    for (std::size_t index=0; index<interface.size(); index++)
    {
        if(interface[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interfaces";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/out-of-resource/interfaces/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface")
    {
        for(auto const & c : interface)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_::Interface>();
        c->parent = this;
        interface.push_back(std::move(c));
        children[segment_path] = interface.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_::get_children()
{
    for (auto const & c : interface)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces()
    :
    interfaces(std::make_unique<RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_>())
	,summary(std::make_unique<RsvpStandby::Counters::OutOfResource::Interfaces::Summary>())
{
    interfaces->parent = this;
    children["interfaces"] = interfaces.get();

    summary->parent = this;
    children["summary"] = summary.get();

    yang_name = "interfaces"; yang_parent_name = "out-of-resource";
}

RsvpStandby::Counters::OutOfResource::Interfaces::~Interfaces()
{
}

bool RsvpStandby::Counters::OutOfResource::Interfaces::has_data() const
{
    return (interfaces !=  nullptr && interfaces->has_data())
	|| (summary !=  nullptr && summary->has_data());
}

bool RsvpStandby::Counters::OutOfResource::Interfaces::has_operation() const
{
    return is_set(operation)
	|| (interfaces !=  nullptr && interfaces->has_operation())
	|| (summary !=  nullptr && summary->has_operation());
}

std::string RsvpStandby::Counters::OutOfResource::Interfaces::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interfaces";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::OutOfResource::Interfaces::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/out-of-resource/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::OutOfResource::Interfaces::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interfaces")
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
        else
        {
            interfaces = std::make_unique<RsvpStandby::Counters::OutOfResource::Interfaces::Interfaces_>();
            interfaces->parent = this;
            children["interfaces"] = interfaces.get();
        }
        return children.at("interfaces");
    }

    if(child_yang_name == "summary")
    {
        if(summary != nullptr)
        {
            children["summary"] = summary.get();
        }
        else
        {
            summary = std::make_unique<RsvpStandby::Counters::OutOfResource::Interfaces::Summary>();
            summary->parent = this;
            children["summary"] = summary.get();
        }
        return children.at("summary");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::OutOfResource::Interfaces::get_children()
{
    if(children.find("interfaces") == children.end())
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
    }

    if(children.find("summary") == children.end())
    {
        if(summary != nullptr)
        {
            children["summary"] = summary.get();
        }
    }

    return children;
}

void RsvpStandby::Counters::OutOfResource::Interfaces::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::Counters::OutOfResource::OutOfResource()
    :
    interfaces(std::make_unique<RsvpStandby::Counters::OutOfResource::Interfaces>())
{
    interfaces->parent = this;
    children["interfaces"] = interfaces.get();

    yang_name = "out-of-resource"; yang_parent_name = "counters";
}

RsvpStandby::Counters::OutOfResource::~OutOfResource()
{
}

bool RsvpStandby::Counters::OutOfResource::has_data() const
{
    return (interfaces !=  nullptr && interfaces->has_data());
}

bool RsvpStandby::Counters::OutOfResource::has_operation() const
{
    return is_set(operation)
	|| (interfaces !=  nullptr && interfaces->has_operation());
}

std::string RsvpStandby::Counters::OutOfResource::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "out-of-resource";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::OutOfResource::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::OutOfResource::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interfaces")
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
        else
        {
            interfaces = std::make_unique<RsvpStandby::Counters::OutOfResource::Interfaces>();
            interfaces->parent = this;
            children["interfaces"] = interfaces.get();
        }
        return children.at("interfaces");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::OutOfResource::get_children()
{
    if(children.find("interfaces") == children.end())
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
    }

    return children;
}

void RsvpStandby::Counters::OutOfResource::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::Counters::InterfaceEvents::InterfaceEvent::InterfaceEvent()
    :
    	interface_name{YType::str, "interface-name"},
	 expired_paths{YType::uint32, "expired-paths"},
	 expired_reservations{YType::uint32, "expired-reservations"},
	 nac_ks{YType::uint32, "nac-ks"}
{
    yang_name = "interface-event"; yang_parent_name = "interface-events";
}

RsvpStandby::Counters::InterfaceEvents::InterfaceEvent::~InterfaceEvent()
{
}

bool RsvpStandby::Counters::InterfaceEvents::InterfaceEvent::has_data() const
{
    return interface_name.is_set
	|| expired_paths.is_set
	|| expired_reservations.is_set
	|| nac_ks.is_set;
}

bool RsvpStandby::Counters::InterfaceEvents::InterfaceEvent::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| is_set(expired_paths.operation)
	|| is_set(expired_reservations.operation)
	|| is_set(nac_ks.operation);
}

std::string RsvpStandby::Counters::InterfaceEvents::InterfaceEvent::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-event" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::InterfaceEvents::InterfaceEvent::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/interface-events/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (expired_paths.is_set || is_set(expired_paths.operation)) leaf_name_data.push_back(expired_paths.get_name_leafdata());
    if (expired_reservations.is_set || is_set(expired_reservations.operation)) leaf_name_data.push_back(expired_reservations.get_name_leafdata());
    if (nac_ks.is_set || is_set(nac_ks.operation)) leaf_name_data.push_back(nac_ks.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::InterfaceEvents::InterfaceEvent::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::InterfaceEvents::InterfaceEvent::get_children()
{
    return children;
}

void RsvpStandby::Counters::InterfaceEvents::InterfaceEvent::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "expired-paths")
    {
        expired_paths = value;
    }
    if(value_path == "expired-reservations")
    {
        expired_reservations = value;
    }
    if(value_path == "nac-ks")
    {
        nac_ks = value;
    }
}

RsvpStandby::Counters::InterfaceEvents::InterfaceEvents()
{
    yang_name = "interface-events"; yang_parent_name = "counters";
}

RsvpStandby::Counters::InterfaceEvents::~InterfaceEvents()
{
}

bool RsvpStandby::Counters::InterfaceEvents::has_data() const
{
    for (std::size_t index=0; index<interface_event.size(); index++)
    {
        if(interface_event[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::Counters::InterfaceEvents::has_operation() const
{
    for (std::size_t index=0; index<interface_event.size(); index++)
    {
        if(interface_event[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::Counters::InterfaceEvents::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-events";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::InterfaceEvents::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::InterfaceEvents::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-event")
    {
        for(auto const & c : interface_event)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::Counters::InterfaceEvents::InterfaceEvent>();
        c->parent = this;
        interface_event.push_back(std::move(c));
        children[segment_path] = interface_event.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::InterfaceEvents::get_children()
{
    for (auto const & c : interface_event)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::Counters::InterfaceEvents::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::Counters::Nsr::Nsr()
    :
    	last_cleared_timestamp{YType::uint32, "last-cleared-timestamp"},
	 last_idt_states{YType::uint32, "last-idt-states"},
	 rsvp_process_role{YType::enumeration, "rsvp-process-role"},
	 total_deletions{YType::uint32, "total-deletions"},
	 total_id_ts{YType::uint32, "total-id-ts"},
	 total_nacks{YType::uint64, "total-nacks"},
	 total_states{YType::uint32, "total-states"}
{
    yang_name = "nsr"; yang_parent_name = "counters";
}

RsvpStandby::Counters::Nsr::~Nsr()
{
}

bool RsvpStandby::Counters::Nsr::has_data() const
{
    return last_cleared_timestamp.is_set
	|| last_idt_states.is_set
	|| rsvp_process_role.is_set
	|| total_deletions.is_set
	|| total_id_ts.is_set
	|| total_nacks.is_set
	|| total_states.is_set;
}

bool RsvpStandby::Counters::Nsr::has_operation() const
{
    return is_set(operation)
	|| is_set(last_cleared_timestamp.operation)
	|| is_set(last_idt_states.operation)
	|| is_set(rsvp_process_role.operation)
	|| is_set(total_deletions.operation)
	|| is_set(total_id_ts.operation)
	|| is_set(total_nacks.operation)
	|| is_set(total_states.operation);
}

std::string RsvpStandby::Counters::Nsr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nsr";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::Nsr::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (last_cleared_timestamp.is_set || is_set(last_cleared_timestamp.operation)) leaf_name_data.push_back(last_cleared_timestamp.get_name_leafdata());
    if (last_idt_states.is_set || is_set(last_idt_states.operation)) leaf_name_data.push_back(last_idt_states.get_name_leafdata());
    if (rsvp_process_role.is_set || is_set(rsvp_process_role.operation)) leaf_name_data.push_back(rsvp_process_role.get_name_leafdata());
    if (total_deletions.is_set || is_set(total_deletions.operation)) leaf_name_data.push_back(total_deletions.get_name_leafdata());
    if (total_id_ts.is_set || is_set(total_id_ts.operation)) leaf_name_data.push_back(total_id_ts.get_name_leafdata());
    if (total_nacks.is_set || is_set(total_nacks.operation)) leaf_name_data.push_back(total_nacks.get_name_leafdata());
    if (total_states.is_set || is_set(total_states.operation)) leaf_name_data.push_back(total_states.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::Nsr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::Nsr::get_children()
{
    return children;
}

void RsvpStandby::Counters::Nsr::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "last-cleared-timestamp")
    {
        last_cleared_timestamp = value;
    }
    if(value_path == "last-idt-states")
    {
        last_idt_states = value;
    }
    if(value_path == "rsvp-process-role")
    {
        rsvp_process_role = value;
    }
    if(value_path == "total-deletions")
    {
        total_deletions = value;
    }
    if(value_path == "total-id-ts")
    {
        total_id_ts = value;
    }
    if(value_path == "total-nacks")
    {
        total_nacks = value;
    }
    if(value_path == "total-states")
    {
        total_states = value;
    }
}

RsvpStandby::Counters::Issu::Issu()
    :
    	last_cleared_timestamp{YType::uint32, "last-cleared-timestamp"},
	 last_idt_states{YType::uint32, "last-idt-states"},
	 rsvp_process_role{YType::enumeration, "rsvp-process-role"},
	 total_deletions{YType::uint32, "total-deletions"},
	 total_id_ts{YType::uint32, "total-id-ts"},
	 total_nacks{YType::uint64, "total-nacks"},
	 total_states{YType::uint32, "total-states"}
{
    yang_name = "issu"; yang_parent_name = "counters";
}

RsvpStandby::Counters::Issu::~Issu()
{
}

bool RsvpStandby::Counters::Issu::has_data() const
{
    return last_cleared_timestamp.is_set
	|| last_idt_states.is_set
	|| rsvp_process_role.is_set
	|| total_deletions.is_set
	|| total_id_ts.is_set
	|| total_nacks.is_set
	|| total_states.is_set;
}

bool RsvpStandby::Counters::Issu::has_operation() const
{
    return is_set(operation)
	|| is_set(last_cleared_timestamp.operation)
	|| is_set(last_idt_states.operation)
	|| is_set(rsvp_process_role.operation)
	|| is_set(total_deletions.operation)
	|| is_set(total_id_ts.operation)
	|| is_set(total_nacks.operation)
	|| is_set(total_states.operation);
}

std::string RsvpStandby::Counters::Issu::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "issu";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::Issu::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (last_cleared_timestamp.is_set || is_set(last_cleared_timestamp.operation)) leaf_name_data.push_back(last_cleared_timestamp.get_name_leafdata());
    if (last_idt_states.is_set || is_set(last_idt_states.operation)) leaf_name_data.push_back(last_idt_states.get_name_leafdata());
    if (rsvp_process_role.is_set || is_set(rsvp_process_role.operation)) leaf_name_data.push_back(rsvp_process_role.get_name_leafdata());
    if (total_deletions.is_set || is_set(total_deletions.operation)) leaf_name_data.push_back(total_deletions.get_name_leafdata());
    if (total_id_ts.is_set || is_set(total_id_ts.operation)) leaf_name_data.push_back(total_id_ts.get_name_leafdata());
    if (total_nacks.is_set || is_set(total_nacks.operation)) leaf_name_data.push_back(total_nacks.get_name_leafdata());
    if (total_states.is_set || is_set(total_states.operation)) leaf_name_data.push_back(total_states.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::Issu::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::Issu::get_children()
{
    return children;
}

void RsvpStandby::Counters::Issu::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "last-cleared-timestamp")
    {
        last_cleared_timestamp = value;
    }
    if(value_path == "last-idt-states")
    {
        last_idt_states = value;
    }
    if(value_path == "rsvp-process-role")
    {
        rsvp_process_role = value;
    }
    if(value_path == "total-deletions")
    {
        total_deletions = value;
    }
    if(value_path == "total-id-ts")
    {
        total_id_ts = value;
    }
    if(value_path == "total-nacks")
    {
        total_nacks = value;
    }
    if(value_path == "total-states")
    {
        total_states = value;
    }
}

RsvpStandby::Counters::Database::Database()
    :
    	incoming_paths{YType::uint32, "incoming-paths"},
	 incoming_reservations{YType::uint32, "incoming-reservations"},
	 interfaces{YType::uint32, "interfaces"},
	 outgoing_paths{YType::uint32, "outgoing-paths"},
	 outgoing_reservations{YType::uint32, "outgoing-reservations"},
	 sessions{YType::uint32, "sessions"}
{
    yang_name = "database"; yang_parent_name = "counters";
}

RsvpStandby::Counters::Database::~Database()
{
}

bool RsvpStandby::Counters::Database::has_data() const
{
    return incoming_paths.is_set
	|| incoming_reservations.is_set
	|| interfaces.is_set
	|| outgoing_paths.is_set
	|| outgoing_reservations.is_set
	|| sessions.is_set;
}

bool RsvpStandby::Counters::Database::has_operation() const
{
    return is_set(operation)
	|| is_set(incoming_paths.operation)
	|| is_set(incoming_reservations.operation)
	|| is_set(interfaces.operation)
	|| is_set(outgoing_paths.operation)
	|| is_set(outgoing_reservations.operation)
	|| is_set(sessions.operation);
}

std::string RsvpStandby::Counters::Database::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "database";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::Database::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (incoming_paths.is_set || is_set(incoming_paths.operation)) leaf_name_data.push_back(incoming_paths.get_name_leafdata());
    if (incoming_reservations.is_set || is_set(incoming_reservations.operation)) leaf_name_data.push_back(incoming_reservations.get_name_leafdata());
    if (interfaces.is_set || is_set(interfaces.operation)) leaf_name_data.push_back(interfaces.get_name_leafdata());
    if (outgoing_paths.is_set || is_set(outgoing_paths.operation)) leaf_name_data.push_back(outgoing_paths.get_name_leafdata());
    if (outgoing_reservations.is_set || is_set(outgoing_reservations.operation)) leaf_name_data.push_back(outgoing_reservations.get_name_leafdata());
    if (sessions.is_set || is_set(sessions.operation)) leaf_name_data.push_back(sessions.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::Database::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::Database::get_children()
{
    return children;
}

void RsvpStandby::Counters::Database::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "incoming-paths")
    {
        incoming_paths = value;
    }
    if(value_path == "incoming-reservations")
    {
        incoming_reservations = value;
    }
    if(value_path == "interfaces")
    {
        interfaces = value;
    }
    if(value_path == "outgoing-paths")
    {
        outgoing_paths = value;
    }
    if(value_path == "outgoing-reservations")
    {
        outgoing_reservations = value;
    }
    if(value_path == "sessions")
    {
        sessions = value;
    }
}

RsvpStandby::Counters::EventSyncs::EventSync::EventSync()
    :
    	interface_name{YType::str, "interface-name"},
	 expired_paths{YType::uint32, "expired-paths"},
	 expired_reservations{YType::uint32, "expired-reservations"},
	 nac_ks{YType::uint32, "nac-ks"}
{
    yang_name = "event-sync"; yang_parent_name = "event-syncs";
}

RsvpStandby::Counters::EventSyncs::EventSync::~EventSync()
{
}

bool RsvpStandby::Counters::EventSyncs::EventSync::has_data() const
{
    return interface_name.is_set
	|| expired_paths.is_set
	|| expired_reservations.is_set
	|| nac_ks.is_set;
}

bool RsvpStandby::Counters::EventSyncs::EventSync::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| is_set(expired_paths.operation)
	|| is_set(expired_reservations.operation)
	|| is_set(nac_ks.operation);
}

std::string RsvpStandby::Counters::EventSyncs::EventSync::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "event-sync" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::EventSyncs::EventSync::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/event-syncs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (expired_paths.is_set || is_set(expired_paths.operation)) leaf_name_data.push_back(expired_paths.get_name_leafdata());
    if (expired_reservations.is_set || is_set(expired_reservations.operation)) leaf_name_data.push_back(expired_reservations.get_name_leafdata());
    if (nac_ks.is_set || is_set(nac_ks.operation)) leaf_name_data.push_back(nac_ks.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::EventSyncs::EventSync::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::EventSyncs::EventSync::get_children()
{
    return children;
}

void RsvpStandby::Counters::EventSyncs::EventSync::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "expired-paths")
    {
        expired_paths = value;
    }
    if(value_path == "expired-reservations")
    {
        expired_reservations = value;
    }
    if(value_path == "nac-ks")
    {
        nac_ks = value;
    }
}

RsvpStandby::Counters::EventSyncs::EventSyncs()
{
    yang_name = "event-syncs"; yang_parent_name = "counters";
}

RsvpStandby::Counters::EventSyncs::~EventSyncs()
{
}

bool RsvpStandby::Counters::EventSyncs::has_data() const
{
    for (std::size_t index=0; index<event_sync.size(); index++)
    {
        if(event_sync[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::Counters::EventSyncs::has_operation() const
{
    for (std::size_t index=0; index<event_sync.size(); index++)
    {
        if(event_sync[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::Counters::EventSyncs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "event-syncs";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::EventSyncs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::EventSyncs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "event-sync")
    {
        for(auto const & c : event_sync)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::Counters::EventSyncs::EventSync>();
        c->parent = this;
        event_sync.push_back(std::move(c));
        children[segment_path] = event_sync.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::EventSyncs::get_children()
{
    for (auto const & c : event_sync)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::Counters::EventSyncs::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::Counters::Counters()
    :
    database(std::make_unique<RsvpStandby::Counters::Database>())
	,event_syncs(std::make_unique<RsvpStandby::Counters::EventSyncs>())
	,interface_events(std::make_unique<RsvpStandby::Counters::InterfaceEvents>())
	,interface_messages(std::make_unique<RsvpStandby::Counters::InterfaceMessages>())
	,issu(std::make_unique<RsvpStandby::Counters::Issu>())
	,message_summary(std::make_unique<RsvpStandby::Counters::MessageSummary>())
	,nsr(std::make_unique<RsvpStandby::Counters::Nsr>())
	,out_of_resource(std::make_unique<RsvpStandby::Counters::OutOfResource>())
	,prefix_filtering(std::make_unique<RsvpStandby::Counters::PrefixFiltering>())
{
    database->parent = this;
    children["database"] = database.get();

    event_syncs->parent = this;
    children["event-syncs"] = event_syncs.get();

    interface_events->parent = this;
    children["interface-events"] = interface_events.get();

    interface_messages->parent = this;
    children["interface-messages"] = interface_messages.get();

    issu->parent = this;
    children["issu"] = issu.get();

    message_summary->parent = this;
    children["message-summary"] = message_summary.get();

    nsr->parent = this;
    children["nsr"] = nsr.get();

    out_of_resource->parent = this;
    children["out-of-resource"] = out_of_resource.get();

    prefix_filtering->parent = this;
    children["prefix-filtering"] = prefix_filtering.get();

    yang_name = "counters"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::Counters::~Counters()
{
}

bool RsvpStandby::Counters::has_data() const
{
    return (database !=  nullptr && database->has_data())
	|| (event_syncs !=  nullptr && event_syncs->has_data())
	|| (interface_events !=  nullptr && interface_events->has_data())
	|| (interface_messages !=  nullptr && interface_messages->has_data())
	|| (issu !=  nullptr && issu->has_data())
	|| (message_summary !=  nullptr && message_summary->has_data())
	|| (nsr !=  nullptr && nsr->has_data())
	|| (out_of_resource !=  nullptr && out_of_resource->has_data())
	|| (prefix_filtering !=  nullptr && prefix_filtering->has_data());
}

bool RsvpStandby::Counters::has_operation() const
{
    return is_set(operation)
	|| (database !=  nullptr && database->has_operation())
	|| (event_syncs !=  nullptr && event_syncs->has_operation())
	|| (interface_events !=  nullptr && interface_events->has_operation())
	|| (interface_messages !=  nullptr && interface_messages->has_operation())
	|| (issu !=  nullptr && issu->has_operation())
	|| (message_summary !=  nullptr && message_summary->has_operation())
	|| (nsr !=  nullptr && nsr->has_operation())
	|| (out_of_resource !=  nullptr && out_of_resource->has_operation())
	|| (prefix_filtering !=  nullptr && prefix_filtering->has_operation());
}

std::string RsvpStandby::Counters::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "counters";

    return path_buffer.str();

}

EntityPath RsvpStandby::Counters::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Counters::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "database")
    {
        if(database != nullptr)
        {
            children["database"] = database.get();
        }
        else
        {
            database = std::make_unique<RsvpStandby::Counters::Database>();
            database->parent = this;
            children["database"] = database.get();
        }
        return children.at("database");
    }

    if(child_yang_name == "event-syncs")
    {
        if(event_syncs != nullptr)
        {
            children["event-syncs"] = event_syncs.get();
        }
        else
        {
            event_syncs = std::make_unique<RsvpStandby::Counters::EventSyncs>();
            event_syncs->parent = this;
            children["event-syncs"] = event_syncs.get();
        }
        return children.at("event-syncs");
    }

    if(child_yang_name == "interface-events")
    {
        if(interface_events != nullptr)
        {
            children["interface-events"] = interface_events.get();
        }
        else
        {
            interface_events = std::make_unique<RsvpStandby::Counters::InterfaceEvents>();
            interface_events->parent = this;
            children["interface-events"] = interface_events.get();
        }
        return children.at("interface-events");
    }

    if(child_yang_name == "interface-messages")
    {
        if(interface_messages != nullptr)
        {
            children["interface-messages"] = interface_messages.get();
        }
        else
        {
            interface_messages = std::make_unique<RsvpStandby::Counters::InterfaceMessages>();
            interface_messages->parent = this;
            children["interface-messages"] = interface_messages.get();
        }
        return children.at("interface-messages");
    }

    if(child_yang_name == "issu")
    {
        if(issu != nullptr)
        {
            children["issu"] = issu.get();
        }
        else
        {
            issu = std::make_unique<RsvpStandby::Counters::Issu>();
            issu->parent = this;
            children["issu"] = issu.get();
        }
        return children.at("issu");
    }

    if(child_yang_name == "message-summary")
    {
        if(message_summary != nullptr)
        {
            children["message-summary"] = message_summary.get();
        }
        else
        {
            message_summary = std::make_unique<RsvpStandby::Counters::MessageSummary>();
            message_summary->parent = this;
            children["message-summary"] = message_summary.get();
        }
        return children.at("message-summary");
    }

    if(child_yang_name == "nsr")
    {
        if(nsr != nullptr)
        {
            children["nsr"] = nsr.get();
        }
        else
        {
            nsr = std::make_unique<RsvpStandby::Counters::Nsr>();
            nsr->parent = this;
            children["nsr"] = nsr.get();
        }
        return children.at("nsr");
    }

    if(child_yang_name == "out-of-resource")
    {
        if(out_of_resource != nullptr)
        {
            children["out-of-resource"] = out_of_resource.get();
        }
        else
        {
            out_of_resource = std::make_unique<RsvpStandby::Counters::OutOfResource>();
            out_of_resource->parent = this;
            children["out-of-resource"] = out_of_resource.get();
        }
        return children.at("out-of-resource");
    }

    if(child_yang_name == "prefix-filtering")
    {
        if(prefix_filtering != nullptr)
        {
            children["prefix-filtering"] = prefix_filtering.get();
        }
        else
        {
            prefix_filtering = std::make_unique<RsvpStandby::Counters::PrefixFiltering>();
            prefix_filtering->parent = this;
            children["prefix-filtering"] = prefix_filtering.get();
        }
        return children.at("prefix-filtering");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Counters::get_children()
{
    if(children.find("database") == children.end())
    {
        if(database != nullptr)
        {
            children["database"] = database.get();
        }
    }

    if(children.find("event-syncs") == children.end())
    {
        if(event_syncs != nullptr)
        {
            children["event-syncs"] = event_syncs.get();
        }
    }

    if(children.find("interface-events") == children.end())
    {
        if(interface_events != nullptr)
        {
            children["interface-events"] = interface_events.get();
        }
    }

    if(children.find("interface-messages") == children.end())
    {
        if(interface_messages != nullptr)
        {
            children["interface-messages"] = interface_messages.get();
        }
    }

    if(children.find("issu") == children.end())
    {
        if(issu != nullptr)
        {
            children["issu"] = issu.get();
        }
    }

    if(children.find("message-summary") == children.end())
    {
        if(message_summary != nullptr)
        {
            children["message-summary"] = message_summary.get();
        }
    }

    if(children.find("nsr") == children.end())
    {
        if(nsr != nullptr)
        {
            children["nsr"] = nsr.get();
        }
    }

    if(children.find("out-of-resource") == children.end())
    {
        if(out_of_resource != nullptr)
        {
            children["out-of-resource"] = out_of_resource.get();
        }
    }

    if(children.find("prefix-filtering") == children.end())
    {
        if(prefix_filtering != nullptr)
        {
            children["prefix-filtering"] = prefix_filtering.get();
        }
    }

    return children;
}

void RsvpStandby::Counters::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface::PreStandardDsteInterface()
    :
    	allocated_bit_rate{YType::uint64, "allocated-bit-rate"},
	 is_max_bandwidth_absolute{YType::boolean, "is-max-bandwidth-absolute"},
	 is_max_subpool_bandwidth_absolute{YType::boolean, "is-max-subpool-bandwidth-absolute"},
	 max_bandwidth{YType::uint64, "max-bandwidth"},
	 max_flow_bandwidth{YType::uint64, "max-flow-bandwidth"},
	 max_subpool_bandwidth{YType::uint64, "max-subpool-bandwidth"}
{
    yang_name = "pre-standard-dste-interface"; yang_parent_name = "bandwidth-information";
}

RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface::~PreStandardDsteInterface()
{
}

bool RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface::has_data() const
{
    return allocated_bit_rate.is_set
	|| is_max_bandwidth_absolute.is_set
	|| is_max_subpool_bandwidth_absolute.is_set
	|| max_bandwidth.is_set
	|| max_flow_bandwidth.is_set
	|| max_subpool_bandwidth.is_set;
}

bool RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(allocated_bit_rate.operation)
	|| is_set(is_max_bandwidth_absolute.operation)
	|| is_set(is_max_subpool_bandwidth_absolute.operation)
	|| is_set(max_bandwidth.operation)
	|| is_set(max_flow_bandwidth.operation)
	|| is_set(max_subpool_bandwidth.operation);
}

std::string RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pre-standard-dste-interface";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (allocated_bit_rate.is_set || is_set(allocated_bit_rate.operation)) leaf_name_data.push_back(allocated_bit_rate.get_name_leafdata());
    if (is_max_bandwidth_absolute.is_set || is_set(is_max_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bandwidth_absolute.get_name_leafdata());
    if (is_max_subpool_bandwidth_absolute.is_set || is_set(is_max_subpool_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_subpool_bandwidth_absolute.get_name_leafdata());
    if (max_bandwidth.is_set || is_set(max_bandwidth.operation)) leaf_name_data.push_back(max_bandwidth.get_name_leafdata());
    if (max_flow_bandwidth.is_set || is_set(max_flow_bandwidth.operation)) leaf_name_data.push_back(max_flow_bandwidth.get_name_leafdata());
    if (max_subpool_bandwidth.is_set || is_set(max_subpool_bandwidth.operation)) leaf_name_data.push_back(max_subpool_bandwidth.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface::get_children()
{
    return children;
}

void RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "allocated-bit-rate")
    {
        allocated_bit_rate = value;
    }
    if(value_path == "is-max-bandwidth-absolute")
    {
        is_max_bandwidth_absolute = value;
    }
    if(value_path == "is-max-subpool-bandwidth-absolute")
    {
        is_max_subpool_bandwidth_absolute = value;
    }
    if(value_path == "max-bandwidth")
    {
        max_bandwidth = value;
    }
    if(value_path == "max-flow-bandwidth")
    {
        max_flow_bandwidth = value;
    }
    if(value_path == "max-subpool-bandwidth")
    {
        max_subpool_bandwidth = value;
    }
}

RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface::StandardDsteInterface()
    :
    	allocated_bit_rate{YType::uint64, "allocated-bit-rate"},
	 is_max_bandwidth_absolute{YType::boolean, "is-max-bandwidth-absolute"},
	 is_max_bc0_bandwidth_absolute{YType::boolean, "is-max-bc0-bandwidth-absolute"},
	 is_max_bc1_bandwidth_absolute{YType::boolean, "is-max-bc1-bandwidth-absolute"},
	 max_bandwidth{YType::uint64, "max-bandwidth"},
	 max_flow_bandwidth{YType::uint64, "max-flow-bandwidth"},
	 max_pool0_bandwidth{YType::uint64, "max-pool0-bandwidth"},
	 max_pool1_bandwidth{YType::uint64, "max-pool1-bandwidth"}
{
    yang_name = "standard-dste-interface"; yang_parent_name = "bandwidth-information";
}

RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface::~StandardDsteInterface()
{
}

bool RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface::has_data() const
{
    return allocated_bit_rate.is_set
	|| is_max_bandwidth_absolute.is_set
	|| is_max_bc0_bandwidth_absolute.is_set
	|| is_max_bc1_bandwidth_absolute.is_set
	|| max_bandwidth.is_set
	|| max_flow_bandwidth.is_set
	|| max_pool0_bandwidth.is_set
	|| max_pool1_bandwidth.is_set;
}

bool RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(allocated_bit_rate.operation)
	|| is_set(is_max_bandwidth_absolute.operation)
	|| is_set(is_max_bc0_bandwidth_absolute.operation)
	|| is_set(is_max_bc1_bandwidth_absolute.operation)
	|| is_set(max_bandwidth.operation)
	|| is_set(max_flow_bandwidth.operation)
	|| is_set(max_pool0_bandwidth.operation)
	|| is_set(max_pool1_bandwidth.operation);
}

std::string RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "standard-dste-interface";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (allocated_bit_rate.is_set || is_set(allocated_bit_rate.operation)) leaf_name_data.push_back(allocated_bit_rate.get_name_leafdata());
    if (is_max_bandwidth_absolute.is_set || is_set(is_max_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bandwidth_absolute.get_name_leafdata());
    if (is_max_bc0_bandwidth_absolute.is_set || is_set(is_max_bc0_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bc0_bandwidth_absolute.get_name_leafdata());
    if (is_max_bc1_bandwidth_absolute.is_set || is_set(is_max_bc1_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bc1_bandwidth_absolute.get_name_leafdata());
    if (max_bandwidth.is_set || is_set(max_bandwidth.operation)) leaf_name_data.push_back(max_bandwidth.get_name_leafdata());
    if (max_flow_bandwidth.is_set || is_set(max_flow_bandwidth.operation)) leaf_name_data.push_back(max_flow_bandwidth.get_name_leafdata());
    if (max_pool0_bandwidth.is_set || is_set(max_pool0_bandwidth.operation)) leaf_name_data.push_back(max_pool0_bandwidth.get_name_leafdata());
    if (max_pool1_bandwidth.is_set || is_set(max_pool1_bandwidth.operation)) leaf_name_data.push_back(max_pool1_bandwidth.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface::get_children()
{
    return children;
}

void RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "allocated-bit-rate")
    {
        allocated_bit_rate = value;
    }
    if(value_path == "is-max-bandwidth-absolute")
    {
        is_max_bandwidth_absolute = value;
    }
    if(value_path == "is-max-bc0-bandwidth-absolute")
    {
        is_max_bc0_bandwidth_absolute = value;
    }
    if(value_path == "is-max-bc1-bandwidth-absolute")
    {
        is_max_bc1_bandwidth_absolute = value;
    }
    if(value_path == "max-bandwidth")
    {
        max_bandwidth = value;
    }
    if(value_path == "max-flow-bandwidth")
    {
        max_flow_bandwidth = value;
    }
    if(value_path == "max-pool0-bandwidth")
    {
        max_pool0_bandwidth = value;
    }
    if(value_path == "max-pool1-bandwidth")
    {
        max_pool1_bandwidth = value;
    }
}

RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::BandwidthInformation()
    :
    	dste_mode{YType::enumeration, "dste-mode"}
    	,
    pre_standard_dste_interface(std::make_unique<RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface>())
	,standard_dste_interface(std::make_unique<RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface>())
{
    pre_standard_dste_interface->parent = this;
    children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();

    standard_dste_interface->parent = this;
    children["standard-dste-interface"] = standard_dste_interface.get();

    yang_name = "bandwidth-information"; yang_parent_name = "interface-detailed";
}

RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::~BandwidthInformation()
{
}

bool RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::has_data() const
{
    return dste_mode.is_set
	|| (pre_standard_dste_interface !=  nullptr && pre_standard_dste_interface->has_data())
	|| (standard_dste_interface !=  nullptr && standard_dste_interface->has_data());
}

bool RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::has_operation() const
{
    return is_set(operation)
	|| is_set(dste_mode.operation)
	|| (pre_standard_dste_interface !=  nullptr && pre_standard_dste_interface->has_operation())
	|| (standard_dste_interface !=  nullptr && standard_dste_interface->has_operation());
}

std::string RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bandwidth-information";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (dste_mode.is_set || is_set(dste_mode.operation)) leaf_name_data.push_back(dste_mode.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "pre-standard-dste-interface")
    {
        if(pre_standard_dste_interface != nullptr)
        {
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
        else
        {
            pre_standard_dste_interface = std::make_unique<RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface>();
            pre_standard_dste_interface->parent = this;
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
        return children.at("pre-standard-dste-interface");
    }

    if(child_yang_name == "standard-dste-interface")
    {
        if(standard_dste_interface != nullptr)
        {
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
        else
        {
            standard_dste_interface = std::make_unique<RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface>();
            standard_dste_interface->parent = this;
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
        return children.at("standard-dste-interface");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::get_children()
{
    if(children.find("pre-standard-dste-interface") == children.end())
    {
        if(pre_standard_dste_interface != nullptr)
        {
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
    }

    if(children.find("standard-dste-interface") == children.end())
    {
        if(standard_dste_interface != nullptr)
        {
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
    }

    return children;
}

void RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "dste-mode")
    {
        dste_mode = value;
    }
}

RsvpStandby::InterfaceDetaileds::InterfaceDetailed::Flags::Flags()
    :
    	is_backup_tunnel{YType::boolean, "is-backup-tunnel"},
	 is_interface_created{YType::boolean, "is-interface-created"},
	 is_interface_down{YType::boolean, "is-interface-down"},
	 is_message_bundling_enabled{YType::boolean, "is-message-bundling-enabled"},
	 is_mpls_enabled{YType::boolean, "is-mpls-enabled"},
	 is_non_default_vrf{YType::boolean, "is-non-default-vrf"},
	 is_pacing_enabled{YType::boolean, "is-pacing-enabled"},
	 is_refresh_enabled{YType::boolean, "is-refresh-enabled"},
	 is_refresh_reduction_enabled{YType::boolean, "is-refresh-reduction-enabled"},
	 is_rel_s_refresh_enabled{YType::boolean, "is-rel-s-refresh-enabled"},
	 is_rsvp_configured{YType::boolean, "is-rsvp-configured"},
	 is_s_refresh_enabled{YType::boolean, "is-s-refresh-enabled"}
{
    yang_name = "flags"; yang_parent_name = "interface-detailed";
}

RsvpStandby::InterfaceDetaileds::InterfaceDetailed::Flags::~Flags()
{
}

bool RsvpStandby::InterfaceDetaileds::InterfaceDetailed::Flags::has_data() const
{
    return is_backup_tunnel.is_set
	|| is_interface_created.is_set
	|| is_interface_down.is_set
	|| is_message_bundling_enabled.is_set
	|| is_mpls_enabled.is_set
	|| is_non_default_vrf.is_set
	|| is_pacing_enabled.is_set
	|| is_refresh_enabled.is_set
	|| is_refresh_reduction_enabled.is_set
	|| is_rel_s_refresh_enabled.is_set
	|| is_rsvp_configured.is_set
	|| is_s_refresh_enabled.is_set;
}

bool RsvpStandby::InterfaceDetaileds::InterfaceDetailed::Flags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_backup_tunnel.operation)
	|| is_set(is_interface_created.operation)
	|| is_set(is_interface_down.operation)
	|| is_set(is_message_bundling_enabled.operation)
	|| is_set(is_mpls_enabled.operation)
	|| is_set(is_non_default_vrf.operation)
	|| is_set(is_pacing_enabled.operation)
	|| is_set(is_refresh_enabled.operation)
	|| is_set(is_refresh_reduction_enabled.operation)
	|| is_set(is_rel_s_refresh_enabled.operation)
	|| is_set(is_rsvp_configured.operation)
	|| is_set(is_s_refresh_enabled.operation);
}

std::string RsvpStandby::InterfaceDetaileds::InterfaceDetailed::Flags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceDetaileds::InterfaceDetailed::Flags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_backup_tunnel.is_set || is_set(is_backup_tunnel.operation)) leaf_name_data.push_back(is_backup_tunnel.get_name_leafdata());
    if (is_interface_created.is_set || is_set(is_interface_created.operation)) leaf_name_data.push_back(is_interface_created.get_name_leafdata());
    if (is_interface_down.is_set || is_set(is_interface_down.operation)) leaf_name_data.push_back(is_interface_down.get_name_leafdata());
    if (is_message_bundling_enabled.is_set || is_set(is_message_bundling_enabled.operation)) leaf_name_data.push_back(is_message_bundling_enabled.get_name_leafdata());
    if (is_mpls_enabled.is_set || is_set(is_mpls_enabled.operation)) leaf_name_data.push_back(is_mpls_enabled.get_name_leafdata());
    if (is_non_default_vrf.is_set || is_set(is_non_default_vrf.operation)) leaf_name_data.push_back(is_non_default_vrf.get_name_leafdata());
    if (is_pacing_enabled.is_set || is_set(is_pacing_enabled.operation)) leaf_name_data.push_back(is_pacing_enabled.get_name_leafdata());
    if (is_refresh_enabled.is_set || is_set(is_refresh_enabled.operation)) leaf_name_data.push_back(is_refresh_enabled.get_name_leafdata());
    if (is_refresh_reduction_enabled.is_set || is_set(is_refresh_reduction_enabled.operation)) leaf_name_data.push_back(is_refresh_reduction_enabled.get_name_leafdata());
    if (is_rel_s_refresh_enabled.is_set || is_set(is_rel_s_refresh_enabled.operation)) leaf_name_data.push_back(is_rel_s_refresh_enabled.get_name_leafdata());
    if (is_rsvp_configured.is_set || is_set(is_rsvp_configured.operation)) leaf_name_data.push_back(is_rsvp_configured.get_name_leafdata());
    if (is_s_refresh_enabled.is_set || is_set(is_s_refresh_enabled.operation)) leaf_name_data.push_back(is_s_refresh_enabled.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceDetaileds::InterfaceDetailed::Flags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceDetaileds::InterfaceDetailed::Flags::get_children()
{
    return children;
}

void RsvpStandby::InterfaceDetaileds::InterfaceDetailed::Flags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-backup-tunnel")
    {
        is_backup_tunnel = value;
    }
    if(value_path == "is-interface-created")
    {
        is_interface_created = value;
    }
    if(value_path == "is-interface-down")
    {
        is_interface_down = value;
    }
    if(value_path == "is-message-bundling-enabled")
    {
        is_message_bundling_enabled = value;
    }
    if(value_path == "is-mpls-enabled")
    {
        is_mpls_enabled = value;
    }
    if(value_path == "is-non-default-vrf")
    {
        is_non_default_vrf = value;
    }
    if(value_path == "is-pacing-enabled")
    {
        is_pacing_enabled = value;
    }
    if(value_path == "is-refresh-enabled")
    {
        is_refresh_enabled = value;
    }
    if(value_path == "is-refresh-reduction-enabled")
    {
        is_refresh_reduction_enabled = value;
    }
    if(value_path == "is-rel-s-refresh-enabled")
    {
        is_rel_s_refresh_enabled = value;
    }
    if(value_path == "is-rsvp-configured")
    {
        is_rsvp_configured = value;
    }
    if(value_path == "is-s-refresh-enabled")
    {
        is_s_refresh_enabled = value;
    }
}

RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime::ExpiryTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "expiry-time"; yang_parent_name = "neighbor-array";
}

RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime::~ExpiryTime()
{
}

bool RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "expiry-time";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime::get_children()
{
    return children;
}

void RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId::NeighborMessageId()
    :
    	message_id{YType::uint32, "message-id"}
{
    yang_name = "neighbor-message-id"; yang_parent_name = "neighbor-array";
}

RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId::~NeighborMessageId()
{
}

bool RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId::has_data() const
{
    return message_id.is_set;
}

bool RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId::has_operation() const
{
    return is_set(operation)
	|| is_set(message_id.operation);
}

std::string RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "neighbor-message-id";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (message_id.is_set || is_set(message_id.operation)) leaf_name_data.push_back(message_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId::get_children()
{
    return children;
}

void RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "message-id")
    {
        message_id = value;
    }
}

RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborArray()
    :
    	is_neighbor_refresh_reduction_capable{YType::boolean, "is-neighbor-refresh-reduction-capable"},
	 message_ids{YType::uint32, "message-ids"},
	 neighbor_address{YType::str, "neighbor-address"},
	 outgoing_states{YType::int32, "outgoing-states"}
    	,
    expiry_time(std::make_unique<RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime>())
{
    expiry_time->parent = this;
    children["expiry-time"] = expiry_time.get();

    yang_name = "neighbor-array"; yang_parent_name = "interface-detailed";
}

RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::~NeighborArray()
{
}

bool RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::has_data() const
{
    for (std::size_t index=0; index<neighbor_message_id.size(); index++)
    {
        if(neighbor_message_id[index]->has_data())
            return true;
    }
    return is_neighbor_refresh_reduction_capable.is_set
	|| message_ids.is_set
	|| neighbor_address.is_set
	|| outgoing_states.is_set
	|| (expiry_time !=  nullptr && expiry_time->has_data());
}

bool RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::has_operation() const
{
    for (std::size_t index=0; index<neighbor_message_id.size(); index++)
    {
        if(neighbor_message_id[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(is_neighbor_refresh_reduction_capable.operation)
	|| is_set(message_ids.operation)
	|| is_set(neighbor_address.operation)
	|| is_set(outgoing_states.operation)
	|| (expiry_time !=  nullptr && expiry_time->has_operation());
}

std::string RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "neighbor-array";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_neighbor_refresh_reduction_capable.is_set || is_set(is_neighbor_refresh_reduction_capable.operation)) leaf_name_data.push_back(is_neighbor_refresh_reduction_capable.get_name_leafdata());
    if (message_ids.is_set || is_set(message_ids.operation)) leaf_name_data.push_back(message_ids.get_name_leafdata());
    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (outgoing_states.is_set || is_set(outgoing_states.operation)) leaf_name_data.push_back(outgoing_states.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "expiry-time")
    {
        if(expiry_time != nullptr)
        {
            children["expiry-time"] = expiry_time.get();
        }
        else
        {
            expiry_time = std::make_unique<RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime>();
            expiry_time->parent = this;
            children["expiry-time"] = expiry_time.get();
        }
        return children.at("expiry-time");
    }

    if(child_yang_name == "neighbor-message-id")
    {
        for(auto const & c : neighbor_message_id)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId>();
        c->parent = this;
        neighbor_message_id.push_back(std::move(c));
        children[segment_path] = neighbor_message_id.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::get_children()
{
    if(children.find("expiry-time") == children.end())
    {
        if(expiry_time != nullptr)
        {
            children["expiry-time"] = expiry_time.get();
        }
    }

    for (auto const & c : neighbor_message_id)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-neighbor-refresh-reduction-capable")
    {
        is_neighbor_refresh_reduction_capable = value;
    }
    if(value_path == "message-ids")
    {
        message_ids = value;
    }
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "outgoing-states")
    {
        outgoing_states = value;
    }
}

RsvpStandby::InterfaceDetaileds::InterfaceDetailed::InterfaceDetailed()
    :
    	interface_name{YType::str, "interface-name"},
	 ack_hold_time{YType::uint32, "ack-hold-time"},
	 ack_max_size{YType::uint32, "ack-max-size"},
	 bundle_message_max_size{YType::uint32, "bundle-message-max-size"},
	 expiry_drops_tolerated{YType::int32, "expiry-drops-tolerated"},
	 expiry_interval{YType::int32, "expiry-interval"},
	 expiry_states{YType::int32, "expiry-states"},
	 expiry_timer_state{YType::enumeration, "expiry-timer-state"},
	 integrity_receive_password{YType::str, "integrity-receive-password"},
	 integrity_receive_password_optional{YType::uint8, "integrity-receive-password-optional"},
	 integrity_send_password{YType::str, "integrity-send-password"},
	 interface_name_xr{YType::str, "interface-name-xr"},
	 out_of_band_expiry_drops_tolerated{YType::uint32, "out-of-band-expiry-drops-tolerated"},
	 out_of_band_refresh_interval{YType::uint32, "out-of-band-refresh-interval"},
	 pacing_interval{YType::uint32, "pacing-interval"},
	 pacing_message_rate{YType::uint32, "pacing-message-rate"},
	 pacing_messages{YType::int32, "pacing-messages"},
	 pacing_timer_state{YType::enumeration, "pacing-timer-state"},
	 refresh_interval{YType::int32, "refresh-interval"},
	 refresh_timer_state{YType::enumeration, "refresh-timer-state"},
	 retransmit_time{YType::uint32, "retransmit-time"},
	 signalling_ip_tos{YType::uint8, "signalling-ip-tos"},
	 summary_refresh_max_size{YType::uint32, "summary-refresh-max-size"},
	 summary_refresh_timer_state{YType::enumeration, "summary-refresh-timer-state"}
    	,
    bandwidth_information(std::make_unique<RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation>())
	,flags(std::make_unique<RsvpStandby::InterfaceDetaileds::InterfaceDetailed::Flags>())
{
    bandwidth_information->parent = this;
    children["bandwidth-information"] = bandwidth_information.get();

    flags->parent = this;
    children["flags"] = flags.get();

    yang_name = "interface-detailed"; yang_parent_name = "interface-detaileds";
}

RsvpStandby::InterfaceDetaileds::InterfaceDetailed::~InterfaceDetailed()
{
}

bool RsvpStandby::InterfaceDetaileds::InterfaceDetailed::has_data() const
{
    for (std::size_t index=0; index<neighbor_array.size(); index++)
    {
        if(neighbor_array[index]->has_data())
            return true;
    }
    return interface_name.is_set
	|| ack_hold_time.is_set
	|| ack_max_size.is_set
	|| bundle_message_max_size.is_set
	|| expiry_drops_tolerated.is_set
	|| expiry_interval.is_set
	|| expiry_states.is_set
	|| expiry_timer_state.is_set
	|| integrity_receive_password.is_set
	|| integrity_receive_password_optional.is_set
	|| integrity_send_password.is_set
	|| interface_name_xr.is_set
	|| out_of_band_expiry_drops_tolerated.is_set
	|| out_of_band_refresh_interval.is_set
	|| pacing_interval.is_set
	|| pacing_message_rate.is_set
	|| pacing_messages.is_set
	|| pacing_timer_state.is_set
	|| refresh_interval.is_set
	|| refresh_timer_state.is_set
	|| retransmit_time.is_set
	|| signalling_ip_tos.is_set
	|| summary_refresh_max_size.is_set
	|| summary_refresh_timer_state.is_set
	|| (bandwidth_information !=  nullptr && bandwidth_information->has_data())
	|| (flags !=  nullptr && flags->has_data());
}

bool RsvpStandby::InterfaceDetaileds::InterfaceDetailed::has_operation() const
{
    for (std::size_t index=0; index<neighbor_array.size(); index++)
    {
        if(neighbor_array[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| is_set(ack_hold_time.operation)
	|| is_set(ack_max_size.operation)
	|| is_set(bundle_message_max_size.operation)
	|| is_set(expiry_drops_tolerated.operation)
	|| is_set(expiry_interval.operation)
	|| is_set(expiry_states.operation)
	|| is_set(expiry_timer_state.operation)
	|| is_set(integrity_receive_password.operation)
	|| is_set(integrity_receive_password_optional.operation)
	|| is_set(integrity_send_password.operation)
	|| is_set(interface_name_xr.operation)
	|| is_set(out_of_band_expiry_drops_tolerated.operation)
	|| is_set(out_of_band_refresh_interval.operation)
	|| is_set(pacing_interval.operation)
	|| is_set(pacing_message_rate.operation)
	|| is_set(pacing_messages.operation)
	|| is_set(pacing_timer_state.operation)
	|| is_set(refresh_interval.operation)
	|| is_set(refresh_timer_state.operation)
	|| is_set(retransmit_time.operation)
	|| is_set(signalling_ip_tos.operation)
	|| is_set(summary_refresh_max_size.operation)
	|| is_set(summary_refresh_timer_state.operation)
	|| (bandwidth_information !=  nullptr && bandwidth_information->has_operation())
	|| (flags !=  nullptr && flags->has_operation());
}

std::string RsvpStandby::InterfaceDetaileds::InterfaceDetailed::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-detailed" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceDetaileds::InterfaceDetailed::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-detaileds/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (ack_hold_time.is_set || is_set(ack_hold_time.operation)) leaf_name_data.push_back(ack_hold_time.get_name_leafdata());
    if (ack_max_size.is_set || is_set(ack_max_size.operation)) leaf_name_data.push_back(ack_max_size.get_name_leafdata());
    if (bundle_message_max_size.is_set || is_set(bundle_message_max_size.operation)) leaf_name_data.push_back(bundle_message_max_size.get_name_leafdata());
    if (expiry_drops_tolerated.is_set || is_set(expiry_drops_tolerated.operation)) leaf_name_data.push_back(expiry_drops_tolerated.get_name_leafdata());
    if (expiry_interval.is_set || is_set(expiry_interval.operation)) leaf_name_data.push_back(expiry_interval.get_name_leafdata());
    if (expiry_states.is_set || is_set(expiry_states.operation)) leaf_name_data.push_back(expiry_states.get_name_leafdata());
    if (expiry_timer_state.is_set || is_set(expiry_timer_state.operation)) leaf_name_data.push_back(expiry_timer_state.get_name_leafdata());
    if (integrity_receive_password.is_set || is_set(integrity_receive_password.operation)) leaf_name_data.push_back(integrity_receive_password.get_name_leafdata());
    if (integrity_receive_password_optional.is_set || is_set(integrity_receive_password_optional.operation)) leaf_name_data.push_back(integrity_receive_password_optional.get_name_leafdata());
    if (integrity_send_password.is_set || is_set(integrity_send_password.operation)) leaf_name_data.push_back(integrity_send_password.get_name_leafdata());
    if (interface_name_xr.is_set || is_set(interface_name_xr.operation)) leaf_name_data.push_back(interface_name_xr.get_name_leafdata());
    if (out_of_band_expiry_drops_tolerated.is_set || is_set(out_of_band_expiry_drops_tolerated.operation)) leaf_name_data.push_back(out_of_band_expiry_drops_tolerated.get_name_leafdata());
    if (out_of_band_refresh_interval.is_set || is_set(out_of_band_refresh_interval.operation)) leaf_name_data.push_back(out_of_band_refresh_interval.get_name_leafdata());
    if (pacing_interval.is_set || is_set(pacing_interval.operation)) leaf_name_data.push_back(pacing_interval.get_name_leafdata());
    if (pacing_message_rate.is_set || is_set(pacing_message_rate.operation)) leaf_name_data.push_back(pacing_message_rate.get_name_leafdata());
    if (pacing_messages.is_set || is_set(pacing_messages.operation)) leaf_name_data.push_back(pacing_messages.get_name_leafdata());
    if (pacing_timer_state.is_set || is_set(pacing_timer_state.operation)) leaf_name_data.push_back(pacing_timer_state.get_name_leafdata());
    if (refresh_interval.is_set || is_set(refresh_interval.operation)) leaf_name_data.push_back(refresh_interval.get_name_leafdata());
    if (refresh_timer_state.is_set || is_set(refresh_timer_state.operation)) leaf_name_data.push_back(refresh_timer_state.get_name_leafdata());
    if (retransmit_time.is_set || is_set(retransmit_time.operation)) leaf_name_data.push_back(retransmit_time.get_name_leafdata());
    if (signalling_ip_tos.is_set || is_set(signalling_ip_tos.operation)) leaf_name_data.push_back(signalling_ip_tos.get_name_leafdata());
    if (summary_refresh_max_size.is_set || is_set(summary_refresh_max_size.operation)) leaf_name_data.push_back(summary_refresh_max_size.get_name_leafdata());
    if (summary_refresh_timer_state.is_set || is_set(summary_refresh_timer_state.operation)) leaf_name_data.push_back(summary_refresh_timer_state.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceDetaileds::InterfaceDetailed::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "bandwidth-information")
    {
        if(bandwidth_information != nullptr)
        {
            children["bandwidth-information"] = bandwidth_information.get();
        }
        else
        {
            bandwidth_information = std::make_unique<RsvpStandby::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation>();
            bandwidth_information->parent = this;
            children["bandwidth-information"] = bandwidth_information.get();
        }
        return children.at("bandwidth-information");
    }

    if(child_yang_name == "flags")
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
        else
        {
            flags = std::make_unique<RsvpStandby::InterfaceDetaileds::InterfaceDetailed::Flags>();
            flags->parent = this;
            children["flags"] = flags.get();
        }
        return children.at("flags");
    }

    if(child_yang_name == "neighbor-array")
    {
        for(auto const & c : neighbor_array)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::InterfaceDetaileds::InterfaceDetailed::NeighborArray>();
        c->parent = this;
        neighbor_array.push_back(std::move(c));
        children[segment_path] = neighbor_array.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceDetaileds::InterfaceDetailed::get_children()
{
    if(children.find("bandwidth-information") == children.end())
    {
        if(bandwidth_information != nullptr)
        {
            children["bandwidth-information"] = bandwidth_information.get();
        }
    }

    if(children.find("flags") == children.end())
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
    }

    for (auto const & c : neighbor_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::InterfaceDetaileds::InterfaceDetailed::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "ack-hold-time")
    {
        ack_hold_time = value;
    }
    if(value_path == "ack-max-size")
    {
        ack_max_size = value;
    }
    if(value_path == "bundle-message-max-size")
    {
        bundle_message_max_size = value;
    }
    if(value_path == "expiry-drops-tolerated")
    {
        expiry_drops_tolerated = value;
    }
    if(value_path == "expiry-interval")
    {
        expiry_interval = value;
    }
    if(value_path == "expiry-states")
    {
        expiry_states = value;
    }
    if(value_path == "expiry-timer-state")
    {
        expiry_timer_state = value;
    }
    if(value_path == "integrity-receive-password")
    {
        integrity_receive_password = value;
    }
    if(value_path == "integrity-receive-password-optional")
    {
        integrity_receive_password_optional = value;
    }
    if(value_path == "integrity-send-password")
    {
        integrity_send_password = value;
    }
    if(value_path == "interface-name-xr")
    {
        interface_name_xr = value;
    }
    if(value_path == "out-of-band-expiry-drops-tolerated")
    {
        out_of_band_expiry_drops_tolerated = value;
    }
    if(value_path == "out-of-band-refresh-interval")
    {
        out_of_band_refresh_interval = value;
    }
    if(value_path == "pacing-interval")
    {
        pacing_interval = value;
    }
    if(value_path == "pacing-message-rate")
    {
        pacing_message_rate = value;
    }
    if(value_path == "pacing-messages")
    {
        pacing_messages = value;
    }
    if(value_path == "pacing-timer-state")
    {
        pacing_timer_state = value;
    }
    if(value_path == "refresh-interval")
    {
        refresh_interval = value;
    }
    if(value_path == "refresh-timer-state")
    {
        refresh_timer_state = value;
    }
    if(value_path == "retransmit-time")
    {
        retransmit_time = value;
    }
    if(value_path == "signalling-ip-tos")
    {
        signalling_ip_tos = value;
    }
    if(value_path == "summary-refresh-max-size")
    {
        summary_refresh_max_size = value;
    }
    if(value_path == "summary-refresh-timer-state")
    {
        summary_refresh_timer_state = value;
    }
}

RsvpStandby::InterfaceDetaileds::InterfaceDetaileds()
{
    yang_name = "interface-detaileds"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::InterfaceDetaileds::~InterfaceDetaileds()
{
}

bool RsvpStandby::InterfaceDetaileds::has_data() const
{
    for (std::size_t index=0; index<interface_detailed.size(); index++)
    {
        if(interface_detailed[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::InterfaceDetaileds::has_operation() const
{
    for (std::size_t index=0; index<interface_detailed.size(); index++)
    {
        if(interface_detailed[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::InterfaceDetaileds::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-detaileds";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceDetaileds::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceDetaileds::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-detailed")
    {
        for(auto const & c : interface_detailed)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::InterfaceDetaileds::InterfaceDetailed>();
        c->parent = this;
        interface_detailed.push_back(std::move(c));
        children[segment_path] = interface_detailed.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceDetaileds::get_children()
{
    for (auto const & c : interface_detailed)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::InterfaceDetaileds::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::GracefulRestart::RecoveryTimeLeft::RecoveryTimeLeft()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "recovery-time-left"; yang_parent_name = "graceful-restart";
}

RsvpStandby::GracefulRestart::RecoveryTimeLeft::~RecoveryTimeLeft()
{
}

bool RsvpStandby::GracefulRestart::RecoveryTimeLeft::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool RsvpStandby::GracefulRestart::RecoveryTimeLeft::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string RsvpStandby::GracefulRestart::RecoveryTimeLeft::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "recovery-time-left";

    return path_buffer.str();

}

EntityPath RsvpStandby::GracefulRestart::RecoveryTimeLeft::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/graceful-restart/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::GracefulRestart::RecoveryTimeLeft::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::GracefulRestart::RecoveryTimeLeft::get_children()
{
    return children;
}

void RsvpStandby::GracefulRestart::RecoveryTimeLeft::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

RsvpStandby::GracefulRestart::RecoveryTimerExpTime::RecoveryTimerExpTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "recovery-timer-exp-time"; yang_parent_name = "graceful-restart";
}

RsvpStandby::GracefulRestart::RecoveryTimerExpTime::~RecoveryTimerExpTime()
{
}

bool RsvpStandby::GracefulRestart::RecoveryTimerExpTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool RsvpStandby::GracefulRestart::RecoveryTimerExpTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string RsvpStandby::GracefulRestart::RecoveryTimerExpTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "recovery-timer-exp-time";

    return path_buffer.str();

}

EntityPath RsvpStandby::GracefulRestart::RecoveryTimerExpTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/graceful-restart/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::GracefulRestart::RecoveryTimerExpTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::GracefulRestart::RecoveryTimerExpTime::get_children()
{
    return children;
}

void RsvpStandby::GracefulRestart::RecoveryTimerExpTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

RsvpStandby::GracefulRestart::LocalNodeAddress::LocalNodeAddress()
    :
    	application_type{YType::enumeration, "application-type"},
	 local_node_ip_address{YType::str, "local-node-ip-address"}
{
    yang_name = "local-node-address"; yang_parent_name = "graceful-restart";
}

RsvpStandby::GracefulRestart::LocalNodeAddress::~LocalNodeAddress()
{
}

bool RsvpStandby::GracefulRestart::LocalNodeAddress::has_data() const
{
    return application_type.is_set
	|| local_node_ip_address.is_set;
}

bool RsvpStandby::GracefulRestart::LocalNodeAddress::has_operation() const
{
    return is_set(operation)
	|| is_set(application_type.operation)
	|| is_set(local_node_ip_address.operation);
}

std::string RsvpStandby::GracefulRestart::LocalNodeAddress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "local-node-address";

    return path_buffer.str();

}

EntityPath RsvpStandby::GracefulRestart::LocalNodeAddress::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/graceful-restart/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (application_type.is_set || is_set(application_type.operation)) leaf_name_data.push_back(application_type.get_name_leafdata());
    if (local_node_ip_address.is_set || is_set(local_node_ip_address.operation)) leaf_name_data.push_back(local_node_ip_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::GracefulRestart::LocalNodeAddress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::GracefulRestart::LocalNodeAddress::get_children()
{
    return children;
}

void RsvpStandby::GracefulRestart::LocalNodeAddress::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "application-type")
    {
        application_type = value;
    }
    if(value_path == "local-node-ip-address")
    {
        local_node_ip_address = value;
    }
}

RsvpStandby::GracefulRestart::GracefulRestart()
    :
    	global_neighbors{YType::uint32, "global-neighbors"},
	 hello_interval{YType::uint32, "hello-interval"},
	 is_gr_enabled{YType::boolean, "is-gr-enabled"},
	 is_recovery_timer_running{YType::boolean, "is-recovery-timer-running"},
	 missed_hellos{YType::uint8, "missed-hellos"},
	 pending_states{YType::uint32, "pending-states"},
	 recovery_time{YType::uint32, "recovery-time"},
	 restart_time{YType::uint32, "restart-time"}
    	,
    recovery_time_left(std::make_unique<RsvpStandby::GracefulRestart::RecoveryTimeLeft>())
	,recovery_timer_exp_time(std::make_unique<RsvpStandby::GracefulRestart::RecoveryTimerExpTime>())
{
    recovery_time_left->parent = this;
    children["recovery-time-left"] = recovery_time_left.get();

    recovery_timer_exp_time->parent = this;
    children["recovery-timer-exp-time"] = recovery_timer_exp_time.get();

    yang_name = "graceful-restart"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::GracefulRestart::~GracefulRestart()
{
}

bool RsvpStandby::GracefulRestart::has_data() const
{
    for (std::size_t index=0; index<local_node_address.size(); index++)
    {
        if(local_node_address[index]->has_data())
            return true;
    }
    return global_neighbors.is_set
	|| hello_interval.is_set
	|| is_gr_enabled.is_set
	|| is_recovery_timer_running.is_set
	|| missed_hellos.is_set
	|| pending_states.is_set
	|| recovery_time.is_set
	|| restart_time.is_set
	|| (recovery_time_left !=  nullptr && recovery_time_left->has_data())
	|| (recovery_timer_exp_time !=  nullptr && recovery_timer_exp_time->has_data());
}

bool RsvpStandby::GracefulRestart::has_operation() const
{
    for (std::size_t index=0; index<local_node_address.size(); index++)
    {
        if(local_node_address[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(global_neighbors.operation)
	|| is_set(hello_interval.operation)
	|| is_set(is_gr_enabled.operation)
	|| is_set(is_recovery_timer_running.operation)
	|| is_set(missed_hellos.operation)
	|| is_set(pending_states.operation)
	|| is_set(recovery_time.operation)
	|| is_set(restart_time.operation)
	|| (recovery_time_left !=  nullptr && recovery_time_left->has_operation())
	|| (recovery_timer_exp_time !=  nullptr && recovery_timer_exp_time->has_operation());
}

std::string RsvpStandby::GracefulRestart::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "graceful-restart";

    return path_buffer.str();

}

EntityPath RsvpStandby::GracefulRestart::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (global_neighbors.is_set || is_set(global_neighbors.operation)) leaf_name_data.push_back(global_neighbors.get_name_leafdata());
    if (hello_interval.is_set || is_set(hello_interval.operation)) leaf_name_data.push_back(hello_interval.get_name_leafdata());
    if (is_gr_enabled.is_set || is_set(is_gr_enabled.operation)) leaf_name_data.push_back(is_gr_enabled.get_name_leafdata());
    if (is_recovery_timer_running.is_set || is_set(is_recovery_timer_running.operation)) leaf_name_data.push_back(is_recovery_timer_running.get_name_leafdata());
    if (missed_hellos.is_set || is_set(missed_hellos.operation)) leaf_name_data.push_back(missed_hellos.get_name_leafdata());
    if (pending_states.is_set || is_set(pending_states.operation)) leaf_name_data.push_back(pending_states.get_name_leafdata());
    if (recovery_time.is_set || is_set(recovery_time.operation)) leaf_name_data.push_back(recovery_time.get_name_leafdata());
    if (restart_time.is_set || is_set(restart_time.operation)) leaf_name_data.push_back(restart_time.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::GracefulRestart::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "local-node-address")
    {
        for(auto const & c : local_node_address)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::GracefulRestart::LocalNodeAddress>();
        c->parent = this;
        local_node_address.push_back(std::move(c));
        children[segment_path] = local_node_address.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "recovery-time-left")
    {
        if(recovery_time_left != nullptr)
        {
            children["recovery-time-left"] = recovery_time_left.get();
        }
        else
        {
            recovery_time_left = std::make_unique<RsvpStandby::GracefulRestart::RecoveryTimeLeft>();
            recovery_time_left->parent = this;
            children["recovery-time-left"] = recovery_time_left.get();
        }
        return children.at("recovery-time-left");
    }

    if(child_yang_name == "recovery-timer-exp-time")
    {
        if(recovery_timer_exp_time != nullptr)
        {
            children["recovery-timer-exp-time"] = recovery_timer_exp_time.get();
        }
        else
        {
            recovery_timer_exp_time = std::make_unique<RsvpStandby::GracefulRestart::RecoveryTimerExpTime>();
            recovery_timer_exp_time->parent = this;
            children["recovery-timer-exp-time"] = recovery_timer_exp_time.get();
        }
        return children.at("recovery-timer-exp-time");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::GracefulRestart::get_children()
{
    for (auto const & c : local_node_address)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("recovery-time-left") == children.end())
    {
        if(recovery_time_left != nullptr)
        {
            children["recovery-time-left"] = recovery_time_left.get();
        }
    }

    if(children.find("recovery-timer-exp-time") == children.end())
    {
        if(recovery_timer_exp_time != nullptr)
        {
            children["recovery-timer-exp-time"] = recovery_timer_exp_time.get();
        }
    }

    return children;
}

void RsvpStandby::GracefulRestart::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "global-neighbors")
    {
        global_neighbors = value;
    }
    if(value_path == "hello-interval")
    {
        hello_interval = value;
    }
    if(value_path == "is-gr-enabled")
    {
        is_gr_enabled = value;
    }
    if(value_path == "is-recovery-timer-running")
    {
        is_recovery_timer_running = value;
    }
    if(value_path == "missed-hellos")
    {
        missed_hellos = value;
    }
    if(value_path == "pending-states")
    {
        pending_states = value;
    }
    if(value_path == "recovery-time")
    {
        recovery_time = value;
    }
    if(value_path == "restart-time")
    {
        restart_time = value;
    }
}

RsvpStandby::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief::HelloInterfaceInstanceBrief()
    :
    	destination_address{YType::str, "destination-address"},
	 source_address{YType::str, "source-address"},
	 destination_address_xr{YType::str, "destination-address-xr"},
	 hello_interface{YType::str, "hello-interface"},
	 instance_type{YType::enumeration, "instance-type"},
	 source_address_xr{YType::str, "source-address-xr"}
{
    yang_name = "hello-interface-instance-brief"; yang_parent_name = "hello-interface-instance-briefs";
}

RsvpStandby::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief::~HelloInterfaceInstanceBrief()
{
}

bool RsvpStandby::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief::has_data() const
{
    return destination_address.is_set
	|| source_address.is_set
	|| destination_address_xr.is_set
	|| hello_interface.is_set
	|| instance_type.is_set
	|| source_address_xr.is_set;
}

bool RsvpStandby::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(source_address.operation)
	|| is_set(destination_address_xr.operation)
	|| is_set(hello_interface.operation)
	|| is_set(instance_type.operation)
	|| is_set(source_address_xr.operation);
}

std::string RsvpStandby::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hello-interface-instance-brief" <<"[destination-address='" <<destination_address.get() <<"']" <<"[source-address='" <<source_address.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/hello-interface-instance-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (destination_address_xr.is_set || is_set(destination_address_xr.operation)) leaf_name_data.push_back(destination_address_xr.get_name_leafdata());
    if (hello_interface.is_set || is_set(hello_interface.operation)) leaf_name_data.push_back(hello_interface.get_name_leafdata());
    if (instance_type.is_set || is_set(instance_type.operation)) leaf_name_data.push_back(instance_type.get_name_leafdata());
    if (source_address_xr.is_set || is_set(source_address_xr.operation)) leaf_name_data.push_back(source_address_xr.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief::get_children()
{
    return children;
}

void RsvpStandby::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "destination-address-xr")
    {
        destination_address_xr = value;
    }
    if(value_path == "hello-interface")
    {
        hello_interface = value;
    }
    if(value_path == "instance-type")
    {
        instance_type = value;
    }
    if(value_path == "source-address-xr")
    {
        source_address_xr = value;
    }
}

RsvpStandby::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBriefs()
{
    yang_name = "hello-interface-instance-briefs"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::HelloInterfaceInstanceBriefs::~HelloInterfaceInstanceBriefs()
{
}

bool RsvpStandby::HelloInterfaceInstanceBriefs::has_data() const
{
    for (std::size_t index=0; index<hello_interface_instance_brief.size(); index++)
    {
        if(hello_interface_instance_brief[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::HelloInterfaceInstanceBriefs::has_operation() const
{
    for (std::size_t index=0; index<hello_interface_instance_brief.size(); index++)
    {
        if(hello_interface_instance_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::HelloInterfaceInstanceBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hello-interface-instance-briefs";

    return path_buffer.str();

}

EntityPath RsvpStandby::HelloInterfaceInstanceBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::HelloInterfaceInstanceBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "hello-interface-instance-brief")
    {
        for(auto const & c : hello_interface_instance_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief>();
        c->parent = this;
        hello_interface_instance_brief.push_back(std::move(c));
        children[segment_path] = hello_interface_instance_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::HelloInterfaceInstanceBriefs::get_children()
{
    for (auto const & c : hello_interface_instance_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::HelloInterfaceInstanceBriefs::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime::LastMessageSentTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "last-message-sent-time"; yang_parent_name = "hello-interface-instance-detail";
}

RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime::~LastMessageSentTime()
{
}

bool RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "last-message-sent-time";

    return path_buffer.str();

}

EntityPath RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime::get_children()
{
    return children;
}

void RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::HelloInterfaceInstanceDetail()
    :
    	destination_address{YType::str, "destination-address"},
	 source_address{YType::str, "source-address"},
	 destination_address_xr{YType::str, "destination-address-xr"},
	 destination_instance{YType::uint32, "destination-instance"},
	 hello_global_neighbor_id{YType::str, "hello-global-neighbor-id"},
	 hello_interface{YType::str, "hello-interface"},
	 hello_messages_received{YType::uint64, "hello-messages-received"},
	 hello_messages_sent{YType::uint64, "hello-messages-sent"},
	 instance_type{YType::enumeration, "instance-type"},
	 source_address_xr{YType::str, "source-address-xr"},
	 source_instance{YType::uint32, "source-instance"}
    	,
    last_message_sent_time(std::make_unique<RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime>())
{
    last_message_sent_time->parent = this;
    children["last-message-sent-time"] = last_message_sent_time.get();

    yang_name = "hello-interface-instance-detail"; yang_parent_name = "hello-interface-instance-details";
}

RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::~HelloInterfaceInstanceDetail()
{
}

bool RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::has_data() const
{
    return destination_address.is_set
	|| source_address.is_set
	|| destination_address_xr.is_set
	|| destination_instance.is_set
	|| hello_global_neighbor_id.is_set
	|| hello_interface.is_set
	|| hello_messages_received.is_set
	|| hello_messages_sent.is_set
	|| instance_type.is_set
	|| source_address_xr.is_set
	|| source_instance.is_set
	|| (last_message_sent_time !=  nullptr && last_message_sent_time->has_data());
}

bool RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(source_address.operation)
	|| is_set(destination_address_xr.operation)
	|| is_set(destination_instance.operation)
	|| is_set(hello_global_neighbor_id.operation)
	|| is_set(hello_interface.operation)
	|| is_set(hello_messages_received.operation)
	|| is_set(hello_messages_sent.operation)
	|| is_set(instance_type.operation)
	|| is_set(source_address_xr.operation)
	|| is_set(source_instance.operation)
	|| (last_message_sent_time !=  nullptr && last_message_sent_time->has_operation());
}

std::string RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hello-interface-instance-detail" <<"[destination-address='" <<destination_address.get() <<"']" <<"[source-address='" <<source_address.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/hello-interface-instance-details/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (destination_address_xr.is_set || is_set(destination_address_xr.operation)) leaf_name_data.push_back(destination_address_xr.get_name_leafdata());
    if (destination_instance.is_set || is_set(destination_instance.operation)) leaf_name_data.push_back(destination_instance.get_name_leafdata());
    if (hello_global_neighbor_id.is_set || is_set(hello_global_neighbor_id.operation)) leaf_name_data.push_back(hello_global_neighbor_id.get_name_leafdata());
    if (hello_interface.is_set || is_set(hello_interface.operation)) leaf_name_data.push_back(hello_interface.get_name_leafdata());
    if (hello_messages_received.is_set || is_set(hello_messages_received.operation)) leaf_name_data.push_back(hello_messages_received.get_name_leafdata());
    if (hello_messages_sent.is_set || is_set(hello_messages_sent.operation)) leaf_name_data.push_back(hello_messages_sent.get_name_leafdata());
    if (instance_type.is_set || is_set(instance_type.operation)) leaf_name_data.push_back(instance_type.get_name_leafdata());
    if (source_address_xr.is_set || is_set(source_address_xr.operation)) leaf_name_data.push_back(source_address_xr.get_name_leafdata());
    if (source_instance.is_set || is_set(source_instance.operation)) leaf_name_data.push_back(source_instance.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "last-message-sent-time")
    {
        if(last_message_sent_time != nullptr)
        {
            children["last-message-sent-time"] = last_message_sent_time.get();
        }
        else
        {
            last_message_sent_time = std::make_unique<RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime>();
            last_message_sent_time->parent = this;
            children["last-message-sent-time"] = last_message_sent_time.get();
        }
        return children.at("last-message-sent-time");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::get_children()
{
    if(children.find("last-message-sent-time") == children.end())
    {
        if(last_message_sent_time != nullptr)
        {
            children["last-message-sent-time"] = last_message_sent_time.get();
        }
    }

    return children;
}

void RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "destination-address-xr")
    {
        destination_address_xr = value;
    }
    if(value_path == "destination-instance")
    {
        destination_instance = value;
    }
    if(value_path == "hello-global-neighbor-id")
    {
        hello_global_neighbor_id = value;
    }
    if(value_path == "hello-interface")
    {
        hello_interface = value;
    }
    if(value_path == "hello-messages-received")
    {
        hello_messages_received = value;
    }
    if(value_path == "hello-messages-sent")
    {
        hello_messages_sent = value;
    }
    if(value_path == "instance-type")
    {
        instance_type = value;
    }
    if(value_path == "source-address-xr")
    {
        source_address_xr = value;
    }
    if(value_path == "source-instance")
    {
        source_instance = value;
    }
}

RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetails()
{
    yang_name = "hello-interface-instance-details"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::HelloInterfaceInstanceDetails::~HelloInterfaceInstanceDetails()
{
}

bool RsvpStandby::HelloInterfaceInstanceDetails::has_data() const
{
    for (std::size_t index=0; index<hello_interface_instance_detail.size(); index++)
    {
        if(hello_interface_instance_detail[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::HelloInterfaceInstanceDetails::has_operation() const
{
    for (std::size_t index=0; index<hello_interface_instance_detail.size(); index++)
    {
        if(hello_interface_instance_detail[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::HelloInterfaceInstanceDetails::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hello-interface-instance-details";

    return path_buffer.str();

}

EntityPath RsvpStandby::HelloInterfaceInstanceDetails::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::HelloInterfaceInstanceDetails::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "hello-interface-instance-detail")
    {
        for(auto const & c : hello_interface_instance_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail>();
        c->parent = this;
        hello_interface_instance_detail.push_back(std::move(c));
        children[segment_path] = hello_interface_instance_detail.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::HelloInterfaceInstanceDetails::get_children()
{
    for (auto const & c : hello_interface_instance_detail)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::HelloInterfaceInstanceDetails::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail::InterfaceNeighborListDetail()
    :
    	interface_neighbor_address{YType::str, "interface-neighbor-address"},
	 is_rr_enabled{YType::boolean, "is-rr-enabled"},
	 neighbor_epoch{YType::uint32, "neighbor-epoch"},
	 neighbor_interface_name{YType::str, "neighbor-interface-name"},
	 out_of_order_messages{YType::uint32, "out-of-order-messages"},
	 retransmitted_messages{YType::uint32, "retransmitted-messages"}
{
    yang_name = "interface-neighbor-list-detail"; yang_parent_name = "interface-neighbor-detail";
}

RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail::~InterfaceNeighborListDetail()
{
}

bool RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail::has_data() const
{
    return interface_neighbor_address.is_set
	|| is_rr_enabled.is_set
	|| neighbor_epoch.is_set
	|| neighbor_interface_name.is_set
	|| out_of_order_messages.is_set
	|| retransmitted_messages.is_set;
}

bool RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_neighbor_address.operation)
	|| is_set(is_rr_enabled.operation)
	|| is_set(neighbor_epoch.operation)
	|| is_set(neighbor_interface_name.operation)
	|| is_set(out_of_order_messages.operation)
	|| is_set(retransmitted_messages.operation);
}

std::string RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-neighbor-list-detail";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_neighbor_address.is_set || is_set(interface_neighbor_address.operation)) leaf_name_data.push_back(interface_neighbor_address.get_name_leafdata());
    if (is_rr_enabled.is_set || is_set(is_rr_enabled.operation)) leaf_name_data.push_back(is_rr_enabled.get_name_leafdata());
    if (neighbor_epoch.is_set || is_set(neighbor_epoch.operation)) leaf_name_data.push_back(neighbor_epoch.get_name_leafdata());
    if (neighbor_interface_name.is_set || is_set(neighbor_interface_name.operation)) leaf_name_data.push_back(neighbor_interface_name.get_name_leafdata());
    if (out_of_order_messages.is_set || is_set(out_of_order_messages.operation)) leaf_name_data.push_back(out_of_order_messages.get_name_leafdata());
    if (retransmitted_messages.is_set || is_set(retransmitted_messages.operation)) leaf_name_data.push_back(retransmitted_messages.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail::get_children()
{
    return children;
}

void RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-neighbor-address")
    {
        interface_neighbor_address = value;
    }
    if(value_path == "is-rr-enabled")
    {
        is_rr_enabled = value;
    }
    if(value_path == "neighbor-epoch")
    {
        neighbor_epoch = value;
    }
    if(value_path == "neighbor-interface-name")
    {
        neighbor_interface_name = value;
    }
    if(value_path == "out-of-order-messages")
    {
        out_of_order_messages = value;
    }
    if(value_path == "retransmitted-messages")
    {
        retransmitted_messages = value;
    }
}

RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborDetail()
    :
    	neighbor_address{YType::str, "neighbor-address"},
	 node_address{YType::str, "node-address"}
{
    yang_name = "interface-neighbor-detail"; yang_parent_name = "interface-neighbor-details";
}

RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail::~InterfaceNeighborDetail()
{
}

bool RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail::has_data() const
{
    for (std::size_t index=0; index<interface_neighbor_list_detail.size(); index++)
    {
        if(interface_neighbor_list_detail[index]->has_data())
            return true;
    }
    return neighbor_address.is_set
	|| node_address.is_set;
}

bool RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail::has_operation() const
{
    for (std::size_t index=0; index<interface_neighbor_list_detail.size(); index++)
    {
        if(interface_neighbor_list_detail[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(neighbor_address.operation)
	|| is_set(node_address.operation);
}

std::string RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-neighbor-detail" <<"[neighbor-address='" <<neighbor_address.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-neighbor-details/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (node_address.is_set || is_set(node_address.operation)) leaf_name_data.push_back(node_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-neighbor-list-detail")
    {
        for(auto const & c : interface_neighbor_list_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail>();
        c->parent = this;
        interface_neighbor_list_detail.push_back(std::move(c));
        children[segment_path] = interface_neighbor_list_detail.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail::get_children()
{
    for (auto const & c : interface_neighbor_list_detail)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "node-address")
    {
        node_address = value;
    }
}

RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetails()
{
    yang_name = "interface-neighbor-details"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::InterfaceNeighborDetails::~InterfaceNeighborDetails()
{
}

bool RsvpStandby::InterfaceNeighborDetails::has_data() const
{
    for (std::size_t index=0; index<interface_neighbor_detail.size(); index++)
    {
        if(interface_neighbor_detail[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::InterfaceNeighborDetails::has_operation() const
{
    for (std::size_t index=0; index<interface_neighbor_detail.size(); index++)
    {
        if(interface_neighbor_detail[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::InterfaceNeighborDetails::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-neighbor-details";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceNeighborDetails::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceNeighborDetails::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-neighbor-detail")
    {
        for(auto const & c : interface_neighbor_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::InterfaceNeighborDetails::InterfaceNeighborDetail>();
        c->parent = this;
        interface_neighbor_detail.push_back(std::move(c));
        children[segment_path] = interface_neighbor_detail.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceNeighborDetails::get_children()
{
    for (auto const & c : interface_neighbor_detail)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::InterfaceNeighborDetails::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::Nsr::Status::IdtStatus::IdtStatus()
    :
    	declare_time{YType::uint32, "declare-time"},
	 idt_end_time{YType::uint32, "idt-end-time"},
	 idt_start_time{YType::uint32, "idt-start-time"},
	 not_ready_reason{YType::enumeration, "not-ready-reason"},
	 sync_status{YType::enumeration, "sync-status"},
	 withdraw_time{YType::uint32, "withdraw-time"}
{
    yang_name = "idt-status"; yang_parent_name = "status";
}

RsvpStandby::Nsr::Status::IdtStatus::~IdtStatus()
{
}

bool RsvpStandby::Nsr::Status::IdtStatus::has_data() const
{
    return declare_time.is_set
	|| idt_end_time.is_set
	|| idt_start_time.is_set
	|| not_ready_reason.is_set
	|| sync_status.is_set
	|| withdraw_time.is_set;
}

bool RsvpStandby::Nsr::Status::IdtStatus::has_operation() const
{
    return is_set(operation)
	|| is_set(declare_time.operation)
	|| is_set(idt_end_time.operation)
	|| is_set(idt_start_time.operation)
	|| is_set(not_ready_reason.operation)
	|| is_set(sync_status.operation)
	|| is_set(withdraw_time.operation);
}

std::string RsvpStandby::Nsr::Status::IdtStatus::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "idt-status";

    return path_buffer.str();

}

EntityPath RsvpStandby::Nsr::Status::IdtStatus::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/nsr/status/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (declare_time.is_set || is_set(declare_time.operation)) leaf_name_data.push_back(declare_time.get_name_leafdata());
    if (idt_end_time.is_set || is_set(idt_end_time.operation)) leaf_name_data.push_back(idt_end_time.get_name_leafdata());
    if (idt_start_time.is_set || is_set(idt_start_time.operation)) leaf_name_data.push_back(idt_start_time.get_name_leafdata());
    if (not_ready_reason.is_set || is_set(not_ready_reason.operation)) leaf_name_data.push_back(not_ready_reason.get_name_leafdata());
    if (sync_status.is_set || is_set(sync_status.operation)) leaf_name_data.push_back(sync_status.get_name_leafdata());
    if (withdraw_time.is_set || is_set(withdraw_time.operation)) leaf_name_data.push_back(withdraw_time.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Nsr::Status::IdtStatus::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Nsr::Status::IdtStatus::get_children()
{
    return children;
}

void RsvpStandby::Nsr::Status::IdtStatus::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "declare-time")
    {
        declare_time = value;
    }
    if(value_path == "idt-end-time")
    {
        idt_end_time = value;
    }
    if(value_path == "idt-start-time")
    {
        idt_start_time = value;
    }
    if(value_path == "not-ready-reason")
    {
        not_ready_reason = value;
    }
    if(value_path == "sync-status")
    {
        sync_status = value;
    }
    if(value_path == "withdraw-time")
    {
        withdraw_time = value;
    }
}

RsvpStandby::Nsr::Status::PreviousIdtStatus::PreviousIdtStatus()
    :
    	declare_time{YType::uint32, "declare-time"},
	 idt_end_time{YType::uint32, "idt-end-time"},
	 idt_start_time{YType::uint32, "idt-start-time"},
	 not_ready_reason{YType::enumeration, "not-ready-reason"},
	 sync_status{YType::enumeration, "sync-status"},
	 withdraw_time{YType::uint32, "withdraw-time"}
{
    yang_name = "previous-idt-status"; yang_parent_name = "status";
}

RsvpStandby::Nsr::Status::PreviousIdtStatus::~PreviousIdtStatus()
{
}

bool RsvpStandby::Nsr::Status::PreviousIdtStatus::has_data() const
{
    return declare_time.is_set
	|| idt_end_time.is_set
	|| idt_start_time.is_set
	|| not_ready_reason.is_set
	|| sync_status.is_set
	|| withdraw_time.is_set;
}

bool RsvpStandby::Nsr::Status::PreviousIdtStatus::has_operation() const
{
    return is_set(operation)
	|| is_set(declare_time.operation)
	|| is_set(idt_end_time.operation)
	|| is_set(idt_start_time.operation)
	|| is_set(not_ready_reason.operation)
	|| is_set(sync_status.operation)
	|| is_set(withdraw_time.operation);
}

std::string RsvpStandby::Nsr::Status::PreviousIdtStatus::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "previous-idt-status";

    return path_buffer.str();

}

EntityPath RsvpStandby::Nsr::Status::PreviousIdtStatus::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/nsr/status/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (declare_time.is_set || is_set(declare_time.operation)) leaf_name_data.push_back(declare_time.get_name_leafdata());
    if (idt_end_time.is_set || is_set(idt_end_time.operation)) leaf_name_data.push_back(idt_end_time.get_name_leafdata());
    if (idt_start_time.is_set || is_set(idt_start_time.operation)) leaf_name_data.push_back(idt_start_time.get_name_leafdata());
    if (not_ready_reason.is_set || is_set(not_ready_reason.operation)) leaf_name_data.push_back(not_ready_reason.get_name_leafdata());
    if (sync_status.is_set || is_set(sync_status.operation)) leaf_name_data.push_back(sync_status.get_name_leafdata());
    if (withdraw_time.is_set || is_set(withdraw_time.operation)) leaf_name_data.push_back(withdraw_time.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Nsr::Status::PreviousIdtStatus::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Nsr::Status::PreviousIdtStatus::get_children()
{
    return children;
}

void RsvpStandby::Nsr::Status::PreviousIdtStatus::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "declare-time")
    {
        declare_time = value;
    }
    if(value_path == "idt-end-time")
    {
        idt_end_time = value;
    }
    if(value_path == "idt-start-time")
    {
        idt_start_time = value;
    }
    if(value_path == "not-ready-reason")
    {
        not_ready_reason = value;
    }
    if(value_path == "sync-status")
    {
        sync_status = value;
    }
    if(value_path == "withdraw-time")
    {
        withdraw_time = value;
    }
}

RsvpStandby::Nsr::Status::Status()
    :
    	role{YType::enumeration, "role"}
    	,
    idt_status(std::make_unique<RsvpStandby::Nsr::Status::IdtStatus>())
	,previous_idt_status(std::make_unique<RsvpStandby::Nsr::Status::PreviousIdtStatus>())
{
    idt_status->parent = this;
    children["idt-status"] = idt_status.get();

    previous_idt_status->parent = this;
    children["previous-idt-status"] = previous_idt_status.get();

    yang_name = "status"; yang_parent_name = "nsr";
}

RsvpStandby::Nsr::Status::~Status()
{
}

bool RsvpStandby::Nsr::Status::has_data() const
{
    return role.is_set
	|| (idt_status !=  nullptr && idt_status->has_data())
	|| (previous_idt_status !=  nullptr && previous_idt_status->has_data());
}

bool RsvpStandby::Nsr::Status::has_operation() const
{
    return is_set(operation)
	|| is_set(role.operation)
	|| (idt_status !=  nullptr && idt_status->has_operation())
	|| (previous_idt_status !=  nullptr && previous_idt_status->has_operation());
}

std::string RsvpStandby::Nsr::Status::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "status";

    return path_buffer.str();

}

EntityPath RsvpStandby::Nsr::Status::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/nsr/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (role.is_set || is_set(role.operation)) leaf_name_data.push_back(role.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Nsr::Status::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "idt-status")
    {
        if(idt_status != nullptr)
        {
            children["idt-status"] = idt_status.get();
        }
        else
        {
            idt_status = std::make_unique<RsvpStandby::Nsr::Status::IdtStatus>();
            idt_status->parent = this;
            children["idt-status"] = idt_status.get();
        }
        return children.at("idt-status");
    }

    if(child_yang_name == "previous-idt-status")
    {
        if(previous_idt_status != nullptr)
        {
            children["previous-idt-status"] = previous_idt_status.get();
        }
        else
        {
            previous_idt_status = std::make_unique<RsvpStandby::Nsr::Status::PreviousIdtStatus>();
            previous_idt_status->parent = this;
            children["previous-idt-status"] = previous_idt_status.get();
        }
        return children.at("previous-idt-status");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Nsr::Status::get_children()
{
    if(children.find("idt-status") == children.end())
    {
        if(idt_status != nullptr)
        {
            children["idt-status"] = idt_status.get();
        }
    }

    if(children.find("previous-idt-status") == children.end())
    {
        if(previous_idt_status != nullptr)
        {
            children["previous-idt-status"] = previous_idt_status.get();
        }
    }

    return children;
}

void RsvpStandby::Nsr::Status::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "role")
    {
        role = value;
    }
}

RsvpStandby::Nsr::Nsr()
    :
    status(std::make_unique<RsvpStandby::Nsr::Status>())
{
    status->parent = this;
    children["status"] = status.get();

    yang_name = "nsr"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::Nsr::~Nsr()
{
}

bool RsvpStandby::Nsr::has_data() const
{
    return (status !=  nullptr && status->has_data());
}

bool RsvpStandby::Nsr::has_operation() const
{
    return is_set(operation)
	|| (status !=  nullptr && status->has_operation());
}

std::string RsvpStandby::Nsr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nsr";

    return path_buffer.str();

}

EntityPath RsvpStandby::Nsr::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Nsr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "status")
    {
        if(status != nullptr)
        {
            children["status"] = status.get();
        }
        else
        {
            status = std::make_unique<RsvpStandby::Nsr::Status>();
            status->parent = this;
            children["status"] = status.get();
        }
        return children.at("status");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Nsr::get_children()
{
    if(children.find("status") == children.end())
    {
        if(status != nullptr)
        {
            children["status"] = status.get();
        }
    }

    return children;
}

void RsvpStandby::Nsr::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::Summary::IssuStatus::IdtStatus::IdtStatus()
    :
    	declare_time{YType::uint32, "declare-time"},
	 idt_end_time{YType::uint32, "idt-end-time"},
	 idt_start_time{YType::uint32, "idt-start-time"},
	 not_ready_reason{YType::enumeration, "not-ready-reason"},
	 sync_status{YType::enumeration, "sync-status"},
	 withdraw_time{YType::uint32, "withdraw-time"}
{
    yang_name = "idt-status"; yang_parent_name = "issu-status";
}

RsvpStandby::Summary::IssuStatus::IdtStatus::~IdtStatus()
{
}

bool RsvpStandby::Summary::IssuStatus::IdtStatus::has_data() const
{
    return declare_time.is_set
	|| idt_end_time.is_set
	|| idt_start_time.is_set
	|| not_ready_reason.is_set
	|| sync_status.is_set
	|| withdraw_time.is_set;
}

bool RsvpStandby::Summary::IssuStatus::IdtStatus::has_operation() const
{
    return is_set(operation)
	|| is_set(declare_time.operation)
	|| is_set(idt_end_time.operation)
	|| is_set(idt_start_time.operation)
	|| is_set(not_ready_reason.operation)
	|| is_set(sync_status.operation)
	|| is_set(withdraw_time.operation);
}

std::string RsvpStandby::Summary::IssuStatus::IdtStatus::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "idt-status";

    return path_buffer.str();

}

EntityPath RsvpStandby::Summary::IssuStatus::IdtStatus::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/issu-status/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (declare_time.is_set || is_set(declare_time.operation)) leaf_name_data.push_back(declare_time.get_name_leafdata());
    if (idt_end_time.is_set || is_set(idt_end_time.operation)) leaf_name_data.push_back(idt_end_time.get_name_leafdata());
    if (idt_start_time.is_set || is_set(idt_start_time.operation)) leaf_name_data.push_back(idt_start_time.get_name_leafdata());
    if (not_ready_reason.is_set || is_set(not_ready_reason.operation)) leaf_name_data.push_back(not_ready_reason.get_name_leafdata());
    if (sync_status.is_set || is_set(sync_status.operation)) leaf_name_data.push_back(sync_status.get_name_leafdata());
    if (withdraw_time.is_set || is_set(withdraw_time.operation)) leaf_name_data.push_back(withdraw_time.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Summary::IssuStatus::IdtStatus::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Summary::IssuStatus::IdtStatus::get_children()
{
    return children;
}

void RsvpStandby::Summary::IssuStatus::IdtStatus::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "declare-time")
    {
        declare_time = value;
    }
    if(value_path == "idt-end-time")
    {
        idt_end_time = value;
    }
    if(value_path == "idt-start-time")
    {
        idt_start_time = value;
    }
    if(value_path == "not-ready-reason")
    {
        not_ready_reason = value;
    }
    if(value_path == "sync-status")
    {
        sync_status = value;
    }
    if(value_path == "withdraw-time")
    {
        withdraw_time = value;
    }
}

RsvpStandby::Summary::IssuStatus::PreviousIdtStatus::PreviousIdtStatus()
    :
    	declare_time{YType::uint32, "declare-time"},
	 idt_end_time{YType::uint32, "idt-end-time"},
	 idt_start_time{YType::uint32, "idt-start-time"},
	 not_ready_reason{YType::enumeration, "not-ready-reason"},
	 sync_status{YType::enumeration, "sync-status"},
	 withdraw_time{YType::uint32, "withdraw-time"}
{
    yang_name = "previous-idt-status"; yang_parent_name = "issu-status";
}

RsvpStandby::Summary::IssuStatus::PreviousIdtStatus::~PreviousIdtStatus()
{
}

bool RsvpStandby::Summary::IssuStatus::PreviousIdtStatus::has_data() const
{
    return declare_time.is_set
	|| idt_end_time.is_set
	|| idt_start_time.is_set
	|| not_ready_reason.is_set
	|| sync_status.is_set
	|| withdraw_time.is_set;
}

bool RsvpStandby::Summary::IssuStatus::PreviousIdtStatus::has_operation() const
{
    return is_set(operation)
	|| is_set(declare_time.operation)
	|| is_set(idt_end_time.operation)
	|| is_set(idt_start_time.operation)
	|| is_set(not_ready_reason.operation)
	|| is_set(sync_status.operation)
	|| is_set(withdraw_time.operation);
}

std::string RsvpStandby::Summary::IssuStatus::PreviousIdtStatus::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "previous-idt-status";

    return path_buffer.str();

}

EntityPath RsvpStandby::Summary::IssuStatus::PreviousIdtStatus::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/issu-status/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (declare_time.is_set || is_set(declare_time.operation)) leaf_name_data.push_back(declare_time.get_name_leafdata());
    if (idt_end_time.is_set || is_set(idt_end_time.operation)) leaf_name_data.push_back(idt_end_time.get_name_leafdata());
    if (idt_start_time.is_set || is_set(idt_start_time.operation)) leaf_name_data.push_back(idt_start_time.get_name_leafdata());
    if (not_ready_reason.is_set || is_set(not_ready_reason.operation)) leaf_name_data.push_back(not_ready_reason.get_name_leafdata());
    if (sync_status.is_set || is_set(sync_status.operation)) leaf_name_data.push_back(sync_status.get_name_leafdata());
    if (withdraw_time.is_set || is_set(withdraw_time.operation)) leaf_name_data.push_back(withdraw_time.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Summary::IssuStatus::PreviousIdtStatus::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Summary::IssuStatus::PreviousIdtStatus::get_children()
{
    return children;
}

void RsvpStandby::Summary::IssuStatus::PreviousIdtStatus::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "declare-time")
    {
        declare_time = value;
    }
    if(value_path == "idt-end-time")
    {
        idt_end_time = value;
    }
    if(value_path == "idt-start-time")
    {
        idt_start_time = value;
    }
    if(value_path == "not-ready-reason")
    {
        not_ready_reason = value;
    }
    if(value_path == "sync-status")
    {
        sync_status = value;
    }
    if(value_path == "withdraw-time")
    {
        withdraw_time = value;
    }
}

RsvpStandby::Summary::IssuStatus::IssuStatus()
    :
    	role{YType::enumeration, "role"}
    	,
    idt_status(std::make_unique<RsvpStandby::Summary::IssuStatus::IdtStatus>())
	,previous_idt_status(std::make_unique<RsvpStandby::Summary::IssuStatus::PreviousIdtStatus>())
{
    idt_status->parent = this;
    children["idt-status"] = idt_status.get();

    previous_idt_status->parent = this;
    children["previous-idt-status"] = previous_idt_status.get();

    yang_name = "issu-status"; yang_parent_name = "summary";
}

RsvpStandby::Summary::IssuStatus::~IssuStatus()
{
}

bool RsvpStandby::Summary::IssuStatus::has_data() const
{
    return role.is_set
	|| (idt_status !=  nullptr && idt_status->has_data())
	|| (previous_idt_status !=  nullptr && previous_idt_status->has_data());
}

bool RsvpStandby::Summary::IssuStatus::has_operation() const
{
    return is_set(operation)
	|| is_set(role.operation)
	|| (idt_status !=  nullptr && idt_status->has_operation())
	|| (previous_idt_status !=  nullptr && previous_idt_status->has_operation());
}

std::string RsvpStandby::Summary::IssuStatus::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "issu-status";

    return path_buffer.str();

}

EntityPath RsvpStandby::Summary::IssuStatus::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (role.is_set || is_set(role.operation)) leaf_name_data.push_back(role.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Summary::IssuStatus::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "idt-status")
    {
        if(idt_status != nullptr)
        {
            children["idt-status"] = idt_status.get();
        }
        else
        {
            idt_status = std::make_unique<RsvpStandby::Summary::IssuStatus::IdtStatus>();
            idt_status->parent = this;
            children["idt-status"] = idt_status.get();
        }
        return children.at("idt-status");
    }

    if(child_yang_name == "previous-idt-status")
    {
        if(previous_idt_status != nullptr)
        {
            children["previous-idt-status"] = previous_idt_status.get();
        }
        else
        {
            previous_idt_status = std::make_unique<RsvpStandby::Summary::IssuStatus::PreviousIdtStatus>();
            previous_idt_status->parent = this;
            children["previous-idt-status"] = previous_idt_status.get();
        }
        return children.at("previous-idt-status");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Summary::IssuStatus::get_children()
{
    if(children.find("idt-status") == children.end())
    {
        if(idt_status != nullptr)
        {
            children["idt-status"] = idt_status.get();
        }
    }

    if(children.find("previous-idt-status") == children.end())
    {
        if(previous_idt_status != nullptr)
        {
            children["previous-idt-status"] = previous_idt_status.get();
        }
    }

    return children;
}

void RsvpStandby::Summary::IssuStatus::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "role")
    {
        role = value;
    }
}

RsvpStandby::Summary::NsrStatus::IdtStatus::IdtStatus()
    :
    	declare_time{YType::uint32, "declare-time"},
	 idt_end_time{YType::uint32, "idt-end-time"},
	 idt_start_time{YType::uint32, "idt-start-time"},
	 not_ready_reason{YType::enumeration, "not-ready-reason"},
	 sync_status{YType::enumeration, "sync-status"},
	 withdraw_time{YType::uint32, "withdraw-time"}
{
    yang_name = "idt-status"; yang_parent_name = "nsr-status";
}

RsvpStandby::Summary::NsrStatus::IdtStatus::~IdtStatus()
{
}

bool RsvpStandby::Summary::NsrStatus::IdtStatus::has_data() const
{
    return declare_time.is_set
	|| idt_end_time.is_set
	|| idt_start_time.is_set
	|| not_ready_reason.is_set
	|| sync_status.is_set
	|| withdraw_time.is_set;
}

bool RsvpStandby::Summary::NsrStatus::IdtStatus::has_operation() const
{
    return is_set(operation)
	|| is_set(declare_time.operation)
	|| is_set(idt_end_time.operation)
	|| is_set(idt_start_time.operation)
	|| is_set(not_ready_reason.operation)
	|| is_set(sync_status.operation)
	|| is_set(withdraw_time.operation);
}

std::string RsvpStandby::Summary::NsrStatus::IdtStatus::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "idt-status";

    return path_buffer.str();

}

EntityPath RsvpStandby::Summary::NsrStatus::IdtStatus::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/nsr-status/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (declare_time.is_set || is_set(declare_time.operation)) leaf_name_data.push_back(declare_time.get_name_leafdata());
    if (idt_end_time.is_set || is_set(idt_end_time.operation)) leaf_name_data.push_back(idt_end_time.get_name_leafdata());
    if (idt_start_time.is_set || is_set(idt_start_time.operation)) leaf_name_data.push_back(idt_start_time.get_name_leafdata());
    if (not_ready_reason.is_set || is_set(not_ready_reason.operation)) leaf_name_data.push_back(not_ready_reason.get_name_leafdata());
    if (sync_status.is_set || is_set(sync_status.operation)) leaf_name_data.push_back(sync_status.get_name_leafdata());
    if (withdraw_time.is_set || is_set(withdraw_time.operation)) leaf_name_data.push_back(withdraw_time.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Summary::NsrStatus::IdtStatus::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Summary::NsrStatus::IdtStatus::get_children()
{
    return children;
}

void RsvpStandby::Summary::NsrStatus::IdtStatus::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "declare-time")
    {
        declare_time = value;
    }
    if(value_path == "idt-end-time")
    {
        idt_end_time = value;
    }
    if(value_path == "idt-start-time")
    {
        idt_start_time = value;
    }
    if(value_path == "not-ready-reason")
    {
        not_ready_reason = value;
    }
    if(value_path == "sync-status")
    {
        sync_status = value;
    }
    if(value_path == "withdraw-time")
    {
        withdraw_time = value;
    }
}

RsvpStandby::Summary::NsrStatus::PreviousIdtStatus::PreviousIdtStatus()
    :
    	declare_time{YType::uint32, "declare-time"},
	 idt_end_time{YType::uint32, "idt-end-time"},
	 idt_start_time{YType::uint32, "idt-start-time"},
	 not_ready_reason{YType::enumeration, "not-ready-reason"},
	 sync_status{YType::enumeration, "sync-status"},
	 withdraw_time{YType::uint32, "withdraw-time"}
{
    yang_name = "previous-idt-status"; yang_parent_name = "nsr-status";
}

RsvpStandby::Summary::NsrStatus::PreviousIdtStatus::~PreviousIdtStatus()
{
}

bool RsvpStandby::Summary::NsrStatus::PreviousIdtStatus::has_data() const
{
    return declare_time.is_set
	|| idt_end_time.is_set
	|| idt_start_time.is_set
	|| not_ready_reason.is_set
	|| sync_status.is_set
	|| withdraw_time.is_set;
}

bool RsvpStandby::Summary::NsrStatus::PreviousIdtStatus::has_operation() const
{
    return is_set(operation)
	|| is_set(declare_time.operation)
	|| is_set(idt_end_time.operation)
	|| is_set(idt_start_time.operation)
	|| is_set(not_ready_reason.operation)
	|| is_set(sync_status.operation)
	|| is_set(withdraw_time.operation);
}

std::string RsvpStandby::Summary::NsrStatus::PreviousIdtStatus::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "previous-idt-status";

    return path_buffer.str();

}

EntityPath RsvpStandby::Summary::NsrStatus::PreviousIdtStatus::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/nsr-status/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (declare_time.is_set || is_set(declare_time.operation)) leaf_name_data.push_back(declare_time.get_name_leafdata());
    if (idt_end_time.is_set || is_set(idt_end_time.operation)) leaf_name_data.push_back(idt_end_time.get_name_leafdata());
    if (idt_start_time.is_set || is_set(idt_start_time.operation)) leaf_name_data.push_back(idt_start_time.get_name_leafdata());
    if (not_ready_reason.is_set || is_set(not_ready_reason.operation)) leaf_name_data.push_back(not_ready_reason.get_name_leafdata());
    if (sync_status.is_set || is_set(sync_status.operation)) leaf_name_data.push_back(sync_status.get_name_leafdata());
    if (withdraw_time.is_set || is_set(withdraw_time.operation)) leaf_name_data.push_back(withdraw_time.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Summary::NsrStatus::PreviousIdtStatus::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Summary::NsrStatus::PreviousIdtStatus::get_children()
{
    return children;
}

void RsvpStandby::Summary::NsrStatus::PreviousIdtStatus::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "declare-time")
    {
        declare_time = value;
    }
    if(value_path == "idt-end-time")
    {
        idt_end_time = value;
    }
    if(value_path == "idt-start-time")
    {
        idt_start_time = value;
    }
    if(value_path == "not-ready-reason")
    {
        not_ready_reason = value;
    }
    if(value_path == "sync-status")
    {
        sync_status = value;
    }
    if(value_path == "withdraw-time")
    {
        withdraw_time = value;
    }
}

RsvpStandby::Summary::NsrStatus::NsrStatus()
    :
    	role{YType::enumeration, "role"}
    	,
    idt_status(std::make_unique<RsvpStandby::Summary::NsrStatus::IdtStatus>())
	,previous_idt_status(std::make_unique<RsvpStandby::Summary::NsrStatus::PreviousIdtStatus>())
{
    idt_status->parent = this;
    children["idt-status"] = idt_status.get();

    previous_idt_status->parent = this;
    children["previous-idt-status"] = previous_idt_status.get();

    yang_name = "nsr-status"; yang_parent_name = "summary";
}

RsvpStandby::Summary::NsrStatus::~NsrStatus()
{
}

bool RsvpStandby::Summary::NsrStatus::has_data() const
{
    return role.is_set
	|| (idt_status !=  nullptr && idt_status->has_data())
	|| (previous_idt_status !=  nullptr && previous_idt_status->has_data());
}

bool RsvpStandby::Summary::NsrStatus::has_operation() const
{
    return is_set(operation)
	|| is_set(role.operation)
	|| (idt_status !=  nullptr && idt_status->has_operation())
	|| (previous_idt_status !=  nullptr && previous_idt_status->has_operation());
}

std::string RsvpStandby::Summary::NsrStatus::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nsr-status";

    return path_buffer.str();

}

EntityPath RsvpStandby::Summary::NsrStatus::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (role.is_set || is_set(role.operation)) leaf_name_data.push_back(role.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Summary::NsrStatus::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "idt-status")
    {
        if(idt_status != nullptr)
        {
            children["idt-status"] = idt_status.get();
        }
        else
        {
            idt_status = std::make_unique<RsvpStandby::Summary::NsrStatus::IdtStatus>();
            idt_status->parent = this;
            children["idt-status"] = idt_status.get();
        }
        return children.at("idt-status");
    }

    if(child_yang_name == "previous-idt-status")
    {
        if(previous_idt_status != nullptr)
        {
            children["previous-idt-status"] = previous_idt_status.get();
        }
        else
        {
            previous_idt_status = std::make_unique<RsvpStandby::Summary::NsrStatus::PreviousIdtStatus>();
            previous_idt_status->parent = this;
            children["previous-idt-status"] = previous_idt_status.get();
        }
        return children.at("previous-idt-status");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Summary::NsrStatus::get_children()
{
    if(children.find("idt-status") == children.end())
    {
        if(idt_status != nullptr)
        {
            children["idt-status"] = idt_status.get();
        }
    }

    if(children.find("previous-idt-status") == children.end())
    {
        if(previous_idt_status != nullptr)
        {
            children["previous-idt-status"] = previous_idt_status.get();
        }
    }

    return children;
}

void RsvpStandby::Summary::NsrStatus::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "role")
    {
        role = value;
    }
}

RsvpStandby::Summary::DatabaseCounters::DatabaseCounters()
    :
    	incoming_paths{YType::uint32, "incoming-paths"},
	 incoming_reservations{YType::uint32, "incoming-reservations"},
	 interfaces{YType::uint32, "interfaces"},
	 outgoing_paths{YType::uint32, "outgoing-paths"},
	 outgoing_reservations{YType::uint32, "outgoing-reservations"},
	 sessions{YType::uint32, "sessions"}
{
    yang_name = "database-counters"; yang_parent_name = "summary";
}

RsvpStandby::Summary::DatabaseCounters::~DatabaseCounters()
{
}

bool RsvpStandby::Summary::DatabaseCounters::has_data() const
{
    return incoming_paths.is_set
	|| incoming_reservations.is_set
	|| interfaces.is_set
	|| outgoing_paths.is_set
	|| outgoing_reservations.is_set
	|| sessions.is_set;
}

bool RsvpStandby::Summary::DatabaseCounters::has_operation() const
{
    return is_set(operation)
	|| is_set(incoming_paths.operation)
	|| is_set(incoming_reservations.operation)
	|| is_set(interfaces.operation)
	|| is_set(outgoing_paths.operation)
	|| is_set(outgoing_reservations.operation)
	|| is_set(sessions.operation);
}

std::string RsvpStandby::Summary::DatabaseCounters::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "database-counters";

    return path_buffer.str();

}

EntityPath RsvpStandby::Summary::DatabaseCounters::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (incoming_paths.is_set || is_set(incoming_paths.operation)) leaf_name_data.push_back(incoming_paths.get_name_leafdata());
    if (incoming_reservations.is_set || is_set(incoming_reservations.operation)) leaf_name_data.push_back(incoming_reservations.get_name_leafdata());
    if (interfaces.is_set || is_set(interfaces.operation)) leaf_name_data.push_back(interfaces.get_name_leafdata());
    if (outgoing_paths.is_set || is_set(outgoing_paths.operation)) leaf_name_data.push_back(outgoing_paths.get_name_leafdata());
    if (outgoing_reservations.is_set || is_set(outgoing_reservations.operation)) leaf_name_data.push_back(outgoing_reservations.get_name_leafdata());
    if (sessions.is_set || is_set(sessions.operation)) leaf_name_data.push_back(sessions.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Summary::DatabaseCounters::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Summary::DatabaseCounters::get_children()
{
    return children;
}

void RsvpStandby::Summary::DatabaseCounters::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "incoming-paths")
    {
        incoming_paths = value;
    }
    if(value_path == "incoming-reservations")
    {
        incoming_reservations = value;
    }
    if(value_path == "interfaces")
    {
        interfaces = value;
    }
    if(value_path == "outgoing-paths")
    {
        outgoing_paths = value;
    }
    if(value_path == "outgoing-reservations")
    {
        outgoing_reservations = value;
    }
    if(value_path == "sessions")
    {
        sessions = value;
    }
}

RsvpStandby::Summary::Summary()
    :
    	interfaces{YType::uint32, "interfaces"},
	 ls_ps{YType::uint32, "ls-ps"}
    	,
    database_counters(std::make_unique<RsvpStandby::Summary::DatabaseCounters>())
	,issu_status(std::make_unique<RsvpStandby::Summary::IssuStatus>())
	,nsr_status(std::make_unique<RsvpStandby::Summary::NsrStatus>())
{
    database_counters->parent = this;
    children["database-counters"] = database_counters.get();

    issu_status->parent = this;
    children["issu-status"] = issu_status.get();

    nsr_status->parent = this;
    children["nsr-status"] = nsr_status.get();

    yang_name = "summary"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::Summary::~Summary()
{
}

bool RsvpStandby::Summary::has_data() const
{
    return interfaces.is_set
	|| ls_ps.is_set
	|| (database_counters !=  nullptr && database_counters->has_data())
	|| (issu_status !=  nullptr && issu_status->has_data())
	|| (nsr_status !=  nullptr && nsr_status->has_data());
}

bool RsvpStandby::Summary::has_operation() const
{
    return is_set(operation)
	|| is_set(interfaces.operation)
	|| is_set(ls_ps.operation)
	|| (database_counters !=  nullptr && database_counters->has_operation())
	|| (issu_status !=  nullptr && issu_status->has_operation())
	|| (nsr_status !=  nullptr && nsr_status->has_operation());
}

std::string RsvpStandby::Summary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "summary";

    return path_buffer.str();

}

EntityPath RsvpStandby::Summary::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interfaces.is_set || is_set(interfaces.operation)) leaf_name_data.push_back(interfaces.get_name_leafdata());
    if (ls_ps.is_set || is_set(ls_ps.operation)) leaf_name_data.push_back(ls_ps.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Summary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "database-counters")
    {
        if(database_counters != nullptr)
        {
            children["database-counters"] = database_counters.get();
        }
        else
        {
            database_counters = std::make_unique<RsvpStandby::Summary::DatabaseCounters>();
            database_counters->parent = this;
            children["database-counters"] = database_counters.get();
        }
        return children.at("database-counters");
    }

    if(child_yang_name == "issu-status")
    {
        if(issu_status != nullptr)
        {
            children["issu-status"] = issu_status.get();
        }
        else
        {
            issu_status = std::make_unique<RsvpStandby::Summary::IssuStatus>();
            issu_status->parent = this;
            children["issu-status"] = issu_status.get();
        }
        return children.at("issu-status");
    }

    if(child_yang_name == "nsr-status")
    {
        if(nsr_status != nullptr)
        {
            children["nsr-status"] = nsr_status.get();
        }
        else
        {
            nsr_status = std::make_unique<RsvpStandby::Summary::NsrStatus>();
            nsr_status->parent = this;
            children["nsr-status"] = nsr_status.get();
        }
        return children.at("nsr-status");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Summary::get_children()
{
    if(children.find("database-counters") == children.end())
    {
        if(database_counters != nullptr)
        {
            children["database-counters"] = database_counters.get();
        }
    }

    if(children.find("issu-status") == children.end())
    {
        if(issu_status != nullptr)
        {
            children["issu-status"] = issu_status.get();
        }
    }

    if(children.find("nsr-status") == children.end())
    {
        if(nsr_status != nullptr)
        {
            children["nsr-status"] = nsr_status.get();
        }
    }

    return children;
}

void RsvpStandby::Summary::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interfaces")
    {
        interfaces = value;
    }
    if(value_path == "ls-ps")
    {
        ls_ps = value;
    }
}

RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::Frrs::Frr::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

RsvpStandby::Frrs::Frr::Session::RsvpSession::~RsvpSession()
{
}

bool RsvpStandby::Frrs::Frr::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool RsvpStandby::Frrs::Frr::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string RsvpStandby::Frrs::Frr::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::Frrs::Frr::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Frrs::Frr::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<RsvpStandby::Frrs::Frr::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Frrs::Frr::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void RsvpStandby::Frrs::Frr::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

RsvpStandby::Frrs::Frr::Session::Session()
    :
    rsvp_session(std::make_unique<RsvpStandby::Frrs::Frr::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "frr";
}

RsvpStandby::Frrs::Frr::Session::~Session()
{
}

bool RsvpStandby::Frrs::Frr::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool RsvpStandby::Frrs::Frr::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string RsvpStandby::Frrs::Frr::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath RsvpStandby::Frrs::Frr::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Frrs::Frr::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<RsvpStandby::Frrs::Frr::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Frrs::Frr::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void RsvpStandby::Frrs::Frr::Session::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::Frrs::Frr::S2LSubLsp::S2LSubLsp()
    :
    	s2l_destination_address{YType::str, "s2l-destination-address"}
{
    yang_name = "s2l-sub-lsp"; yang_parent_name = "frr";
}

RsvpStandby::Frrs::Frr::S2LSubLsp::~S2LSubLsp()
{
}

bool RsvpStandby::Frrs::Frr::S2LSubLsp::has_data() const
{
    return s2l_destination_address.is_set;
}

bool RsvpStandby::Frrs::Frr::S2LSubLsp::has_operation() const
{
    return is_set(operation)
	|| is_set(s2l_destination_address.operation);
}

std::string RsvpStandby::Frrs::Frr::S2LSubLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "s2l-sub-lsp";

    return path_buffer.str();

}

EntityPath RsvpStandby::Frrs::Frr::S2LSubLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (s2l_destination_address.is_set || is_set(s2l_destination_address.operation)) leaf_name_data.push_back(s2l_destination_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Frrs::Frr::S2LSubLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Frrs::Frr::S2LSubLsp::get_children()
{
    return children;
}

void RsvpStandby::Frrs::Frr::S2LSubLsp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "s2l-destination-address")
    {
        s2l_destination_address = value;
    }
}

RsvpStandby::Frrs::Frr::Frr()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 path_status{YType::enumeration, "path-status"},
	 protocol{YType::int32, "protocol"},
	 reservation_status{YType::enumeration, "reservation-status"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::int32, "source-port"},
	 sub_group_id{YType::int32, "sub-group-id"},
	 sub_group_origin{YType::str, "sub-group-origin"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    s2l_sub_lsp(std::make_unique<RsvpStandby::Frrs::Frr::S2LSubLsp>())
	,session(std::make_unique<RsvpStandby::Frrs::Frr::Session>())
{
    s2l_sub_lsp->parent = this;
    children["s2l-sub-lsp"] = s2l_sub_lsp.get();

    session->parent = this;
    children["session"] = session.get();

    yang_name = "frr"; yang_parent_name = "frrs";
}

RsvpStandby::Frrs::Frr::~Frr()
{
}

bool RsvpStandby::Frrs::Frr::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| path_status.is_set
	|| protocol.is_set
	|| reservation_status.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set
	|| sub_group_origin.is_set
	|| vrf_name.is_set
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_data())
	|| (session !=  nullptr && session->has_data());
}

bool RsvpStandby::Frrs::Frr::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(path_status.operation)
	|| is_set(protocol.operation)
	|| is_set(reservation_status.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(sub_group_origin.operation)
	|| is_set(vrf_name.operation)
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_operation())
	|| (session !=  nullptr && session->has_operation());
}

std::string RsvpStandby::Frrs::Frr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frr";

    return path_buffer.str();

}

EntityPath RsvpStandby::Frrs::Frr::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (path_status.is_set || is_set(path_status.operation)) leaf_name_data.push_back(path_status.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (reservation_status.is_set || is_set(reservation_status.operation)) leaf_name_data.push_back(reservation_status.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (sub_group_origin.is_set || is_set(sub_group_origin.operation)) leaf_name_data.push_back(sub_group_origin.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Frrs::Frr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "s2l-sub-lsp")
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        else
        {
            s2l_sub_lsp = std::make_unique<RsvpStandby::Frrs::Frr::S2LSubLsp>();
            s2l_sub_lsp->parent = this;
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        return children.at("s2l-sub-lsp");
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<RsvpStandby::Frrs::Frr::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Frrs::Frr::get_children()
{
    if(children.find("s2l-sub-lsp") == children.end())
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
    }

    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    return children;
}

void RsvpStandby::Frrs::Frr::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "path-status")
    {
        path_status = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "reservation-status")
    {
        reservation_status = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "sub-group-origin")
    {
        sub_group_origin = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

RsvpStandby::Frrs::Frrs()
{
    yang_name = "frrs"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::Frrs::~Frrs()
{
}

bool RsvpStandby::Frrs::has_data() const
{
    for (std::size_t index=0; index<frr.size(); index++)
    {
        if(frr[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::Frrs::has_operation() const
{
    for (std::size_t index=0; index<frr.size(); index++)
    {
        if(frr[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::Frrs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frrs";

    return path_buffer.str();

}

EntityPath RsvpStandby::Frrs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::Frrs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "frr")
    {
        for(auto const & c : frr)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::Frrs::Frr>();
        c->parent = this;
        frr.push_back(std::move(c));
        children[segment_path] = frr.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::Frrs::get_children()
{
    for (auto const & c : frr)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::Frrs::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::~RsvpSession()
{
}

bool RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

RsvpStandby::RequestBriefs::RequestBrief::Session::Session()
    :
    rsvp_session(std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "request-brief";
}

RsvpStandby::RequestBriefs::RequestBrief::Session::~Session()
{
}

bool RsvpStandby::RequestBriefs::RequestBrief::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool RsvpStandby::RequestBriefs::RequestBrief::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string RsvpStandby::RequestBriefs::RequestBrief::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestBriefs::RequestBrief::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestBriefs::RequestBrief::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestBriefs::RequestBrief::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void RsvpStandby::RequestBriefs::RequestBrief::Session::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::RequestBriefs::RequestBrief::S2LSubLsp::S2LSubLsp()
    :
    	s2l_destination_address{YType::str, "s2l-destination-address"}
{
    yang_name = "s2l-sub-lsp"; yang_parent_name = "request-brief";
}

RsvpStandby::RequestBriefs::RequestBrief::S2LSubLsp::~S2LSubLsp()
{
}

bool RsvpStandby::RequestBriefs::RequestBrief::S2LSubLsp::has_data() const
{
    return s2l_destination_address.is_set;
}

bool RsvpStandby::RequestBriefs::RequestBrief::S2LSubLsp::has_operation() const
{
    return is_set(operation)
	|| is_set(s2l_destination_address.operation);
}

std::string RsvpStandby::RequestBriefs::RequestBrief::S2LSubLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "s2l-sub-lsp";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestBriefs::RequestBrief::S2LSubLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (s2l_destination_address.is_set || is_set(s2l_destination_address.operation)) leaf_name_data.push_back(s2l_destination_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestBriefs::RequestBrief::S2LSubLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestBriefs::RequestBrief::S2LSubLsp::get_children()
{
    return children;
}

void RsvpStandby::RequestBriefs::RequestBrief::S2LSubLsp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "s2l-destination-address")
    {
        s2l_destination_address = value;
    }
}

RsvpStandby::RequestBriefs::RequestBrief::FlowSpec::FlowSpec()
    :
    	flow_average_rate{YType::uint64, "flow-average-rate"},
	 flow_max_burst{YType::uint64, "flow-max-burst"},
	 flow_max_unit{YType::uint32, "flow-max-unit"},
	 flow_min_unit{YType::uint32, "flow-min-unit"},
	 flow_peak_rate{YType::uint64, "flow-peak-rate"},
	 flow_qos{YType::enumeration, "flow-qos"},
	 flow_requested_rate{YType::uint64, "flow-requested-rate"},
	 flow_slack{YType::uint32, "flow-slack"}
{
    yang_name = "flow-spec"; yang_parent_name = "request-brief";
}

RsvpStandby::RequestBriefs::RequestBrief::FlowSpec::~FlowSpec()
{
}

bool RsvpStandby::RequestBriefs::RequestBrief::FlowSpec::has_data() const
{
    return flow_average_rate.is_set
	|| flow_max_burst.is_set
	|| flow_max_unit.is_set
	|| flow_min_unit.is_set
	|| flow_peak_rate.is_set
	|| flow_qos.is_set
	|| flow_requested_rate.is_set
	|| flow_slack.is_set;
}

bool RsvpStandby::RequestBriefs::RequestBrief::FlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_average_rate.operation)
	|| is_set(flow_max_burst.operation)
	|| is_set(flow_max_unit.operation)
	|| is_set(flow_min_unit.operation)
	|| is_set(flow_peak_rate.operation)
	|| is_set(flow_qos.operation)
	|| is_set(flow_requested_rate.operation)
	|| is_set(flow_slack.operation);
}

std::string RsvpStandby::RequestBriefs::RequestBrief::FlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flow-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestBriefs::RequestBrief::FlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_average_rate.is_set || is_set(flow_average_rate.operation)) leaf_name_data.push_back(flow_average_rate.get_name_leafdata());
    if (flow_max_burst.is_set || is_set(flow_max_burst.operation)) leaf_name_data.push_back(flow_max_burst.get_name_leafdata());
    if (flow_max_unit.is_set || is_set(flow_max_unit.operation)) leaf_name_data.push_back(flow_max_unit.get_name_leafdata());
    if (flow_min_unit.is_set || is_set(flow_min_unit.operation)) leaf_name_data.push_back(flow_min_unit.get_name_leafdata());
    if (flow_peak_rate.is_set || is_set(flow_peak_rate.operation)) leaf_name_data.push_back(flow_peak_rate.get_name_leafdata());
    if (flow_qos.is_set || is_set(flow_qos.operation)) leaf_name_data.push_back(flow_qos.get_name_leafdata());
    if (flow_requested_rate.is_set || is_set(flow_requested_rate.operation)) leaf_name_data.push_back(flow_requested_rate.get_name_leafdata());
    if (flow_slack.is_set || is_set(flow_slack.operation)) leaf_name_data.push_back(flow_slack.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestBriefs::RequestBrief::FlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestBriefs::RequestBrief::FlowSpec::get_children()
{
    return children;
}

void RsvpStandby::RequestBriefs::RequestBrief::FlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-average-rate")
    {
        flow_average_rate = value;
    }
    if(value_path == "flow-max-burst")
    {
        flow_max_burst = value;
    }
    if(value_path == "flow-max-unit")
    {
        flow_max_unit = value;
    }
    if(value_path == "flow-min-unit")
    {
        flow_min_unit = value;
    }
    if(value_path == "flow-peak-rate")
    {
        flow_peak_rate = value;
    }
    if(value_path == "flow-qos")
    {
        flow_qos = value;
    }
    if(value_path == "flow-requested-rate")
    {
        flow_requested_rate = value;
    }
    if(value_path == "flow-slack")
    {
        flow_slack = value;
    }
}

RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec::G709OtnFlowSpec()
    :
    	flow_bit_rate{YType::uint64, "flow-bit-rate"},
	 flow_multiplier{YType::uint16, "flow-multiplier"},
	 flow_nvc{YType::uint16, "flow-nvc"},
	 flow_signal_type{YType::uint8, "flow-signal-type"}
{
    yang_name = "g709otn-flow-spec"; yang_parent_name = "generic-flow-spec";
}

RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec::~G709OtnFlowSpec()
{
}

bool RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec::has_data() const
{
    return flow_bit_rate.is_set
	|| flow_multiplier.is_set
	|| flow_nvc.is_set
	|| flow_signal_type.is_set;
}

bool RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_bit_rate.operation)
	|| is_set(flow_multiplier.operation)
	|| is_set(flow_nvc.operation)
	|| is_set(flow_signal_type.operation);
}

std::string RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-flow-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/generic-flow-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_bit_rate.is_set || is_set(flow_bit_rate.operation)) leaf_name_data.push_back(flow_bit_rate.get_name_leafdata());
    if (flow_multiplier.is_set || is_set(flow_multiplier.operation)) leaf_name_data.push_back(flow_multiplier.get_name_leafdata());
    if (flow_nvc.is_set || is_set(flow_nvc.operation)) leaf_name_data.push_back(flow_nvc.get_name_leafdata());
    if (flow_signal_type.is_set || is_set(flow_signal_type.operation)) leaf_name_data.push_back(flow_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec::get_children()
{
    return children;
}

void RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-bit-rate")
    {
        flow_bit_rate = value;
    }
    if(value_path == "flow-multiplier")
    {
        flow_multiplier = value;
    }
    if(value_path == "flow-nvc")
    {
        flow_nvc = value;
    }
    if(value_path == "flow-signal-type")
    {
        flow_signal_type = value;
    }
}

RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::GenericFlowSpec()
    :
    	flow_spec_type{YType::enumeration, "flow-spec-type"}
    	,
    g709otn_flow_spec(std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec>())
{
    g709otn_flow_spec->parent = this;
    children["g709otn-flow-spec"] = g709otn_flow_spec.get();

    yang_name = "generic-flow-spec"; yang_parent_name = "request-brief";
}

RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::~GenericFlowSpec()
{
}

bool RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::has_data() const
{
    return flow_spec_type.is_set
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_data());
}

bool RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_spec_type.operation)
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_operation());
}

std::string RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-flow-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_spec_type.is_set || is_set(flow_spec_type.operation)) leaf_name_data.push_back(flow_spec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-flow-spec")
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        else
        {
            g709otn_flow_spec = std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec>();
            g709otn_flow_spec->parent = this;
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        return children.at("g709otn-flow-spec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::get_children()
{
    if(children.find("g709otn-flow-spec") == children.end())
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
    }

    return children;
}

void RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-spec-type")
    {
        flow_spec_type = value;
    }
}

RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session::UdpIpv4Session()
    :
    	source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"}
{
    yang_name = "udp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session::~UdpIpv4Session()
{
}

bool RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session::has_data() const
{
    return source_address.is_set
	|| source_port.is_set;
}

bool RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation);
}

std::string RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "udp-ipv4-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/filter/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session::get_children()
{
    return children;
}

void RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
}

RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session::P2MpIpv4Session()
    :
    	p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"},
	 sub_group_id{YType::uint16, "sub-group-id"}
{
    yang_name = "p2mp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session::~P2MpIpv4Session()
{
}

bool RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session::has_data() const
{
    return p2mp_sub_group_origin.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set;
}

bool RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation);
}

std::string RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "p2mp-ipv4-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/filter/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session::get_children()
{
    return children;
}

void RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
}

RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::RsvpFilter()
    :
    	filter_type{YType::enumeration, "filter-type"}
    	,
    p2mp_ipv4_session(std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session>())
	,udp_ipv4_session(std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session>())
{
    p2mp_ipv4_session->parent = this;
    children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();

    udp_ipv4_session->parent = this;
    children["udp-ipv4-session"] = udp_ipv4_session.get();

    yang_name = "rsvp-filter"; yang_parent_name = "filter";
}

RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::~RsvpFilter()
{
}

bool RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::has_data() const
{
    return filter_type.is_set
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_data())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_data());
}

bool RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::has_operation() const
{
    return is_set(operation)
	|| is_set(filter_type.operation)
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_operation())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_operation());
}

std::string RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-filter";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (filter_type.is_set || is_set(filter_type.operation)) leaf_name_data.push_back(filter_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "p2mp-ipv4-session")
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        else
        {
            p2mp_ipv4_session = std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session>();
            p2mp_ipv4_session->parent = this;
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        return children.at("p2mp-ipv4-session");
    }

    if(child_yang_name == "udp-ipv4-session")
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        else
        {
            udp_ipv4_session = std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session>();
            udp_ipv4_session->parent = this;
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        return children.at("udp-ipv4-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::get_children()
{
    if(children.find("p2mp-ipv4-session") == children.end())
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
    }

    if(children.find("udp-ipv4-session") == children.end())
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
    }

    return children;
}

void RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "filter-type")
    {
        filter_type = value;
    }
}

RsvpStandby::RequestBriefs::RequestBrief::Filter::Filter()
    :
    rsvp_filter(std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter>())
{
    rsvp_filter->parent = this;
    children["rsvp-filter"] = rsvp_filter.get();

    yang_name = "filter"; yang_parent_name = "request-brief";
}

RsvpStandby::RequestBriefs::RequestBrief::Filter::~Filter()
{
}

bool RsvpStandby::RequestBriefs::RequestBrief::Filter::has_data() const
{
    return (rsvp_filter !=  nullptr && rsvp_filter->has_data());
}

bool RsvpStandby::RequestBriefs::RequestBrief::Filter::has_operation() const
{
    return is_set(operation)
	|| (rsvp_filter !=  nullptr && rsvp_filter->has_operation());
}

std::string RsvpStandby::RequestBriefs::RequestBrief::Filter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "filter";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestBriefs::RequestBrief::Filter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestBriefs::RequestBrief::Filter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-filter")
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
        else
        {
            rsvp_filter = std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Filter::RsvpFilter>();
            rsvp_filter->parent = this;
            children["rsvp-filter"] = rsvp_filter.get();
        }
        return children.at("rsvp-filter");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestBriefs::RequestBrief::Filter::get_children()
{
    if(children.find("rsvp-filter") == children.end())
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
    }

    return children;
}

void RsvpStandby::RequestBriefs::RequestBrief::Filter::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::RequestBriefs::RequestBrief::Style::Style()
    :
    	reservation_type{YType::enumeration, "reservation-type"}
{
    yang_name = "style"; yang_parent_name = "request-brief";
}

RsvpStandby::RequestBriefs::RequestBrief::Style::~Style()
{
}

bool RsvpStandby::RequestBriefs::RequestBrief::Style::has_data() const
{
    return reservation_type.is_set;
}

bool RsvpStandby::RequestBriefs::RequestBrief::Style::has_operation() const
{
    return is_set(operation)
	|| is_set(reservation_type.operation);
}

std::string RsvpStandby::RequestBriefs::RequestBrief::Style::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "style";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestBriefs::RequestBrief::Style::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (reservation_type.is_set || is_set(reservation_type.operation)) leaf_name_data.push_back(reservation_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestBriefs::RequestBrief::Style::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestBriefs::RequestBrief::Style::get_children()
{
    return children;
}

void RsvpStandby::RequestBriefs::RequestBrief::Style::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "reservation-type")
    {
        reservation_type = value;
    }
}

RsvpStandby::RequestBriefs::RequestBrief::RequestBrief()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 output_interface{YType::str, "output-interface"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 protocol{YType::int32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::int32, "source-port"},
	 sub_group_id{YType::int32, "sub-group-id"},
	 sub_group_origin{YType::str, "sub-group-origin"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    filter(std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Filter>())
	,flow_spec(std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::FlowSpec>())
	,generic_flow_spec(std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec>())
	,s2l_sub_lsp(std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::S2LSubLsp>())
	,session(std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Session>())
	,style(std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Style>())
{
    filter->parent = this;
    children["filter"] = filter.get();

    flow_spec->parent = this;
    children["flow-spec"] = flow_spec.get();

    generic_flow_spec->parent = this;
    children["generic-flow-spec"] = generic_flow_spec.get();

    s2l_sub_lsp->parent = this;
    children["s2l-sub-lsp"] = s2l_sub_lsp.get();

    session->parent = this;
    children["session"] = session.get();

    style->parent = this;
    children["style"] = style.get();

    yang_name = "request-brief"; yang_parent_name = "request-briefs";
}

RsvpStandby::RequestBriefs::RequestBrief::~RequestBrief()
{
}

bool RsvpStandby::RequestBriefs::RequestBrief::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| extended_tunnel_id.is_set
	|| output_interface.is_set
	|| p2mp_id.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set
	|| sub_group_origin.is_set
	|| vrf_name.is_set
	|| (filter !=  nullptr && filter->has_data())
	|| (flow_spec !=  nullptr && flow_spec->has_data())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_data())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_data())
	|| (session !=  nullptr && session->has_data())
	|| (style !=  nullptr && style->has_data());
}

bool RsvpStandby::RequestBriefs::RequestBrief::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(output_interface.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(sub_group_origin.operation)
	|| is_set(vrf_name.operation)
	|| (filter !=  nullptr && filter->has_operation())
	|| (flow_spec !=  nullptr && flow_spec->has_operation())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_operation())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_operation())
	|| (session !=  nullptr && session->has_operation())
	|| (style !=  nullptr && style->has_operation());
}

std::string RsvpStandby::RequestBriefs::RequestBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "request-brief";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestBriefs::RequestBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (output_interface.is_set || is_set(output_interface.operation)) leaf_name_data.push_back(output_interface.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (sub_group_origin.is_set || is_set(sub_group_origin.operation)) leaf_name_data.push_back(sub_group_origin.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestBriefs::RequestBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "filter")
    {
        if(filter != nullptr)
        {
            children["filter"] = filter.get();
        }
        else
        {
            filter = std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Filter>();
            filter->parent = this;
            children["filter"] = filter.get();
        }
        return children.at("filter");
    }

    if(child_yang_name == "flow-spec")
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
        else
        {
            flow_spec = std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::FlowSpec>();
            flow_spec->parent = this;
            children["flow-spec"] = flow_spec.get();
        }
        return children.at("flow-spec");
    }

    if(child_yang_name == "generic-flow-spec")
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        else
        {
            generic_flow_spec = std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::GenericFlowSpec>();
            generic_flow_spec->parent = this;
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        return children.at("generic-flow-spec");
    }

    if(child_yang_name == "s2l-sub-lsp")
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        else
        {
            s2l_sub_lsp = std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::S2LSubLsp>();
            s2l_sub_lsp->parent = this;
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        return children.at("s2l-sub-lsp");
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    if(child_yang_name == "style")
    {
        if(style != nullptr)
        {
            children["style"] = style.get();
        }
        else
        {
            style = std::make_unique<RsvpStandby::RequestBriefs::RequestBrief::Style>();
            style->parent = this;
            children["style"] = style.get();
        }
        return children.at("style");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestBriefs::RequestBrief::get_children()
{
    if(children.find("filter") == children.end())
    {
        if(filter != nullptr)
        {
            children["filter"] = filter.get();
        }
    }

    if(children.find("flow-spec") == children.end())
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
    }

    if(children.find("generic-flow-spec") == children.end())
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
    }

    if(children.find("s2l-sub-lsp") == children.end())
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
    }

    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    if(children.find("style") == children.end())
    {
        if(style != nullptr)
        {
            children["style"] = style.get();
        }
    }

    return children;
}

void RsvpStandby::RequestBriefs::RequestBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "output-interface")
    {
        output_interface = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "sub-group-origin")
    {
        sub_group_origin = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

RsvpStandby::RequestBriefs::RequestBriefs()
{
    yang_name = "request-briefs"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::RequestBriefs::~RequestBriefs()
{
}

bool RsvpStandby::RequestBriefs::has_data() const
{
    for (std::size_t index=0; index<request_brief.size(); index++)
    {
        if(request_brief[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::RequestBriefs::has_operation() const
{
    for (std::size_t index=0; index<request_brief.size(); index++)
    {
        if(request_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::RequestBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "request-briefs";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "request-brief")
    {
        for(auto const & c : request_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::RequestBriefs::RequestBrief>();
        c->parent = this;
        request_brief.push_back(std::move(c));
        children[segment_path] = request_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestBriefs::get_children()
{
    for (auto const & c : request_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::RequestBriefs::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::~RsvpSession()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::Session::Session()
    :
    rsvp_session(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "request-detail";
}

RsvpStandby::RequestDetails::RequestDetail::Session::~Session()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool RsvpStandby::RequestDetails::RequestDetail::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string RsvpStandby::RequestDetails::RequestDetail::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::Session::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::RequestDetails::RequestDetail::S2LSubLsp::S2LSubLsp()
    :
    	s2l_destination_address{YType::str, "s2l-destination-address"}
{
    yang_name = "s2l-sub-lsp"; yang_parent_name = "request-detail";
}

RsvpStandby::RequestDetails::RequestDetail::S2LSubLsp::~S2LSubLsp()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::S2LSubLsp::has_data() const
{
    return s2l_destination_address.is_set;
}

bool RsvpStandby::RequestDetails::RequestDetail::S2LSubLsp::has_operation() const
{
    return is_set(operation)
	|| is_set(s2l_destination_address.operation);
}

std::string RsvpStandby::RequestDetails::RequestDetail::S2LSubLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "s2l-sub-lsp";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::S2LSubLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (s2l_destination_address.is_set || is_set(s2l_destination_address.operation)) leaf_name_data.push_back(s2l_destination_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::S2LSubLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::S2LSubLsp::get_children()
{
    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::S2LSubLsp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "s2l-destination-address")
    {
        s2l_destination_address = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::FlowSpec::FlowSpec()
    :
    	flow_average_rate{YType::uint64, "flow-average-rate"},
	 flow_max_burst{YType::uint64, "flow-max-burst"},
	 flow_max_unit{YType::uint32, "flow-max-unit"},
	 flow_min_unit{YType::uint32, "flow-min-unit"},
	 flow_peak_rate{YType::uint64, "flow-peak-rate"},
	 flow_qos{YType::enumeration, "flow-qos"},
	 flow_requested_rate{YType::uint64, "flow-requested-rate"},
	 flow_slack{YType::uint32, "flow-slack"}
{
    yang_name = "flow-spec"; yang_parent_name = "request-detail";
}

RsvpStandby::RequestDetails::RequestDetail::FlowSpec::~FlowSpec()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::FlowSpec::has_data() const
{
    return flow_average_rate.is_set
	|| flow_max_burst.is_set
	|| flow_max_unit.is_set
	|| flow_min_unit.is_set
	|| flow_peak_rate.is_set
	|| flow_qos.is_set
	|| flow_requested_rate.is_set
	|| flow_slack.is_set;
}

bool RsvpStandby::RequestDetails::RequestDetail::FlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_average_rate.operation)
	|| is_set(flow_max_burst.operation)
	|| is_set(flow_max_unit.operation)
	|| is_set(flow_min_unit.operation)
	|| is_set(flow_peak_rate.operation)
	|| is_set(flow_qos.operation)
	|| is_set(flow_requested_rate.operation)
	|| is_set(flow_slack.operation);
}

std::string RsvpStandby::RequestDetails::RequestDetail::FlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flow-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::FlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_average_rate.is_set || is_set(flow_average_rate.operation)) leaf_name_data.push_back(flow_average_rate.get_name_leafdata());
    if (flow_max_burst.is_set || is_set(flow_max_burst.operation)) leaf_name_data.push_back(flow_max_burst.get_name_leafdata());
    if (flow_max_unit.is_set || is_set(flow_max_unit.operation)) leaf_name_data.push_back(flow_max_unit.get_name_leafdata());
    if (flow_min_unit.is_set || is_set(flow_min_unit.operation)) leaf_name_data.push_back(flow_min_unit.get_name_leafdata());
    if (flow_peak_rate.is_set || is_set(flow_peak_rate.operation)) leaf_name_data.push_back(flow_peak_rate.get_name_leafdata());
    if (flow_qos.is_set || is_set(flow_qos.operation)) leaf_name_data.push_back(flow_qos.get_name_leafdata());
    if (flow_requested_rate.is_set || is_set(flow_requested_rate.operation)) leaf_name_data.push_back(flow_requested_rate.get_name_leafdata());
    if (flow_slack.is_set || is_set(flow_slack.operation)) leaf_name_data.push_back(flow_slack.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::FlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::FlowSpec::get_children()
{
    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::FlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-average-rate")
    {
        flow_average_rate = value;
    }
    if(value_path == "flow-max-burst")
    {
        flow_max_burst = value;
    }
    if(value_path == "flow-max-unit")
    {
        flow_max_unit = value;
    }
    if(value_path == "flow-min-unit")
    {
        flow_min_unit = value;
    }
    if(value_path == "flow-peak-rate")
    {
        flow_peak_rate = value;
    }
    if(value_path == "flow-qos")
    {
        flow_qos = value;
    }
    if(value_path == "flow-requested-rate")
    {
        flow_requested_rate = value;
    }
    if(value_path == "flow-slack")
    {
        flow_slack = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec::G709OtnFlowSpec()
    :
    	flow_bit_rate{YType::uint64, "flow-bit-rate"},
	 flow_multiplier{YType::uint16, "flow-multiplier"},
	 flow_nvc{YType::uint16, "flow-nvc"},
	 flow_signal_type{YType::uint8, "flow-signal-type"}
{
    yang_name = "g709otn-flow-spec"; yang_parent_name = "generic-flow-spec";
}

RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec::~G709OtnFlowSpec()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec::has_data() const
{
    return flow_bit_rate.is_set
	|| flow_multiplier.is_set
	|| flow_nvc.is_set
	|| flow_signal_type.is_set;
}

bool RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_bit_rate.operation)
	|| is_set(flow_multiplier.operation)
	|| is_set(flow_nvc.operation)
	|| is_set(flow_signal_type.operation);
}

std::string RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-flow-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/generic-flow-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_bit_rate.is_set || is_set(flow_bit_rate.operation)) leaf_name_data.push_back(flow_bit_rate.get_name_leafdata());
    if (flow_multiplier.is_set || is_set(flow_multiplier.operation)) leaf_name_data.push_back(flow_multiplier.get_name_leafdata());
    if (flow_nvc.is_set || is_set(flow_nvc.operation)) leaf_name_data.push_back(flow_nvc.get_name_leafdata());
    if (flow_signal_type.is_set || is_set(flow_signal_type.operation)) leaf_name_data.push_back(flow_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec::get_children()
{
    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-bit-rate")
    {
        flow_bit_rate = value;
    }
    if(value_path == "flow-multiplier")
    {
        flow_multiplier = value;
    }
    if(value_path == "flow-nvc")
    {
        flow_nvc = value;
    }
    if(value_path == "flow-signal-type")
    {
        flow_signal_type = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::GenericFlowSpec()
    :
    	flow_spec_type{YType::enumeration, "flow-spec-type"}
    	,
    g709otn_flow_spec(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec>())
{
    g709otn_flow_spec->parent = this;
    children["g709otn-flow-spec"] = g709otn_flow_spec.get();

    yang_name = "generic-flow-spec"; yang_parent_name = "request-detail";
}

RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::~GenericFlowSpec()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::has_data() const
{
    return flow_spec_type.is_set
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_data());
}

bool RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_spec_type.operation)
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_operation());
}

std::string RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-flow-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_spec_type.is_set || is_set(flow_spec_type.operation)) leaf_name_data.push_back(flow_spec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-flow-spec")
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        else
        {
            g709otn_flow_spec = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec>();
            g709otn_flow_spec->parent = this;
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        return children.at("g709otn-flow-spec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::get_children()
{
    if(children.find("g709otn-flow-spec") == children.end())
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
    }

    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-spec-type")
    {
        flow_spec_type = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session::UdpIpv4Session()
    :
    	source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"}
{
    yang_name = "udp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session::~UdpIpv4Session()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session::has_data() const
{
    return source_address.is_set
	|| source_port.is_set;
}

bool RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation);
}

std::string RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "udp-ipv4-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/filter/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session::get_children()
{
    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session::P2MpIpv4Session()
    :
    	p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"},
	 sub_group_id{YType::uint16, "sub-group-id"}
{
    yang_name = "p2mp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session::~P2MpIpv4Session()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session::has_data() const
{
    return p2mp_sub_group_origin.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set;
}

bool RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation);
}

std::string RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "p2mp-ipv4-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/filter/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session::get_children()
{
    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::RsvpFilter()
    :
    	filter_type{YType::enumeration, "filter-type"}
    	,
    p2mp_ipv4_session(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session>())
	,udp_ipv4_session(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session>())
{
    p2mp_ipv4_session->parent = this;
    children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();

    udp_ipv4_session->parent = this;
    children["udp-ipv4-session"] = udp_ipv4_session.get();

    yang_name = "rsvp-filter"; yang_parent_name = "filter";
}

RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::~RsvpFilter()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::has_data() const
{
    return filter_type.is_set
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_data())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_data());
}

bool RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::has_operation() const
{
    return is_set(operation)
	|| is_set(filter_type.operation)
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_operation())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_operation());
}

std::string RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-filter";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (filter_type.is_set || is_set(filter_type.operation)) leaf_name_data.push_back(filter_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "p2mp-ipv4-session")
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        else
        {
            p2mp_ipv4_session = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session>();
            p2mp_ipv4_session->parent = this;
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        return children.at("p2mp-ipv4-session");
    }

    if(child_yang_name == "udp-ipv4-session")
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        else
        {
            udp_ipv4_session = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session>();
            udp_ipv4_session->parent = this;
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        return children.at("udp-ipv4-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::get_children()
{
    if(children.find("p2mp-ipv4-session") == children.end())
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
    }

    if(children.find("udp-ipv4-session") == children.end())
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
    }

    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "filter-type")
    {
        filter_type = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::Filter::Filter()
    :
    rsvp_filter(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter>())
{
    rsvp_filter->parent = this;
    children["rsvp-filter"] = rsvp_filter.get();

    yang_name = "filter"; yang_parent_name = "request-detail";
}

RsvpStandby::RequestDetails::RequestDetail::Filter::~Filter()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::Filter::has_data() const
{
    return (rsvp_filter !=  nullptr && rsvp_filter->has_data());
}

bool RsvpStandby::RequestDetails::RequestDetail::Filter::has_operation() const
{
    return is_set(operation)
	|| (rsvp_filter !=  nullptr && rsvp_filter->has_operation());
}

std::string RsvpStandby::RequestDetails::RequestDetail::Filter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "filter";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::Filter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::Filter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-filter")
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
        else
        {
            rsvp_filter = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Filter::RsvpFilter>();
            rsvp_filter->parent = this;
            children["rsvp-filter"] = rsvp_filter.get();
        }
        return children.at("rsvp-filter");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::Filter::get_children()
{
    if(children.find("rsvp-filter") == children.end())
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
    }

    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::Filter::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::RequestDetails::RequestDetail::Style::Style()
    :
    	reservation_type{YType::enumeration, "reservation-type"}
{
    yang_name = "style"; yang_parent_name = "request-detail";
}

RsvpStandby::RequestDetails::RequestDetail::Style::~Style()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::Style::has_data() const
{
    return reservation_type.is_set;
}

bool RsvpStandby::RequestDetails::RequestDetail::Style::has_operation() const
{
    return is_set(operation)
	|| is_set(reservation_type.operation);
}

std::string RsvpStandby::RequestDetails::RequestDetail::Style::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "style";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::Style::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (reservation_type.is_set || is_set(reservation_type.operation)) leaf_name_data.push_back(reservation_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::Style::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::Style::get_children()
{
    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::Style::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "reservation-type")
    {
        reservation_type = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::ReqFlags::ReqFlags()
    :
    	is_ack_outstanding{YType::boolean, "is-ack-outstanding"},
	 is_label_request_in_path{YType::boolean, "is-label-request-in-path"},
	 is_local_receiver{YType::boolean, "is-local-receiver"},
	 is_merge_point{YType::boolean, "is-merge-point"},
	 is_message_id_allocated{YType::boolean, "is-message-id-allocated"},
	 is_nack_received{YType::boolean, "is-nack-received"},
	 is_paced{YType::boolean, "is-paced"},
	 is_record_label_in_path{YType::boolean, "is-record-label-in-path"},
	 is_refreshing{YType::boolean, "is-refreshing"},
	 is_retransmit{YType::boolean, "is-retransmit"},
	 is_rro_in_path{YType::boolean, "is-rro-in-path"},
	 is_send_confirm{YType::boolean, "is-send-confirm"}
{
    yang_name = "req-flags"; yang_parent_name = "request-detail";
}

RsvpStandby::RequestDetails::RequestDetail::ReqFlags::~ReqFlags()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::ReqFlags::has_data() const
{
    return is_ack_outstanding.is_set
	|| is_label_request_in_path.is_set
	|| is_local_receiver.is_set
	|| is_merge_point.is_set
	|| is_message_id_allocated.is_set
	|| is_nack_received.is_set
	|| is_paced.is_set
	|| is_record_label_in_path.is_set
	|| is_refreshing.is_set
	|| is_retransmit.is_set
	|| is_rro_in_path.is_set
	|| is_send_confirm.is_set;
}

bool RsvpStandby::RequestDetails::RequestDetail::ReqFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_ack_outstanding.operation)
	|| is_set(is_label_request_in_path.operation)
	|| is_set(is_local_receiver.operation)
	|| is_set(is_merge_point.operation)
	|| is_set(is_message_id_allocated.operation)
	|| is_set(is_nack_received.operation)
	|| is_set(is_paced.operation)
	|| is_set(is_record_label_in_path.operation)
	|| is_set(is_refreshing.operation)
	|| is_set(is_retransmit.operation)
	|| is_set(is_rro_in_path.operation)
	|| is_set(is_send_confirm.operation);
}

std::string RsvpStandby::RequestDetails::RequestDetail::ReqFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "req-flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::ReqFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_ack_outstanding.is_set || is_set(is_ack_outstanding.operation)) leaf_name_data.push_back(is_ack_outstanding.get_name_leafdata());
    if (is_label_request_in_path.is_set || is_set(is_label_request_in_path.operation)) leaf_name_data.push_back(is_label_request_in_path.get_name_leafdata());
    if (is_local_receiver.is_set || is_set(is_local_receiver.operation)) leaf_name_data.push_back(is_local_receiver.get_name_leafdata());
    if (is_merge_point.is_set || is_set(is_merge_point.operation)) leaf_name_data.push_back(is_merge_point.get_name_leafdata());
    if (is_message_id_allocated.is_set || is_set(is_message_id_allocated.operation)) leaf_name_data.push_back(is_message_id_allocated.get_name_leafdata());
    if (is_nack_received.is_set || is_set(is_nack_received.operation)) leaf_name_data.push_back(is_nack_received.get_name_leafdata());
    if (is_paced.is_set || is_set(is_paced.operation)) leaf_name_data.push_back(is_paced.get_name_leafdata());
    if (is_record_label_in_path.is_set || is_set(is_record_label_in_path.operation)) leaf_name_data.push_back(is_record_label_in_path.get_name_leafdata());
    if (is_refreshing.is_set || is_set(is_refreshing.operation)) leaf_name_data.push_back(is_refreshing.get_name_leafdata());
    if (is_retransmit.is_set || is_set(is_retransmit.operation)) leaf_name_data.push_back(is_retransmit.get_name_leafdata());
    if (is_rro_in_path.is_set || is_set(is_rro_in_path.operation)) leaf_name_data.push_back(is_rro_in_path.get_name_leafdata());
    if (is_send_confirm.is_set || is_set(is_send_confirm.operation)) leaf_name_data.push_back(is_send_confirm.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::ReqFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::ReqFlags::get_children()
{
    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::ReqFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-ack-outstanding")
    {
        is_ack_outstanding = value;
    }
    if(value_path == "is-label-request-in-path")
    {
        is_label_request_in_path = value;
    }
    if(value_path == "is-local-receiver")
    {
        is_local_receiver = value;
    }
    if(value_path == "is-merge-point")
    {
        is_merge_point = value;
    }
    if(value_path == "is-message-id-allocated")
    {
        is_message_id_allocated = value;
    }
    if(value_path == "is-nack-received")
    {
        is_nack_received = value;
    }
    if(value_path == "is-paced")
    {
        is_paced = value;
    }
    if(value_path == "is-record-label-in-path")
    {
        is_record_label_in_path = value;
    }
    if(value_path == "is-refreshing")
    {
        is_refreshing = value;
    }
    if(value_path == "is-retransmit")
    {
        is_retransmit = value;
    }
    if(value_path == "is-rro-in-path")
    {
        is_rro_in_path = value;
    }
    if(value_path == "is-send-confirm")
    {
        is_send_confirm = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::Hop::Hop()
    :
    	neighbor_address{YType::str, "neighbor-address"},
	 neighbor_logical_interface_name{YType::str, "neighbor-logical-interface-name"}
{
    yang_name = "hop"; yang_parent_name = "request-detail";
}

RsvpStandby::RequestDetails::RequestDetail::Hop::~Hop()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::Hop::has_data() const
{
    return neighbor_address.is_set
	|| neighbor_logical_interface_name.is_set;
}

bool RsvpStandby::RequestDetails::RequestDetail::Hop::has_operation() const
{
    return is_set(operation)
	|| is_set(neighbor_address.operation)
	|| is_set(neighbor_logical_interface_name.operation);
}

std::string RsvpStandby::RequestDetails::RequestDetail::Hop::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hop";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::Hop::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (neighbor_logical_interface_name.is_set || is_set(neighbor_logical_interface_name.operation)) leaf_name_data.push_back(neighbor_logical_interface_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::Hop::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::Hop::get_children()
{
    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::Hop::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "neighbor-logical-interface-name")
    {
        neighbor_logical_interface_name = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::Header::Header()
    :
    	ip_source_address{YType::str, "ip-source-address"},
	 ip_tos{YType::uint8, "ip-tos"},
	 ip_ttl{YType::uint8, "ip-ttl"},
	 rsvp_header_flags{YType::uint8, "rsvp-header-flags"},
	 rsvp_message_type{YType::uint8, "rsvp-message-type"},
	 rsvp_ttl{YType::uint8, "rsvp-ttl"},
	 rsvp_version{YType::uint8, "rsvp-version"}
{
    yang_name = "header"; yang_parent_name = "request-detail";
}

RsvpStandby::RequestDetails::RequestDetail::Header::~Header()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::Header::has_data() const
{
    return ip_source_address.is_set
	|| ip_tos.is_set
	|| ip_ttl.is_set
	|| rsvp_header_flags.is_set
	|| rsvp_message_type.is_set
	|| rsvp_ttl.is_set
	|| rsvp_version.is_set;
}

bool RsvpStandby::RequestDetails::RequestDetail::Header::has_operation() const
{
    return is_set(operation)
	|| is_set(ip_source_address.operation)
	|| is_set(ip_tos.operation)
	|| is_set(ip_ttl.operation)
	|| is_set(rsvp_header_flags.operation)
	|| is_set(rsvp_message_type.operation)
	|| is_set(rsvp_ttl.operation)
	|| is_set(rsvp_version.operation);
}

std::string RsvpStandby::RequestDetails::RequestDetail::Header::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "header";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::Header::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ip_source_address.is_set || is_set(ip_source_address.operation)) leaf_name_data.push_back(ip_source_address.get_name_leafdata());
    if (ip_tos.is_set || is_set(ip_tos.operation)) leaf_name_data.push_back(ip_tos.get_name_leafdata());
    if (ip_ttl.is_set || is_set(ip_ttl.operation)) leaf_name_data.push_back(ip_ttl.get_name_leafdata());
    if (rsvp_header_flags.is_set || is_set(rsvp_header_flags.operation)) leaf_name_data.push_back(rsvp_header_flags.get_name_leafdata());
    if (rsvp_message_type.is_set || is_set(rsvp_message_type.operation)) leaf_name_data.push_back(rsvp_message_type.get_name_leafdata());
    if (rsvp_ttl.is_set || is_set(rsvp_ttl.operation)) leaf_name_data.push_back(rsvp_ttl.get_name_leafdata());
    if (rsvp_version.is_set || is_set(rsvp_version.operation)) leaf_name_data.push_back(rsvp_version.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::Header::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::Header::get_children()
{
    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::Header::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ip-source-address")
    {
        ip_source_address = value;
    }
    if(value_path == "ip-tos")
    {
        ip_tos = value;
    }
    if(value_path == "ip-ttl")
    {
        ip_ttl = value;
    }
    if(value_path == "rsvp-header-flags")
    {
        rsvp_header_flags = value;
    }
    if(value_path == "rsvp-message-type")
    {
        rsvp_message_type = value;
    }
    if(value_path == "rsvp-ttl")
    {
        rsvp_ttl = value;
    }
    if(value_path == "rsvp-version")
    {
        rsvp_version = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::PolicySources::PolicySources()
    :
    	is_cable{YType::boolean, "is-cable"},
	 is_cops{YType::boolean, "is-cops"},
	 is_default{YType::boolean, "is-default"},
	 is_local{YType::boolean, "is-local"},
	 is_te_link{YType::boolean, "is-te-link"}
{
    yang_name = "policy-sources"; yang_parent_name = "request-detail";
}

RsvpStandby::RequestDetails::RequestDetail::PolicySources::~PolicySources()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::PolicySources::has_data() const
{
    return is_cable.is_set
	|| is_cops.is_set
	|| is_default.is_set
	|| is_local.is_set
	|| is_te_link.is_set;
}

bool RsvpStandby::RequestDetails::RequestDetail::PolicySources::has_operation() const
{
    return is_set(operation)
	|| is_set(is_cable.operation)
	|| is_set(is_cops.operation)
	|| is_set(is_default.operation)
	|| is_set(is_local.operation)
	|| is_set(is_te_link.operation);
}

std::string RsvpStandby::RequestDetails::RequestDetail::PolicySources::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-sources";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::PolicySources::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_cable.is_set || is_set(is_cable.operation)) leaf_name_data.push_back(is_cable.get_name_leafdata());
    if (is_cops.is_set || is_set(is_cops.operation)) leaf_name_data.push_back(is_cops.get_name_leafdata());
    if (is_default.is_set || is_set(is_default.operation)) leaf_name_data.push_back(is_default.get_name_leafdata());
    if (is_local.is_set || is_set(is_local.operation)) leaf_name_data.push_back(is_local.get_name_leafdata());
    if (is_te_link.is_set || is_set(is_te_link.operation)) leaf_name_data.push_back(is_te_link.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::PolicySources::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::PolicySources::get_children()
{
    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::PolicySources::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-cable")
    {
        is_cable = value;
    }
    if(value_path == "is-cops")
    {
        is_cops = value;
    }
    if(value_path == "is-default")
    {
        is_default = value;
    }
    if(value_path == "is-local")
    {
        is_local = value;
    }
    if(value_path == "is-te-link")
    {
        is_te_link = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::PolicyFlags::PolicyFlags()
    :
    	is_accepted{YType::boolean, "is-accepted"},
	 is_forwarding{YType::boolean, "is-forwarding"},
	 is_installed{YType::boolean, "is-installed"}
{
    yang_name = "policy-flags"; yang_parent_name = "request-detail";
}

RsvpStandby::RequestDetails::RequestDetail::PolicyFlags::~PolicyFlags()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::PolicyFlags::has_data() const
{
    return is_accepted.is_set
	|| is_forwarding.is_set
	|| is_installed.is_set;
}

bool RsvpStandby::RequestDetails::RequestDetail::PolicyFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_accepted.operation)
	|| is_set(is_forwarding.operation)
	|| is_set(is_installed.operation);
}

std::string RsvpStandby::RequestDetails::RequestDetail::PolicyFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::PolicyFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_accepted.is_set || is_set(is_accepted.operation)) leaf_name_data.push_back(is_accepted.get_name_leafdata());
    if (is_forwarding.is_set || is_set(is_forwarding.operation)) leaf_name_data.push_back(is_forwarding.get_name_leafdata());
    if (is_installed.is_set || is_set(is_installed.operation)) leaf_name_data.push_back(is_installed.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::PolicyFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::PolicyFlags::get_children()
{
    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::PolicyFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-accepted")
    {
        is_accepted = value;
    }
    if(value_path == "is-forwarding")
    {
        is_forwarding = value;
    }
    if(value_path == "is-installed")
    {
        is_installed = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::PolicyQueryFlags::PolicyQueryFlags()
    :
    	is_bypass{YType::boolean, "is-bypass"},
	 is_needed{YType::boolean, "is-needed"},
	 is_report_required{YType::boolean, "is-report-required"},
	 is_resync{YType::boolean, "is-resync"}
{
    yang_name = "policy-query-flags"; yang_parent_name = "request-detail";
}

RsvpStandby::RequestDetails::RequestDetail::PolicyQueryFlags::~PolicyQueryFlags()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::PolicyQueryFlags::has_data() const
{
    return is_bypass.is_set
	|| is_needed.is_set
	|| is_report_required.is_set
	|| is_resync.is_set;
}

bool RsvpStandby::RequestDetails::RequestDetail::PolicyQueryFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bypass.operation)
	|| is_set(is_needed.operation)
	|| is_set(is_report_required.operation)
	|| is_set(is_resync.operation);
}

std::string RsvpStandby::RequestDetails::RequestDetail::PolicyQueryFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-query-flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::PolicyQueryFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bypass.is_set || is_set(is_bypass.operation)) leaf_name_data.push_back(is_bypass.get_name_leafdata());
    if (is_needed.is_set || is_set(is_needed.operation)) leaf_name_data.push_back(is_needed.get_name_leafdata());
    if (is_report_required.is_set || is_set(is_report_required.operation)) leaf_name_data.push_back(is_report_required.get_name_leafdata());
    if (is_resync.is_set || is_set(is_resync.operation)) leaf_name_data.push_back(is_resync.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::PolicyQueryFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::PolicyQueryFlags::get_children()
{
    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::PolicyQueryFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bypass")
    {
        is_bypass = value;
    }
    if(value_path == "is-needed")
    {
        is_needed = value;
    }
    if(value_path == "is-report-required")
    {
        is_report_required = value;
    }
    if(value_path == "is-resync")
    {
        is_resync = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::PsbKey::PsbKey()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port_or_tunnel_id{YType::uint32, "destination-port-or-tunnel-id"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 protocol{YType::uint32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port_or_lsp_id{YType::uint32, "source-port-or-lsp-id"},
	 sub_group_id{YType::uint16, "sub-group-id"},
	 vrfid{YType::uint32, "vrfid"}
{
    yang_name = "psb-key"; yang_parent_name = "request-detail";
}

RsvpStandby::RequestDetails::RequestDetail::PsbKey::~PsbKey()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::PsbKey::has_data() const
{
    return destination_address.is_set
	|| destination_port_or_tunnel_id.is_set
	|| extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| p2mp_sub_group_origin.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port_or_lsp_id.is_set
	|| sub_group_id.is_set
	|| vrfid.is_set;
}

bool RsvpStandby::RequestDetails::RequestDetail::PsbKey::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port_or_tunnel_id.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port_or_lsp_id.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(vrfid.operation);
}

std::string RsvpStandby::RequestDetails::RequestDetail::PsbKey::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "psb-key";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::PsbKey::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port_or_tunnel_id.is_set || is_set(destination_port_or_tunnel_id.operation)) leaf_name_data.push_back(destination_port_or_tunnel_id.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port_or_lsp_id.is_set || is_set(source_port_or_lsp_id.operation)) leaf_name_data.push_back(source_port_or_lsp_id.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (vrfid.is_set || is_set(vrfid.operation)) leaf_name_data.push_back(vrfid.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::PsbKey::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::PsbKey::get_children()
{
    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::PsbKey::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port-or-tunnel-id")
    {
        destination_port_or_tunnel_id = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port-or-lsp-id")
    {
        source_port_or_lsp_id = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "vrfid")
    {
        vrfid = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::RsbKey::RsbKey()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port_or_tunnel_id{YType::uint32, "destination-port-or-tunnel-id"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 protocol{YType::uint32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port_or_lsp_id{YType::uint32, "source-port-or-lsp-id"},
	 sub_group_id{YType::uint16, "sub-group-id"},
	 vrfid{YType::uint32, "vrfid"}
{
    yang_name = "rsb-key"; yang_parent_name = "request-detail";
}

RsvpStandby::RequestDetails::RequestDetail::RsbKey::~RsbKey()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::RsbKey::has_data() const
{
    return destination_address.is_set
	|| destination_port_or_tunnel_id.is_set
	|| extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| p2mp_sub_group_origin.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port_or_lsp_id.is_set
	|| sub_group_id.is_set
	|| vrfid.is_set;
}

bool RsvpStandby::RequestDetails::RequestDetail::RsbKey::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port_or_tunnel_id.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port_or_lsp_id.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(vrfid.operation);
}

std::string RsvpStandby::RequestDetails::RequestDetail::RsbKey::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsb-key";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::RsbKey::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port_or_tunnel_id.is_set || is_set(destination_port_or_tunnel_id.operation)) leaf_name_data.push_back(destination_port_or_tunnel_id.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port_or_lsp_id.is_set || is_set(source_port_or_lsp_id.operation)) leaf_name_data.push_back(source_port_or_lsp_id.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (vrfid.is_set || is_set(vrfid.operation)) leaf_name_data.push_back(vrfid.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::RsbKey::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::RsbKey::get_children()
{
    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::RsbKey::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port-or-tunnel-id")
    {
        destination_port_or_tunnel_id = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port-or-lsp-id")
    {
        source_port_or_lsp_id = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "vrfid")
    {
        vrfid = value;
    }
}

RsvpStandby::RequestDetails::RequestDetail::RequestDetail()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 output_interface{YType::str, "output-interface"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 protocol{YType::int32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::int32, "source-port"},
	 sub_group_id{YType::int32, "sub-group-id"},
	 sub_group_origin{YType::str, "sub-group-origin"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    filter(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Filter>())
	,flow_spec(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::FlowSpec>())
	,generic_flow_spec(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec>())
	,header(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Header>())
	,hop(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Hop>())
	,policy_flags(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::PolicyFlags>())
	,policy_query_flags(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::PolicyQueryFlags>())
	,policy_sources(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::PolicySources>())
	,req_flags(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::ReqFlags>())
	,s2l_sub_lsp(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::S2LSubLsp>())
	,session(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Session>())
	,style(std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Style>())
{
    filter->parent = this;
    children["filter"] = filter.get();

    flow_spec->parent = this;
    children["flow-spec"] = flow_spec.get();

    generic_flow_spec->parent = this;
    children["generic-flow-spec"] = generic_flow_spec.get();

    header->parent = this;
    children["header"] = header.get();

    hop->parent = this;
    children["hop"] = hop.get();

    policy_flags->parent = this;
    children["policy-flags"] = policy_flags.get();

    policy_query_flags->parent = this;
    children["policy-query-flags"] = policy_query_flags.get();

    policy_sources->parent = this;
    children["policy-sources"] = policy_sources.get();

    req_flags->parent = this;
    children["req-flags"] = req_flags.get();

    s2l_sub_lsp->parent = this;
    children["s2l-sub-lsp"] = s2l_sub_lsp.get();

    session->parent = this;
    children["session"] = session.get();

    style->parent = this;
    children["style"] = style.get();

    yang_name = "request-detail"; yang_parent_name = "request-details";
}

RsvpStandby::RequestDetails::RequestDetail::~RequestDetail()
{
}

bool RsvpStandby::RequestDetails::RequestDetail::has_data() const
{
    for (std::size_t index=0; index<psb_key.size(); index++)
    {
        if(psb_key[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<rsb_key.size(); index++)
    {
        if(rsb_key[index]->has_data())
            return true;
    }
    return destination_address.is_set
	|| destination_port.is_set
	|| extended_tunnel_id.is_set
	|| output_interface.is_set
	|| p2mp_id.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set
	|| sub_group_origin.is_set
	|| vrf_name.is_set
	|| (filter !=  nullptr && filter->has_data())
	|| (flow_spec !=  nullptr && flow_spec->has_data())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_data())
	|| (header !=  nullptr && header->has_data())
	|| (hop !=  nullptr && hop->has_data())
	|| (policy_flags !=  nullptr && policy_flags->has_data())
	|| (policy_query_flags !=  nullptr && policy_query_flags->has_data())
	|| (policy_sources !=  nullptr && policy_sources->has_data())
	|| (req_flags !=  nullptr && req_flags->has_data())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_data())
	|| (session !=  nullptr && session->has_data())
	|| (style !=  nullptr && style->has_data());
}

bool RsvpStandby::RequestDetails::RequestDetail::has_operation() const
{
    for (std::size_t index=0; index<psb_key.size(); index++)
    {
        if(psb_key[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<rsb_key.size(); index++)
    {
        if(rsb_key[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(output_interface.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(sub_group_origin.operation)
	|| is_set(vrf_name.operation)
	|| (filter !=  nullptr && filter->has_operation())
	|| (flow_spec !=  nullptr && flow_spec->has_operation())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_operation())
	|| (header !=  nullptr && header->has_operation())
	|| (hop !=  nullptr && hop->has_operation())
	|| (policy_flags !=  nullptr && policy_flags->has_operation())
	|| (policy_query_flags !=  nullptr && policy_query_flags->has_operation())
	|| (policy_sources !=  nullptr && policy_sources->has_operation())
	|| (req_flags !=  nullptr && req_flags->has_operation())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_operation())
	|| (session !=  nullptr && session->has_operation())
	|| (style !=  nullptr && style->has_operation());
}

std::string RsvpStandby::RequestDetails::RequestDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "request-detail";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::RequestDetail::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (output_interface.is_set || is_set(output_interface.operation)) leaf_name_data.push_back(output_interface.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (sub_group_origin.is_set || is_set(sub_group_origin.operation)) leaf_name_data.push_back(sub_group_origin.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::RequestDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "filter")
    {
        if(filter != nullptr)
        {
            children["filter"] = filter.get();
        }
        else
        {
            filter = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Filter>();
            filter->parent = this;
            children["filter"] = filter.get();
        }
        return children.at("filter");
    }

    if(child_yang_name == "flow-spec")
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
        else
        {
            flow_spec = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::FlowSpec>();
            flow_spec->parent = this;
            children["flow-spec"] = flow_spec.get();
        }
        return children.at("flow-spec");
    }

    if(child_yang_name == "generic-flow-spec")
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        else
        {
            generic_flow_spec = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::GenericFlowSpec>();
            generic_flow_spec->parent = this;
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        return children.at("generic-flow-spec");
    }

    if(child_yang_name == "header")
    {
        if(header != nullptr)
        {
            children["header"] = header.get();
        }
        else
        {
            header = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Header>();
            header->parent = this;
            children["header"] = header.get();
        }
        return children.at("header");
    }

    if(child_yang_name == "hop")
    {
        if(hop != nullptr)
        {
            children["hop"] = hop.get();
        }
        else
        {
            hop = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Hop>();
            hop->parent = this;
            children["hop"] = hop.get();
        }
        return children.at("hop");
    }

    if(child_yang_name == "policy-flags")
    {
        if(policy_flags != nullptr)
        {
            children["policy-flags"] = policy_flags.get();
        }
        else
        {
            policy_flags = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::PolicyFlags>();
            policy_flags->parent = this;
            children["policy-flags"] = policy_flags.get();
        }
        return children.at("policy-flags");
    }

    if(child_yang_name == "policy-query-flags")
    {
        if(policy_query_flags != nullptr)
        {
            children["policy-query-flags"] = policy_query_flags.get();
        }
        else
        {
            policy_query_flags = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::PolicyQueryFlags>();
            policy_query_flags->parent = this;
            children["policy-query-flags"] = policy_query_flags.get();
        }
        return children.at("policy-query-flags");
    }

    if(child_yang_name == "policy-sources")
    {
        if(policy_sources != nullptr)
        {
            children["policy-sources"] = policy_sources.get();
        }
        else
        {
            policy_sources = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::PolicySources>();
            policy_sources->parent = this;
            children["policy-sources"] = policy_sources.get();
        }
        return children.at("policy-sources");
    }

    if(child_yang_name == "psb-key")
    {
        for(auto const & c : psb_key)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::PsbKey>();
        c->parent = this;
        psb_key.push_back(std::move(c));
        children[segment_path] = psb_key.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "req-flags")
    {
        if(req_flags != nullptr)
        {
            children["req-flags"] = req_flags.get();
        }
        else
        {
            req_flags = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::ReqFlags>();
            req_flags->parent = this;
            children["req-flags"] = req_flags.get();
        }
        return children.at("req-flags");
    }

    if(child_yang_name == "rsb-key")
    {
        for(auto const & c : rsb_key)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::RsbKey>();
        c->parent = this;
        rsb_key.push_back(std::move(c));
        children[segment_path] = rsb_key.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "s2l-sub-lsp")
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        else
        {
            s2l_sub_lsp = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::S2LSubLsp>();
            s2l_sub_lsp->parent = this;
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        return children.at("s2l-sub-lsp");
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    if(child_yang_name == "style")
    {
        if(style != nullptr)
        {
            children["style"] = style.get();
        }
        else
        {
            style = std::make_unique<RsvpStandby::RequestDetails::RequestDetail::Style>();
            style->parent = this;
            children["style"] = style.get();
        }
        return children.at("style");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::RequestDetail::get_children()
{
    if(children.find("filter") == children.end())
    {
        if(filter != nullptr)
        {
            children["filter"] = filter.get();
        }
    }

    if(children.find("flow-spec") == children.end())
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
    }

    if(children.find("generic-flow-spec") == children.end())
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
    }

    if(children.find("header") == children.end())
    {
        if(header != nullptr)
        {
            children["header"] = header.get();
        }
    }

    if(children.find("hop") == children.end())
    {
        if(hop != nullptr)
        {
            children["hop"] = hop.get();
        }
    }

    if(children.find("policy-flags") == children.end())
    {
        if(policy_flags != nullptr)
        {
            children["policy-flags"] = policy_flags.get();
        }
    }

    if(children.find("policy-query-flags") == children.end())
    {
        if(policy_query_flags != nullptr)
        {
            children["policy-query-flags"] = policy_query_flags.get();
        }
    }

    if(children.find("policy-sources") == children.end())
    {
        if(policy_sources != nullptr)
        {
            children["policy-sources"] = policy_sources.get();
        }
    }

    for (auto const & c : psb_key)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("req-flags") == children.end())
    {
        if(req_flags != nullptr)
        {
            children["req-flags"] = req_flags.get();
        }
    }

    for (auto const & c : rsb_key)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("s2l-sub-lsp") == children.end())
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
    }

    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    if(children.find("style") == children.end())
    {
        if(style != nullptr)
        {
            children["style"] = style.get();
        }
    }

    return children;
}

void RsvpStandby::RequestDetails::RequestDetail::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "output-interface")
    {
        output_interface = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "sub-group-origin")
    {
        sub_group_origin = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

RsvpStandby::RequestDetails::RequestDetails()
{
    yang_name = "request-details"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::RequestDetails::~RequestDetails()
{
}

bool RsvpStandby::RequestDetails::has_data() const
{
    for (std::size_t index=0; index<request_detail.size(); index++)
    {
        if(request_detail[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::RequestDetails::has_operation() const
{
    for (std::size_t index=0; index<request_detail.size(); index++)
    {
        if(request_detail[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::RequestDetails::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "request-details";

    return path_buffer.str();

}

EntityPath RsvpStandby::RequestDetails::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::RequestDetails::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "request-detail")
    {
        for(auto const & c : request_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::RequestDetails::RequestDetail>();
        c->parent = this;
        request_detail.push_back(std::move(c));
        children[segment_path] = request_detail.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::RequestDetails::get_children()
{
    for (auto const & c : request_detail)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::RequestDetails::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface::PreStandardDsteInterface()
    :
    	allocated_bit_rate{YType::uint64, "allocated-bit-rate"},
	 is_max_bandwidth_absolute{YType::boolean, "is-max-bandwidth-absolute"},
	 is_max_subpool_bandwidth_absolute{YType::boolean, "is-max-subpool-bandwidth-absolute"},
	 max_bandwidth{YType::uint64, "max-bandwidth"},
	 max_flow_bandwidth{YType::uint64, "max-flow-bandwidth"},
	 max_subpool_bandwidth{YType::uint64, "max-subpool-bandwidth"}
{
    yang_name = "pre-standard-dste-interface"; yang_parent_name = "bandwidth-information";
}

RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface::~PreStandardDsteInterface()
{
}

bool RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface::has_data() const
{
    return allocated_bit_rate.is_set
	|| is_max_bandwidth_absolute.is_set
	|| is_max_subpool_bandwidth_absolute.is_set
	|| max_bandwidth.is_set
	|| max_flow_bandwidth.is_set
	|| max_subpool_bandwidth.is_set;
}

bool RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(allocated_bit_rate.operation)
	|| is_set(is_max_bandwidth_absolute.operation)
	|| is_set(is_max_subpool_bandwidth_absolute.operation)
	|| is_set(max_bandwidth.operation)
	|| is_set(max_flow_bandwidth.operation)
	|| is_set(max_subpool_bandwidth.operation);
}

std::string RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pre-standard-dste-interface";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (allocated_bit_rate.is_set || is_set(allocated_bit_rate.operation)) leaf_name_data.push_back(allocated_bit_rate.get_name_leafdata());
    if (is_max_bandwidth_absolute.is_set || is_set(is_max_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bandwidth_absolute.get_name_leafdata());
    if (is_max_subpool_bandwidth_absolute.is_set || is_set(is_max_subpool_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_subpool_bandwidth_absolute.get_name_leafdata());
    if (max_bandwidth.is_set || is_set(max_bandwidth.operation)) leaf_name_data.push_back(max_bandwidth.get_name_leafdata());
    if (max_flow_bandwidth.is_set || is_set(max_flow_bandwidth.operation)) leaf_name_data.push_back(max_flow_bandwidth.get_name_leafdata());
    if (max_subpool_bandwidth.is_set || is_set(max_subpool_bandwidth.operation)) leaf_name_data.push_back(max_subpool_bandwidth.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface::get_children()
{
    return children;
}

void RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "allocated-bit-rate")
    {
        allocated_bit_rate = value;
    }
    if(value_path == "is-max-bandwidth-absolute")
    {
        is_max_bandwidth_absolute = value;
    }
    if(value_path == "is-max-subpool-bandwidth-absolute")
    {
        is_max_subpool_bandwidth_absolute = value;
    }
    if(value_path == "max-bandwidth")
    {
        max_bandwidth = value;
    }
    if(value_path == "max-flow-bandwidth")
    {
        max_flow_bandwidth = value;
    }
    if(value_path == "max-subpool-bandwidth")
    {
        max_subpool_bandwidth = value;
    }
}

RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface::StandardDsteInterface()
    :
    	allocated_bit_rate{YType::uint64, "allocated-bit-rate"},
	 is_max_bandwidth_absolute{YType::boolean, "is-max-bandwidth-absolute"},
	 is_max_bc0_bandwidth_absolute{YType::boolean, "is-max-bc0-bandwidth-absolute"},
	 is_max_bc1_bandwidth_absolute{YType::boolean, "is-max-bc1-bandwidth-absolute"},
	 max_bandwidth{YType::uint64, "max-bandwidth"},
	 max_flow_bandwidth{YType::uint64, "max-flow-bandwidth"},
	 max_pool0_bandwidth{YType::uint64, "max-pool0-bandwidth"},
	 max_pool1_bandwidth{YType::uint64, "max-pool1-bandwidth"}
{
    yang_name = "standard-dste-interface"; yang_parent_name = "bandwidth-information";
}

RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface::~StandardDsteInterface()
{
}

bool RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface::has_data() const
{
    return allocated_bit_rate.is_set
	|| is_max_bandwidth_absolute.is_set
	|| is_max_bc0_bandwidth_absolute.is_set
	|| is_max_bc1_bandwidth_absolute.is_set
	|| max_bandwidth.is_set
	|| max_flow_bandwidth.is_set
	|| max_pool0_bandwidth.is_set
	|| max_pool1_bandwidth.is_set;
}

bool RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(allocated_bit_rate.operation)
	|| is_set(is_max_bandwidth_absolute.operation)
	|| is_set(is_max_bc0_bandwidth_absolute.operation)
	|| is_set(is_max_bc1_bandwidth_absolute.operation)
	|| is_set(max_bandwidth.operation)
	|| is_set(max_flow_bandwidth.operation)
	|| is_set(max_pool0_bandwidth.operation)
	|| is_set(max_pool1_bandwidth.operation);
}

std::string RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "standard-dste-interface";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (allocated_bit_rate.is_set || is_set(allocated_bit_rate.operation)) leaf_name_data.push_back(allocated_bit_rate.get_name_leafdata());
    if (is_max_bandwidth_absolute.is_set || is_set(is_max_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bandwidth_absolute.get_name_leafdata());
    if (is_max_bc0_bandwidth_absolute.is_set || is_set(is_max_bc0_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bc0_bandwidth_absolute.get_name_leafdata());
    if (is_max_bc1_bandwidth_absolute.is_set || is_set(is_max_bc1_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bc1_bandwidth_absolute.get_name_leafdata());
    if (max_bandwidth.is_set || is_set(max_bandwidth.operation)) leaf_name_data.push_back(max_bandwidth.get_name_leafdata());
    if (max_flow_bandwidth.is_set || is_set(max_flow_bandwidth.operation)) leaf_name_data.push_back(max_flow_bandwidth.get_name_leafdata());
    if (max_pool0_bandwidth.is_set || is_set(max_pool0_bandwidth.operation)) leaf_name_data.push_back(max_pool0_bandwidth.get_name_leafdata());
    if (max_pool1_bandwidth.is_set || is_set(max_pool1_bandwidth.operation)) leaf_name_data.push_back(max_pool1_bandwidth.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface::get_children()
{
    return children;
}

void RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "allocated-bit-rate")
    {
        allocated_bit_rate = value;
    }
    if(value_path == "is-max-bandwidth-absolute")
    {
        is_max_bandwidth_absolute = value;
    }
    if(value_path == "is-max-bc0-bandwidth-absolute")
    {
        is_max_bc0_bandwidth_absolute = value;
    }
    if(value_path == "is-max-bc1-bandwidth-absolute")
    {
        is_max_bc1_bandwidth_absolute = value;
    }
    if(value_path == "max-bandwidth")
    {
        max_bandwidth = value;
    }
    if(value_path == "max-flow-bandwidth")
    {
        max_flow_bandwidth = value;
    }
    if(value_path == "max-pool0-bandwidth")
    {
        max_pool0_bandwidth = value;
    }
    if(value_path == "max-pool1-bandwidth")
    {
        max_pool1_bandwidth = value;
    }
}

RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::BandwidthInformation()
    :
    	dste_mode{YType::enumeration, "dste-mode"}
    	,
    pre_standard_dste_interface(std::make_unique<RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface>())
	,standard_dste_interface(std::make_unique<RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface>())
{
    pre_standard_dste_interface->parent = this;
    children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();

    standard_dste_interface->parent = this;
    children["standard-dste-interface"] = standard_dste_interface.get();

    yang_name = "bandwidth-information"; yang_parent_name = "interface-brief";
}

RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::~BandwidthInformation()
{
}

bool RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::has_data() const
{
    return dste_mode.is_set
	|| (pre_standard_dste_interface !=  nullptr && pre_standard_dste_interface->has_data())
	|| (standard_dste_interface !=  nullptr && standard_dste_interface->has_data());
}

bool RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::has_operation() const
{
    return is_set(operation)
	|| is_set(dste_mode.operation)
	|| (pre_standard_dste_interface !=  nullptr && pre_standard_dste_interface->has_operation())
	|| (standard_dste_interface !=  nullptr && standard_dste_interface->has_operation());
}

std::string RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bandwidth-information";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (dste_mode.is_set || is_set(dste_mode.operation)) leaf_name_data.push_back(dste_mode.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "pre-standard-dste-interface")
    {
        if(pre_standard_dste_interface != nullptr)
        {
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
        else
        {
            pre_standard_dste_interface = std::make_unique<RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface>();
            pre_standard_dste_interface->parent = this;
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
        return children.at("pre-standard-dste-interface");
    }

    if(child_yang_name == "standard-dste-interface")
    {
        if(standard_dste_interface != nullptr)
        {
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
        else
        {
            standard_dste_interface = std::make_unique<RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface>();
            standard_dste_interface->parent = this;
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
        return children.at("standard-dste-interface");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::get_children()
{
    if(children.find("pre-standard-dste-interface") == children.end())
    {
        if(pre_standard_dste_interface != nullptr)
        {
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
    }

    if(children.find("standard-dste-interface") == children.end())
    {
        if(standard_dste_interface != nullptr)
        {
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
    }

    return children;
}

void RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "dste-mode")
    {
        dste_mode = value;
    }
}

RsvpStandby::InterfaceBriefs::InterfaceBrief::InterfaceBrief()
    :
    	interface_name{YType::str, "interface-name"},
	 interface_name_xr{YType::str, "interface-name-xr"}
    	,
    bandwidth_information(std::make_unique<RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation>())
{
    bandwidth_information->parent = this;
    children["bandwidth-information"] = bandwidth_information.get();

    yang_name = "interface-brief"; yang_parent_name = "interface-briefs";
}

RsvpStandby::InterfaceBriefs::InterfaceBrief::~InterfaceBrief()
{
}

bool RsvpStandby::InterfaceBriefs::InterfaceBrief::has_data() const
{
    return interface_name.is_set
	|| interface_name_xr.is_set
	|| (bandwidth_information !=  nullptr && bandwidth_information->has_data());
}

bool RsvpStandby::InterfaceBriefs::InterfaceBrief::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| is_set(interface_name_xr.operation)
	|| (bandwidth_information !=  nullptr && bandwidth_information->has_operation());
}

std::string RsvpStandby::InterfaceBriefs::InterfaceBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-brief" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceBriefs::InterfaceBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (interface_name_xr.is_set || is_set(interface_name_xr.operation)) leaf_name_data.push_back(interface_name_xr.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceBriefs::InterfaceBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "bandwidth-information")
    {
        if(bandwidth_information != nullptr)
        {
            children["bandwidth-information"] = bandwidth_information.get();
        }
        else
        {
            bandwidth_information = std::make_unique<RsvpStandby::InterfaceBriefs::InterfaceBrief::BandwidthInformation>();
            bandwidth_information->parent = this;
            children["bandwidth-information"] = bandwidth_information.get();
        }
        return children.at("bandwidth-information");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceBriefs::InterfaceBrief::get_children()
{
    if(children.find("bandwidth-information") == children.end())
    {
        if(bandwidth_information != nullptr)
        {
            children["bandwidth-information"] = bandwidth_information.get();
        }
    }

    return children;
}

void RsvpStandby::InterfaceBriefs::InterfaceBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "interface-name-xr")
    {
        interface_name_xr = value;
    }
}

RsvpStandby::InterfaceBriefs::InterfaceBriefs()
{
    yang_name = "interface-briefs"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::InterfaceBriefs::~InterfaceBriefs()
{
}

bool RsvpStandby::InterfaceBriefs::has_data() const
{
    for (std::size_t index=0; index<interface_brief.size(); index++)
    {
        if(interface_brief[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::InterfaceBriefs::has_operation() const
{
    for (std::size_t index=0; index<interface_brief.size(); index++)
    {
        if(interface_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::InterfaceBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-briefs";

    return path_buffer.str();

}

EntityPath RsvpStandby::InterfaceBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::InterfaceBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-brief")
    {
        for(auto const & c : interface_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::InterfaceBriefs::InterfaceBrief>();
        c->parent = this;
        interface_brief.push_back(std::move(c));
        children[segment_path] = interface_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::InterfaceBriefs::get_children()
{
    for (auto const & c : interface_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::InterfaceBriefs::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/compact/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/compact/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/compact/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/compact/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::~RsvpSession()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/compact/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::Session()
    :
    rsvp_session(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "compact";
}

RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::~Session()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/compact/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Compact()
    :
    	detail_list_size{YType::uint32, "detail-list-size"},
	 ps_bs{YType::uint32, "ps-bs"},
	 requests{YType::uint32, "requests"},
	 rs_bs{YType::uint32, "rs-bs"}
    	,
    session(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session>())
{
    session->parent = this;
    children["session"] = session.get();

    yang_name = "compact"; yang_parent_name = "session-detailed";
}

RsvpStandby::SessionDetaileds::SessionDetailed::Compact::~Compact()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::Compact::has_data() const
{
    return detail_list_size.is_set
	|| ps_bs.is_set
	|| requests.is_set
	|| rs_bs.is_set
	|| (session !=  nullptr && session->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::Compact::has_operation() const
{
    return is_set(operation)
	|| is_set(detail_list_size.operation)
	|| is_set(ps_bs.operation)
	|| is_set(requests.operation)
	|| is_set(rs_bs.operation)
	|| (session !=  nullptr && session->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::Compact::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "compact";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::Compact::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (detail_list_size.is_set || is_set(detail_list_size.operation)) leaf_name_data.push_back(detail_list_size.get_name_leafdata());
    if (ps_bs.is_set || is_set(ps_bs.operation)) leaf_name_data.push_back(ps_bs.get_name_leafdata());
    if (requests.is_set || is_set(requests.operation)) leaf_name_data.push_back(requests.get_name_leafdata());
    if (rs_bs.is_set || is_set(rs_bs.operation)) leaf_name_data.push_back(rs_bs.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::Compact::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::Compact::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::Compact::get_children()
{
    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::Compact::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "detail-list-size")
    {
        detail_list_size = value;
    }
    if(value_path == "ps-bs")
    {
        ps_bs = value;
    }
    if(value_path == "requests")
    {
        requests = value;
    }
    if(value_path == "rs-bs")
    {
        rs_bs = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::S2LSubLsp::S2LSubLsp()
    :
    	s2l_destination_address{YType::str, "s2l-destination-address"}
{
    yang_name = "s2l-sub-lsp"; yang_parent_name = "session-detailed";
}

RsvpStandby::SessionDetaileds::SessionDetailed::S2LSubLsp::~S2LSubLsp()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::S2LSubLsp::has_data() const
{
    return s2l_destination_address.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::S2LSubLsp::has_operation() const
{
    return is_set(operation)
	|| is_set(s2l_destination_address.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::S2LSubLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "s2l-sub-lsp";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::S2LSubLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (s2l_destination_address.is_set || is_set(s2l_destination_address.operation)) leaf_name_data.push_back(s2l_destination_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::S2LSubLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::S2LSubLsp::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::S2LSubLsp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "s2l-destination-address")
    {
        s2l_destination_address = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-in-label";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-in-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GenericInLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-in-label"; yang_parent_name = "psb-info";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::~GenericInLabel()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-in-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec::TrafficSpec()
    :
    	traffic_average_rate{YType::uint64, "traffic-average-rate"},
	 traffic_max_burst{YType::uint64, "traffic-max-burst"},
	 traffic_max_unit{YType::uint32, "traffic-max-unit"},
	 traffic_min_unit{YType::uint32, "traffic-min-unit"},
	 traffic_peak_rate{YType::uint64, "traffic-peak-rate"}
{
    yang_name = "traffic-spec"; yang_parent_name = "psb-info";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec::~TrafficSpec()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec::has_data() const
{
    return traffic_average_rate.is_set
	|| traffic_max_burst.is_set
	|| traffic_max_unit.is_set
	|| traffic_min_unit.is_set
	|| traffic_peak_rate.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_average_rate.operation)
	|| is_set(traffic_max_burst.operation)
	|| is_set(traffic_max_unit.operation)
	|| is_set(traffic_min_unit.operation)
	|| is_set(traffic_peak_rate.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "traffic-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_average_rate.is_set || is_set(traffic_average_rate.operation)) leaf_name_data.push_back(traffic_average_rate.get_name_leafdata());
    if (traffic_max_burst.is_set || is_set(traffic_max_burst.operation)) leaf_name_data.push_back(traffic_max_burst.get_name_leafdata());
    if (traffic_max_unit.is_set || is_set(traffic_max_unit.operation)) leaf_name_data.push_back(traffic_max_unit.get_name_leafdata());
    if (traffic_min_unit.is_set || is_set(traffic_min_unit.operation)) leaf_name_data.push_back(traffic_min_unit.get_name_leafdata());
    if (traffic_peak_rate.is_set || is_set(traffic_peak_rate.operation)) leaf_name_data.push_back(traffic_peak_rate.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-average-rate")
    {
        traffic_average_rate = value;
    }
    if(value_path == "traffic-max-burst")
    {
        traffic_max_burst = value;
    }
    if(value_path == "traffic-max-unit")
    {
        traffic_max_unit = value;
    }
    if(value_path == "traffic-min-unit")
    {
        traffic_min_unit = value;
    }
    if(value_path == "traffic-peak-rate")
    {
        traffic_peak_rate = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec::G709OtnTspec()
    :
    	traffic_bit_rate{YType::uint64, "traffic-bit-rate"},
	 traffic_multiplier{YType::uint16, "traffic-multiplier"},
	 traffic_nvc{YType::uint16, "traffic-nvc"},
	 traffic_signal_type{YType::uint8, "traffic-signal-type"}
{
    yang_name = "g709otn-tspec"; yang_parent_name = "generic-traffic-spec";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec::~G709OtnTspec()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec::has_data() const
{
    return traffic_bit_rate.is_set
	|| traffic_multiplier.is_set
	|| traffic_nvc.is_set
	|| traffic_signal_type.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_bit_rate.operation)
	|| is_set(traffic_multiplier.operation)
	|| is_set(traffic_nvc.operation)
	|| is_set(traffic_signal_type.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-tspec";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-traffic-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_bit_rate.is_set || is_set(traffic_bit_rate.operation)) leaf_name_data.push_back(traffic_bit_rate.get_name_leafdata());
    if (traffic_multiplier.is_set || is_set(traffic_multiplier.operation)) leaf_name_data.push_back(traffic_multiplier.get_name_leafdata());
    if (traffic_nvc.is_set || is_set(traffic_nvc.operation)) leaf_name_data.push_back(traffic_nvc.get_name_leafdata());
    if (traffic_signal_type.is_set || is_set(traffic_signal_type.operation)) leaf_name_data.push_back(traffic_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-bit-rate")
    {
        traffic_bit_rate = value;
    }
    if(value_path == "traffic-multiplier")
    {
        traffic_multiplier = value;
    }
    if(value_path == "traffic-nvc")
    {
        traffic_nvc = value;
    }
    if(value_path == "traffic-signal-type")
    {
        traffic_signal_type = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec::IntsrvTspec()
    :
    	traffic_average_rate{YType::uint64, "traffic-average-rate"},
	 traffic_max_burst{YType::uint64, "traffic-max-burst"},
	 traffic_max_unit{YType::uint32, "traffic-max-unit"},
	 traffic_min_unit{YType::uint32, "traffic-min-unit"},
	 traffic_peak_rate{YType::uint64, "traffic-peak-rate"}
{
    yang_name = "intsrv-tspec"; yang_parent_name = "generic-traffic-spec";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec::~IntsrvTspec()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec::has_data() const
{
    return traffic_average_rate.is_set
	|| traffic_max_burst.is_set
	|| traffic_max_unit.is_set
	|| traffic_min_unit.is_set
	|| traffic_peak_rate.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_average_rate.operation)
	|| is_set(traffic_max_burst.operation)
	|| is_set(traffic_max_unit.operation)
	|| is_set(traffic_min_unit.operation)
	|| is_set(traffic_peak_rate.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "intsrv-tspec";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-traffic-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_average_rate.is_set || is_set(traffic_average_rate.operation)) leaf_name_data.push_back(traffic_average_rate.get_name_leafdata());
    if (traffic_max_burst.is_set || is_set(traffic_max_burst.operation)) leaf_name_data.push_back(traffic_max_burst.get_name_leafdata());
    if (traffic_max_unit.is_set || is_set(traffic_max_unit.operation)) leaf_name_data.push_back(traffic_max_unit.get_name_leafdata());
    if (traffic_min_unit.is_set || is_set(traffic_min_unit.operation)) leaf_name_data.push_back(traffic_min_unit.get_name_leafdata());
    if (traffic_peak_rate.is_set || is_set(traffic_peak_rate.operation)) leaf_name_data.push_back(traffic_peak_rate.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-average-rate")
    {
        traffic_average_rate = value;
    }
    if(value_path == "traffic-max-burst")
    {
        traffic_max_burst = value;
    }
    if(value_path == "traffic-max-unit")
    {
        traffic_max_unit = value;
    }
    if(value_path == "traffic-min-unit")
    {
        traffic_min_unit = value;
    }
    if(value_path == "traffic-peak-rate")
    {
        traffic_peak_rate = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::GenericTrafficSpec()
    :
    	tspec_type{YType::enumeration, "tspec-type"}
    	,
    g709otn_tspec(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec>())
	,intsrv_tspec(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec>())
{
    g709otn_tspec->parent = this;
    children["g709otn-tspec"] = g709otn_tspec.get();

    intsrv_tspec->parent = this;
    children["intsrv-tspec"] = intsrv_tspec.get();

    yang_name = "generic-traffic-spec"; yang_parent_name = "psb-info";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::~GenericTrafficSpec()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::has_data() const
{
    return tspec_type.is_set
	|| (g709otn_tspec !=  nullptr && g709otn_tspec->has_data())
	|| (intsrv_tspec !=  nullptr && intsrv_tspec->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(tspec_type.operation)
	|| (g709otn_tspec !=  nullptr && g709otn_tspec->has_operation())
	|| (intsrv_tspec !=  nullptr && intsrv_tspec->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-traffic-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (tspec_type.is_set || is_set(tspec_type.operation)) leaf_name_data.push_back(tspec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-tspec")
    {
        if(g709otn_tspec != nullptr)
        {
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
        else
        {
            g709otn_tspec = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec>();
            g709otn_tspec->parent = this;
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
        return children.at("g709otn-tspec");
    }

    if(child_yang_name == "intsrv-tspec")
    {
        if(intsrv_tspec != nullptr)
        {
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
        else
        {
            intsrv_tspec = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec>();
            intsrv_tspec->parent = this;
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
        return children.at("intsrv-tspec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::get_children()
{
    if(children.find("g709otn-tspec") == children.end())
    {
        if(g709otn_tspec != nullptr)
        {
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
    }

    if(children.find("intsrv-tspec") == children.end())
    {
        if(intsrv_tspec != nullptr)
        {
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "tspec-type")
    {
        tspec_type = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4::Ipv4()
    :
    	id{YType::uint16, "id"},
	 source{YType::str, "source"},
	 type{YType::uint16, "type"}
{
    yang_name = "ipv4"; yang_parent_name = "association";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4::~Ipv4()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4::has_data() const
{
    return id.is_set
	|| source.is_set
	|| type.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(id.operation)
	|| is_set(source.operation)
	|| is_set(type.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (id.is_set || is_set(id.operation)) leaf_name_data.push_back(id.get_name_leafdata());
    if (source.is_set || is_set(source.operation)) leaf_name_data.push_back(source.get_name_leafdata());
    if (type.is_set || is_set(type.operation)) leaf_name_data.push_back(type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "id")
    {
        id = value;
    }
    if(value_path == "source")
    {
        source = value;
    }
    if(value_path == "type")
    {
        type = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6::Ipv6()
    :
    	id{YType::uint16, "id"},
	 source{YType::str, "source"},
	 type{YType::uint16, "type"}
{
    yang_name = "ipv6"; yang_parent_name = "association";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6::~Ipv6()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6::has_data() const
{
    return id.is_set
	|| source.is_set
	|| type.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6::has_operation() const
{
    return is_set(operation)
	|| is_set(id.operation)
	|| is_set(source.operation)
	|| is_set(type.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv6";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (id.is_set || is_set(id.operation)) leaf_name_data.push_back(id.get_name_leafdata());
    if (source.is_set || is_set(source.operation)) leaf_name_data.push_back(source.get_name_leafdata());
    if (type.is_set || is_set(type.operation)) leaf_name_data.push_back(type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "id")
    {
        id = value;
    }
    if(value_path == "source")
    {
        source = value;
    }
    if(value_path == "type")
    {
        type = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4::ExtendedIpv4()
    :
    	extended_id{YType::uint32, "extended-id"},
	 global_source{YType::uint32, "global-source"},
	 id{YType::uint16, "id"},
	 source{YType::str, "source"},
	 type{YType::uint16, "type"}
{
    yang_name = "extended-ipv4"; yang_parent_name = "association";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4::~ExtendedIpv4()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4::has_data() const
{
    for (auto const & leaf : extended_id.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return global_source.is_set
	|| id.is_set
	|| source.is_set
	|| type.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4::has_operation() const
{
    for (auto const & leaf : extended_id.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(extended_id.operation)
	|| is_set(global_source.operation)
	|| is_set(id.operation)
	|| is_set(source.operation)
	|| is_set(type.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "extended-ipv4";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (global_source.is_set || is_set(global_source.operation)) leaf_name_data.push_back(global_source.get_name_leafdata());
    if (id.is_set || is_set(id.operation)) leaf_name_data.push_back(id.get_name_leafdata());
    if (source.is_set || is_set(source.operation)) leaf_name_data.push_back(source.get_name_leafdata());
    if (type.is_set || is_set(type.operation)) leaf_name_data.push_back(type.get_name_leafdata());

    auto extended_id_name_datas = extended_id.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), extended_id_name_datas.begin(), extended_id_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-id")
    {
        extended_id.append(value);
    }
    if(value_path == "global-source")
    {
        global_source = value;
    }
    if(value_path == "id")
    {
        id = value;
    }
    if(value_path == "source")
    {
        source = value;
    }
    if(value_path == "type")
    {
        type = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6::ExtendedIpv6()
    :
    	extended_id{YType::uint32, "extended-id"},
	 global_source{YType::uint32, "global-source"},
	 id{YType::uint16, "id"},
	 source{YType::str, "source"},
	 type{YType::uint16, "type"}
{
    yang_name = "extended-ipv6"; yang_parent_name = "association";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6::~ExtendedIpv6()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6::has_data() const
{
    for (auto const & leaf : extended_id.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return global_source.is_set
	|| id.is_set
	|| source.is_set
	|| type.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6::has_operation() const
{
    for (auto const & leaf : extended_id.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(extended_id.operation)
	|| is_set(global_source.operation)
	|| is_set(id.operation)
	|| is_set(source.operation)
	|| is_set(type.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "extended-ipv6";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (global_source.is_set || is_set(global_source.operation)) leaf_name_data.push_back(global_source.get_name_leafdata());
    if (id.is_set || is_set(id.operation)) leaf_name_data.push_back(id.get_name_leafdata());
    if (source.is_set || is_set(source.operation)) leaf_name_data.push_back(source.get_name_leafdata());
    if (type.is_set || is_set(type.operation)) leaf_name_data.push_back(type.get_name_leafdata());

    auto extended_id_name_datas = extended_id.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), extended_id_name_datas.begin(), extended_id_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-id")
    {
        extended_id.append(value);
    }
    if(value_path == "global-source")
    {
        global_source = value;
    }
    if(value_path == "id")
    {
        id = value;
    }
    if(value_path == "source")
    {
        source = value;
    }
    if(value_path == "type")
    {
        type = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Association()
    :
    	association_type{YType::enumeration, "association-type"}
    	,
    extended_ipv4(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4>())
	,extended_ipv6(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6>())
	,ipv4(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4>())
	,ipv6(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6>())
{
    extended_ipv4->parent = this;
    children["extended-ipv4"] = extended_ipv4.get();

    extended_ipv6->parent = this;
    children["extended-ipv6"] = extended_ipv6.get();

    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv6->parent = this;
    children["ipv6"] = ipv6.get();

    yang_name = "association"; yang_parent_name = "psb-info";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::~Association()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::has_data() const
{
    return association_type.is_set
	|| (extended_ipv4 !=  nullptr && extended_ipv4->has_data())
	|| (extended_ipv6 !=  nullptr && extended_ipv6->has_data())
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv6 !=  nullptr && ipv6->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::has_operation() const
{
    return is_set(operation)
	|| is_set(association_type.operation)
	|| (extended_ipv4 !=  nullptr && extended_ipv4->has_operation())
	|| (extended_ipv6 !=  nullptr && extended_ipv6->has_operation())
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv6 !=  nullptr && ipv6->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "association";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (association_type.is_set || is_set(association_type.operation)) leaf_name_data.push_back(association_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "extended-ipv4")
    {
        if(extended_ipv4 != nullptr)
        {
            children["extended-ipv4"] = extended_ipv4.get();
        }
        else
        {
            extended_ipv4 = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4>();
            extended_ipv4->parent = this;
            children["extended-ipv4"] = extended_ipv4.get();
        }
        return children.at("extended-ipv4");
    }

    if(child_yang_name == "extended-ipv6")
    {
        if(extended_ipv6 != nullptr)
        {
            children["extended-ipv6"] = extended_ipv6.get();
        }
        else
        {
            extended_ipv6 = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6>();
            extended_ipv6->parent = this;
            children["extended-ipv6"] = extended_ipv6.get();
        }
        return children.at("extended-ipv6");
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv6")
    {
        if(ipv6 != nullptr)
        {
            children["ipv6"] = ipv6.get();
        }
        else
        {
            ipv6 = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6>();
            ipv6->parent = this;
            children["ipv6"] = ipv6.get();
        }
        return children.at("ipv6");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::get_children()
{
    if(children.find("extended-ipv4") == children.end())
    {
        if(extended_ipv4 != nullptr)
        {
            children["extended-ipv4"] = extended_ipv4.get();
        }
    }

    if(children.find("extended-ipv6") == children.end())
    {
        if(extended_ipv6 != nullptr)
        {
            children["extended-ipv6"] = extended_ipv6.get();
        }
    }

    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv6") == children.end())
    {
        if(ipv6 != nullptr)
        {
            children["ipv6"] = ipv6.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "association-type")
    {
        association_type = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags::LspFlags()
    :
    	one_plus_one_bi{YType::boolean, "one-plus-one-bi"},
	 one_plus_one_uni{YType::boolean, "one-plus-one-uni"},
	 one_to_n_protection_et{YType::boolean, "one-to-n-protection-et"},
	 rerouting{YType::boolean, "rerouting"},
	 rerouting_no_et{YType::boolean, "rerouting-no-et"}
{
    yang_name = "lsp-flags"; yang_parent_name = "protection";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags::~LspFlags()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags::has_data() const
{
    return one_plus_one_bi.is_set
	|| one_plus_one_uni.is_set
	|| one_to_n_protection_et.is_set
	|| rerouting.is_set
	|| rerouting_no_et.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(one_plus_one_bi.operation)
	|| is_set(one_plus_one_uni.operation)
	|| is_set(one_to_n_protection_et.operation)
	|| is_set(rerouting.operation)
	|| is_set(rerouting_no_et.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "lsp-flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/protection/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (one_plus_one_bi.is_set || is_set(one_plus_one_bi.operation)) leaf_name_data.push_back(one_plus_one_bi.get_name_leafdata());
    if (one_plus_one_uni.is_set || is_set(one_plus_one_uni.operation)) leaf_name_data.push_back(one_plus_one_uni.get_name_leafdata());
    if (one_to_n_protection_et.is_set || is_set(one_to_n_protection_et.operation)) leaf_name_data.push_back(one_to_n_protection_et.get_name_leafdata());
    if (rerouting.is_set || is_set(rerouting.operation)) leaf_name_data.push_back(rerouting.get_name_leafdata());
    if (rerouting_no_et.is_set || is_set(rerouting_no_et.operation)) leaf_name_data.push_back(rerouting_no_et.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "one-plus-one-bi")
    {
        one_plus_one_bi = value;
    }
    if(value_path == "one-plus-one-uni")
    {
        one_plus_one_uni = value;
    }
    if(value_path == "one-to-n-protection-et")
    {
        one_to_n_protection_et = value;
    }
    if(value_path == "rerouting")
    {
        rerouting = value;
    }
    if(value_path == "rerouting-no-et")
    {
        rerouting_no_et = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags::LinkFlags()
    :
    	ded1_plus1{YType::boolean, "ded1-plus1"},
	 ded1_to1{YType::boolean, "ded1-to1"},
	 enhanced{YType::boolean, "enhanced"},
	 extra_traffic{YType::boolean, "extra-traffic"},
	 reserved_bit1{YType::boolean, "reserved-bit1"},
	 reserved_bit2{YType::boolean, "reserved-bit2"},
	 shared{YType::boolean, "shared"},
	 unprotected{YType::boolean, "unprotected"}
{
    yang_name = "link-flags"; yang_parent_name = "protection";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags::~LinkFlags()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags::has_data() const
{
    return ded1_plus1.is_set
	|| ded1_to1.is_set
	|| enhanced.is_set
	|| extra_traffic.is_set
	|| reserved_bit1.is_set
	|| reserved_bit2.is_set
	|| shared.is_set
	|| unprotected.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(ded1_plus1.operation)
	|| is_set(ded1_to1.operation)
	|| is_set(enhanced.operation)
	|| is_set(extra_traffic.operation)
	|| is_set(reserved_bit1.operation)
	|| is_set(reserved_bit2.operation)
	|| is_set(shared.operation)
	|| is_set(unprotected.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "link-flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/protection/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ded1_plus1.is_set || is_set(ded1_plus1.operation)) leaf_name_data.push_back(ded1_plus1.get_name_leafdata());
    if (ded1_to1.is_set || is_set(ded1_to1.operation)) leaf_name_data.push_back(ded1_to1.get_name_leafdata());
    if (enhanced.is_set || is_set(enhanced.operation)) leaf_name_data.push_back(enhanced.get_name_leafdata());
    if (extra_traffic.is_set || is_set(extra_traffic.operation)) leaf_name_data.push_back(extra_traffic.get_name_leafdata());
    if (reserved_bit1.is_set || is_set(reserved_bit1.operation)) leaf_name_data.push_back(reserved_bit1.get_name_leafdata());
    if (reserved_bit2.is_set || is_set(reserved_bit2.operation)) leaf_name_data.push_back(reserved_bit2.get_name_leafdata());
    if (shared.is_set || is_set(shared.operation)) leaf_name_data.push_back(shared.get_name_leafdata());
    if (unprotected.is_set || is_set(unprotected.operation)) leaf_name_data.push_back(unprotected.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ded1-plus1")
    {
        ded1_plus1 = value;
    }
    if(value_path == "ded1-to1")
    {
        ded1_to1 = value;
    }
    if(value_path == "enhanced")
    {
        enhanced = value;
    }
    if(value_path == "extra-traffic")
    {
        extra_traffic = value;
    }
    if(value_path == "reserved-bit1")
    {
        reserved_bit1 = value;
    }
    if(value_path == "reserved-bit2")
    {
        reserved_bit2 = value;
    }
    if(value_path == "shared")
    {
        shared = value;
    }
    if(value_path == "unprotected")
    {
        unprotected = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::Protection()
    :
    	n{YType::boolean, "n"},
	 o{YType::boolean, "o"},
	 p{YType::boolean, "p"},
	 s{YType::boolean, "s"}
    	,
    link_flags(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags>())
	,lsp_flags(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags>())
{
    link_flags->parent = this;
    children["link-flags"] = link_flags.get();

    lsp_flags->parent = this;
    children["lsp-flags"] = lsp_flags.get();

    yang_name = "protection"; yang_parent_name = "psb-info";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::~Protection()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::has_data() const
{
    return n.is_set
	|| o.is_set
	|| p.is_set
	|| s.is_set
	|| (link_flags !=  nullptr && link_flags->has_data())
	|| (lsp_flags !=  nullptr && lsp_flags->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::has_operation() const
{
    return is_set(operation)
	|| is_set(n.operation)
	|| is_set(o.operation)
	|| is_set(p.operation)
	|| is_set(s.operation)
	|| (link_flags !=  nullptr && link_flags->has_operation())
	|| (lsp_flags !=  nullptr && lsp_flags->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "protection";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (n.is_set || is_set(n.operation)) leaf_name_data.push_back(n.get_name_leafdata());
    if (o.is_set || is_set(o.operation)) leaf_name_data.push_back(o.get_name_leafdata());
    if (p.is_set || is_set(p.operation)) leaf_name_data.push_back(p.get_name_leafdata());
    if (s.is_set || is_set(s.operation)) leaf_name_data.push_back(s.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "link-flags")
    {
        if(link_flags != nullptr)
        {
            children["link-flags"] = link_flags.get();
        }
        else
        {
            link_flags = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags>();
            link_flags->parent = this;
            children["link-flags"] = link_flags.get();
        }
        return children.at("link-flags");
    }

    if(child_yang_name == "lsp-flags")
    {
        if(lsp_flags != nullptr)
        {
            children["lsp-flags"] = lsp_flags.get();
        }
        else
        {
            lsp_flags = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags>();
            lsp_flags->parent = this;
            children["lsp-flags"] = lsp_flags.get();
        }
        return children.at("lsp-flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::get_children()
{
    if(children.find("link-flags") == children.end())
    {
        if(link_flags != nullptr)
        {
            children["link-flags"] = link_flags.get();
        }
    }

    if(children.find("lsp-flags") == children.end())
    {
        if(lsp_flags != nullptr)
        {
            children["lsp-flags"] = lsp_flags.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "n")
    {
        n = value;
    }
    if(value_path == "o")
    {
        o = value;
    }
    if(value_path == "p")
    {
        p = value;
    }
    if(value_path == "s")
    {
        s = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec::G709OtnTspec()
    :
    	traffic_bit_rate{YType::uint64, "traffic-bit-rate"},
	 traffic_multiplier{YType::uint16, "traffic-multiplier"},
	 traffic_nvc{YType::uint16, "traffic-nvc"},
	 traffic_signal_type{YType::uint8, "traffic-signal-type"}
{
    yang_name = "g709otn-tspec"; yang_parent_name = "generic-traffic-spec";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec::~G709OtnTspec()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec::has_data() const
{
    return traffic_bit_rate.is_set
	|| traffic_multiplier.is_set
	|| traffic_nvc.is_set
	|| traffic_signal_type.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_bit_rate.operation)
	|| is_set(traffic_multiplier.operation)
	|| is_set(traffic_nvc.operation)
	|| is_set(traffic_signal_type.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-tspec";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/generic-traffic-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_bit_rate.is_set || is_set(traffic_bit_rate.operation)) leaf_name_data.push_back(traffic_bit_rate.get_name_leafdata());
    if (traffic_multiplier.is_set || is_set(traffic_multiplier.operation)) leaf_name_data.push_back(traffic_multiplier.get_name_leafdata());
    if (traffic_nvc.is_set || is_set(traffic_nvc.operation)) leaf_name_data.push_back(traffic_nvc.get_name_leafdata());
    if (traffic_signal_type.is_set || is_set(traffic_signal_type.operation)) leaf_name_data.push_back(traffic_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-bit-rate")
    {
        traffic_bit_rate = value;
    }
    if(value_path == "traffic-multiplier")
    {
        traffic_multiplier = value;
    }
    if(value_path == "traffic-nvc")
    {
        traffic_nvc = value;
    }
    if(value_path == "traffic-signal-type")
    {
        traffic_signal_type = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec::IntsrvTspec()
    :
    	traffic_average_rate{YType::uint64, "traffic-average-rate"},
	 traffic_max_burst{YType::uint64, "traffic-max-burst"},
	 traffic_max_unit{YType::uint32, "traffic-max-unit"},
	 traffic_min_unit{YType::uint32, "traffic-min-unit"},
	 traffic_peak_rate{YType::uint64, "traffic-peak-rate"}
{
    yang_name = "intsrv-tspec"; yang_parent_name = "generic-traffic-spec";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec::~IntsrvTspec()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec::has_data() const
{
    return traffic_average_rate.is_set
	|| traffic_max_burst.is_set
	|| traffic_max_unit.is_set
	|| traffic_min_unit.is_set
	|| traffic_peak_rate.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_average_rate.operation)
	|| is_set(traffic_max_burst.operation)
	|| is_set(traffic_max_unit.operation)
	|| is_set(traffic_min_unit.operation)
	|| is_set(traffic_peak_rate.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "intsrv-tspec";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/generic-traffic-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_average_rate.is_set || is_set(traffic_average_rate.operation)) leaf_name_data.push_back(traffic_average_rate.get_name_leafdata());
    if (traffic_max_burst.is_set || is_set(traffic_max_burst.operation)) leaf_name_data.push_back(traffic_max_burst.get_name_leafdata());
    if (traffic_max_unit.is_set || is_set(traffic_max_unit.operation)) leaf_name_data.push_back(traffic_max_unit.get_name_leafdata());
    if (traffic_min_unit.is_set || is_set(traffic_min_unit.operation)) leaf_name_data.push_back(traffic_min_unit.get_name_leafdata());
    if (traffic_peak_rate.is_set || is_set(traffic_peak_rate.operation)) leaf_name_data.push_back(traffic_peak_rate.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-average-rate")
    {
        traffic_average_rate = value;
    }
    if(value_path == "traffic-max-burst")
    {
        traffic_max_burst = value;
    }
    if(value_path == "traffic-max-unit")
    {
        traffic_max_unit = value;
    }
    if(value_path == "traffic-min-unit")
    {
        traffic_min_unit = value;
    }
    if(value_path == "traffic-peak-rate")
    {
        traffic_peak_rate = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::GenericTrafficSpec()
    :
    	tspec_type{YType::enumeration, "tspec-type"}
    	,
    g709otn_tspec(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec>())
	,intsrv_tspec(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec>())
{
    g709otn_tspec->parent = this;
    children["g709otn-tspec"] = g709otn_tspec.get();

    intsrv_tspec->parent = this;
    children["intsrv-tspec"] = intsrv_tspec.get();

    yang_name = "generic-traffic-spec"; yang_parent_name = "reverse-lsp";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::~GenericTrafficSpec()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::has_data() const
{
    return tspec_type.is_set
	|| (g709otn_tspec !=  nullptr && g709otn_tspec->has_data())
	|| (intsrv_tspec !=  nullptr && intsrv_tspec->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(tspec_type.operation)
	|| (g709otn_tspec !=  nullptr && g709otn_tspec->has_operation())
	|| (intsrv_tspec !=  nullptr && intsrv_tspec->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-traffic-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (tspec_type.is_set || is_set(tspec_type.operation)) leaf_name_data.push_back(tspec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-tspec")
    {
        if(g709otn_tspec != nullptr)
        {
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
        else
        {
            g709otn_tspec = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec>();
            g709otn_tspec->parent = this;
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
        return children.at("g709otn-tspec");
    }

    if(child_yang_name == "intsrv-tspec")
    {
        if(intsrv_tspec != nullptr)
        {
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
        else
        {
            intsrv_tspec = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec>();
            intsrv_tspec->parent = this;
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
        return children.at("intsrv-tspec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::get_children()
{
    if(children.find("g709otn-tspec") == children.end())
    {
        if(g709otn_tspec != nullptr)
        {
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
    }

    if(children.find("intsrv-tspec") == children.end())
    {
        if(intsrv_tspec != nullptr)
        {
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "tspec-type")
    {
        tspec_type = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject::Ipv4EroSubObject()
    :
    	ero_address{YType::str, "ero-address"},
	 is_strict_route{YType::boolean, "is-strict-route"},
	 prefix_length{YType::uint8, "prefix-length"}
{
    yang_name = "ipv4ero-sub-object"; yang_parent_name = "ero";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject::~Ipv4EroSubObject()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject::has_data() const
{
    return ero_address.is_set
	|| is_strict_route.is_set
	|| prefix_length.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_address.operation)
	|| is_set(is_strict_route.operation)
	|| is_set(prefix_length.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4ero-sub-object";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/ero/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_address.is_set || is_set(ero_address.operation)) leaf_name_data.push_back(ero_address.get_name_leafdata());
    if (is_strict_route.is_set || is_set(is_strict_route.operation)) leaf_name_data.push_back(is_strict_route.get_name_leafdata());
    if (prefix_length.is_set || is_set(prefix_length.operation)) leaf_name_data.push_back(prefix_length.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-address")
    {
        ero_address = value;
    }
    if(value_path == "is-strict-route")
    {
        is_strict_route = value;
    }
    if(value_path == "prefix-length")
    {
        prefix_length = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject::UnnumberedEroSubObject()
    :
    	ero_interface_id{YType::uint32, "ero-interface-id"},
	 ero_router_id{YType::str, "ero-router-id"},
	 is_strict_route{YType::boolean, "is-strict-route"},
	 status{YType::enumeration, "status"}
{
    yang_name = "unnumbered-ero-sub-object"; yang_parent_name = "ero";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject::~UnnumberedEroSubObject()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject::has_data() const
{
    return ero_interface_id.is_set
	|| ero_router_id.is_set
	|| is_strict_route.is_set
	|| status.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_interface_id.operation)
	|| is_set(ero_router_id.operation)
	|| is_set(is_strict_route.operation)
	|| is_set(status.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "unnumbered-ero-sub-object";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/ero/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_interface_id.is_set || is_set(ero_interface_id.operation)) leaf_name_data.push_back(ero_interface_id.get_name_leafdata());
    if (ero_router_id.is_set || is_set(ero_router_id.operation)) leaf_name_data.push_back(ero_router_id.get_name_leafdata());
    if (is_strict_route.is_set || is_set(is_strict_route.operation)) leaf_name_data.push_back(is_strict_route.get_name_leafdata());
    if (status.is_set || is_set(status.operation)) leaf_name_data.push_back(status.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-interface-id")
    {
        ero_interface_id = value;
    }
    if(value_path == "ero-router-id")
    {
        ero_router_id = value;
    }
    if(value_path == "is-strict-route")
    {
        is_strict_route = value;
    }
    if(value_path == "status")
    {
        status = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ero()
    :
    	ero_type{YType::enumeration, "ero-type"}
    	,
    ipv4ero_sub_object(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject>())
	,unnumbered_ero_sub_object(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject>())
{
    ipv4ero_sub_object->parent = this;
    children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();

    unnumbered_ero_sub_object->parent = this;
    children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();

    yang_name = "ero"; yang_parent_name = "reverse-lsp";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::~Ero()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::has_data() const
{
    return ero_type.is_set
	|| (ipv4ero_sub_object !=  nullptr && ipv4ero_sub_object->has_data())
	|| (unnumbered_ero_sub_object !=  nullptr && unnumbered_ero_sub_object->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_type.operation)
	|| (ipv4ero_sub_object !=  nullptr && ipv4ero_sub_object->has_operation())
	|| (unnumbered_ero_sub_object !=  nullptr && unnumbered_ero_sub_object->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ero";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_type.is_set || is_set(ero_type.operation)) leaf_name_data.push_back(ero_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4ero-sub-object")
    {
        if(ipv4ero_sub_object != nullptr)
        {
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
        else
        {
            ipv4ero_sub_object = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject>();
            ipv4ero_sub_object->parent = this;
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
        return children.at("ipv4ero-sub-object");
    }

    if(child_yang_name == "unnumbered-ero-sub-object")
    {
        if(unnumbered_ero_sub_object != nullptr)
        {
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
        else
        {
            unnumbered_ero_sub_object = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject>();
            unnumbered_ero_sub_object->parent = this;
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
        return children.at("unnumbered-ero-sub-object");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::get_children()
{
    if(children.find("ipv4ero-sub-object") == children.end())
    {
        if(ipv4ero_sub_object != nullptr)
        {
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
    }

    if(children.find("unnumbered-ero-sub-object") == children.end())
    {
        if(unnumbered_ero_sub_object != nullptr)
        {
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-type")
    {
        ero_type = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject::UnsupSubObject()
    :
    	rsvp_mgmt_rev_lsp_unsupported_subobj{YType::uint8, "rsvp-mgmt-rev-lsp-unsupported-subobj"}
{
    yang_name = "unsup-sub-object"; yang_parent_name = "reverse-lsp";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject::~UnsupSubObject()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject::has_data() const
{
    for (auto const & leaf : rsvp_mgmt_rev_lsp_unsupported_subobj.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject::has_operation() const
{
    for (auto const & leaf : rsvp_mgmt_rev_lsp_unsupported_subobj.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(rsvp_mgmt_rev_lsp_unsupported_subobj.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "unsup-sub-object";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto rsvp_mgmt_rev_lsp_unsupported_subobj_name_datas = rsvp_mgmt_rev_lsp_unsupported_subobj.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), rsvp_mgmt_rev_lsp_unsupported_subobj_name_datas.begin(), rsvp_mgmt_rev_lsp_unsupported_subobj_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "rsvp-mgmt-rev-lsp-unsupported-subobj")
    {
        rsvp_mgmt_rev_lsp_unsupported_subobj.append(value);
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::ReverseLsp()
    :
    generic_traffic_spec(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec>())
{
    generic_traffic_spec->parent = this;
    children["generic-traffic-spec"] = generic_traffic_spec.get();

    yang_name = "reverse-lsp"; yang_parent_name = "psb-info";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::~ReverseLsp()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::has_data() const
{
    for (std::size_t index=0; index<ero.size(); index++)
    {
        if(ero[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<unsup_sub_object.size(); index++)
    {
        if(unsup_sub_object[index]->has_data())
            return true;
    }
    return (generic_traffic_spec !=  nullptr && generic_traffic_spec->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::has_operation() const
{
    for (std::size_t index=0; index<ero.size(); index++)
    {
        if(ero[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<unsup_sub_object.size(); index++)
    {
        if(unsup_sub_object[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| (generic_traffic_spec !=  nullptr && generic_traffic_spec->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "reverse-lsp";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ero")
    {
        for(auto const & c : ero)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero>();
        c->parent = this;
        ero.push_back(std::move(c));
        children[segment_path] = ero.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "generic-traffic-spec")
    {
        if(generic_traffic_spec != nullptr)
        {
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
        else
        {
            generic_traffic_spec = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec>();
            generic_traffic_spec->parent = this;
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
        return children.at("generic-traffic-spec");
    }

    if(child_yang_name == "unsup-sub-object")
    {
        for(auto const & c : unsup_sub_object)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject>();
        c->parent = this;
        unsup_sub_object.push_back(std::move(c));
        children[segment_path] = unsup_sub_object.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::get_children()
{
    for (auto const & c : ero)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("generic-traffic-spec") == children.end())
    {
        if(generic_traffic_spec != nullptr)
        {
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
    }

    for (auto const & c : unsup_sub_object)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject::Ipv4EroSubObject()
    :
    	ero_address{YType::str, "ero-address"},
	 is_strict_route{YType::boolean, "is-strict-route"},
	 prefix_length{YType::uint8, "prefix-length"}
{
    yang_name = "ipv4ero-sub-object"; yang_parent_name = "ero";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject::~Ipv4EroSubObject()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject::has_data() const
{
    return ero_address.is_set
	|| is_strict_route.is_set
	|| prefix_length.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_address.operation)
	|| is_set(is_strict_route.operation)
	|| is_set(prefix_length.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4ero-sub-object";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/ero/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_address.is_set || is_set(ero_address.operation)) leaf_name_data.push_back(ero_address.get_name_leafdata());
    if (is_strict_route.is_set || is_set(is_strict_route.operation)) leaf_name_data.push_back(is_strict_route.get_name_leafdata());
    if (prefix_length.is_set || is_set(prefix_length.operation)) leaf_name_data.push_back(prefix_length.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-address")
    {
        ero_address = value;
    }
    if(value_path == "is-strict-route")
    {
        is_strict_route = value;
    }
    if(value_path == "prefix-length")
    {
        prefix_length = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject::UnnumberedEroSubObject()
    :
    	ero_interface_id{YType::uint32, "ero-interface-id"},
	 ero_router_id{YType::str, "ero-router-id"},
	 is_strict_route{YType::boolean, "is-strict-route"},
	 status{YType::enumeration, "status"}
{
    yang_name = "unnumbered-ero-sub-object"; yang_parent_name = "ero";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject::~UnnumberedEroSubObject()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject::has_data() const
{
    return ero_interface_id.is_set
	|| ero_router_id.is_set
	|| is_strict_route.is_set
	|| status.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_interface_id.operation)
	|| is_set(ero_router_id.operation)
	|| is_set(is_strict_route.operation)
	|| is_set(status.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "unnumbered-ero-sub-object";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/ero/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_interface_id.is_set || is_set(ero_interface_id.operation)) leaf_name_data.push_back(ero_interface_id.get_name_leafdata());
    if (ero_router_id.is_set || is_set(ero_router_id.operation)) leaf_name_data.push_back(ero_router_id.get_name_leafdata());
    if (is_strict_route.is_set || is_set(is_strict_route.operation)) leaf_name_data.push_back(is_strict_route.get_name_leafdata());
    if (status.is_set || is_set(status.operation)) leaf_name_data.push_back(status.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-interface-id")
    {
        ero_interface_id = value;
    }
    if(value_path == "ero-router-id")
    {
        ero_router_id = value;
    }
    if(value_path == "is-strict-route")
    {
        is_strict_route = value;
    }
    if(value_path == "status")
    {
        status = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ero()
    :
    	ero_type{YType::enumeration, "ero-type"}
    	,
    ipv4ero_sub_object(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject>())
	,unnumbered_ero_sub_object(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject>())
{
    ipv4ero_sub_object->parent = this;
    children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();

    unnumbered_ero_sub_object->parent = this;
    children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();

    yang_name = "ero"; yang_parent_name = "psb-info";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::~Ero()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::has_data() const
{
    return ero_type.is_set
	|| (ipv4ero_sub_object !=  nullptr && ipv4ero_sub_object->has_data())
	|| (unnumbered_ero_sub_object !=  nullptr && unnumbered_ero_sub_object->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_type.operation)
	|| (ipv4ero_sub_object !=  nullptr && ipv4ero_sub_object->has_operation())
	|| (unnumbered_ero_sub_object !=  nullptr && unnumbered_ero_sub_object->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ero";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_type.is_set || is_set(ero_type.operation)) leaf_name_data.push_back(ero_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4ero-sub-object")
    {
        if(ipv4ero_sub_object != nullptr)
        {
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
        else
        {
            ipv4ero_sub_object = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject>();
            ipv4ero_sub_object->parent = this;
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
        return children.at("ipv4ero-sub-object");
    }

    if(child_yang_name == "unnumbered-ero-sub-object")
    {
        if(unnumbered_ero_sub_object != nullptr)
        {
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
        else
        {
            unnumbered_ero_sub_object = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject>();
            unnumbered_ero_sub_object->parent = this;
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
        return children.at("unnumbered-ero-sub-object");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::get_children()
{
    if(children.find("ipv4ero-sub-object") == children.end())
    {
        if(ipv4ero_sub_object != nullptr)
        {
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
    }

    if(children.find("unnumbered-ero-sub-object") == children.end())
    {
        if(unnumbered_ero_sub_object != nullptr)
        {
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-type")
    {
        ero_type = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags::Flags()
    :
    	is_bandwidth_protected{YType::boolean, "is-bandwidth-protected"},
	 is_node_id{YType::boolean, "is-node-id"},
	 is_node_protection_available{YType::boolean, "is-node-protection-available"},
	 is_protection_available{YType::boolean, "is-protection-available"},
	 is_protection_in_use{YType::boolean, "is-protection-in-use"}
{
    yang_name = "flags"; yang_parent_name = "ipv4rro-sub-object";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags::~Flags()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags::has_data() const
{
    return is_bandwidth_protected.is_set
	|| is_node_id.is_set
	|| is_node_protection_available.is_set
	|| is_protection_available.is_set
	|| is_protection_in_use.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bandwidth_protected.operation)
	|| is_set(is_node_id.operation)
	|| is_set(is_node_protection_available.operation)
	|| is_set(is_protection_available.operation)
	|| is_set(is_protection_in_use.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/ipv4rro-sub-object/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bandwidth_protected.is_set || is_set(is_bandwidth_protected.operation)) leaf_name_data.push_back(is_bandwidth_protected.get_name_leafdata());
    if (is_node_id.is_set || is_set(is_node_id.operation)) leaf_name_data.push_back(is_node_id.get_name_leafdata());
    if (is_node_protection_available.is_set || is_set(is_node_protection_available.operation)) leaf_name_data.push_back(is_node_protection_available.get_name_leafdata());
    if (is_protection_available.is_set || is_set(is_protection_available.operation)) leaf_name_data.push_back(is_protection_available.get_name_leafdata());
    if (is_protection_in_use.is_set || is_set(is_protection_in_use.operation)) leaf_name_data.push_back(is_protection_in_use.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bandwidth-protected")
    {
        is_bandwidth_protected = value;
    }
    if(value_path == "is-node-id")
    {
        is_node_id = value;
    }
    if(value_path == "is-node-protection-available")
    {
        is_node_protection_available = value;
    }
    if(value_path == "is-protection-available")
    {
        is_protection_available = value;
    }
    if(value_path == "is-protection-in-use")
    {
        is_protection_in_use = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Ipv4RroSubObject()
    :
    	rro_address{YType::str, "rro-address"}
    	,
    flags(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags>())
{
    flags->parent = this;
    children["flags"] = flags.get();

    yang_name = "ipv4rro-sub-object"; yang_parent_name = "rro";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::~Ipv4RroSubObject()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::has_data() const
{
    return rro_address.is_set
	|| (flags !=  nullptr && flags->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(rro_address.operation)
	|| (flags !=  nullptr && flags->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4rro-sub-object";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (rro_address.is_set || is_set(rro_address.operation)) leaf_name_data.push_back(rro_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "flags")
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
        else
        {
            flags = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags>();
            flags->parent = this;
            children["flags"] = flags.get();
        }
        return children.at("flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::get_children()
{
    if(children.find("flags") == children.end())
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "rro-address")
    {
        rro_address = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags::Flags()
    :
    	is_global_label{YType::boolean, "is-global-label"}
{
    yang_name = "flags"; yang_parent_name = "label-rro-sub-object";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags::~Flags()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags::has_data() const
{
    return is_global_label.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_global_label.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/label-rro-sub-object/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_global_label.is_set || is_set(is_global_label.operation)) leaf_name_data.push_back(is_global_label.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-global-label")
    {
        is_global_label = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::LabelRroSubObject()
    :
    	is_label_variable_length{YType::boolean, "is-label-variable-length"},
	 label{YType::uint32, "label"},
	 variable_length_label{YType::uint32, "variable-length-label"}
    	,
    flags(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags>())
{
    flags->parent = this;
    children["flags"] = flags.get();

    yang_name = "label-rro-sub-object"; yang_parent_name = "rro";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::~LabelRroSubObject()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::has_data() const
{
    for (auto const & leaf : variable_length_label.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return is_label_variable_length.is_set
	|| label.is_set
	|| (flags !=  nullptr && flags->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::has_operation() const
{
    for (auto const & leaf : variable_length_label.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(is_label_variable_length.operation)
	|| is_set(label.operation)
	|| is_set(variable_length_label.operation)
	|| (flags !=  nullptr && flags->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "label-rro-sub-object";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_label_variable_length.is_set || is_set(is_label_variable_length.operation)) leaf_name_data.push_back(is_label_variable_length.get_name_leafdata());
    if (label.is_set || is_set(label.operation)) leaf_name_data.push_back(label.get_name_leafdata());

    auto variable_length_label_name_datas = variable_length_label.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), variable_length_label_name_datas.begin(), variable_length_label_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "flags")
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
        else
        {
            flags = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags>();
            flags->parent = this;
            children["flags"] = flags.get();
        }
        return children.at("flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::get_children()
{
    if(children.find("flags") == children.end())
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-label-variable-length")
    {
        is_label_variable_length = value;
    }
    if(value_path == "label")
    {
        label = value;
    }
    if(value_path == "variable-length-label")
    {
        variable_length_label.append(value);
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags::Flags()
    :
    	is_bandwidth_protected{YType::boolean, "is-bandwidth-protected"},
	 is_node_id{YType::boolean, "is-node-id"},
	 is_node_protection_available{YType::boolean, "is-node-protection-available"},
	 is_protection_available{YType::boolean, "is-protection-available"},
	 is_protection_in_use{YType::boolean, "is-protection-in-use"}
{
    yang_name = "flags"; yang_parent_name = "unnumbered-rro-sub-object";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags::~Flags()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags::has_data() const
{
    return is_bandwidth_protected.is_set
	|| is_node_id.is_set
	|| is_node_protection_available.is_set
	|| is_protection_available.is_set
	|| is_protection_in_use.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bandwidth_protected.operation)
	|| is_set(is_node_id.operation)
	|| is_set(is_node_protection_available.operation)
	|| is_set(is_protection_available.operation)
	|| is_set(is_protection_in_use.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/unnumbered-rro-sub-object/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bandwidth_protected.is_set || is_set(is_bandwidth_protected.operation)) leaf_name_data.push_back(is_bandwidth_protected.get_name_leafdata());
    if (is_node_id.is_set || is_set(is_node_id.operation)) leaf_name_data.push_back(is_node_id.get_name_leafdata());
    if (is_node_protection_available.is_set || is_set(is_node_protection_available.operation)) leaf_name_data.push_back(is_node_protection_available.get_name_leafdata());
    if (is_protection_available.is_set || is_set(is_protection_available.operation)) leaf_name_data.push_back(is_protection_available.get_name_leafdata());
    if (is_protection_in_use.is_set || is_set(is_protection_in_use.operation)) leaf_name_data.push_back(is_protection_in_use.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bandwidth-protected")
    {
        is_bandwidth_protected = value;
    }
    if(value_path == "is-node-id")
    {
        is_node_id = value;
    }
    if(value_path == "is-node-protection-available")
    {
        is_node_protection_available = value;
    }
    if(value_path == "is-protection-available")
    {
        is_protection_available = value;
    }
    if(value_path == "is-protection-in-use")
    {
        is_protection_in_use = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::UnnumberedRroSubObject()
    :
    	interface_address{YType::str, "interface-address"},
	 interface_id{YType::uint32, "interface-id"}
    	,
    flags(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags>())
{
    flags->parent = this;
    children["flags"] = flags.get();

    yang_name = "unnumbered-rro-sub-object"; yang_parent_name = "rro";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::~UnnumberedRroSubObject()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::has_data() const
{
    return interface_address.is_set
	|| interface_id.is_set
	|| (flags !=  nullptr && flags->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_address.operation)
	|| is_set(interface_id.operation)
	|| (flags !=  nullptr && flags->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "unnumbered-rro-sub-object";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_address.is_set || is_set(interface_address.operation)) leaf_name_data.push_back(interface_address.get_name_leafdata());
    if (interface_id.is_set || is_set(interface_id.operation)) leaf_name_data.push_back(interface_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "flags")
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
        else
        {
            flags = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags>();
            flags->parent = this;
            children["flags"] = flags.get();
        }
        return children.at("flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::get_children()
{
    if(children.find("flags") == children.end())
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-address")
    {
        interface_address = value;
    }
    if(value_path == "interface-id")
    {
        interface_id = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject::SrlgRroSubObject()
    :
    	srl_gs{YType::uint32, "srl-gs"}
{
    yang_name = "srlg-rro-sub-object"; yang_parent_name = "rro";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject::~SrlgRroSubObject()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject::has_data() const
{
    for (auto const & leaf : srl_gs.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject::has_operation() const
{
    for (auto const & leaf : srl_gs.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(srl_gs.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "srlg-rro-sub-object";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto srl_gs_name_datas = srl_gs.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), srl_gs_name_datas.begin(), srl_gs_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "srl-gs")
    {
        srl_gs.append(value);
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Rro()
    :
    	rro_type{YType::enumeration, "rro-type"}
    	,
    ipv4rro_sub_object(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject>())
	,label_rro_sub_object(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject>())
	,srlg_rro_sub_object(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject>())
	,unnumbered_rro_sub_object(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject>())
{
    ipv4rro_sub_object->parent = this;
    children["ipv4rro-sub-object"] = ipv4rro_sub_object.get();

    label_rro_sub_object->parent = this;
    children["label-rro-sub-object"] = label_rro_sub_object.get();

    srlg_rro_sub_object->parent = this;
    children["srlg-rro-sub-object"] = srlg_rro_sub_object.get();

    unnumbered_rro_sub_object->parent = this;
    children["unnumbered-rro-sub-object"] = unnumbered_rro_sub_object.get();

    yang_name = "rro"; yang_parent_name = "psb-info";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::~Rro()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::has_data() const
{
    return rro_type.is_set
	|| (ipv4rro_sub_object !=  nullptr && ipv4rro_sub_object->has_data())
	|| (label_rro_sub_object !=  nullptr && label_rro_sub_object->has_data())
	|| (srlg_rro_sub_object !=  nullptr && srlg_rro_sub_object->has_data())
	|| (unnumbered_rro_sub_object !=  nullptr && unnumbered_rro_sub_object->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::has_operation() const
{
    return is_set(operation)
	|| is_set(rro_type.operation)
	|| (ipv4rro_sub_object !=  nullptr && ipv4rro_sub_object->has_operation())
	|| (label_rro_sub_object !=  nullptr && label_rro_sub_object->has_operation())
	|| (srlg_rro_sub_object !=  nullptr && srlg_rro_sub_object->has_operation())
	|| (unnumbered_rro_sub_object !=  nullptr && unnumbered_rro_sub_object->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rro";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (rro_type.is_set || is_set(rro_type.operation)) leaf_name_data.push_back(rro_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4rro-sub-object")
    {
        if(ipv4rro_sub_object != nullptr)
        {
            children["ipv4rro-sub-object"] = ipv4rro_sub_object.get();
        }
        else
        {
            ipv4rro_sub_object = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject>();
            ipv4rro_sub_object->parent = this;
            children["ipv4rro-sub-object"] = ipv4rro_sub_object.get();
        }
        return children.at("ipv4rro-sub-object");
    }

    if(child_yang_name == "label-rro-sub-object")
    {
        if(label_rro_sub_object != nullptr)
        {
            children["label-rro-sub-object"] = label_rro_sub_object.get();
        }
        else
        {
            label_rro_sub_object = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject>();
            label_rro_sub_object->parent = this;
            children["label-rro-sub-object"] = label_rro_sub_object.get();
        }
        return children.at("label-rro-sub-object");
    }

    if(child_yang_name == "srlg-rro-sub-object")
    {
        if(srlg_rro_sub_object != nullptr)
        {
            children["srlg-rro-sub-object"] = srlg_rro_sub_object.get();
        }
        else
        {
            srlg_rro_sub_object = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject>();
            srlg_rro_sub_object->parent = this;
            children["srlg-rro-sub-object"] = srlg_rro_sub_object.get();
        }
        return children.at("srlg-rro-sub-object");
    }

    if(child_yang_name == "unnumbered-rro-sub-object")
    {
        if(unnumbered_rro_sub_object != nullptr)
        {
            children["unnumbered-rro-sub-object"] = unnumbered_rro_sub_object.get();
        }
        else
        {
            unnumbered_rro_sub_object = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject>();
            unnumbered_rro_sub_object->parent = this;
            children["unnumbered-rro-sub-object"] = unnumbered_rro_sub_object.get();
        }
        return children.at("unnumbered-rro-sub-object");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::get_children()
{
    if(children.find("ipv4rro-sub-object") == children.end())
    {
        if(ipv4rro_sub_object != nullptr)
        {
            children["ipv4rro-sub-object"] = ipv4rro_sub_object.get();
        }
    }

    if(children.find("label-rro-sub-object") == children.end())
    {
        if(label_rro_sub_object != nullptr)
        {
            children["label-rro-sub-object"] = label_rro_sub_object.get();
        }
    }

    if(children.find("srlg-rro-sub-object") == children.end())
    {
        if(srlg_rro_sub_object != nullptr)
        {
            children["srlg-rro-sub-object"] = srlg_rro_sub_object.get();
        }
    }

    if(children.find("unnumbered-rro-sub-object") == children.end())
    {
        if(unnumbered_rro_sub_object != nullptr)
        {
            children["unnumbered-rro-sub-object"] = unnumbered_rro_sub_object.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "rro-type")
    {
        rro_type = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::PsbInfo()
    :
    	destination_address{YType::str, "destination-address"},
	 in_interface{YType::str, "in-interface"},
	 in_label{YType::uint32, "in-label"},
	 incoming_interface_address{YType::str, "incoming-interface-address"},
	 is_bad_address{YType::boolean, "is-bad-address"},
	 is_ero_valid{YType::boolean, "is-ero-valid"},
	 is_rro_valid{YType::boolean, "is-rro-valid"},
	 is_traffic_spec_valid{YType::boolean, "is-traffic-spec-valid"},
	 is_valid{YType::boolean, "is-valid"},
	 lsp_id{YType::uint32, "lsp-id"},
	 lsp_wrap_label{YType::uint32, "lsp-wrap-label"},
	 p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 sub_group_id{YType::uint16, "sub-group-id"},
	 tunnel_name{YType::str, "tunnel-name"}
    	,
    association(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association>())
	,generic_in_label(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel>())
	,generic_traffic_spec(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec>())
	,protection(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection>())
	,reverse_lsp(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp>())
	,traffic_spec(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec>())
{
    association->parent = this;
    children["association"] = association.get();

    generic_in_label->parent = this;
    children["generic-in-label"] = generic_in_label.get();

    generic_traffic_spec->parent = this;
    children["generic-traffic-spec"] = generic_traffic_spec.get();

    protection->parent = this;
    children["protection"] = protection.get();

    reverse_lsp->parent = this;
    children["reverse-lsp"] = reverse_lsp.get();

    traffic_spec->parent = this;
    children["traffic-spec"] = traffic_spec.get();

    yang_name = "psb-info"; yang_parent_name = "psb-rsb-info";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::~PsbInfo()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::has_data() const
{
    for (std::size_t index=0; index<ero.size(); index++)
    {
        if(ero[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<rro.size(); index++)
    {
        if(rro[index]->has_data())
            return true;
    }
    return destination_address.is_set
	|| in_interface.is_set
	|| in_label.is_set
	|| incoming_interface_address.is_set
	|| is_bad_address.is_set
	|| is_ero_valid.is_set
	|| is_rro_valid.is_set
	|| is_traffic_spec_valid.is_set
	|| is_valid.is_set
	|| lsp_id.is_set
	|| lsp_wrap_label.is_set
	|| p2mp_sub_group_origin.is_set
	|| sub_group_id.is_set
	|| tunnel_name.is_set
	|| (association !=  nullptr && association->has_data())
	|| (generic_in_label !=  nullptr && generic_in_label->has_data())
	|| (generic_traffic_spec !=  nullptr && generic_traffic_spec->has_data())
	|| (protection !=  nullptr && protection->has_data())
	|| (reverse_lsp !=  nullptr && reverse_lsp->has_data())
	|| (traffic_spec !=  nullptr && traffic_spec->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::has_operation() const
{
    for (std::size_t index=0; index<ero.size(); index++)
    {
        if(ero[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<rro.size(); index++)
    {
        if(rro[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(in_interface.operation)
	|| is_set(in_label.operation)
	|| is_set(incoming_interface_address.operation)
	|| is_set(is_bad_address.operation)
	|| is_set(is_ero_valid.operation)
	|| is_set(is_rro_valid.operation)
	|| is_set(is_traffic_spec_valid.operation)
	|| is_set(is_valid.operation)
	|| is_set(lsp_id.operation)
	|| is_set(lsp_wrap_label.operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(tunnel_name.operation)
	|| (association !=  nullptr && association->has_operation())
	|| (generic_in_label !=  nullptr && generic_in_label->has_operation())
	|| (generic_traffic_spec !=  nullptr && generic_traffic_spec->has_operation())
	|| (protection !=  nullptr && protection->has_operation())
	|| (reverse_lsp !=  nullptr && reverse_lsp->has_operation())
	|| (traffic_spec !=  nullptr && traffic_spec->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "psb-info";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (in_interface.is_set || is_set(in_interface.operation)) leaf_name_data.push_back(in_interface.get_name_leafdata());
    if (in_label.is_set || is_set(in_label.operation)) leaf_name_data.push_back(in_label.get_name_leafdata());
    if (incoming_interface_address.is_set || is_set(incoming_interface_address.operation)) leaf_name_data.push_back(incoming_interface_address.get_name_leafdata());
    if (is_bad_address.is_set || is_set(is_bad_address.operation)) leaf_name_data.push_back(is_bad_address.get_name_leafdata());
    if (is_ero_valid.is_set || is_set(is_ero_valid.operation)) leaf_name_data.push_back(is_ero_valid.get_name_leafdata());
    if (is_rro_valid.is_set || is_set(is_rro_valid.operation)) leaf_name_data.push_back(is_rro_valid.get_name_leafdata());
    if (is_traffic_spec_valid.is_set || is_set(is_traffic_spec_valid.operation)) leaf_name_data.push_back(is_traffic_spec_valid.get_name_leafdata());
    if (is_valid.is_set || is_set(is_valid.operation)) leaf_name_data.push_back(is_valid.get_name_leafdata());
    if (lsp_id.is_set || is_set(lsp_id.operation)) leaf_name_data.push_back(lsp_id.get_name_leafdata());
    if (lsp_wrap_label.is_set || is_set(lsp_wrap_label.operation)) leaf_name_data.push_back(lsp_wrap_label.get_name_leafdata());
    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (tunnel_name.is_set || is_set(tunnel_name.operation)) leaf_name_data.push_back(tunnel_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "association")
    {
        if(association != nullptr)
        {
            children["association"] = association.get();
        }
        else
        {
            association = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association>();
            association->parent = this;
            children["association"] = association.get();
        }
        return children.at("association");
    }

    if(child_yang_name == "ero")
    {
        for(auto const & c : ero)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero>();
        c->parent = this;
        ero.push_back(std::move(c));
        children[segment_path] = ero.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "generic-in-label")
    {
        if(generic_in_label != nullptr)
        {
            children["generic-in-label"] = generic_in_label.get();
        }
        else
        {
            generic_in_label = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel>();
            generic_in_label->parent = this;
            children["generic-in-label"] = generic_in_label.get();
        }
        return children.at("generic-in-label");
    }

    if(child_yang_name == "generic-traffic-spec")
    {
        if(generic_traffic_spec != nullptr)
        {
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
        else
        {
            generic_traffic_spec = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec>();
            generic_traffic_spec->parent = this;
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
        return children.at("generic-traffic-spec");
    }

    if(child_yang_name == "protection")
    {
        if(protection != nullptr)
        {
            children["protection"] = protection.get();
        }
        else
        {
            protection = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection>();
            protection->parent = this;
            children["protection"] = protection.get();
        }
        return children.at("protection");
    }

    if(child_yang_name == "reverse-lsp")
    {
        if(reverse_lsp != nullptr)
        {
            children["reverse-lsp"] = reverse_lsp.get();
        }
        else
        {
            reverse_lsp = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp>();
            reverse_lsp->parent = this;
            children["reverse-lsp"] = reverse_lsp.get();
        }
        return children.at("reverse-lsp");
    }

    if(child_yang_name == "rro")
    {
        for(auto const & c : rro)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro>();
        c->parent = this;
        rro.push_back(std::move(c));
        children[segment_path] = rro.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "traffic-spec")
    {
        if(traffic_spec != nullptr)
        {
            children["traffic-spec"] = traffic_spec.get();
        }
        else
        {
            traffic_spec = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec>();
            traffic_spec->parent = this;
            children["traffic-spec"] = traffic_spec.get();
        }
        return children.at("traffic-spec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::get_children()
{
    if(children.find("association") == children.end())
    {
        if(association != nullptr)
        {
            children["association"] = association.get();
        }
    }

    for (auto const & c : ero)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("generic-in-label") == children.end())
    {
        if(generic_in_label != nullptr)
        {
            children["generic-in-label"] = generic_in_label.get();
        }
    }

    if(children.find("generic-traffic-spec") == children.end())
    {
        if(generic_traffic_spec != nullptr)
        {
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
    }

    if(children.find("protection") == children.end())
    {
        if(protection != nullptr)
        {
            children["protection"] = protection.get();
        }
    }

    if(children.find("reverse-lsp") == children.end())
    {
        if(reverse_lsp != nullptr)
        {
            children["reverse-lsp"] = reverse_lsp.get();
        }
    }

    for (auto const & c : rro)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("traffic-spec") == children.end())
    {
        if(traffic_spec != nullptr)
        {
            children["traffic-spec"] = traffic_spec.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "in-interface")
    {
        in_interface = value;
    }
    if(value_path == "in-label")
    {
        in_label = value;
    }
    if(value_path == "incoming-interface-address")
    {
        incoming_interface_address = value;
    }
    if(value_path == "is-bad-address")
    {
        is_bad_address = value;
    }
    if(value_path == "is-ero-valid")
    {
        is_ero_valid = value;
    }
    if(value_path == "is-rro-valid")
    {
        is_rro_valid = value;
    }
    if(value_path == "is-traffic-spec-valid")
    {
        is_traffic_spec_valid = value;
    }
    if(value_path == "is-valid")
    {
        is_valid = value;
    }
    if(value_path == "lsp-id")
    {
        lsp_id = value;
    }
    if(value_path == "lsp-wrap-label")
    {
        lsp_wrap_label = value;
    }
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "tunnel-name")
    {
        tunnel_name = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-out-label";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/generic-out-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GenericOutLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-out-label"; yang_parent_name = "rsb-info";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::~GenericOutLabel()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-out-label";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec::FlowSpec()
    :
    	flow_average_rate{YType::uint64, "flow-average-rate"},
	 flow_max_burst{YType::uint64, "flow-max-burst"},
	 flow_max_unit{YType::uint32, "flow-max-unit"},
	 flow_min_unit{YType::uint32, "flow-min-unit"},
	 flow_peak_rate{YType::uint64, "flow-peak-rate"},
	 flow_qos{YType::enumeration, "flow-qos"},
	 flow_requested_rate{YType::uint64, "flow-requested-rate"},
	 flow_slack{YType::uint32, "flow-slack"}
{
    yang_name = "flow-spec"; yang_parent_name = "rsb-info";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec::~FlowSpec()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec::has_data() const
{
    return flow_average_rate.is_set
	|| flow_max_burst.is_set
	|| flow_max_unit.is_set
	|| flow_min_unit.is_set
	|| flow_peak_rate.is_set
	|| flow_qos.is_set
	|| flow_requested_rate.is_set
	|| flow_slack.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_average_rate.operation)
	|| is_set(flow_max_burst.operation)
	|| is_set(flow_max_unit.operation)
	|| is_set(flow_min_unit.operation)
	|| is_set(flow_peak_rate.operation)
	|| is_set(flow_qos.operation)
	|| is_set(flow_requested_rate.operation)
	|| is_set(flow_slack.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flow-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_average_rate.is_set || is_set(flow_average_rate.operation)) leaf_name_data.push_back(flow_average_rate.get_name_leafdata());
    if (flow_max_burst.is_set || is_set(flow_max_burst.operation)) leaf_name_data.push_back(flow_max_burst.get_name_leafdata());
    if (flow_max_unit.is_set || is_set(flow_max_unit.operation)) leaf_name_data.push_back(flow_max_unit.get_name_leafdata());
    if (flow_min_unit.is_set || is_set(flow_min_unit.operation)) leaf_name_data.push_back(flow_min_unit.get_name_leafdata());
    if (flow_peak_rate.is_set || is_set(flow_peak_rate.operation)) leaf_name_data.push_back(flow_peak_rate.get_name_leafdata());
    if (flow_qos.is_set || is_set(flow_qos.operation)) leaf_name_data.push_back(flow_qos.get_name_leafdata());
    if (flow_requested_rate.is_set || is_set(flow_requested_rate.operation)) leaf_name_data.push_back(flow_requested_rate.get_name_leafdata());
    if (flow_slack.is_set || is_set(flow_slack.operation)) leaf_name_data.push_back(flow_slack.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-average-rate")
    {
        flow_average_rate = value;
    }
    if(value_path == "flow-max-burst")
    {
        flow_max_burst = value;
    }
    if(value_path == "flow-max-unit")
    {
        flow_max_unit = value;
    }
    if(value_path == "flow-min-unit")
    {
        flow_min_unit = value;
    }
    if(value_path == "flow-peak-rate")
    {
        flow_peak_rate = value;
    }
    if(value_path == "flow-qos")
    {
        flow_qos = value;
    }
    if(value_path == "flow-requested-rate")
    {
        flow_requested_rate = value;
    }
    if(value_path == "flow-slack")
    {
        flow_slack = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec::G709OtnFlowSpec()
    :
    	flow_bit_rate{YType::uint64, "flow-bit-rate"},
	 flow_multiplier{YType::uint16, "flow-multiplier"},
	 flow_nvc{YType::uint16, "flow-nvc"},
	 flow_signal_type{YType::uint8, "flow-signal-type"}
{
    yang_name = "g709otn-flow-spec"; yang_parent_name = "generic-flow-spec";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec::~G709OtnFlowSpec()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec::has_data() const
{
    return flow_bit_rate.is_set
	|| flow_multiplier.is_set
	|| flow_nvc.is_set
	|| flow_signal_type.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_bit_rate.operation)
	|| is_set(flow_multiplier.operation)
	|| is_set(flow_nvc.operation)
	|| is_set(flow_signal_type.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-flow-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/generic-flow-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_bit_rate.is_set || is_set(flow_bit_rate.operation)) leaf_name_data.push_back(flow_bit_rate.get_name_leafdata());
    if (flow_multiplier.is_set || is_set(flow_multiplier.operation)) leaf_name_data.push_back(flow_multiplier.get_name_leafdata());
    if (flow_nvc.is_set || is_set(flow_nvc.operation)) leaf_name_data.push_back(flow_nvc.get_name_leafdata());
    if (flow_signal_type.is_set || is_set(flow_signal_type.operation)) leaf_name_data.push_back(flow_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-bit-rate")
    {
        flow_bit_rate = value;
    }
    if(value_path == "flow-multiplier")
    {
        flow_multiplier = value;
    }
    if(value_path == "flow-nvc")
    {
        flow_nvc = value;
    }
    if(value_path == "flow-signal-type")
    {
        flow_signal_type = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::GenericFlowSpec()
    :
    	flow_spec_type{YType::enumeration, "flow-spec-type"}
    	,
    g709otn_flow_spec(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec>())
{
    g709otn_flow_spec->parent = this;
    children["g709otn-flow-spec"] = g709otn_flow_spec.get();

    yang_name = "generic-flow-spec"; yang_parent_name = "rsb-info";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::~GenericFlowSpec()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::has_data() const
{
    return flow_spec_type.is_set
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_spec_type.operation)
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-flow-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_spec_type.is_set || is_set(flow_spec_type.operation)) leaf_name_data.push_back(flow_spec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-flow-spec")
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        else
        {
            g709otn_flow_spec = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec>();
            g709otn_flow_spec->parent = this;
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        return children.at("g709otn-flow-spec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::get_children()
{
    if(children.find("g709otn-flow-spec") == children.end())
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-spec-type")
    {
        flow_spec_type = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags::Flags()
    :
    	is_bandwidth_protected{YType::boolean, "is-bandwidth-protected"},
	 is_node_id{YType::boolean, "is-node-id"},
	 is_node_protection_available{YType::boolean, "is-node-protection-available"},
	 is_protection_available{YType::boolean, "is-protection-available"},
	 is_protection_in_use{YType::boolean, "is-protection-in-use"}
{
    yang_name = "flags"; yang_parent_name = "ipv4rro-sub-object";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags::~Flags()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags::has_data() const
{
    return is_bandwidth_protected.is_set
	|| is_node_id.is_set
	|| is_node_protection_available.is_set
	|| is_protection_available.is_set
	|| is_protection_in_use.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bandwidth_protected.operation)
	|| is_set(is_node_id.operation)
	|| is_set(is_node_protection_available.operation)
	|| is_set(is_protection_available.operation)
	|| is_set(is_protection_in_use.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/ipv4rro-sub-object/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bandwidth_protected.is_set || is_set(is_bandwidth_protected.operation)) leaf_name_data.push_back(is_bandwidth_protected.get_name_leafdata());
    if (is_node_id.is_set || is_set(is_node_id.operation)) leaf_name_data.push_back(is_node_id.get_name_leafdata());
    if (is_node_protection_available.is_set || is_set(is_node_protection_available.operation)) leaf_name_data.push_back(is_node_protection_available.get_name_leafdata());
    if (is_protection_available.is_set || is_set(is_protection_available.operation)) leaf_name_data.push_back(is_protection_available.get_name_leafdata());
    if (is_protection_in_use.is_set || is_set(is_protection_in_use.operation)) leaf_name_data.push_back(is_protection_in_use.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bandwidth-protected")
    {
        is_bandwidth_protected = value;
    }
    if(value_path == "is-node-id")
    {
        is_node_id = value;
    }
    if(value_path == "is-node-protection-available")
    {
        is_node_protection_available = value;
    }
    if(value_path == "is-protection-available")
    {
        is_protection_available = value;
    }
    if(value_path == "is-protection-in-use")
    {
        is_protection_in_use = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Ipv4RroSubObject()
    :
    	rro_address{YType::str, "rro-address"}
    	,
    flags(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags>())
{
    flags->parent = this;
    children["flags"] = flags.get();

    yang_name = "ipv4rro-sub-object"; yang_parent_name = "rro";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::~Ipv4RroSubObject()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::has_data() const
{
    return rro_address.is_set
	|| (flags !=  nullptr && flags->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(rro_address.operation)
	|| (flags !=  nullptr && flags->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4rro-sub-object";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (rro_address.is_set || is_set(rro_address.operation)) leaf_name_data.push_back(rro_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "flags")
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
        else
        {
            flags = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags>();
            flags->parent = this;
            children["flags"] = flags.get();
        }
        return children.at("flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::get_children()
{
    if(children.find("flags") == children.end())
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "rro-address")
    {
        rro_address = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags::Flags()
    :
    	is_global_label{YType::boolean, "is-global-label"}
{
    yang_name = "flags"; yang_parent_name = "label-rro-sub-object";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags::~Flags()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags::has_data() const
{
    return is_global_label.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_global_label.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/label-rro-sub-object/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_global_label.is_set || is_set(is_global_label.operation)) leaf_name_data.push_back(is_global_label.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-global-label")
    {
        is_global_label = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::LabelRroSubObject()
    :
    	is_label_variable_length{YType::boolean, "is-label-variable-length"},
	 label{YType::uint32, "label"},
	 variable_length_label{YType::uint32, "variable-length-label"}
    	,
    flags(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags>())
{
    flags->parent = this;
    children["flags"] = flags.get();

    yang_name = "label-rro-sub-object"; yang_parent_name = "rro";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::~LabelRroSubObject()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::has_data() const
{
    for (auto const & leaf : variable_length_label.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return is_label_variable_length.is_set
	|| label.is_set
	|| (flags !=  nullptr && flags->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::has_operation() const
{
    for (auto const & leaf : variable_length_label.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(is_label_variable_length.operation)
	|| is_set(label.operation)
	|| is_set(variable_length_label.operation)
	|| (flags !=  nullptr && flags->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "label-rro-sub-object";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_label_variable_length.is_set || is_set(is_label_variable_length.operation)) leaf_name_data.push_back(is_label_variable_length.get_name_leafdata());
    if (label.is_set || is_set(label.operation)) leaf_name_data.push_back(label.get_name_leafdata());

    auto variable_length_label_name_datas = variable_length_label.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), variable_length_label_name_datas.begin(), variable_length_label_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "flags")
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
        else
        {
            flags = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags>();
            flags->parent = this;
            children["flags"] = flags.get();
        }
        return children.at("flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::get_children()
{
    if(children.find("flags") == children.end())
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-label-variable-length")
    {
        is_label_variable_length = value;
    }
    if(value_path == "label")
    {
        label = value;
    }
    if(value_path == "variable-length-label")
    {
        variable_length_label.append(value);
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags::Flags()
    :
    	is_bandwidth_protected{YType::boolean, "is-bandwidth-protected"},
	 is_node_id{YType::boolean, "is-node-id"},
	 is_node_protection_available{YType::boolean, "is-node-protection-available"},
	 is_protection_available{YType::boolean, "is-protection-available"},
	 is_protection_in_use{YType::boolean, "is-protection-in-use"}
{
    yang_name = "flags"; yang_parent_name = "unnumbered-rro-sub-object";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags::~Flags()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags::has_data() const
{
    return is_bandwidth_protected.is_set
	|| is_node_id.is_set
	|| is_node_protection_available.is_set
	|| is_protection_available.is_set
	|| is_protection_in_use.is_set;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bandwidth_protected.operation)
	|| is_set(is_node_id.operation)
	|| is_set(is_node_protection_available.operation)
	|| is_set(is_protection_available.operation)
	|| is_set(is_protection_in_use.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/unnumbered-rro-sub-object/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bandwidth_protected.is_set || is_set(is_bandwidth_protected.operation)) leaf_name_data.push_back(is_bandwidth_protected.get_name_leafdata());
    if (is_node_id.is_set || is_set(is_node_id.operation)) leaf_name_data.push_back(is_node_id.get_name_leafdata());
    if (is_node_protection_available.is_set || is_set(is_node_protection_available.operation)) leaf_name_data.push_back(is_node_protection_available.get_name_leafdata());
    if (is_protection_available.is_set || is_set(is_protection_available.operation)) leaf_name_data.push_back(is_protection_available.get_name_leafdata());
    if (is_protection_in_use.is_set || is_set(is_protection_in_use.operation)) leaf_name_data.push_back(is_protection_in_use.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bandwidth-protected")
    {
        is_bandwidth_protected = value;
    }
    if(value_path == "is-node-id")
    {
        is_node_id = value;
    }
    if(value_path == "is-node-protection-available")
    {
        is_node_protection_available = value;
    }
    if(value_path == "is-protection-available")
    {
        is_protection_available = value;
    }
    if(value_path == "is-protection-in-use")
    {
        is_protection_in_use = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::UnnumberedRroSubObject()
    :
    	interface_address{YType::str, "interface-address"},
	 interface_id{YType::uint32, "interface-id"}
    	,
    flags(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags>())
{
    flags->parent = this;
    children["flags"] = flags.get();

    yang_name = "unnumbered-rro-sub-object"; yang_parent_name = "rro";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::~UnnumberedRroSubObject()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::has_data() const
{
    return interface_address.is_set
	|| interface_id.is_set
	|| (flags !=  nullptr && flags->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_address.operation)
	|| is_set(interface_id.operation)
	|| (flags !=  nullptr && flags->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "unnumbered-rro-sub-object";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_address.is_set || is_set(interface_address.operation)) leaf_name_data.push_back(interface_address.get_name_leafdata());
    if (interface_id.is_set || is_set(interface_id.operation)) leaf_name_data.push_back(interface_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "flags")
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
        else
        {
            flags = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags>();
            flags->parent = this;
            children["flags"] = flags.get();
        }
        return children.at("flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::get_children()
{
    if(children.find("flags") == children.end())
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-address")
    {
        interface_address = value;
    }
    if(value_path == "interface-id")
    {
        interface_id = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject::SrlgRroSubObject()
    :
    	srl_gs{YType::uint32, "srl-gs"}
{
    yang_name = "srlg-rro-sub-object"; yang_parent_name = "rro";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject::~SrlgRroSubObject()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject::has_data() const
{
    for (auto const & leaf : srl_gs.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject::has_operation() const
{
    for (auto const & leaf : srl_gs.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(srl_gs.operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "srlg-rro-sub-object";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto srl_gs_name_datas = srl_gs.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), srl_gs_name_datas.begin(), srl_gs_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject::get_children()
{
    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "srl-gs")
    {
        srl_gs.append(value);
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Rro()
    :
    	rro_type{YType::enumeration, "rro-type"}
    	,
    ipv4rro_sub_object(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject>())
	,label_rro_sub_object(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject>())
	,srlg_rro_sub_object(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject>())
	,unnumbered_rro_sub_object(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject>())
{
    ipv4rro_sub_object->parent = this;
    children["ipv4rro-sub-object"] = ipv4rro_sub_object.get();

    label_rro_sub_object->parent = this;
    children["label-rro-sub-object"] = label_rro_sub_object.get();

    srlg_rro_sub_object->parent = this;
    children["srlg-rro-sub-object"] = srlg_rro_sub_object.get();

    unnumbered_rro_sub_object->parent = this;
    children["unnumbered-rro-sub-object"] = unnumbered_rro_sub_object.get();

    yang_name = "rro"; yang_parent_name = "rsb-info";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::~Rro()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::has_data() const
{
    return rro_type.is_set
	|| (ipv4rro_sub_object !=  nullptr && ipv4rro_sub_object->has_data())
	|| (label_rro_sub_object !=  nullptr && label_rro_sub_object->has_data())
	|| (srlg_rro_sub_object !=  nullptr && srlg_rro_sub_object->has_data())
	|| (unnumbered_rro_sub_object !=  nullptr && unnumbered_rro_sub_object->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::has_operation() const
{
    return is_set(operation)
	|| is_set(rro_type.operation)
	|| (ipv4rro_sub_object !=  nullptr && ipv4rro_sub_object->has_operation())
	|| (label_rro_sub_object !=  nullptr && label_rro_sub_object->has_operation())
	|| (srlg_rro_sub_object !=  nullptr && srlg_rro_sub_object->has_operation())
	|| (unnumbered_rro_sub_object !=  nullptr && unnumbered_rro_sub_object->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rro";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (rro_type.is_set || is_set(rro_type.operation)) leaf_name_data.push_back(rro_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4rro-sub-object")
    {
        if(ipv4rro_sub_object != nullptr)
        {
            children["ipv4rro-sub-object"] = ipv4rro_sub_object.get();
        }
        else
        {
            ipv4rro_sub_object = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject>();
            ipv4rro_sub_object->parent = this;
            children["ipv4rro-sub-object"] = ipv4rro_sub_object.get();
        }
        return children.at("ipv4rro-sub-object");
    }

    if(child_yang_name == "label-rro-sub-object")
    {
        if(label_rro_sub_object != nullptr)
        {
            children["label-rro-sub-object"] = label_rro_sub_object.get();
        }
        else
        {
            label_rro_sub_object = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject>();
            label_rro_sub_object->parent = this;
            children["label-rro-sub-object"] = label_rro_sub_object.get();
        }
        return children.at("label-rro-sub-object");
    }

    if(child_yang_name == "srlg-rro-sub-object")
    {
        if(srlg_rro_sub_object != nullptr)
        {
            children["srlg-rro-sub-object"] = srlg_rro_sub_object.get();
        }
        else
        {
            srlg_rro_sub_object = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject>();
            srlg_rro_sub_object->parent = this;
            children["srlg-rro-sub-object"] = srlg_rro_sub_object.get();
        }
        return children.at("srlg-rro-sub-object");
    }

    if(child_yang_name == "unnumbered-rro-sub-object")
    {
        if(unnumbered_rro_sub_object != nullptr)
        {
            children["unnumbered-rro-sub-object"] = unnumbered_rro_sub_object.get();
        }
        else
        {
            unnumbered_rro_sub_object = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject>();
            unnumbered_rro_sub_object->parent = this;
            children["unnumbered-rro-sub-object"] = unnumbered_rro_sub_object.get();
        }
        return children.at("unnumbered-rro-sub-object");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::get_children()
{
    if(children.find("ipv4rro-sub-object") == children.end())
    {
        if(ipv4rro_sub_object != nullptr)
        {
            children["ipv4rro-sub-object"] = ipv4rro_sub_object.get();
        }
    }

    if(children.find("label-rro-sub-object") == children.end())
    {
        if(label_rro_sub_object != nullptr)
        {
            children["label-rro-sub-object"] = label_rro_sub_object.get();
        }
    }

    if(children.find("srlg-rro-sub-object") == children.end())
    {
        if(srlg_rro_sub_object != nullptr)
        {
            children["srlg-rro-sub-object"] = srlg_rro_sub_object.get();
        }
    }

    if(children.find("unnumbered-rro-sub-object") == children.end())
    {
        if(unnumbered_rro_sub_object != nullptr)
        {
            children["unnumbered-rro-sub-object"] = unnumbered_rro_sub_object.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "rro-type")
    {
        rro_type = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::RsbInfo()
    :
    	backup_interface{YType::str, "backup-interface"},
	 backup_label{YType::uint32, "backup-label"},
	 destination_address{YType::str, "destination-address"},
	 is_flow_spec_valid{YType::boolean, "is-flow-spec-valid"},
	 is_rro_valid{YType::boolean, "is-rro-valid"},
	 is_valid{YType::boolean, "is-valid"},
	 out_interface{YType::str, "out-interface"},
	 out_label{YType::uint32, "out-label"}
    	,
    flow_spec(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec>())
	,generic_flow_spec(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec>())
	,generic_out_label(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel>())
{
    flow_spec->parent = this;
    children["flow-spec"] = flow_spec.get();

    generic_flow_spec->parent = this;
    children["generic-flow-spec"] = generic_flow_spec.get();

    generic_out_label->parent = this;
    children["generic-out-label"] = generic_out_label.get();

    yang_name = "rsb-info"; yang_parent_name = "psb-rsb-info";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::~RsbInfo()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::has_data() const
{
    for (std::size_t index=0; index<rro.size(); index++)
    {
        if(rro[index]->has_data())
            return true;
    }
    return backup_interface.is_set
	|| backup_label.is_set
	|| destination_address.is_set
	|| is_flow_spec_valid.is_set
	|| is_rro_valid.is_set
	|| is_valid.is_set
	|| out_interface.is_set
	|| out_label.is_set
	|| (flow_spec !=  nullptr && flow_spec->has_data())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_data())
	|| (generic_out_label !=  nullptr && generic_out_label->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::has_operation() const
{
    for (std::size_t index=0; index<rro.size(); index++)
    {
        if(rro[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(backup_interface.operation)
	|| is_set(backup_label.operation)
	|| is_set(destination_address.operation)
	|| is_set(is_flow_spec_valid.operation)
	|| is_set(is_rro_valid.operation)
	|| is_set(is_valid.operation)
	|| is_set(out_interface.operation)
	|| is_set(out_label.operation)
	|| (flow_spec !=  nullptr && flow_spec->has_operation())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_operation())
	|| (generic_out_label !=  nullptr && generic_out_label->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsb-info";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (backup_interface.is_set || is_set(backup_interface.operation)) leaf_name_data.push_back(backup_interface.get_name_leafdata());
    if (backup_label.is_set || is_set(backup_label.operation)) leaf_name_data.push_back(backup_label.get_name_leafdata());
    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (is_flow_spec_valid.is_set || is_set(is_flow_spec_valid.operation)) leaf_name_data.push_back(is_flow_spec_valid.get_name_leafdata());
    if (is_rro_valid.is_set || is_set(is_rro_valid.operation)) leaf_name_data.push_back(is_rro_valid.get_name_leafdata());
    if (is_valid.is_set || is_set(is_valid.operation)) leaf_name_data.push_back(is_valid.get_name_leafdata());
    if (out_interface.is_set || is_set(out_interface.operation)) leaf_name_data.push_back(out_interface.get_name_leafdata());
    if (out_label.is_set || is_set(out_label.operation)) leaf_name_data.push_back(out_label.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "flow-spec")
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
        else
        {
            flow_spec = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec>();
            flow_spec->parent = this;
            children["flow-spec"] = flow_spec.get();
        }
        return children.at("flow-spec");
    }

    if(child_yang_name == "generic-flow-spec")
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        else
        {
            generic_flow_spec = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec>();
            generic_flow_spec->parent = this;
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        return children.at("generic-flow-spec");
    }

    if(child_yang_name == "generic-out-label")
    {
        if(generic_out_label != nullptr)
        {
            children["generic-out-label"] = generic_out_label.get();
        }
        else
        {
            generic_out_label = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel>();
            generic_out_label->parent = this;
            children["generic-out-label"] = generic_out_label.get();
        }
        return children.at("generic-out-label");
    }

    if(child_yang_name == "rro")
    {
        for(auto const & c : rro)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro>();
        c->parent = this;
        rro.push_back(std::move(c));
        children[segment_path] = rro.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::get_children()
{
    if(children.find("flow-spec") == children.end())
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
    }

    if(children.find("generic-flow-spec") == children.end())
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
    }

    if(children.find("generic-out-label") == children.end())
    {
        if(generic_out_label != nullptr)
        {
            children["generic-out-label"] = generic_out_label.get();
        }
    }

    for (auto const & c : rro)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "backup-interface")
    {
        backup_interface = value;
    }
    if(value_path == "backup-label")
    {
        backup_label = value;
    }
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "is-flow-spec-valid")
    {
        is_flow_spec_valid = value;
    }
    if(value_path == "is-rro-valid")
    {
        is_rro_valid = value;
    }
    if(value_path == "is-valid")
    {
        is_valid = value;
    }
    if(value_path == "out-interface")
    {
        out_interface = value;
    }
    if(value_path == "out-label")
    {
        out_label = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbRsbInfo()
{
    yang_name = "psb-rsb-info"; yang_parent_name = "session-detailed";
}

RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::~PsbRsbInfo()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::has_data() const
{
    for (std::size_t index=0; index<psb_info.size(); index++)
    {
        if(psb_info[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<rsb_info.size(); index++)
    {
        if(rsb_info[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::has_operation() const
{
    for (std::size_t index=0; index<psb_info.size(); index++)
    {
        if(psb_info[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<rsb_info.size(); index++)
    {
        if(rsb_info[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "psb-rsb-info";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "psb-info")
    {
        for(auto const & c : psb_info)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo>();
        c->parent = this;
        psb_info.push_back(std::move(c));
        children[segment_path] = psb_info.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "rsb-info")
    {
        for(auto const & c : rsb_info)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo>();
        c->parent = this;
        rsb_info.push_back(std::move(c));
        children[segment_path] = rsb_info.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::get_children()
{
    for (auto const & c : psb_info)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    for (auto const & c : rsb_info)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::SessionDetaileds::SessionDetailed::SessionDetailed()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 protocol{YType::int32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    compact(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::Compact>())
	,s2l_sub_lsp(std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::S2LSubLsp>())
{
    compact->parent = this;
    children["compact"] = compact.get();

    s2l_sub_lsp->parent = this;
    children["s2l-sub-lsp"] = s2l_sub_lsp.get();

    yang_name = "session-detailed"; yang_parent_name = "session-detaileds";
}

RsvpStandby::SessionDetaileds::SessionDetailed::~SessionDetailed()
{
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::has_data() const
{
    for (std::size_t index=0; index<psb_rsb_info.size(); index++)
    {
        if(psb_rsb_info[index]->has_data())
            return true;
    }
    return destination_address.is_set
	|| destination_port.is_set
	|| extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| vrf_name.is_set
	|| (compact !=  nullptr && compact->has_data())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_data());
}

bool RsvpStandby::SessionDetaileds::SessionDetailed::has_operation() const
{
    for (std::size_t index=0; index<psb_rsb_info.size(); index++)
    {
        if(psb_rsb_info[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(vrf_name.operation)
	|| (compact !=  nullptr && compact->has_operation())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_operation());
}

std::string RsvpStandby::SessionDetaileds::SessionDetailed::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session-detailed";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::SessionDetailed::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::SessionDetailed::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "compact")
    {
        if(compact != nullptr)
        {
            children["compact"] = compact.get();
        }
        else
        {
            compact = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::Compact>();
            compact->parent = this;
            children["compact"] = compact.get();
        }
        return children.at("compact");
    }

    if(child_yang_name == "psb-rsb-info")
    {
        for(auto const & c : psb_rsb_info)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::PsbRsbInfo>();
        c->parent = this;
        psb_rsb_info.push_back(std::move(c));
        children[segment_path] = psb_rsb_info.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "s2l-sub-lsp")
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        else
        {
            s2l_sub_lsp = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed::S2LSubLsp>();
            s2l_sub_lsp->parent = this;
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        return children.at("s2l-sub-lsp");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::SessionDetailed::get_children()
{
    if(children.find("compact") == children.end())
    {
        if(compact != nullptr)
        {
            children["compact"] = compact.get();
        }
    }

    for (auto const & c : psb_rsb_info)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("s2l-sub-lsp") == children.end())
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::SessionDetailed::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

RsvpStandby::SessionDetaileds::SessionDetaileds()
{
    yang_name = "session-detaileds"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::SessionDetaileds::~SessionDetaileds()
{
}

bool RsvpStandby::SessionDetaileds::has_data() const
{
    for (std::size_t index=0; index<session_detailed.size(); index++)
    {
        if(session_detailed[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::SessionDetaileds::has_operation() const
{
    for (std::size_t index=0; index<session_detailed.size(); index++)
    {
        if(session_detailed[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::SessionDetaileds::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session-detaileds";

    return path_buffer.str();

}

EntityPath RsvpStandby::SessionDetaileds::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::SessionDetaileds::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "session-detailed")
    {
        for(auto const & c : session_detailed)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::SessionDetaileds::SessionDetailed>();
        c->parent = this;
        session_detailed.push_back(std::move(c));
        children[segment_path] = session_detailed.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::SessionDetaileds::get_children()
{
    for (auto const & c : session_detailed)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::SessionDetaileds::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::UpTime::UpTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "up-time"; yang_parent_name = "hello-instance-detail";
}

RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::UpTime::~UpTime()
{
}

bool RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::UpTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::UpTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::UpTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "up-time";

    return path_buffer.str();

}

EntityPath RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::UpTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::UpTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::UpTime::get_children()
{
    return children;
}

void RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::UpTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime::CommunicationLostTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "communication-lost-time"; yang_parent_name = "hello-instance-detail";
}

RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime::~CommunicationLostTime()
{
}

bool RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "communication-lost-time";

    return path_buffer.str();

}

EntityPath RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime::get_children()
{
    return children;
}

void RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::HelloInstanceDetail()
    :
    	destination_address{YType::str, "destination-address"},
	 source_address{YType::str, "source-address"},
	 communication_lost_hello_missed{YType::uint16, "communication-lost-hello-missed"},
	 communication_lost_interface_down{YType::uint16, "communication-lost-interface-down"},
	 communication_lost_neighbor_disabled_hello{YType::uint16, "communication-lost-neighbor-disabled-hello"},
	 communication_lost_reason{YType::enumeration, "communication-lost-reason"},
	 communication_lost_wrong_destination_inst{YType::uint16, "communication-lost-wrong-destination-inst"},
	 communication_lost_wrong_source_inst{YType::uint16, "communication-lost-wrong-source-inst"},
	 destination_address_xr{YType::str, "destination-address-xr"},
	 destination_instance{YType::uint32, "destination-instance"},
	 hello_instance_owner{YType::enumeration, "hello-instance-owner"},
	 hello_interface{YType::str, "hello-interface"},
	 hello_interval{YType::uint32, "hello-interval"},
	 hello_messages_received{YType::uint64, "hello-messages-received"},
	 hello_messages_sent{YType::uint64, "hello-messages-sent"},
	 hello_request_suppressed{YType::uint64, "hello-request-suppressed"},
	 instance_type{YType::enumeration, "instance-type"},
	 missed_acks_allowed{YType::uint32, "missed-acks-allowed"},
	 neighbor_hello_state{YType::enumeration, "neighbor-hello-state"},
	 source_address_xr{YType::str, "source-address-xr"},
	 source_instance{YType::uint32, "source-instance"},
	 total_communication_lost{YType::uint16, "total-communication-lost"}
    	,
    communication_lost_time(std::make_unique<RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime>())
	,up_time(std::make_unique<RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::UpTime>())
{
    communication_lost_time->parent = this;
    children["communication-lost-time"] = communication_lost_time.get();

    up_time->parent = this;
    children["up-time"] = up_time.get();

    yang_name = "hello-instance-detail"; yang_parent_name = "hello-instance-details";
}

RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::~HelloInstanceDetail()
{
}

bool RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::has_data() const
{
    return destination_address.is_set
	|| source_address.is_set
	|| communication_lost_hello_missed.is_set
	|| communication_lost_interface_down.is_set
	|| communication_lost_neighbor_disabled_hello.is_set
	|| communication_lost_reason.is_set
	|| communication_lost_wrong_destination_inst.is_set
	|| communication_lost_wrong_source_inst.is_set
	|| destination_address_xr.is_set
	|| destination_instance.is_set
	|| hello_instance_owner.is_set
	|| hello_interface.is_set
	|| hello_interval.is_set
	|| hello_messages_received.is_set
	|| hello_messages_sent.is_set
	|| hello_request_suppressed.is_set
	|| instance_type.is_set
	|| missed_acks_allowed.is_set
	|| neighbor_hello_state.is_set
	|| source_address_xr.is_set
	|| source_instance.is_set
	|| total_communication_lost.is_set
	|| (communication_lost_time !=  nullptr && communication_lost_time->has_data())
	|| (up_time !=  nullptr && up_time->has_data());
}

bool RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(source_address.operation)
	|| is_set(communication_lost_hello_missed.operation)
	|| is_set(communication_lost_interface_down.operation)
	|| is_set(communication_lost_neighbor_disabled_hello.operation)
	|| is_set(communication_lost_reason.operation)
	|| is_set(communication_lost_wrong_destination_inst.operation)
	|| is_set(communication_lost_wrong_source_inst.operation)
	|| is_set(destination_address_xr.operation)
	|| is_set(destination_instance.operation)
	|| is_set(hello_instance_owner.operation)
	|| is_set(hello_interface.operation)
	|| is_set(hello_interval.operation)
	|| is_set(hello_messages_received.operation)
	|| is_set(hello_messages_sent.operation)
	|| is_set(hello_request_suppressed.operation)
	|| is_set(instance_type.operation)
	|| is_set(missed_acks_allowed.operation)
	|| is_set(neighbor_hello_state.operation)
	|| is_set(source_address_xr.operation)
	|| is_set(source_instance.operation)
	|| is_set(total_communication_lost.operation)
	|| (communication_lost_time !=  nullptr && communication_lost_time->has_operation())
	|| (up_time !=  nullptr && up_time->has_operation());
}

std::string RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hello-instance-detail" <<"[destination-address='" <<destination_address.get() <<"']" <<"[source-address='" <<source_address.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/hello-instance-details/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (communication_lost_hello_missed.is_set || is_set(communication_lost_hello_missed.operation)) leaf_name_data.push_back(communication_lost_hello_missed.get_name_leafdata());
    if (communication_lost_interface_down.is_set || is_set(communication_lost_interface_down.operation)) leaf_name_data.push_back(communication_lost_interface_down.get_name_leafdata());
    if (communication_lost_neighbor_disabled_hello.is_set || is_set(communication_lost_neighbor_disabled_hello.operation)) leaf_name_data.push_back(communication_lost_neighbor_disabled_hello.get_name_leafdata());
    if (communication_lost_reason.is_set || is_set(communication_lost_reason.operation)) leaf_name_data.push_back(communication_lost_reason.get_name_leafdata());
    if (communication_lost_wrong_destination_inst.is_set || is_set(communication_lost_wrong_destination_inst.operation)) leaf_name_data.push_back(communication_lost_wrong_destination_inst.get_name_leafdata());
    if (communication_lost_wrong_source_inst.is_set || is_set(communication_lost_wrong_source_inst.operation)) leaf_name_data.push_back(communication_lost_wrong_source_inst.get_name_leafdata());
    if (destination_address_xr.is_set || is_set(destination_address_xr.operation)) leaf_name_data.push_back(destination_address_xr.get_name_leafdata());
    if (destination_instance.is_set || is_set(destination_instance.operation)) leaf_name_data.push_back(destination_instance.get_name_leafdata());
    if (hello_instance_owner.is_set || is_set(hello_instance_owner.operation)) leaf_name_data.push_back(hello_instance_owner.get_name_leafdata());
    if (hello_interface.is_set || is_set(hello_interface.operation)) leaf_name_data.push_back(hello_interface.get_name_leafdata());
    if (hello_interval.is_set || is_set(hello_interval.operation)) leaf_name_data.push_back(hello_interval.get_name_leafdata());
    if (hello_messages_received.is_set || is_set(hello_messages_received.operation)) leaf_name_data.push_back(hello_messages_received.get_name_leafdata());
    if (hello_messages_sent.is_set || is_set(hello_messages_sent.operation)) leaf_name_data.push_back(hello_messages_sent.get_name_leafdata());
    if (hello_request_suppressed.is_set || is_set(hello_request_suppressed.operation)) leaf_name_data.push_back(hello_request_suppressed.get_name_leafdata());
    if (instance_type.is_set || is_set(instance_type.operation)) leaf_name_data.push_back(instance_type.get_name_leafdata());
    if (missed_acks_allowed.is_set || is_set(missed_acks_allowed.operation)) leaf_name_data.push_back(missed_acks_allowed.get_name_leafdata());
    if (neighbor_hello_state.is_set || is_set(neighbor_hello_state.operation)) leaf_name_data.push_back(neighbor_hello_state.get_name_leafdata());
    if (source_address_xr.is_set || is_set(source_address_xr.operation)) leaf_name_data.push_back(source_address_xr.get_name_leafdata());
    if (source_instance.is_set || is_set(source_instance.operation)) leaf_name_data.push_back(source_instance.get_name_leafdata());
    if (total_communication_lost.is_set || is_set(total_communication_lost.operation)) leaf_name_data.push_back(total_communication_lost.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "communication-lost-time")
    {
        if(communication_lost_time != nullptr)
        {
            children["communication-lost-time"] = communication_lost_time.get();
        }
        else
        {
            communication_lost_time = std::make_unique<RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime>();
            communication_lost_time->parent = this;
            children["communication-lost-time"] = communication_lost_time.get();
        }
        return children.at("communication-lost-time");
    }

    if(child_yang_name == "up-time")
    {
        if(up_time != nullptr)
        {
            children["up-time"] = up_time.get();
        }
        else
        {
            up_time = std::make_unique<RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::UpTime>();
            up_time->parent = this;
            children["up-time"] = up_time.get();
        }
        return children.at("up-time");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::get_children()
{
    if(children.find("communication-lost-time") == children.end())
    {
        if(communication_lost_time != nullptr)
        {
            children["communication-lost-time"] = communication_lost_time.get();
        }
    }

    if(children.find("up-time") == children.end())
    {
        if(up_time != nullptr)
        {
            children["up-time"] = up_time.get();
        }
    }

    return children;
}

void RsvpStandby::HelloInstanceDetails::HelloInstanceDetail::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "communication-lost-hello-missed")
    {
        communication_lost_hello_missed = value;
    }
    if(value_path == "communication-lost-interface-down")
    {
        communication_lost_interface_down = value;
    }
    if(value_path == "communication-lost-neighbor-disabled-hello")
    {
        communication_lost_neighbor_disabled_hello = value;
    }
    if(value_path == "communication-lost-reason")
    {
        communication_lost_reason = value;
    }
    if(value_path == "communication-lost-wrong-destination-inst")
    {
        communication_lost_wrong_destination_inst = value;
    }
    if(value_path == "communication-lost-wrong-source-inst")
    {
        communication_lost_wrong_source_inst = value;
    }
    if(value_path == "destination-address-xr")
    {
        destination_address_xr = value;
    }
    if(value_path == "destination-instance")
    {
        destination_instance = value;
    }
    if(value_path == "hello-instance-owner")
    {
        hello_instance_owner = value;
    }
    if(value_path == "hello-interface")
    {
        hello_interface = value;
    }
    if(value_path == "hello-interval")
    {
        hello_interval = value;
    }
    if(value_path == "hello-messages-received")
    {
        hello_messages_received = value;
    }
    if(value_path == "hello-messages-sent")
    {
        hello_messages_sent = value;
    }
    if(value_path == "hello-request-suppressed")
    {
        hello_request_suppressed = value;
    }
    if(value_path == "instance-type")
    {
        instance_type = value;
    }
    if(value_path == "missed-acks-allowed")
    {
        missed_acks_allowed = value;
    }
    if(value_path == "neighbor-hello-state")
    {
        neighbor_hello_state = value;
    }
    if(value_path == "source-address-xr")
    {
        source_address_xr = value;
    }
    if(value_path == "source-instance")
    {
        source_instance = value;
    }
    if(value_path == "total-communication-lost")
    {
        total_communication_lost = value;
    }
}

RsvpStandby::HelloInstanceDetails::HelloInstanceDetails()
{
    yang_name = "hello-instance-details"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::HelloInstanceDetails::~HelloInstanceDetails()
{
}

bool RsvpStandby::HelloInstanceDetails::has_data() const
{
    for (std::size_t index=0; index<hello_instance_detail.size(); index++)
    {
        if(hello_instance_detail[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::HelloInstanceDetails::has_operation() const
{
    for (std::size_t index=0; index<hello_instance_detail.size(); index++)
    {
        if(hello_instance_detail[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::HelloInstanceDetails::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hello-instance-details";

    return path_buffer.str();

}

EntityPath RsvpStandby::HelloInstanceDetails::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::HelloInstanceDetails::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "hello-instance-detail")
    {
        for(auto const & c : hello_instance_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::HelloInstanceDetails::HelloInstanceDetail>();
        c->parent = this;
        hello_instance_detail.push_back(std::move(c));
        children[segment_path] = hello_instance_detail.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::HelloInstanceDetails::get_children()
{
    for (auto const & c : hello_instance_detail)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::HelloInstanceDetails::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags::GlobalNeighborFlags()
    :
    	is_application_mpls{YType::boolean, "is-application-mpls"},
	 is_application_ouni{YType::boolean, "is-application-ouni"}
{
    yang_name = "global-neighbor-flags"; yang_parent_name = "global-neighbor-detail";
}

RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags::~GlobalNeighborFlags()
{
}

bool RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags::has_data() const
{
    return is_application_mpls.is_set
	|| is_application_ouni.is_set;
}

bool RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_application_mpls.operation)
	|| is_set(is_application_ouni.operation);
}

std::string RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "global-neighbor-flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_application_mpls.is_set || is_set(is_application_mpls.operation)) leaf_name_data.push_back(is_application_mpls.get_name_leafdata());
    if (is_application_ouni.is_set || is_set(is_application_ouni.operation)) leaf_name_data.push_back(is_application_ouni.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags::get_children()
{
    return children;
}

void RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-application-mpls")
    {
        is_application_mpls = value;
    }
    if(value_path == "is-application-ouni")
    {
        is_application_ouni = value;
    }
}

RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft::RestartTimeLeft()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "restart-time-left"; yang_parent_name = "global-neighbor-detail";
}

RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft::~RestartTimeLeft()
{
}

bool RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "restart-time-left";

    return path_buffer.str();

}

EntityPath RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft::get_children()
{
    return children;
}

void RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime::RestartTimerExpiryTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "restart-timer-expiry-time"; yang_parent_name = "global-neighbor-detail";
}

RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime::~RestartTimerExpiryTime()
{
}

bool RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "restart-timer-expiry-time";

    return path_buffer.str();

}

EntityPath RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime::get_children()
{
    return children;
}

void RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft::RecoveryTimeLeft()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "recovery-time-left"; yang_parent_name = "global-neighbor-detail";
}

RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft::~RecoveryTimeLeft()
{
}

bool RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "recovery-time-left";

    return path_buffer.str();

}

EntityPath RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft::get_children()
{
    return children;
}

void RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime::RecoveryTimerExpTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "recovery-timer-exp-time"; yang_parent_name = "global-neighbor-detail";
}

RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime::~RecoveryTimerExpTime()
{
}

bool RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "recovery-timer-exp-time";

    return path_buffer.str();

}

EntityPath RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime::get_children()
{
    return children;
}

void RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::UpTime::UpTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "up-time"; yang_parent_name = "global-neighbor-detail";
}

RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::UpTime::~UpTime()
{
}

bool RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::UpTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::UpTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::UpTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "up-time";

    return path_buffer.str();

}

EntityPath RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::UpTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::UpTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::UpTime::get_children()
{
    return children;
}

void RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::UpTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime::LostCommunicationTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "lost-communication-time"; yang_parent_name = "global-neighbor-detail";
}

RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime::~LostCommunicationTime()
{
}

bool RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "lost-communication-time";

    return path_buffer.str();

}

EntityPath RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime::get_children()
{
    return children;
}

void RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborDetail()
    :
    	neighbor_address{YType::str, "neighbor-address"},
	 hello_interval{YType::uint32, "hello-interval"},
	 interface_neighbor{YType::str, "interface-neighbor"},
	 is_gr_enabled{YType::boolean, "is-gr-enabled"},
	 is_recovery_timer_running{YType::boolean, "is-recovery-timer-running"},
	 is_restart_timer_running{YType::boolean, "is-restart-timer-running"},
	 local_node_address{YType::str, "local-node-address"},
	 lost_communication_reason{YType::enumeration, "lost-communication-reason"},
	 lost_communication_total{YType::uint16, "lost-communication-total"},
	 missed_hellos{YType::uint8, "missed-hellos"},
	 neighbor_hello_state{YType::enumeration, "neighbor-hello-state"},
	 node_address{YType::str, "node-address"},
	 pending_states{YType::uint32, "pending-states"},
	 recovery_time{YType::uint32, "recovery-time"},
	 restart_state{YType::enumeration, "restart-state"},
	 restart_time{YType::uint32, "restart-time"}
    	,
    global_neighbor_flags(std::make_unique<RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags>())
	,recovery_time_left(std::make_unique<RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft>())
	,recovery_timer_exp_time(std::make_unique<RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime>())
	,restart_time_left(std::make_unique<RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft>())
	,restart_timer_expiry_time(std::make_unique<RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime>())
{
    global_neighbor_flags->parent = this;
    children["global-neighbor-flags"] = global_neighbor_flags.get();

    recovery_time_left->parent = this;
    children["recovery-time-left"] = recovery_time_left.get();

    recovery_timer_exp_time->parent = this;
    children["recovery-timer-exp-time"] = recovery_timer_exp_time.get();

    restart_time_left->parent = this;
    children["restart-time-left"] = restart_time_left.get();

    restart_timer_expiry_time->parent = this;
    children["restart-timer-expiry-time"] = restart_timer_expiry_time.get();

    yang_name = "global-neighbor-detail"; yang_parent_name = "global-neighbor-details";
}

RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::~GlobalNeighborDetail()
{
}

bool RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::has_data() const
{
    for (std::size_t index=0; index<lost_communication_time.size(); index++)
    {
        if(lost_communication_time[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<up_time.size(); index++)
    {
        if(up_time[index]->has_data())
            return true;
    }
    for (auto const & leaf : interface_neighbor.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    for (auto const & leaf : local_node_address.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    for (auto const & leaf : lost_communication_reason.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    for (auto const & leaf : lost_communication_total.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    for (auto const & leaf : neighbor_hello_state.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return neighbor_address.is_set
	|| hello_interval.is_set
	|| is_gr_enabled.is_set
	|| is_recovery_timer_running.is_set
	|| is_restart_timer_running.is_set
	|| missed_hellos.is_set
	|| node_address.is_set
	|| pending_states.is_set
	|| recovery_time.is_set
	|| restart_state.is_set
	|| restart_time.is_set
	|| (global_neighbor_flags !=  nullptr && global_neighbor_flags->has_data())
	|| (recovery_time_left !=  nullptr && recovery_time_left->has_data())
	|| (recovery_timer_exp_time !=  nullptr && recovery_timer_exp_time->has_data())
	|| (restart_time_left !=  nullptr && restart_time_left->has_data())
	|| (restart_timer_expiry_time !=  nullptr && restart_timer_expiry_time->has_data());
}

bool RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::has_operation() const
{
    for (std::size_t index=0; index<lost_communication_time.size(); index++)
    {
        if(lost_communication_time[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<up_time.size(); index++)
    {
        if(up_time[index]->has_operation())
            return true;
    }
    for (auto const & leaf : interface_neighbor.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    for (auto const & leaf : local_node_address.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    for (auto const & leaf : lost_communication_reason.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    for (auto const & leaf : lost_communication_total.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    for (auto const & leaf : neighbor_hello_state.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(neighbor_address.operation)
	|| is_set(hello_interval.operation)
	|| is_set(interface_neighbor.operation)
	|| is_set(is_gr_enabled.operation)
	|| is_set(is_recovery_timer_running.operation)
	|| is_set(is_restart_timer_running.operation)
	|| is_set(local_node_address.operation)
	|| is_set(lost_communication_reason.operation)
	|| is_set(lost_communication_total.operation)
	|| is_set(missed_hellos.operation)
	|| is_set(neighbor_hello_state.operation)
	|| is_set(node_address.operation)
	|| is_set(pending_states.operation)
	|| is_set(recovery_time.operation)
	|| is_set(restart_state.operation)
	|| is_set(restart_time.operation)
	|| (global_neighbor_flags !=  nullptr && global_neighbor_flags->has_operation())
	|| (recovery_time_left !=  nullptr && recovery_time_left->has_operation())
	|| (recovery_timer_exp_time !=  nullptr && recovery_timer_exp_time->has_operation())
	|| (restart_time_left !=  nullptr && restart_time_left->has_operation())
	|| (restart_timer_expiry_time !=  nullptr && restart_timer_expiry_time->has_operation());
}

std::string RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "global-neighbor-detail" <<"[neighbor-address='" <<neighbor_address.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-details/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (hello_interval.is_set || is_set(hello_interval.operation)) leaf_name_data.push_back(hello_interval.get_name_leafdata());
    if (is_gr_enabled.is_set || is_set(is_gr_enabled.operation)) leaf_name_data.push_back(is_gr_enabled.get_name_leafdata());
    if (is_recovery_timer_running.is_set || is_set(is_recovery_timer_running.operation)) leaf_name_data.push_back(is_recovery_timer_running.get_name_leafdata());
    if (is_restart_timer_running.is_set || is_set(is_restart_timer_running.operation)) leaf_name_data.push_back(is_restart_timer_running.get_name_leafdata());
    if (missed_hellos.is_set || is_set(missed_hellos.operation)) leaf_name_data.push_back(missed_hellos.get_name_leafdata());
    if (node_address.is_set || is_set(node_address.operation)) leaf_name_data.push_back(node_address.get_name_leafdata());
    if (pending_states.is_set || is_set(pending_states.operation)) leaf_name_data.push_back(pending_states.get_name_leafdata());
    if (recovery_time.is_set || is_set(recovery_time.operation)) leaf_name_data.push_back(recovery_time.get_name_leafdata());
    if (restart_state.is_set || is_set(restart_state.operation)) leaf_name_data.push_back(restart_state.get_name_leafdata());
    if (restart_time.is_set || is_set(restart_time.operation)) leaf_name_data.push_back(restart_time.get_name_leafdata());

    auto interface_neighbor_name_datas = interface_neighbor.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), interface_neighbor_name_datas.begin(), interface_neighbor_name_datas.end());
    auto local_node_address_name_datas = local_node_address.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), local_node_address_name_datas.begin(), local_node_address_name_datas.end());
    auto lost_communication_reason_name_datas = lost_communication_reason.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), lost_communication_reason_name_datas.begin(), lost_communication_reason_name_datas.end());
    auto lost_communication_total_name_datas = lost_communication_total.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), lost_communication_total_name_datas.begin(), lost_communication_total_name_datas.end());
    auto neighbor_hello_state_name_datas = neighbor_hello_state.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), neighbor_hello_state_name_datas.begin(), neighbor_hello_state_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "global-neighbor-flags")
    {
        if(global_neighbor_flags != nullptr)
        {
            children["global-neighbor-flags"] = global_neighbor_flags.get();
        }
        else
        {
            global_neighbor_flags = std::make_unique<RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags>();
            global_neighbor_flags->parent = this;
            children["global-neighbor-flags"] = global_neighbor_flags.get();
        }
        return children.at("global-neighbor-flags");
    }

    if(child_yang_name == "lost-communication-time")
    {
        for(auto const & c : lost_communication_time)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime>();
        c->parent = this;
        lost_communication_time.push_back(std::move(c));
        children[segment_path] = lost_communication_time.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "recovery-time-left")
    {
        if(recovery_time_left != nullptr)
        {
            children["recovery-time-left"] = recovery_time_left.get();
        }
        else
        {
            recovery_time_left = std::make_unique<RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft>();
            recovery_time_left->parent = this;
            children["recovery-time-left"] = recovery_time_left.get();
        }
        return children.at("recovery-time-left");
    }

    if(child_yang_name == "recovery-timer-exp-time")
    {
        if(recovery_timer_exp_time != nullptr)
        {
            children["recovery-timer-exp-time"] = recovery_timer_exp_time.get();
        }
        else
        {
            recovery_timer_exp_time = std::make_unique<RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime>();
            recovery_timer_exp_time->parent = this;
            children["recovery-timer-exp-time"] = recovery_timer_exp_time.get();
        }
        return children.at("recovery-timer-exp-time");
    }

    if(child_yang_name == "restart-time-left")
    {
        if(restart_time_left != nullptr)
        {
            children["restart-time-left"] = restart_time_left.get();
        }
        else
        {
            restart_time_left = std::make_unique<RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft>();
            restart_time_left->parent = this;
            children["restart-time-left"] = restart_time_left.get();
        }
        return children.at("restart-time-left");
    }

    if(child_yang_name == "restart-timer-expiry-time")
    {
        if(restart_timer_expiry_time != nullptr)
        {
            children["restart-timer-expiry-time"] = restart_timer_expiry_time.get();
        }
        else
        {
            restart_timer_expiry_time = std::make_unique<RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime>();
            restart_timer_expiry_time->parent = this;
            children["restart-timer-expiry-time"] = restart_timer_expiry_time.get();
        }
        return children.at("restart-timer-expiry-time");
    }

    if(child_yang_name == "up-time")
    {
        for(auto const & c : up_time)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::UpTime>();
        c->parent = this;
        up_time.push_back(std::move(c));
        children[segment_path] = up_time.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::get_children()
{
    if(children.find("global-neighbor-flags") == children.end())
    {
        if(global_neighbor_flags != nullptr)
        {
            children["global-neighbor-flags"] = global_neighbor_flags.get();
        }
    }

    for (auto const & c : lost_communication_time)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("recovery-time-left") == children.end())
    {
        if(recovery_time_left != nullptr)
        {
            children["recovery-time-left"] = recovery_time_left.get();
        }
    }

    if(children.find("recovery-timer-exp-time") == children.end())
    {
        if(recovery_timer_exp_time != nullptr)
        {
            children["recovery-timer-exp-time"] = recovery_timer_exp_time.get();
        }
    }

    if(children.find("restart-time-left") == children.end())
    {
        if(restart_time_left != nullptr)
        {
            children["restart-time-left"] = restart_time_left.get();
        }
    }

    if(children.find("restart-timer-expiry-time") == children.end())
    {
        if(restart_timer_expiry_time != nullptr)
        {
            children["restart-timer-expiry-time"] = restart_timer_expiry_time.get();
        }
    }

    for (auto const & c : up_time)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "hello-interval")
    {
        hello_interval = value;
    }
    if(value_path == "interface-neighbor")
    {
        interface_neighbor.append(value);
    }
    if(value_path == "is-gr-enabled")
    {
        is_gr_enabled = value;
    }
    if(value_path == "is-recovery-timer-running")
    {
        is_recovery_timer_running = value;
    }
    if(value_path == "is-restart-timer-running")
    {
        is_restart_timer_running = value;
    }
    if(value_path == "local-node-address")
    {
        local_node_address.append(value);
    }
    if(value_path == "lost-communication-reason")
    {
        lost_communication_reason.append(value);
    }
    if(value_path == "lost-communication-total")
    {
        lost_communication_total.append(value);
    }
    if(value_path == "missed-hellos")
    {
        missed_hellos = value;
    }
    if(value_path == "neighbor-hello-state")
    {
        neighbor_hello_state.append(value);
    }
    if(value_path == "node-address")
    {
        node_address = value;
    }
    if(value_path == "pending-states")
    {
        pending_states = value;
    }
    if(value_path == "recovery-time")
    {
        recovery_time = value;
    }
    if(value_path == "restart-state")
    {
        restart_state = value;
    }
    if(value_path == "restart-time")
    {
        restart_time = value;
    }
}

RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetails()
{
    yang_name = "global-neighbor-details"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::GlobalNeighborDetails::~GlobalNeighborDetails()
{
}

bool RsvpStandby::GlobalNeighborDetails::has_data() const
{
    for (std::size_t index=0; index<global_neighbor_detail.size(); index++)
    {
        if(global_neighbor_detail[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::GlobalNeighborDetails::has_operation() const
{
    for (std::size_t index=0; index<global_neighbor_detail.size(); index++)
    {
        if(global_neighbor_detail[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::GlobalNeighborDetails::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "global-neighbor-details";

    return path_buffer.str();

}

EntityPath RsvpStandby::GlobalNeighborDetails::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::GlobalNeighborDetails::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "global-neighbor-detail")
    {
        for(auto const & c : global_neighbor_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::GlobalNeighborDetails::GlobalNeighborDetail>();
        c->parent = this;
        global_neighbor_detail.push_back(std::move(c));
        children[segment_path] = global_neighbor_detail.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::GlobalNeighborDetails::get_children()
{
    for (auto const & c : global_neighbor_detail)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::GlobalNeighborDetails::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::~RsvpSession()
{
}

bool RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

RsvpStandby::PsbBriefs::PsbBrief::Session::Session()
    :
    rsvp_session(std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "psb-brief";
}

RsvpStandby::PsbBriefs::PsbBrief::Session::~Session()
{
}

bool RsvpStandby::PsbBriefs::PsbBrief::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool RsvpStandby::PsbBriefs::PsbBrief::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string RsvpStandby::PsbBriefs::PsbBrief::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbBriefs::PsbBrief::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbBriefs::PsbBrief::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbBriefs::PsbBrief::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void RsvpStandby::PsbBriefs::PsbBrief::Session::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::PsbBriefs::PsbBrief::S2LSubLsp::S2LSubLsp()
    :
    	s2l_destination_address{YType::str, "s2l-destination-address"}
{
    yang_name = "s2l-sub-lsp"; yang_parent_name = "psb-brief";
}

RsvpStandby::PsbBriefs::PsbBrief::S2LSubLsp::~S2LSubLsp()
{
}

bool RsvpStandby::PsbBriefs::PsbBrief::S2LSubLsp::has_data() const
{
    return s2l_destination_address.is_set;
}

bool RsvpStandby::PsbBriefs::PsbBrief::S2LSubLsp::has_operation() const
{
    return is_set(operation)
	|| is_set(s2l_destination_address.operation);
}

std::string RsvpStandby::PsbBriefs::PsbBrief::S2LSubLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "s2l-sub-lsp";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbBriefs::PsbBrief::S2LSubLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (s2l_destination_address.is_set || is_set(s2l_destination_address.operation)) leaf_name_data.push_back(s2l_destination_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbBriefs::PsbBrief::S2LSubLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbBriefs::PsbBrief::S2LSubLsp::get_children()
{
    return children;
}

void RsvpStandby::PsbBriefs::PsbBrief::S2LSubLsp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "s2l-destination-address")
    {
        s2l_destination_address = value;
    }
}

RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session::UdpIpv4Session()
    :
    	source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"}
{
    yang_name = "udp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session::~UdpIpv4Session()
{
}

bool RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session::has_data() const
{
    return source_address.is_set
	|| source_port.is_set;
}

bool RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation);
}

std::string RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "udp-ipv4-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/template/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session::get_children()
{
    return children;
}

void RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
}

RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session::P2MpIpv4Session()
    :
    	p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"},
	 sub_group_id{YType::uint16, "sub-group-id"}
{
    yang_name = "p2mp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session::~P2MpIpv4Session()
{
}

bool RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session::has_data() const
{
    return p2mp_sub_group_origin.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set;
}

bool RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation);
}

std::string RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "p2mp-ipv4-session";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/template/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session::get_children()
{
    return children;
}

void RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
}

RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::RsvpFilter()
    :
    	filter_type{YType::enumeration, "filter-type"}
    	,
    p2mp_ipv4_session(std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session>())
	,udp_ipv4_session(std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session>())
{
    p2mp_ipv4_session->parent = this;
    children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();

    udp_ipv4_session->parent = this;
    children["udp-ipv4-session"] = udp_ipv4_session.get();

    yang_name = "rsvp-filter"; yang_parent_name = "template";
}

RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::~RsvpFilter()
{
}

bool RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::has_data() const
{
    return filter_type.is_set
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_data())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_data());
}

bool RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::has_operation() const
{
    return is_set(operation)
	|| is_set(filter_type.operation)
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_operation())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_operation());
}

std::string RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-filter";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/template/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (filter_type.is_set || is_set(filter_type.operation)) leaf_name_data.push_back(filter_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "p2mp-ipv4-session")
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        else
        {
            p2mp_ipv4_session = std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session>();
            p2mp_ipv4_session->parent = this;
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        return children.at("p2mp-ipv4-session");
    }

    if(child_yang_name == "udp-ipv4-session")
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        else
        {
            udp_ipv4_session = std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session>();
            udp_ipv4_session->parent = this;
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        return children.at("udp-ipv4-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::get_children()
{
    if(children.find("p2mp-ipv4-session") == children.end())
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
    }

    if(children.find("udp-ipv4-session") == children.end())
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
    }

    return children;
}

void RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "filter-type")
    {
        filter_type = value;
    }
}

RsvpStandby::PsbBriefs::PsbBrief::Template_::Template_()
    :
    rsvp_filter(std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter>())
{
    rsvp_filter->parent = this;
    children["rsvp-filter"] = rsvp_filter.get();

    yang_name = "template"; yang_parent_name = "psb-brief";
}

RsvpStandby::PsbBriefs::PsbBrief::Template_::~Template_()
{
}

bool RsvpStandby::PsbBriefs::PsbBrief::Template_::has_data() const
{
    return (rsvp_filter !=  nullptr && rsvp_filter->has_data());
}

bool RsvpStandby::PsbBriefs::PsbBrief::Template_::has_operation() const
{
    return is_set(operation)
	|| (rsvp_filter !=  nullptr && rsvp_filter->has_operation());
}

std::string RsvpStandby::PsbBriefs::PsbBrief::Template_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "template";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbBriefs::PsbBrief::Template_::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbBriefs::PsbBrief::Template_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-filter")
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
        else
        {
            rsvp_filter = std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Template_::RsvpFilter>();
            rsvp_filter->parent = this;
            children["rsvp-filter"] = rsvp_filter.get();
        }
        return children.at("rsvp-filter");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbBriefs::PsbBrief::Template_::get_children()
{
    if(children.find("rsvp-filter") == children.end())
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
    }

    return children;
}

void RsvpStandby::PsbBriefs::PsbBrief::Template_::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags::SessAttributeFlags()
    :
    	is_bandwidth_protect{YType::boolean, "is-bandwidth-protect"},
	 is_local_protect{YType::boolean, "is-local-protect"},
	 is_node_protect{YType::boolean, "is-node-protect"},
	 is_record_labels{YType::boolean, "is-record-labels"},
	 is_shared_explicit_requested{YType::boolean, "is-shared-explicit-requested"}
{
    yang_name = "sess-attribute-flags"; yang_parent_name = "session-attribute";
}

RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags::~SessAttributeFlags()
{
}

bool RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags::has_data() const
{
    return is_bandwidth_protect.is_set
	|| is_local_protect.is_set
	|| is_node_protect.is_set
	|| is_record_labels.is_set
	|| is_shared_explicit_requested.is_set;
}

bool RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bandwidth_protect.operation)
	|| is_set(is_local_protect.operation)
	|| is_set(is_node_protect.operation)
	|| is_set(is_record_labels.operation)
	|| is_set(is_shared_explicit_requested.operation);
}

std::string RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sess-attribute-flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/session-attribute/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bandwidth_protect.is_set || is_set(is_bandwidth_protect.operation)) leaf_name_data.push_back(is_bandwidth_protect.get_name_leafdata());
    if (is_local_protect.is_set || is_set(is_local_protect.operation)) leaf_name_data.push_back(is_local_protect.get_name_leafdata());
    if (is_node_protect.is_set || is_set(is_node_protect.operation)) leaf_name_data.push_back(is_node_protect.get_name_leafdata());
    if (is_record_labels.is_set || is_set(is_record_labels.operation)) leaf_name_data.push_back(is_record_labels.get_name_leafdata());
    if (is_shared_explicit_requested.is_set || is_set(is_shared_explicit_requested.operation)) leaf_name_data.push_back(is_shared_explicit_requested.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags::get_children()
{
    return children;
}

void RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bandwidth-protect")
    {
        is_bandwidth_protect = value;
    }
    if(value_path == "is-local-protect")
    {
        is_local_protect = value;
    }
    if(value_path == "is-node-protect")
    {
        is_node_protect = value;
    }
    if(value_path == "is-record-labels")
    {
        is_record_labels = value;
    }
    if(value_path == "is-shared-explicit-requested")
    {
        is_shared_explicit_requested = value;
    }
}

RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::SessionAttribute()
    :
    	reservation_priority{YType::uint8, "reservation-priority"},
	 setup_priority{YType::uint8, "setup-priority"}
    	,
    sess_attribute_flags(std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags>())
{
    sess_attribute_flags->parent = this;
    children["sess-attribute-flags"] = sess_attribute_flags.get();

    yang_name = "session-attribute"; yang_parent_name = "psb-brief";
}

RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::~SessionAttribute()
{
}

bool RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::has_data() const
{
    return reservation_priority.is_set
	|| setup_priority.is_set
	|| (sess_attribute_flags !=  nullptr && sess_attribute_flags->has_data());
}

bool RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::has_operation() const
{
    return is_set(operation)
	|| is_set(reservation_priority.operation)
	|| is_set(setup_priority.operation)
	|| (sess_attribute_flags !=  nullptr && sess_attribute_flags->has_operation());
}

std::string RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session-attribute";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (reservation_priority.is_set || is_set(reservation_priority.operation)) leaf_name_data.push_back(reservation_priority.get_name_leafdata());
    if (setup_priority.is_set || is_set(setup_priority.operation)) leaf_name_data.push_back(setup_priority.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "sess-attribute-flags")
    {
        if(sess_attribute_flags != nullptr)
        {
            children["sess-attribute-flags"] = sess_attribute_flags.get();
        }
        else
        {
            sess_attribute_flags = std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags>();
            sess_attribute_flags->parent = this;
            children["sess-attribute-flags"] = sess_attribute_flags.get();
        }
        return children.at("sess-attribute-flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::get_children()
{
    if(children.find("sess-attribute-flags") == children.end())
    {
        if(sess_attribute_flags != nullptr)
        {
            children["sess-attribute-flags"] = sess_attribute_flags.get();
        }
    }

    return children;
}

void RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "reservation-priority")
    {
        reservation_priority = value;
    }
    if(value_path == "setup-priority")
    {
        setup_priority = value;
    }
}

RsvpStandby::PsbBriefs::PsbBrief::TrafficSpec::TrafficSpec()
    :
    	traffic_average_rate{YType::uint64, "traffic-average-rate"},
	 traffic_max_burst{YType::uint64, "traffic-max-burst"},
	 traffic_max_unit{YType::uint32, "traffic-max-unit"},
	 traffic_min_unit{YType::uint32, "traffic-min-unit"},
	 traffic_peak_rate{YType::uint64, "traffic-peak-rate"}
{
    yang_name = "traffic-spec"; yang_parent_name = "psb-brief";
}

RsvpStandby::PsbBriefs::PsbBrief::TrafficSpec::~TrafficSpec()
{
}

bool RsvpStandby::PsbBriefs::PsbBrief::TrafficSpec::has_data() const
{
    return traffic_average_rate.is_set
	|| traffic_max_burst.is_set
	|| traffic_max_unit.is_set
	|| traffic_min_unit.is_set
	|| traffic_peak_rate.is_set;
}

bool RsvpStandby::PsbBriefs::PsbBrief::TrafficSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_average_rate.operation)
	|| is_set(traffic_max_burst.operation)
	|| is_set(traffic_max_unit.operation)
	|| is_set(traffic_min_unit.operation)
	|| is_set(traffic_peak_rate.operation);
}

std::string RsvpStandby::PsbBriefs::PsbBrief::TrafficSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "traffic-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbBriefs::PsbBrief::TrafficSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_average_rate.is_set || is_set(traffic_average_rate.operation)) leaf_name_data.push_back(traffic_average_rate.get_name_leafdata());
    if (traffic_max_burst.is_set || is_set(traffic_max_burst.operation)) leaf_name_data.push_back(traffic_max_burst.get_name_leafdata());
    if (traffic_max_unit.is_set || is_set(traffic_max_unit.operation)) leaf_name_data.push_back(traffic_max_unit.get_name_leafdata());
    if (traffic_min_unit.is_set || is_set(traffic_min_unit.operation)) leaf_name_data.push_back(traffic_min_unit.get_name_leafdata());
    if (traffic_peak_rate.is_set || is_set(traffic_peak_rate.operation)) leaf_name_data.push_back(traffic_peak_rate.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbBriefs::PsbBrief::TrafficSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbBriefs::PsbBrief::TrafficSpec::get_children()
{
    return children;
}

void RsvpStandby::PsbBriefs::PsbBrief::TrafficSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-average-rate")
    {
        traffic_average_rate = value;
    }
    if(value_path == "traffic-max-burst")
    {
        traffic_max_burst = value;
    }
    if(value_path == "traffic-max-unit")
    {
        traffic_max_unit = value;
    }
    if(value_path == "traffic-min-unit")
    {
        traffic_min_unit = value;
    }
    if(value_path == "traffic-peak-rate")
    {
        traffic_peak_rate = value;
    }
}

RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec::G709OtnTspec()
    :
    	traffic_bit_rate{YType::uint64, "traffic-bit-rate"},
	 traffic_multiplier{YType::uint16, "traffic-multiplier"},
	 traffic_nvc{YType::uint16, "traffic-nvc"},
	 traffic_signal_type{YType::uint8, "traffic-signal-type"}
{
    yang_name = "g709otn-tspec"; yang_parent_name = "generic-traffic-spec";
}

RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec::~G709OtnTspec()
{
}

bool RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec::has_data() const
{
    return traffic_bit_rate.is_set
	|| traffic_multiplier.is_set
	|| traffic_nvc.is_set
	|| traffic_signal_type.is_set;
}

bool RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_bit_rate.operation)
	|| is_set(traffic_multiplier.operation)
	|| is_set(traffic_nvc.operation)
	|| is_set(traffic_signal_type.operation);
}

std::string RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-tspec";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/generic-traffic-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_bit_rate.is_set || is_set(traffic_bit_rate.operation)) leaf_name_data.push_back(traffic_bit_rate.get_name_leafdata());
    if (traffic_multiplier.is_set || is_set(traffic_multiplier.operation)) leaf_name_data.push_back(traffic_multiplier.get_name_leafdata());
    if (traffic_nvc.is_set || is_set(traffic_nvc.operation)) leaf_name_data.push_back(traffic_nvc.get_name_leafdata());
    if (traffic_signal_type.is_set || is_set(traffic_signal_type.operation)) leaf_name_data.push_back(traffic_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec::get_children()
{
    return children;
}

void RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-bit-rate")
    {
        traffic_bit_rate = value;
    }
    if(value_path == "traffic-multiplier")
    {
        traffic_multiplier = value;
    }
    if(value_path == "traffic-nvc")
    {
        traffic_nvc = value;
    }
    if(value_path == "traffic-signal-type")
    {
        traffic_signal_type = value;
    }
}

RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec::IntsrvTspec()
    :
    	traffic_average_rate{YType::uint64, "traffic-average-rate"},
	 traffic_max_burst{YType::uint64, "traffic-max-burst"},
	 traffic_max_unit{YType::uint32, "traffic-max-unit"},
	 traffic_min_unit{YType::uint32, "traffic-min-unit"},
	 traffic_peak_rate{YType::uint64, "traffic-peak-rate"}
{
    yang_name = "intsrv-tspec"; yang_parent_name = "generic-traffic-spec";
}

RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec::~IntsrvTspec()
{
}

bool RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec::has_data() const
{
    return traffic_average_rate.is_set
	|| traffic_max_burst.is_set
	|| traffic_max_unit.is_set
	|| traffic_min_unit.is_set
	|| traffic_peak_rate.is_set;
}

bool RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_average_rate.operation)
	|| is_set(traffic_max_burst.operation)
	|| is_set(traffic_max_unit.operation)
	|| is_set(traffic_min_unit.operation)
	|| is_set(traffic_peak_rate.operation);
}

std::string RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "intsrv-tspec";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/generic-traffic-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_average_rate.is_set || is_set(traffic_average_rate.operation)) leaf_name_data.push_back(traffic_average_rate.get_name_leafdata());
    if (traffic_max_burst.is_set || is_set(traffic_max_burst.operation)) leaf_name_data.push_back(traffic_max_burst.get_name_leafdata());
    if (traffic_max_unit.is_set || is_set(traffic_max_unit.operation)) leaf_name_data.push_back(traffic_max_unit.get_name_leafdata());
    if (traffic_min_unit.is_set || is_set(traffic_min_unit.operation)) leaf_name_data.push_back(traffic_min_unit.get_name_leafdata());
    if (traffic_peak_rate.is_set || is_set(traffic_peak_rate.operation)) leaf_name_data.push_back(traffic_peak_rate.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec::get_children()
{
    return children;
}

void RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-average-rate")
    {
        traffic_average_rate = value;
    }
    if(value_path == "traffic-max-burst")
    {
        traffic_max_burst = value;
    }
    if(value_path == "traffic-max-unit")
    {
        traffic_max_unit = value;
    }
    if(value_path == "traffic-min-unit")
    {
        traffic_min_unit = value;
    }
    if(value_path == "traffic-peak-rate")
    {
        traffic_peak_rate = value;
    }
}

RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::GenericTrafficSpec()
    :
    	tspec_type{YType::enumeration, "tspec-type"}
    	,
    g709otn_tspec(std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec>())
	,intsrv_tspec(std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec>())
{
    g709otn_tspec->parent = this;
    children["g709otn-tspec"] = g709otn_tspec.get();

    intsrv_tspec->parent = this;
    children["intsrv-tspec"] = intsrv_tspec.get();

    yang_name = "generic-traffic-spec"; yang_parent_name = "psb-brief";
}

RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::~GenericTrafficSpec()
{
}

bool RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::has_data() const
{
    return tspec_type.is_set
	|| (g709otn_tspec !=  nullptr && g709otn_tspec->has_data())
	|| (intsrv_tspec !=  nullptr && intsrv_tspec->has_data());
}

bool RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(tspec_type.operation)
	|| (g709otn_tspec !=  nullptr && g709otn_tspec->has_operation())
	|| (intsrv_tspec !=  nullptr && intsrv_tspec->has_operation());
}

std::string RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-traffic-spec";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (tspec_type.is_set || is_set(tspec_type.operation)) leaf_name_data.push_back(tspec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-tspec")
    {
        if(g709otn_tspec != nullptr)
        {
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
        else
        {
            g709otn_tspec = std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec>();
            g709otn_tspec->parent = this;
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
        return children.at("g709otn-tspec");
    }

    if(child_yang_name == "intsrv-tspec")
    {
        if(intsrv_tspec != nullptr)
        {
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
        else
        {
            intsrv_tspec = std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec>();
            intsrv_tspec->parent = this;
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
        return children.at("intsrv-tspec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::get_children()
{
    if(children.find("g709otn-tspec") == children.end())
    {
        if(g709otn_tspec != nullptr)
        {
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
    }

    if(children.find("intsrv-tspec") == children.end())
    {
        if(intsrv_tspec != nullptr)
        {
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
    }

    return children;
}

void RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "tspec-type")
    {
        tspec_type = value;
    }
}

RsvpStandby::PsbBriefs::PsbBrief::PsbBrief()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 input_interface{YType::str, "input-interface"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 protocol{YType::int32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::int32, "source-port"},
	 sub_group_id{YType::int32, "sub-group-id"},
	 sub_group_origin{YType::str, "sub-group-origin"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    generic_traffic_spec(std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec>())
	,s2l_sub_lsp(std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::S2LSubLsp>())
	,session(std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Session>())
	,session_attribute(std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute>())
	,template_(std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Template_>())
	,traffic_spec(std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::TrafficSpec>())
{
    generic_traffic_spec->parent = this;
    children["generic-traffic-spec"] = generic_traffic_spec.get();

    s2l_sub_lsp->parent = this;
    children["s2l-sub-lsp"] = s2l_sub_lsp.get();

    session->parent = this;
    children["session"] = session.get();

    session_attribute->parent = this;
    children["session-attribute"] = session_attribute.get();

    template_->parent = this;
    children["template"] = template_.get();

    traffic_spec->parent = this;
    children["traffic-spec"] = traffic_spec.get();

    yang_name = "psb-brief"; yang_parent_name = "psb-briefs";
}

RsvpStandby::PsbBriefs::PsbBrief::~PsbBrief()
{
}

bool RsvpStandby::PsbBriefs::PsbBrief::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| extended_tunnel_id.is_set
	|| input_interface.is_set
	|| p2mp_id.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set
	|| sub_group_origin.is_set
	|| vrf_name.is_set
	|| (generic_traffic_spec !=  nullptr && generic_traffic_spec->has_data())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_data())
	|| (session !=  nullptr && session->has_data())
	|| (session_attribute !=  nullptr && session_attribute->has_data())
	|| (template_ !=  nullptr && template_->has_data())
	|| (traffic_spec !=  nullptr && traffic_spec->has_data());
}

bool RsvpStandby::PsbBriefs::PsbBrief::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(input_interface.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(sub_group_origin.operation)
	|| is_set(vrf_name.operation)
	|| (generic_traffic_spec !=  nullptr && generic_traffic_spec->has_operation())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_operation())
	|| (session !=  nullptr && session->has_operation())
	|| (session_attribute !=  nullptr && session_attribute->has_operation())
	|| (template_ !=  nullptr && template_->has_operation())
	|| (traffic_spec !=  nullptr && traffic_spec->has_operation());
}

std::string RsvpStandby::PsbBriefs::PsbBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "psb-brief";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbBriefs::PsbBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (input_interface.is_set || is_set(input_interface.operation)) leaf_name_data.push_back(input_interface.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (sub_group_origin.is_set || is_set(sub_group_origin.operation)) leaf_name_data.push_back(sub_group_origin.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbBriefs::PsbBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generic-traffic-spec")
    {
        if(generic_traffic_spec != nullptr)
        {
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
        else
        {
            generic_traffic_spec = std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::GenericTrafficSpec>();
            generic_traffic_spec->parent = this;
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
        return children.at("generic-traffic-spec");
    }

    if(child_yang_name == "s2l-sub-lsp")
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        else
        {
            s2l_sub_lsp = std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::S2LSubLsp>();
            s2l_sub_lsp->parent = this;
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        return children.at("s2l-sub-lsp");
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    if(child_yang_name == "session-attribute")
    {
        if(session_attribute != nullptr)
        {
            children["session-attribute"] = session_attribute.get();
        }
        else
        {
            session_attribute = std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::SessionAttribute>();
            session_attribute->parent = this;
            children["session-attribute"] = session_attribute.get();
        }
        return children.at("session-attribute");
    }

    if(child_yang_name == "template")
    {
        if(template_ != nullptr)
        {
            children["template"] = template_.get();
        }
        else
        {
            template_ = std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::Template_>();
            template_->parent = this;
            children["template"] = template_.get();
        }
        return children.at("template");
    }

    if(child_yang_name == "traffic-spec")
    {
        if(traffic_spec != nullptr)
        {
            children["traffic-spec"] = traffic_spec.get();
        }
        else
        {
            traffic_spec = std::make_unique<RsvpStandby::PsbBriefs::PsbBrief::TrafficSpec>();
            traffic_spec->parent = this;
            children["traffic-spec"] = traffic_spec.get();
        }
        return children.at("traffic-spec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbBriefs::PsbBrief::get_children()
{
    if(children.find("generic-traffic-spec") == children.end())
    {
        if(generic_traffic_spec != nullptr)
        {
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
    }

    if(children.find("s2l-sub-lsp") == children.end())
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
    }

    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    if(children.find("session-attribute") == children.end())
    {
        if(session_attribute != nullptr)
        {
            children["session-attribute"] = session_attribute.get();
        }
    }

    if(children.find("template") == children.end())
    {
        if(template_ != nullptr)
        {
            children["template"] = template_.get();
        }
    }

    if(children.find("traffic-spec") == children.end())
    {
        if(traffic_spec != nullptr)
        {
            children["traffic-spec"] = traffic_spec.get();
        }
    }

    return children;
}

void RsvpStandby::PsbBriefs::PsbBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "input-interface")
    {
        input_interface = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "sub-group-origin")
    {
        sub_group_origin = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

RsvpStandby::PsbBriefs::PsbBriefs()
{
    yang_name = "psb-briefs"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::PsbBriefs::~PsbBriefs()
{
}

bool RsvpStandby::PsbBriefs::has_data() const
{
    for (std::size_t index=0; index<psb_brief.size(); index++)
    {
        if(psb_brief[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::PsbBriefs::has_operation() const
{
    for (std::size_t index=0; index<psb_brief.size(); index++)
    {
        if(psb_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::PsbBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "psb-briefs";

    return path_buffer.str();

}

EntityPath RsvpStandby::PsbBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::PsbBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "psb-brief")
    {
        for(auto const & c : psb_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::PsbBriefs::PsbBrief>();
        c->parent = this;
        psb_brief.push_back(std::move(c));
        children[segment_path] = psb_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::PsbBriefs::get_children()
{
    for (auto const & c : psb_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::PsbBriefs::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags::GlobalNeighborFlags()
    :
    	is_application_mpls{YType::boolean, "is-application-mpls"},
	 is_application_ouni{YType::boolean, "is-application-ouni"}
{
    yang_name = "global-neighbor-flags"; yang_parent_name = "global-neighbor-brief";
}

RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags::~GlobalNeighborFlags()
{
}

bool RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags::has_data() const
{
    return is_application_mpls.is_set
	|| is_application_ouni.is_set;
}

bool RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_application_mpls.operation)
	|| is_set(is_application_ouni.operation);
}

std::string RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "global-neighbor-flags";

    return path_buffer.str();

}

EntityPath RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_application_mpls.is_set || is_set(is_application_mpls.operation)) leaf_name_data.push_back(is_application_mpls.get_name_leafdata());
    if (is_application_ouni.is_set || is_set(is_application_ouni.operation)) leaf_name_data.push_back(is_application_ouni.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags::get_children()
{
    return children;
}

void RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-application-mpls")
    {
        is_application_mpls = value;
    }
    if(value_path == "is-application-ouni")
    {
        is_application_ouni = value;
    }
}

RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime::UpTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "up-time"; yang_parent_name = "global-neighbor-brief";
}

RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime::~UpTime()
{
}

bool RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "up-time";

    return path_buffer.str();

}

EntityPath RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime::get_children()
{
    return children;
}

void RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime::LostCommunicationTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "lost-communication-time"; yang_parent_name = "global-neighbor-brief";
}

RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime::~LostCommunicationTime()
{
}

bool RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "lost-communication-time";

    return path_buffer.str();

}

EntityPath RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime::get_children()
{
    return children;
}

void RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborBrief()
    :
    	neighbor_address{YType::str, "neighbor-address"},
	 is_gr_enabled{YType::boolean, "is-gr-enabled"},
	 local_node_address{YType::str, "local-node-address"},
	 lost_communication_reason{YType::enumeration, "lost-communication-reason"},
	 lost_communication_total{YType::uint16, "lost-communication-total"},
	 neighbor_hello_state{YType::enumeration, "neighbor-hello-state"},
	 node_address{YType::str, "node-address"},
	 restart_state{YType::enumeration, "restart-state"}
    	,
    global_neighbor_flags(std::make_unique<RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags>())
{
    global_neighbor_flags->parent = this;
    children["global-neighbor-flags"] = global_neighbor_flags.get();

    yang_name = "global-neighbor-brief"; yang_parent_name = "global-neighbor-briefs";
}

RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::~GlobalNeighborBrief()
{
}

bool RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::has_data() const
{
    for (std::size_t index=0; index<lost_communication_time.size(); index++)
    {
        if(lost_communication_time[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<up_time.size(); index++)
    {
        if(up_time[index]->has_data())
            return true;
    }
    for (auto const & leaf : local_node_address.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    for (auto const & leaf : lost_communication_reason.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    for (auto const & leaf : lost_communication_total.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    for (auto const & leaf : neighbor_hello_state.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return neighbor_address.is_set
	|| is_gr_enabled.is_set
	|| node_address.is_set
	|| restart_state.is_set
	|| (global_neighbor_flags !=  nullptr && global_neighbor_flags->has_data());
}

bool RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::has_operation() const
{
    for (std::size_t index=0; index<lost_communication_time.size(); index++)
    {
        if(lost_communication_time[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<up_time.size(); index++)
    {
        if(up_time[index]->has_operation())
            return true;
    }
    for (auto const & leaf : local_node_address.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    for (auto const & leaf : lost_communication_reason.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    for (auto const & leaf : lost_communication_total.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    for (auto const & leaf : neighbor_hello_state.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(neighbor_address.operation)
	|| is_set(is_gr_enabled.operation)
	|| is_set(local_node_address.operation)
	|| is_set(lost_communication_reason.operation)
	|| is_set(lost_communication_total.operation)
	|| is_set(neighbor_hello_state.operation)
	|| is_set(node_address.operation)
	|| is_set(restart_state.operation)
	|| (global_neighbor_flags !=  nullptr && global_neighbor_flags->has_operation());
}

std::string RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "global-neighbor-brief" <<"[neighbor-address='" <<neighbor_address.get() <<"']";

    return path_buffer.str();

}

EntityPath RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (is_gr_enabled.is_set || is_set(is_gr_enabled.operation)) leaf_name_data.push_back(is_gr_enabled.get_name_leafdata());
    if (node_address.is_set || is_set(node_address.operation)) leaf_name_data.push_back(node_address.get_name_leafdata());
    if (restart_state.is_set || is_set(restart_state.operation)) leaf_name_data.push_back(restart_state.get_name_leafdata());

    auto local_node_address_name_datas = local_node_address.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), local_node_address_name_datas.begin(), local_node_address_name_datas.end());
    auto lost_communication_reason_name_datas = lost_communication_reason.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), lost_communication_reason_name_datas.begin(), lost_communication_reason_name_datas.end());
    auto lost_communication_total_name_datas = lost_communication_total.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), lost_communication_total_name_datas.begin(), lost_communication_total_name_datas.end());
    auto neighbor_hello_state_name_datas = neighbor_hello_state.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), neighbor_hello_state_name_datas.begin(), neighbor_hello_state_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "global-neighbor-flags")
    {
        if(global_neighbor_flags != nullptr)
        {
            children["global-neighbor-flags"] = global_neighbor_flags.get();
        }
        else
        {
            global_neighbor_flags = std::make_unique<RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags>();
            global_neighbor_flags->parent = this;
            children["global-neighbor-flags"] = global_neighbor_flags.get();
        }
        return children.at("global-neighbor-flags");
    }

    if(child_yang_name == "lost-communication-time")
    {
        for(auto const & c : lost_communication_time)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime>();
        c->parent = this;
        lost_communication_time.push_back(std::move(c));
        children[segment_path] = lost_communication_time.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "up-time")
    {
        for(auto const & c : up_time)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime>();
        c->parent = this;
        up_time.push_back(std::move(c));
        children[segment_path] = up_time.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::get_children()
{
    if(children.find("global-neighbor-flags") == children.end())
    {
        if(global_neighbor_flags != nullptr)
        {
            children["global-neighbor-flags"] = global_neighbor_flags.get();
        }
    }

    for (auto const & c : lost_communication_time)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    for (auto const & c : up_time)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "is-gr-enabled")
    {
        is_gr_enabled = value;
    }
    if(value_path == "local-node-address")
    {
        local_node_address.append(value);
    }
    if(value_path == "lost-communication-reason")
    {
        lost_communication_reason.append(value);
    }
    if(value_path == "lost-communication-total")
    {
        lost_communication_total.append(value);
    }
    if(value_path == "neighbor-hello-state")
    {
        neighbor_hello_state.append(value);
    }
    if(value_path == "node-address")
    {
        node_address = value;
    }
    if(value_path == "restart-state")
    {
        restart_state = value;
    }
}

RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBriefs()
{
    yang_name = "global-neighbor-briefs"; yang_parent_name = "rsvp-standby";
}

RsvpStandby::GlobalNeighborBriefs::~GlobalNeighborBriefs()
{
}

bool RsvpStandby::GlobalNeighborBriefs::has_data() const
{
    for (std::size_t index=0; index<global_neighbor_brief.size(); index++)
    {
        if(global_neighbor_brief[index]->has_data())
            return true;
    }
    return false;
}

bool RsvpStandby::GlobalNeighborBriefs::has_operation() const
{
    for (std::size_t index=0; index<global_neighbor_brief.size(); index++)
    {
        if(global_neighbor_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string RsvpStandby::GlobalNeighborBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "global-neighbor-briefs";

    return path_buffer.str();

}

EntityPath RsvpStandby::GlobalNeighborBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::GlobalNeighborBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "global-neighbor-brief")
    {
        for(auto const & c : global_neighbor_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<RsvpStandby::GlobalNeighborBriefs::GlobalNeighborBrief>();
        c->parent = this;
        global_neighbor_brief.push_back(std::move(c));
        children[segment_path] = global_neighbor_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::GlobalNeighborBriefs::get_children()
{
    for (auto const & c : global_neighbor_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void RsvpStandby::GlobalNeighborBriefs::set_value(const std::string & value_path, std::string value)
{
}

RsvpStandby::RsvpStandby()
    :
    authentication_briefs(std::make_unique<RsvpStandby::AuthenticationBriefs>())
	,authentication_details(std::make_unique<RsvpStandby::AuthenticationDetails>())
	,counters(std::make_unique<RsvpStandby::Counters>())
	,frr_summary(std::make_unique<RsvpStandby::FrrSummary>())
	,frrs(std::make_unique<RsvpStandby::Frrs>())
	,global_neighbor_briefs(std::make_unique<RsvpStandby::GlobalNeighborBriefs>())
	,global_neighbor_details(std::make_unique<RsvpStandby::GlobalNeighborDetails>())
	,graceful_restart(std::make_unique<RsvpStandby::GracefulRestart>())
	,hello_instance_briefs(std::make_unique<RsvpStandby::HelloInstanceBriefs>())
	,hello_instance_details(std::make_unique<RsvpStandby::HelloInstanceDetails>())
	,hello_interface_instance_briefs(std::make_unique<RsvpStandby::HelloInterfaceInstanceBriefs>())
	,hello_interface_instance_details(std::make_unique<RsvpStandby::HelloInterfaceInstanceDetails>())
	,interface_briefs(std::make_unique<RsvpStandby::InterfaceBriefs>())
	,interface_detaileds(std::make_unique<RsvpStandby::InterfaceDetaileds>())
	,interface_neighbor_briefs(std::make_unique<RsvpStandby::InterfaceNeighborBriefs>())
	,interface_neighbor_details(std::make_unique<RsvpStandby::InterfaceNeighborDetails>())
	,interface_summaries(std::make_unique<RsvpStandby::InterfaceSummaries>())
	,nsr(std::make_unique<RsvpStandby::Nsr>())
	,open_config(std::make_unique<RsvpStandby::OpenConfig>())
	,psb_briefs(std::make_unique<RsvpStandby::PsbBriefs>())
	,psb_detaileds(std::make_unique<RsvpStandby::PsbDetaileds>())
	,request_briefs(std::make_unique<RsvpStandby::RequestBriefs>())
	,request_details(std::make_unique<RsvpStandby::RequestDetails>())
	,rsb_briefs(std::make_unique<RsvpStandby::RsbBriefs>())
	,rsb_detaileds(std::make_unique<RsvpStandby::RsbDetaileds>())
	,session_briefs(std::make_unique<RsvpStandby::SessionBriefs>())
	,session_detaileds(std::make_unique<RsvpStandby::SessionDetaileds>())
	,summary(std::make_unique<RsvpStandby::Summary>())
{
    authentication_briefs->parent = this;
    children["authentication-briefs"] = authentication_briefs.get();

    authentication_details->parent = this;
    children["authentication-details"] = authentication_details.get();

    counters->parent = this;
    children["counters"] = counters.get();

    frr_summary->parent = this;
    children["frr-summary"] = frr_summary.get();

    frrs->parent = this;
    children["frrs"] = frrs.get();

    global_neighbor_briefs->parent = this;
    children["global-neighbor-briefs"] = global_neighbor_briefs.get();

    global_neighbor_details->parent = this;
    children["global-neighbor-details"] = global_neighbor_details.get();

    graceful_restart->parent = this;
    children["graceful-restart"] = graceful_restart.get();

    hello_instance_briefs->parent = this;
    children["hello-instance-briefs"] = hello_instance_briefs.get();

    hello_instance_details->parent = this;
    children["hello-instance-details"] = hello_instance_details.get();

    hello_interface_instance_briefs->parent = this;
    children["hello-interface-instance-briefs"] = hello_interface_instance_briefs.get();

    hello_interface_instance_details->parent = this;
    children["hello-interface-instance-details"] = hello_interface_instance_details.get();

    interface_briefs->parent = this;
    children["interface-briefs"] = interface_briefs.get();

    interface_detaileds->parent = this;
    children["interface-detaileds"] = interface_detaileds.get();

    interface_neighbor_briefs->parent = this;
    children["interface-neighbor-briefs"] = interface_neighbor_briefs.get();

    interface_neighbor_details->parent = this;
    children["interface-neighbor-details"] = interface_neighbor_details.get();

    interface_summaries->parent = this;
    children["interface-summaries"] = interface_summaries.get();

    nsr->parent = this;
    children["nsr"] = nsr.get();

    open_config->parent = this;
    children["open-config"] = open_config.get();

    psb_briefs->parent = this;
    children["psb-briefs"] = psb_briefs.get();

    psb_detaileds->parent = this;
    children["psb-detaileds"] = psb_detaileds.get();

    request_briefs->parent = this;
    children["request-briefs"] = request_briefs.get();

    request_details->parent = this;
    children["request-details"] = request_details.get();

    rsb_briefs->parent = this;
    children["rsb-briefs"] = rsb_briefs.get();

    rsb_detaileds->parent = this;
    children["rsb-detaileds"] = rsb_detaileds.get();

    session_briefs->parent = this;
    children["session-briefs"] = session_briefs.get();

    session_detaileds->parent = this;
    children["session-detaileds"] = session_detaileds.get();

    summary->parent = this;
    children["summary"] = summary.get();

    yang_name = "rsvp-standby"; yang_parent_name = "Cisco-IOS-XR-ip-rsvp-oper";
}

RsvpStandby::~RsvpStandby()
{
}

bool RsvpStandby::has_data() const
{
    return (authentication_briefs !=  nullptr && authentication_briefs->has_data())
	|| (authentication_details !=  nullptr && authentication_details->has_data())
	|| (counters !=  nullptr && counters->has_data())
	|| (frr_summary !=  nullptr && frr_summary->has_data())
	|| (frrs !=  nullptr && frrs->has_data())
	|| (global_neighbor_briefs !=  nullptr && global_neighbor_briefs->has_data())
	|| (global_neighbor_details !=  nullptr && global_neighbor_details->has_data())
	|| (graceful_restart !=  nullptr && graceful_restart->has_data())
	|| (hello_instance_briefs !=  nullptr && hello_instance_briefs->has_data())
	|| (hello_instance_details !=  nullptr && hello_instance_details->has_data())
	|| (hello_interface_instance_briefs !=  nullptr && hello_interface_instance_briefs->has_data())
	|| (hello_interface_instance_details !=  nullptr && hello_interface_instance_details->has_data())
	|| (interface_briefs !=  nullptr && interface_briefs->has_data())
	|| (interface_detaileds !=  nullptr && interface_detaileds->has_data())
	|| (interface_neighbor_briefs !=  nullptr && interface_neighbor_briefs->has_data())
	|| (interface_neighbor_details !=  nullptr && interface_neighbor_details->has_data())
	|| (interface_summaries !=  nullptr && interface_summaries->has_data())
	|| (nsr !=  nullptr && nsr->has_data())
	|| (open_config !=  nullptr && open_config->has_data())
	|| (psb_briefs !=  nullptr && psb_briefs->has_data())
	|| (psb_detaileds !=  nullptr && psb_detaileds->has_data())
	|| (request_briefs !=  nullptr && request_briefs->has_data())
	|| (request_details !=  nullptr && request_details->has_data())
	|| (rsb_briefs !=  nullptr && rsb_briefs->has_data())
	|| (rsb_detaileds !=  nullptr && rsb_detaileds->has_data())
	|| (session_briefs !=  nullptr && session_briefs->has_data())
	|| (session_detaileds !=  nullptr && session_detaileds->has_data())
	|| (summary !=  nullptr && summary->has_data());
}

bool RsvpStandby::has_operation() const
{
    return is_set(operation)
	|| (authentication_briefs !=  nullptr && authentication_briefs->has_operation())
	|| (authentication_details !=  nullptr && authentication_details->has_operation())
	|| (counters !=  nullptr && counters->has_operation())
	|| (frr_summary !=  nullptr && frr_summary->has_operation())
	|| (frrs !=  nullptr && frrs->has_operation())
	|| (global_neighbor_briefs !=  nullptr && global_neighbor_briefs->has_operation())
	|| (global_neighbor_details !=  nullptr && global_neighbor_details->has_operation())
	|| (graceful_restart !=  nullptr && graceful_restart->has_operation())
	|| (hello_instance_briefs !=  nullptr && hello_instance_briefs->has_operation())
	|| (hello_instance_details !=  nullptr && hello_instance_details->has_operation())
	|| (hello_interface_instance_briefs !=  nullptr && hello_interface_instance_briefs->has_operation())
	|| (hello_interface_instance_details !=  nullptr && hello_interface_instance_details->has_operation())
	|| (interface_briefs !=  nullptr && interface_briefs->has_operation())
	|| (interface_detaileds !=  nullptr && interface_detaileds->has_operation())
	|| (interface_neighbor_briefs !=  nullptr && interface_neighbor_briefs->has_operation())
	|| (interface_neighbor_details !=  nullptr && interface_neighbor_details->has_operation())
	|| (interface_summaries !=  nullptr && interface_summaries->has_operation())
	|| (nsr !=  nullptr && nsr->has_operation())
	|| (open_config !=  nullptr && open_config->has_operation())
	|| (psb_briefs !=  nullptr && psb_briefs->has_operation())
	|| (psb_detaileds !=  nullptr && psb_detaileds->has_operation())
	|| (request_briefs !=  nullptr && request_briefs->has_operation())
	|| (request_details !=  nullptr && request_details->has_operation())
	|| (rsb_briefs !=  nullptr && rsb_briefs->has_operation())
	|| (rsb_detaileds !=  nullptr && rsb_detaileds->has_operation())
	|| (session_briefs !=  nullptr && session_briefs->has_operation())
	|| (session_detaileds !=  nullptr && session_detaileds->has_operation())
	|| (summary !=  nullptr && summary->has_operation());
}

std::string RsvpStandby::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby";

    return path_buffer.str();

}

EntityPath RsvpStandby::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor != nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor has to be nullptr for top-level node"});
    }

    path_buffer << get_segment_path();
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* RsvpStandby::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "authentication-briefs")
    {
        if(authentication_briefs != nullptr)
        {
            children["authentication-briefs"] = authentication_briefs.get();
        }
        else
        {
            authentication_briefs = std::make_unique<RsvpStandby::AuthenticationBriefs>();
            authentication_briefs->parent = this;
            children["authentication-briefs"] = authentication_briefs.get();
        }
        return children.at("authentication-briefs");
    }

    if(child_yang_name == "authentication-details")
    {
        if(authentication_details != nullptr)
        {
            children["authentication-details"] = authentication_details.get();
        }
        else
        {
            authentication_details = std::make_unique<RsvpStandby::AuthenticationDetails>();
            authentication_details->parent = this;
            children["authentication-details"] = authentication_details.get();
        }
        return children.at("authentication-details");
    }

    if(child_yang_name == "counters")
    {
        if(counters != nullptr)
        {
            children["counters"] = counters.get();
        }
        else
        {
            counters = std::make_unique<RsvpStandby::Counters>();
            counters->parent = this;
            children["counters"] = counters.get();
        }
        return children.at("counters");
    }

    if(child_yang_name == "frr-summary")
    {
        if(frr_summary != nullptr)
        {
            children["frr-summary"] = frr_summary.get();
        }
        else
        {
            frr_summary = std::make_unique<RsvpStandby::FrrSummary>();
            frr_summary->parent = this;
            children["frr-summary"] = frr_summary.get();
        }
        return children.at("frr-summary");
    }

    if(child_yang_name == "frrs")
    {
        if(frrs != nullptr)
        {
            children["frrs"] = frrs.get();
        }
        else
        {
            frrs = std::make_unique<RsvpStandby::Frrs>();
            frrs->parent = this;
            children["frrs"] = frrs.get();
        }
        return children.at("frrs");
    }

    if(child_yang_name == "global-neighbor-briefs")
    {
        if(global_neighbor_briefs != nullptr)
        {
            children["global-neighbor-briefs"] = global_neighbor_briefs.get();
        }
        else
        {
            global_neighbor_briefs = std::make_unique<RsvpStandby::GlobalNeighborBriefs>();
            global_neighbor_briefs->parent = this;
            children["global-neighbor-briefs"] = global_neighbor_briefs.get();
        }
        return children.at("global-neighbor-briefs");
    }

    if(child_yang_name == "global-neighbor-details")
    {
        if(global_neighbor_details != nullptr)
        {
            children["global-neighbor-details"] = global_neighbor_details.get();
        }
        else
        {
            global_neighbor_details = std::make_unique<RsvpStandby::GlobalNeighborDetails>();
            global_neighbor_details->parent = this;
            children["global-neighbor-details"] = global_neighbor_details.get();
        }
        return children.at("global-neighbor-details");
    }

    if(child_yang_name == "graceful-restart")
    {
        if(graceful_restart != nullptr)
        {
            children["graceful-restart"] = graceful_restart.get();
        }
        else
        {
            graceful_restart = std::make_unique<RsvpStandby::GracefulRestart>();
            graceful_restart->parent = this;
            children["graceful-restart"] = graceful_restart.get();
        }
        return children.at("graceful-restart");
    }

    if(child_yang_name == "hello-instance-briefs")
    {
        if(hello_instance_briefs != nullptr)
        {
            children["hello-instance-briefs"] = hello_instance_briefs.get();
        }
        else
        {
            hello_instance_briefs = std::make_unique<RsvpStandby::HelloInstanceBriefs>();
            hello_instance_briefs->parent = this;
            children["hello-instance-briefs"] = hello_instance_briefs.get();
        }
        return children.at("hello-instance-briefs");
    }

    if(child_yang_name == "hello-instance-details")
    {
        if(hello_instance_details != nullptr)
        {
            children["hello-instance-details"] = hello_instance_details.get();
        }
        else
        {
            hello_instance_details = std::make_unique<RsvpStandby::HelloInstanceDetails>();
            hello_instance_details->parent = this;
            children["hello-instance-details"] = hello_instance_details.get();
        }
        return children.at("hello-instance-details");
    }

    if(child_yang_name == "hello-interface-instance-briefs")
    {
        if(hello_interface_instance_briefs != nullptr)
        {
            children["hello-interface-instance-briefs"] = hello_interface_instance_briefs.get();
        }
        else
        {
            hello_interface_instance_briefs = std::make_unique<RsvpStandby::HelloInterfaceInstanceBriefs>();
            hello_interface_instance_briefs->parent = this;
            children["hello-interface-instance-briefs"] = hello_interface_instance_briefs.get();
        }
        return children.at("hello-interface-instance-briefs");
    }

    if(child_yang_name == "hello-interface-instance-details")
    {
        if(hello_interface_instance_details != nullptr)
        {
            children["hello-interface-instance-details"] = hello_interface_instance_details.get();
        }
        else
        {
            hello_interface_instance_details = std::make_unique<RsvpStandby::HelloInterfaceInstanceDetails>();
            hello_interface_instance_details->parent = this;
            children["hello-interface-instance-details"] = hello_interface_instance_details.get();
        }
        return children.at("hello-interface-instance-details");
    }

    if(child_yang_name == "interface-briefs")
    {
        if(interface_briefs != nullptr)
        {
            children["interface-briefs"] = interface_briefs.get();
        }
        else
        {
            interface_briefs = std::make_unique<RsvpStandby::InterfaceBriefs>();
            interface_briefs->parent = this;
            children["interface-briefs"] = interface_briefs.get();
        }
        return children.at("interface-briefs");
    }

    if(child_yang_name == "interface-detaileds")
    {
        if(interface_detaileds != nullptr)
        {
            children["interface-detaileds"] = interface_detaileds.get();
        }
        else
        {
            interface_detaileds = std::make_unique<RsvpStandby::InterfaceDetaileds>();
            interface_detaileds->parent = this;
            children["interface-detaileds"] = interface_detaileds.get();
        }
        return children.at("interface-detaileds");
    }

    if(child_yang_name == "interface-neighbor-briefs")
    {
        if(interface_neighbor_briefs != nullptr)
        {
            children["interface-neighbor-briefs"] = interface_neighbor_briefs.get();
        }
        else
        {
            interface_neighbor_briefs = std::make_unique<RsvpStandby::InterfaceNeighborBriefs>();
            interface_neighbor_briefs->parent = this;
            children["interface-neighbor-briefs"] = interface_neighbor_briefs.get();
        }
        return children.at("interface-neighbor-briefs");
    }

    if(child_yang_name == "interface-neighbor-details")
    {
        if(interface_neighbor_details != nullptr)
        {
            children["interface-neighbor-details"] = interface_neighbor_details.get();
        }
        else
        {
            interface_neighbor_details = std::make_unique<RsvpStandby::InterfaceNeighborDetails>();
            interface_neighbor_details->parent = this;
            children["interface-neighbor-details"] = interface_neighbor_details.get();
        }
        return children.at("interface-neighbor-details");
    }

    if(child_yang_name == "interface-summaries")
    {
        if(interface_summaries != nullptr)
        {
            children["interface-summaries"] = interface_summaries.get();
        }
        else
        {
            interface_summaries = std::make_unique<RsvpStandby::InterfaceSummaries>();
            interface_summaries->parent = this;
            children["interface-summaries"] = interface_summaries.get();
        }
        return children.at("interface-summaries");
    }

    if(child_yang_name == "nsr")
    {
        if(nsr != nullptr)
        {
            children["nsr"] = nsr.get();
        }
        else
        {
            nsr = std::make_unique<RsvpStandby::Nsr>();
            nsr->parent = this;
            children["nsr"] = nsr.get();
        }
        return children.at("nsr");
    }

    if(child_yang_name == "open-config")
    {
        if(open_config != nullptr)
        {
            children["open-config"] = open_config.get();
        }
        else
        {
            open_config = std::make_unique<RsvpStandby::OpenConfig>();
            open_config->parent = this;
            children["open-config"] = open_config.get();
        }
        return children.at("open-config");
    }

    if(child_yang_name == "psb-briefs")
    {
        if(psb_briefs != nullptr)
        {
            children["psb-briefs"] = psb_briefs.get();
        }
        else
        {
            psb_briefs = std::make_unique<RsvpStandby::PsbBriefs>();
            psb_briefs->parent = this;
            children["psb-briefs"] = psb_briefs.get();
        }
        return children.at("psb-briefs");
    }

    if(child_yang_name == "psb-detaileds")
    {
        if(psb_detaileds != nullptr)
        {
            children["psb-detaileds"] = psb_detaileds.get();
        }
        else
        {
            psb_detaileds = std::make_unique<RsvpStandby::PsbDetaileds>();
            psb_detaileds->parent = this;
            children["psb-detaileds"] = psb_detaileds.get();
        }
        return children.at("psb-detaileds");
    }

    if(child_yang_name == "request-briefs")
    {
        if(request_briefs != nullptr)
        {
            children["request-briefs"] = request_briefs.get();
        }
        else
        {
            request_briefs = std::make_unique<RsvpStandby::RequestBriefs>();
            request_briefs->parent = this;
            children["request-briefs"] = request_briefs.get();
        }
        return children.at("request-briefs");
    }

    if(child_yang_name == "request-details")
    {
        if(request_details != nullptr)
        {
            children["request-details"] = request_details.get();
        }
        else
        {
            request_details = std::make_unique<RsvpStandby::RequestDetails>();
            request_details->parent = this;
            children["request-details"] = request_details.get();
        }
        return children.at("request-details");
    }

    if(child_yang_name == "rsb-briefs")
    {
        if(rsb_briefs != nullptr)
        {
            children["rsb-briefs"] = rsb_briefs.get();
        }
        else
        {
            rsb_briefs = std::make_unique<RsvpStandby::RsbBriefs>();
            rsb_briefs->parent = this;
            children["rsb-briefs"] = rsb_briefs.get();
        }
        return children.at("rsb-briefs");
    }

    if(child_yang_name == "rsb-detaileds")
    {
        if(rsb_detaileds != nullptr)
        {
            children["rsb-detaileds"] = rsb_detaileds.get();
        }
        else
        {
            rsb_detaileds = std::make_unique<RsvpStandby::RsbDetaileds>();
            rsb_detaileds->parent = this;
            children["rsb-detaileds"] = rsb_detaileds.get();
        }
        return children.at("rsb-detaileds");
    }

    if(child_yang_name == "session-briefs")
    {
        if(session_briefs != nullptr)
        {
            children["session-briefs"] = session_briefs.get();
        }
        else
        {
            session_briefs = std::make_unique<RsvpStandby::SessionBriefs>();
            session_briefs->parent = this;
            children["session-briefs"] = session_briefs.get();
        }
        return children.at("session-briefs");
    }

    if(child_yang_name == "session-detaileds")
    {
        if(session_detaileds != nullptr)
        {
            children["session-detaileds"] = session_detaileds.get();
        }
        else
        {
            session_detaileds = std::make_unique<RsvpStandby::SessionDetaileds>();
            session_detaileds->parent = this;
            children["session-detaileds"] = session_detaileds.get();
        }
        return children.at("session-detaileds");
    }

    if(child_yang_name == "summary")
    {
        if(summary != nullptr)
        {
            children["summary"] = summary.get();
        }
        else
        {
            summary = std::make_unique<RsvpStandby::Summary>();
            summary->parent = this;
            children["summary"] = summary.get();
        }
        return children.at("summary");
    }

    return nullptr;
}

std::map<std::string, Entity*> & RsvpStandby::get_children()
{
    if(children.find("authentication-briefs") == children.end())
    {
        if(authentication_briefs != nullptr)
        {
            children["authentication-briefs"] = authentication_briefs.get();
        }
    }

    if(children.find("authentication-details") == children.end())
    {
        if(authentication_details != nullptr)
        {
            children["authentication-details"] = authentication_details.get();
        }
    }

    if(children.find("counters") == children.end())
    {
        if(counters != nullptr)
        {
            children["counters"] = counters.get();
        }
    }

    if(children.find("frr-summary") == children.end())
    {
        if(frr_summary != nullptr)
        {
            children["frr-summary"] = frr_summary.get();
        }
    }

    if(children.find("frrs") == children.end())
    {
        if(frrs != nullptr)
        {
            children["frrs"] = frrs.get();
        }
    }

    if(children.find("global-neighbor-briefs") == children.end())
    {
        if(global_neighbor_briefs != nullptr)
        {
            children["global-neighbor-briefs"] = global_neighbor_briefs.get();
        }
    }

    if(children.find("global-neighbor-details") == children.end())
    {
        if(global_neighbor_details != nullptr)
        {
            children["global-neighbor-details"] = global_neighbor_details.get();
        }
    }

    if(children.find("graceful-restart") == children.end())
    {
        if(graceful_restart != nullptr)
        {
            children["graceful-restart"] = graceful_restart.get();
        }
    }

    if(children.find("hello-instance-briefs") == children.end())
    {
        if(hello_instance_briefs != nullptr)
        {
            children["hello-instance-briefs"] = hello_instance_briefs.get();
        }
    }

    if(children.find("hello-instance-details") == children.end())
    {
        if(hello_instance_details != nullptr)
        {
            children["hello-instance-details"] = hello_instance_details.get();
        }
    }

    if(children.find("hello-interface-instance-briefs") == children.end())
    {
        if(hello_interface_instance_briefs != nullptr)
        {
            children["hello-interface-instance-briefs"] = hello_interface_instance_briefs.get();
        }
    }

    if(children.find("hello-interface-instance-details") == children.end())
    {
        if(hello_interface_instance_details != nullptr)
        {
            children["hello-interface-instance-details"] = hello_interface_instance_details.get();
        }
    }

    if(children.find("interface-briefs") == children.end())
    {
        if(interface_briefs != nullptr)
        {
            children["interface-briefs"] = interface_briefs.get();
        }
    }

    if(children.find("interface-detaileds") == children.end())
    {
        if(interface_detaileds != nullptr)
        {
            children["interface-detaileds"] = interface_detaileds.get();
        }
    }

    if(children.find("interface-neighbor-briefs") == children.end())
    {
        if(interface_neighbor_briefs != nullptr)
        {
            children["interface-neighbor-briefs"] = interface_neighbor_briefs.get();
        }
    }

    if(children.find("interface-neighbor-details") == children.end())
    {
        if(interface_neighbor_details != nullptr)
        {
            children["interface-neighbor-details"] = interface_neighbor_details.get();
        }
    }

    if(children.find("interface-summaries") == children.end())
    {
        if(interface_summaries != nullptr)
        {
            children["interface-summaries"] = interface_summaries.get();
        }
    }

    if(children.find("nsr") == children.end())
    {
        if(nsr != nullptr)
        {
            children["nsr"] = nsr.get();
        }
    }

    if(children.find("open-config") == children.end())
    {
        if(open_config != nullptr)
        {
            children["open-config"] = open_config.get();
        }
    }

    if(children.find("psb-briefs") == children.end())
    {
        if(psb_briefs != nullptr)
        {
            children["psb-briefs"] = psb_briefs.get();
        }
    }

    if(children.find("psb-detaileds") == children.end())
    {
        if(psb_detaileds != nullptr)
        {
            children["psb-detaileds"] = psb_detaileds.get();
        }
    }

    if(children.find("request-briefs") == children.end())
    {
        if(request_briefs != nullptr)
        {
            children["request-briefs"] = request_briefs.get();
        }
    }

    if(children.find("request-details") == children.end())
    {
        if(request_details != nullptr)
        {
            children["request-details"] = request_details.get();
        }
    }

    if(children.find("rsb-briefs") == children.end())
    {
        if(rsb_briefs != nullptr)
        {
            children["rsb-briefs"] = rsb_briefs.get();
        }
    }

    if(children.find("rsb-detaileds") == children.end())
    {
        if(rsb_detaileds != nullptr)
        {
            children["rsb-detaileds"] = rsb_detaileds.get();
        }
    }

    if(children.find("session-briefs") == children.end())
    {
        if(session_briefs != nullptr)
        {
            children["session-briefs"] = session_briefs.get();
        }
    }

    if(children.find("session-detaileds") == children.end())
    {
        if(session_detaileds != nullptr)
        {
            children["session-detaileds"] = session_detaileds.get();
        }
    }

    if(children.find("summary") == children.end())
    {
        if(summary != nullptr)
        {
            children["summary"] = summary.get();
        }
    }

    return children;
}

void RsvpStandby::set_value(const std::string & value_path, std::string value)
{
}

std::unique_ptr<Entity> RsvpStandby::clone_ptr()
{
    return std::make_unique<RsvpStandby>();
}
Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::PreStandardDsteInterface::PreStandardDsteInterface()
    :
    	allocated_bit_rate{YType::uint64, "allocated-bit-rate"},
	 is_max_bandwidth_absolute{YType::boolean, "is-max-bandwidth-absolute"},
	 is_max_subpool_bandwidth_absolute{YType::boolean, "is-max-subpool-bandwidth-absolute"},
	 max_bandwidth{YType::uint64, "max-bandwidth"},
	 max_flow_bandwidth{YType::uint64, "max-flow-bandwidth"},
	 max_subpool_bandwidth{YType::uint64, "max-subpool-bandwidth"}
{
    yang_name = "pre-standard-dste-interface"; yang_parent_name = "bandwidth-information";
}

Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::PreStandardDsteInterface::~PreStandardDsteInterface()
{
}

bool Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::PreStandardDsteInterface::has_data() const
{
    return allocated_bit_rate.is_set
	|| is_max_bandwidth_absolute.is_set
	|| is_max_subpool_bandwidth_absolute.is_set
	|| max_bandwidth.is_set
	|| max_flow_bandwidth.is_set
	|| max_subpool_bandwidth.is_set;
}

bool Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::PreStandardDsteInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(allocated_bit_rate.operation)
	|| is_set(is_max_bandwidth_absolute.operation)
	|| is_set(is_max_subpool_bandwidth_absolute.operation)
	|| is_set(max_bandwidth.operation)
	|| is_set(max_flow_bandwidth.operation)
	|| is_set(max_subpool_bandwidth.operation);
}

std::string Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::PreStandardDsteInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pre-standard-dste-interface";

    return path_buffer.str();

}

EntityPath Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::PreStandardDsteInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (allocated_bit_rate.is_set || is_set(allocated_bit_rate.operation)) leaf_name_data.push_back(allocated_bit_rate.get_name_leafdata());
    if (is_max_bandwidth_absolute.is_set || is_set(is_max_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bandwidth_absolute.get_name_leafdata());
    if (is_max_subpool_bandwidth_absolute.is_set || is_set(is_max_subpool_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_subpool_bandwidth_absolute.get_name_leafdata());
    if (max_bandwidth.is_set || is_set(max_bandwidth.operation)) leaf_name_data.push_back(max_bandwidth.get_name_leafdata());
    if (max_flow_bandwidth.is_set || is_set(max_flow_bandwidth.operation)) leaf_name_data.push_back(max_flow_bandwidth.get_name_leafdata());
    if (max_subpool_bandwidth.is_set || is_set(max_subpool_bandwidth.operation)) leaf_name_data.push_back(max_subpool_bandwidth.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::PreStandardDsteInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::PreStandardDsteInterface::get_children()
{
    return children;
}

void Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::PreStandardDsteInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "allocated-bit-rate")
    {
        allocated_bit_rate = value;
    }
    if(value_path == "is-max-bandwidth-absolute")
    {
        is_max_bandwidth_absolute = value;
    }
    if(value_path == "is-max-subpool-bandwidth-absolute")
    {
        is_max_subpool_bandwidth_absolute = value;
    }
    if(value_path == "max-bandwidth")
    {
        max_bandwidth = value;
    }
    if(value_path == "max-flow-bandwidth")
    {
        max_flow_bandwidth = value;
    }
    if(value_path == "max-subpool-bandwidth")
    {
        max_subpool_bandwidth = value;
    }
}

Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::StandardDsteInterface::StandardDsteInterface()
    :
    	allocated_bit_rate{YType::uint64, "allocated-bit-rate"},
	 is_max_bandwidth_absolute{YType::boolean, "is-max-bandwidth-absolute"},
	 is_max_bc0_bandwidth_absolute{YType::boolean, "is-max-bc0-bandwidth-absolute"},
	 is_max_bc1_bandwidth_absolute{YType::boolean, "is-max-bc1-bandwidth-absolute"},
	 max_bandwidth{YType::uint64, "max-bandwidth"},
	 max_flow_bandwidth{YType::uint64, "max-flow-bandwidth"},
	 max_pool0_bandwidth{YType::uint64, "max-pool0-bandwidth"},
	 max_pool1_bandwidth{YType::uint64, "max-pool1-bandwidth"}
{
    yang_name = "standard-dste-interface"; yang_parent_name = "bandwidth-information";
}

Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::StandardDsteInterface::~StandardDsteInterface()
{
}

bool Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::StandardDsteInterface::has_data() const
{
    return allocated_bit_rate.is_set
	|| is_max_bandwidth_absolute.is_set
	|| is_max_bc0_bandwidth_absolute.is_set
	|| is_max_bc1_bandwidth_absolute.is_set
	|| max_bandwidth.is_set
	|| max_flow_bandwidth.is_set
	|| max_pool0_bandwidth.is_set
	|| max_pool1_bandwidth.is_set;
}

bool Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::StandardDsteInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(allocated_bit_rate.operation)
	|| is_set(is_max_bandwidth_absolute.operation)
	|| is_set(is_max_bc0_bandwidth_absolute.operation)
	|| is_set(is_max_bc1_bandwidth_absolute.operation)
	|| is_set(max_bandwidth.operation)
	|| is_set(max_flow_bandwidth.operation)
	|| is_set(max_pool0_bandwidth.operation)
	|| is_set(max_pool1_bandwidth.operation);
}

std::string Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::StandardDsteInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "standard-dste-interface";

    return path_buffer.str();

}

EntityPath Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::StandardDsteInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (allocated_bit_rate.is_set || is_set(allocated_bit_rate.operation)) leaf_name_data.push_back(allocated_bit_rate.get_name_leafdata());
    if (is_max_bandwidth_absolute.is_set || is_set(is_max_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bandwidth_absolute.get_name_leafdata());
    if (is_max_bc0_bandwidth_absolute.is_set || is_set(is_max_bc0_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bc0_bandwidth_absolute.get_name_leafdata());
    if (is_max_bc1_bandwidth_absolute.is_set || is_set(is_max_bc1_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bc1_bandwidth_absolute.get_name_leafdata());
    if (max_bandwidth.is_set || is_set(max_bandwidth.operation)) leaf_name_data.push_back(max_bandwidth.get_name_leafdata());
    if (max_flow_bandwidth.is_set || is_set(max_flow_bandwidth.operation)) leaf_name_data.push_back(max_flow_bandwidth.get_name_leafdata());
    if (max_pool0_bandwidth.is_set || is_set(max_pool0_bandwidth.operation)) leaf_name_data.push_back(max_pool0_bandwidth.get_name_leafdata());
    if (max_pool1_bandwidth.is_set || is_set(max_pool1_bandwidth.operation)) leaf_name_data.push_back(max_pool1_bandwidth.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::StandardDsteInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::StandardDsteInterface::get_children()
{
    return children;
}

void Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::StandardDsteInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "allocated-bit-rate")
    {
        allocated_bit_rate = value;
    }
    if(value_path == "is-max-bandwidth-absolute")
    {
        is_max_bandwidth_absolute = value;
    }
    if(value_path == "is-max-bc0-bandwidth-absolute")
    {
        is_max_bc0_bandwidth_absolute = value;
    }
    if(value_path == "is-max-bc1-bandwidth-absolute")
    {
        is_max_bc1_bandwidth_absolute = value;
    }
    if(value_path == "max-bandwidth")
    {
        max_bandwidth = value;
    }
    if(value_path == "max-flow-bandwidth")
    {
        max_flow_bandwidth = value;
    }
    if(value_path == "max-pool0-bandwidth")
    {
        max_pool0_bandwidth = value;
    }
    if(value_path == "max-pool1-bandwidth")
    {
        max_pool1_bandwidth = value;
    }
}

Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::BandwidthInformation()
    :
    	dste_mode{YType::enumeration, "dste-mode"}
    	,
    pre_standard_dste_interface(std::make_unique<Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::PreStandardDsteInterface>())
	,standard_dste_interface(std::make_unique<Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::StandardDsteInterface>())
{
    pre_standard_dste_interface->parent = this;
    children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();

    standard_dste_interface->parent = this;
    children["standard-dste-interface"] = standard_dste_interface.get();

    yang_name = "bandwidth-information"; yang_parent_name = "controller-summary";
}

Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::~BandwidthInformation()
{
}

bool Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::has_data() const
{
    return dste_mode.is_set
	|| (pre_standard_dste_interface !=  nullptr && pre_standard_dste_interface->has_data())
	|| (standard_dste_interface !=  nullptr && standard_dste_interface->has_data());
}

bool Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::has_operation() const
{
    return is_set(operation)
	|| is_set(dste_mode.operation)
	|| (pre_standard_dste_interface !=  nullptr && pre_standard_dste_interface->has_operation())
	|| (standard_dste_interface !=  nullptr && standard_dste_interface->has_operation());
}

std::string Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bandwidth-information";

    return path_buffer.str();

}

EntityPath Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (dste_mode.is_set || is_set(dste_mode.operation)) leaf_name_data.push_back(dste_mode.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "pre-standard-dste-interface")
    {
        if(pre_standard_dste_interface != nullptr)
        {
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
        else
        {
            pre_standard_dste_interface = std::make_unique<Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::PreStandardDsteInterface>();
            pre_standard_dste_interface->parent = this;
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
        return children.at("pre-standard-dste-interface");
    }

    if(child_yang_name == "standard-dste-interface")
    {
        if(standard_dste_interface != nullptr)
        {
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
        else
        {
            standard_dste_interface = std::make_unique<Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::StandardDsteInterface>();
            standard_dste_interface->parent = this;
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
        return children.at("standard-dste-interface");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::get_children()
{
    if(children.find("pre-standard-dste-interface") == children.end())
    {
        if(pre_standard_dste_interface != nullptr)
        {
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
    }

    if(children.find("standard-dste-interface") == children.end())
    {
        if(standard_dste_interface != nullptr)
        {
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
    }

    return children;
}

void Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "dste-mode")
    {
        dste_mode = value;
    }
}

Rsvp::ControllerSummaries::ControllerSummary::ControllerSummary()
    :
    	controller_name{YType::str, "controller-name"},
	 interface_name_xr{YType::str, "interface-name-xr"},
	 paths_in{YType::uint32, "paths-in"},
	 paths_out{YType::uint32, "paths-out"},
	 reservations_in{YType::uint32, "reservations-in"},
	 reservations_out{YType::uint32, "reservations-out"}
    	,
    bandwidth_information(std::make_unique<Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation>())
{
    bandwidth_information->parent = this;
    children["bandwidth-information"] = bandwidth_information.get();

    yang_name = "controller-summary"; yang_parent_name = "controller-summaries";
}

Rsvp::ControllerSummaries::ControllerSummary::~ControllerSummary()
{
}

bool Rsvp::ControllerSummaries::ControllerSummary::has_data() const
{
    return controller_name.is_set
	|| interface_name_xr.is_set
	|| paths_in.is_set
	|| paths_out.is_set
	|| reservations_in.is_set
	|| reservations_out.is_set
	|| (bandwidth_information !=  nullptr && bandwidth_information->has_data());
}

bool Rsvp::ControllerSummaries::ControllerSummary::has_operation() const
{
    return is_set(operation)
	|| is_set(controller_name.operation)
	|| is_set(interface_name_xr.operation)
	|| is_set(paths_in.operation)
	|| is_set(paths_out.operation)
	|| is_set(reservations_in.operation)
	|| is_set(reservations_out.operation)
	|| (bandwidth_information !=  nullptr && bandwidth_information->has_operation());
}

std::string Rsvp::ControllerSummaries::ControllerSummary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "controller-summary" <<"[controller-name='" <<controller_name.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::ControllerSummaries::ControllerSummary::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-summaries/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (controller_name.is_set || is_set(controller_name.operation)) leaf_name_data.push_back(controller_name.get_name_leafdata());
    if (interface_name_xr.is_set || is_set(interface_name_xr.operation)) leaf_name_data.push_back(interface_name_xr.get_name_leafdata());
    if (paths_in.is_set || is_set(paths_in.operation)) leaf_name_data.push_back(paths_in.get_name_leafdata());
    if (paths_out.is_set || is_set(paths_out.operation)) leaf_name_data.push_back(paths_out.get_name_leafdata());
    if (reservations_in.is_set || is_set(reservations_in.operation)) leaf_name_data.push_back(reservations_in.get_name_leafdata());
    if (reservations_out.is_set || is_set(reservations_out.operation)) leaf_name_data.push_back(reservations_out.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::ControllerSummaries::ControllerSummary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "bandwidth-information")
    {
        if(bandwidth_information != nullptr)
        {
            children["bandwidth-information"] = bandwidth_information.get();
        }
        else
        {
            bandwidth_information = std::make_unique<Rsvp::ControllerSummaries::ControllerSummary::BandwidthInformation>();
            bandwidth_information->parent = this;
            children["bandwidth-information"] = bandwidth_information.get();
        }
        return children.at("bandwidth-information");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::ControllerSummaries::ControllerSummary::get_children()
{
    if(children.find("bandwidth-information") == children.end())
    {
        if(bandwidth_information != nullptr)
        {
            children["bandwidth-information"] = bandwidth_information.get();
        }
    }

    return children;
}

void Rsvp::ControllerSummaries::ControllerSummary::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "controller-name")
    {
        controller_name = value;
    }
    if(value_path == "interface-name-xr")
    {
        interface_name_xr = value;
    }
    if(value_path == "paths-in")
    {
        paths_in = value;
    }
    if(value_path == "paths-out")
    {
        paths_out = value;
    }
    if(value_path == "reservations-in")
    {
        reservations_in = value;
    }
    if(value_path == "reservations-out")
    {
        reservations_out = value;
    }
}

Rsvp::ControllerSummaries::ControllerSummaries()
{
    yang_name = "controller-summaries"; yang_parent_name = "rsvp";
}

Rsvp::ControllerSummaries::~ControllerSummaries()
{
}

bool Rsvp::ControllerSummaries::has_data() const
{
    for (std::size_t index=0; index<controller_summary.size(); index++)
    {
        if(controller_summary[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::ControllerSummaries::has_operation() const
{
    for (std::size_t index=0; index<controller_summary.size(); index++)
    {
        if(controller_summary[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::ControllerSummaries::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "controller-summaries";

    return path_buffer.str();

}

EntityPath Rsvp::ControllerSummaries::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::ControllerSummaries::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "controller-summary")
    {
        for(auto const & c : controller_summary)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::ControllerSummaries::ControllerSummary>();
        c->parent = this;
        controller_summary.push_back(std::move(c));
        children[segment_path] = controller_summary.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::ControllerSummaries::get_children()
{
    for (auto const & c : controller_summary)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::ControllerSummaries::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::Issu::Status::IdtStatus::IdtStatus()
    :
    	declare_time{YType::uint32, "declare-time"},
	 idt_end_time{YType::uint32, "idt-end-time"},
	 idt_start_time{YType::uint32, "idt-start-time"},
	 not_ready_reason{YType::enumeration, "not-ready-reason"},
	 sync_status{YType::enumeration, "sync-status"},
	 withdraw_time{YType::uint32, "withdraw-time"}
{
    yang_name = "idt-status"; yang_parent_name = "status";
}

Rsvp::Issu::Status::IdtStatus::~IdtStatus()
{
}

bool Rsvp::Issu::Status::IdtStatus::has_data() const
{
    return declare_time.is_set
	|| idt_end_time.is_set
	|| idt_start_time.is_set
	|| not_ready_reason.is_set
	|| sync_status.is_set
	|| withdraw_time.is_set;
}

bool Rsvp::Issu::Status::IdtStatus::has_operation() const
{
    return is_set(operation)
	|| is_set(declare_time.operation)
	|| is_set(idt_end_time.operation)
	|| is_set(idt_start_time.operation)
	|| is_set(not_ready_reason.operation)
	|| is_set(sync_status.operation)
	|| is_set(withdraw_time.operation);
}

std::string Rsvp::Issu::Status::IdtStatus::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "idt-status";

    return path_buffer.str();

}

EntityPath Rsvp::Issu::Status::IdtStatus::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/issu/status/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (declare_time.is_set || is_set(declare_time.operation)) leaf_name_data.push_back(declare_time.get_name_leafdata());
    if (idt_end_time.is_set || is_set(idt_end_time.operation)) leaf_name_data.push_back(idt_end_time.get_name_leafdata());
    if (idt_start_time.is_set || is_set(idt_start_time.operation)) leaf_name_data.push_back(idt_start_time.get_name_leafdata());
    if (not_ready_reason.is_set || is_set(not_ready_reason.operation)) leaf_name_data.push_back(not_ready_reason.get_name_leafdata());
    if (sync_status.is_set || is_set(sync_status.operation)) leaf_name_data.push_back(sync_status.get_name_leafdata());
    if (withdraw_time.is_set || is_set(withdraw_time.operation)) leaf_name_data.push_back(withdraw_time.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Issu::Status::IdtStatus::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Issu::Status::IdtStatus::get_children()
{
    return children;
}

void Rsvp::Issu::Status::IdtStatus::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "declare-time")
    {
        declare_time = value;
    }
    if(value_path == "idt-end-time")
    {
        idt_end_time = value;
    }
    if(value_path == "idt-start-time")
    {
        idt_start_time = value;
    }
    if(value_path == "not-ready-reason")
    {
        not_ready_reason = value;
    }
    if(value_path == "sync-status")
    {
        sync_status = value;
    }
    if(value_path == "withdraw-time")
    {
        withdraw_time = value;
    }
}

Rsvp::Issu::Status::PreviousIdtStatus::PreviousIdtStatus()
    :
    	declare_time{YType::uint32, "declare-time"},
	 idt_end_time{YType::uint32, "idt-end-time"},
	 idt_start_time{YType::uint32, "idt-start-time"},
	 not_ready_reason{YType::enumeration, "not-ready-reason"},
	 sync_status{YType::enumeration, "sync-status"},
	 withdraw_time{YType::uint32, "withdraw-time"}
{
    yang_name = "previous-idt-status"; yang_parent_name = "status";
}

Rsvp::Issu::Status::PreviousIdtStatus::~PreviousIdtStatus()
{
}

bool Rsvp::Issu::Status::PreviousIdtStatus::has_data() const
{
    return declare_time.is_set
	|| idt_end_time.is_set
	|| idt_start_time.is_set
	|| not_ready_reason.is_set
	|| sync_status.is_set
	|| withdraw_time.is_set;
}

bool Rsvp::Issu::Status::PreviousIdtStatus::has_operation() const
{
    return is_set(operation)
	|| is_set(declare_time.operation)
	|| is_set(idt_end_time.operation)
	|| is_set(idt_start_time.operation)
	|| is_set(not_ready_reason.operation)
	|| is_set(sync_status.operation)
	|| is_set(withdraw_time.operation);
}

std::string Rsvp::Issu::Status::PreviousIdtStatus::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "previous-idt-status";

    return path_buffer.str();

}

EntityPath Rsvp::Issu::Status::PreviousIdtStatus::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/issu/status/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (declare_time.is_set || is_set(declare_time.operation)) leaf_name_data.push_back(declare_time.get_name_leafdata());
    if (idt_end_time.is_set || is_set(idt_end_time.operation)) leaf_name_data.push_back(idt_end_time.get_name_leafdata());
    if (idt_start_time.is_set || is_set(idt_start_time.operation)) leaf_name_data.push_back(idt_start_time.get_name_leafdata());
    if (not_ready_reason.is_set || is_set(not_ready_reason.operation)) leaf_name_data.push_back(not_ready_reason.get_name_leafdata());
    if (sync_status.is_set || is_set(sync_status.operation)) leaf_name_data.push_back(sync_status.get_name_leafdata());
    if (withdraw_time.is_set || is_set(withdraw_time.operation)) leaf_name_data.push_back(withdraw_time.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Issu::Status::PreviousIdtStatus::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Issu::Status::PreviousIdtStatus::get_children()
{
    return children;
}

void Rsvp::Issu::Status::PreviousIdtStatus::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "declare-time")
    {
        declare_time = value;
    }
    if(value_path == "idt-end-time")
    {
        idt_end_time = value;
    }
    if(value_path == "idt-start-time")
    {
        idt_start_time = value;
    }
    if(value_path == "not-ready-reason")
    {
        not_ready_reason = value;
    }
    if(value_path == "sync-status")
    {
        sync_status = value;
    }
    if(value_path == "withdraw-time")
    {
        withdraw_time = value;
    }
}

Rsvp::Issu::Status::Status()
    :
    	role{YType::enumeration, "role"}
    	,
    idt_status(std::make_unique<Rsvp::Issu::Status::IdtStatus>())
	,previous_idt_status(std::make_unique<Rsvp::Issu::Status::PreviousIdtStatus>())
{
    idt_status->parent = this;
    children["idt-status"] = idt_status.get();

    previous_idt_status->parent = this;
    children["previous-idt-status"] = previous_idt_status.get();

    yang_name = "status"; yang_parent_name = "issu";
}

Rsvp::Issu::Status::~Status()
{
}

bool Rsvp::Issu::Status::has_data() const
{
    return role.is_set
	|| (idt_status !=  nullptr && idt_status->has_data())
	|| (previous_idt_status !=  nullptr && previous_idt_status->has_data());
}

bool Rsvp::Issu::Status::has_operation() const
{
    return is_set(operation)
	|| is_set(role.operation)
	|| (idt_status !=  nullptr && idt_status->has_operation())
	|| (previous_idt_status !=  nullptr && previous_idt_status->has_operation());
}

std::string Rsvp::Issu::Status::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "status";

    return path_buffer.str();

}

EntityPath Rsvp::Issu::Status::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/issu/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (role.is_set || is_set(role.operation)) leaf_name_data.push_back(role.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Issu::Status::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "idt-status")
    {
        if(idt_status != nullptr)
        {
            children["idt-status"] = idt_status.get();
        }
        else
        {
            idt_status = std::make_unique<Rsvp::Issu::Status::IdtStatus>();
            idt_status->parent = this;
            children["idt-status"] = idt_status.get();
        }
        return children.at("idt-status");
    }

    if(child_yang_name == "previous-idt-status")
    {
        if(previous_idt_status != nullptr)
        {
            children["previous-idt-status"] = previous_idt_status.get();
        }
        else
        {
            previous_idt_status = std::make_unique<Rsvp::Issu::Status::PreviousIdtStatus>();
            previous_idt_status->parent = this;
            children["previous-idt-status"] = previous_idt_status.get();
        }
        return children.at("previous-idt-status");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Issu::Status::get_children()
{
    if(children.find("idt-status") == children.end())
    {
        if(idt_status != nullptr)
        {
            children["idt-status"] = idt_status.get();
        }
    }

    if(children.find("previous-idt-status") == children.end())
    {
        if(previous_idt_status != nullptr)
        {
            children["previous-idt-status"] = previous_idt_status.get();
        }
    }

    return children;
}

void Rsvp::Issu::Status::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "role")
    {
        role = value;
    }
}

Rsvp::Issu::Issu()
    :
    status(std::make_unique<Rsvp::Issu::Status>())
{
    status->parent = this;
    children["status"] = status.get();

    yang_name = "issu"; yang_parent_name = "rsvp";
}

Rsvp::Issu::~Issu()
{
}

bool Rsvp::Issu::has_data() const
{
    return (status !=  nullptr && status->has_data());
}

bool Rsvp::Issu::has_operation() const
{
    return is_set(operation)
	|| (status !=  nullptr && status->has_operation());
}

std::string Rsvp::Issu::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "issu";

    return path_buffer.str();

}

EntityPath Rsvp::Issu::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Issu::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "status")
    {
        if(status != nullptr)
        {
            children["status"] = status.get();
        }
        else
        {
            status = std::make_unique<Rsvp::Issu::Status>();
            status->parent = this;
            children["status"] = status.get();
        }
        return children.at("status");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Issu::get_children()
{
    if(children.find("status") == children.end())
    {
        if(status != nullptr)
        {
            children["status"] = status.get();
        }
    }

    return children;
}

void Rsvp::Issu::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::PreStandardDsteInterface::PreStandardDsteInterface()
    :
    	allocated_bit_rate{YType::uint64, "allocated-bit-rate"},
	 is_max_bandwidth_absolute{YType::boolean, "is-max-bandwidth-absolute"},
	 is_max_subpool_bandwidth_absolute{YType::boolean, "is-max-subpool-bandwidth-absolute"},
	 max_bandwidth{YType::uint64, "max-bandwidth"},
	 max_flow_bandwidth{YType::uint64, "max-flow-bandwidth"},
	 max_subpool_bandwidth{YType::uint64, "max-subpool-bandwidth"}
{
    yang_name = "pre-standard-dste-interface"; yang_parent_name = "bandwidth-information";
}

Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::PreStandardDsteInterface::~PreStandardDsteInterface()
{
}

bool Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::PreStandardDsteInterface::has_data() const
{
    return allocated_bit_rate.is_set
	|| is_max_bandwidth_absolute.is_set
	|| is_max_subpool_bandwidth_absolute.is_set
	|| max_bandwidth.is_set
	|| max_flow_bandwidth.is_set
	|| max_subpool_bandwidth.is_set;
}

bool Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::PreStandardDsteInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(allocated_bit_rate.operation)
	|| is_set(is_max_bandwidth_absolute.operation)
	|| is_set(is_max_subpool_bandwidth_absolute.operation)
	|| is_set(max_bandwidth.operation)
	|| is_set(max_flow_bandwidth.operation)
	|| is_set(max_subpool_bandwidth.operation);
}

std::string Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::PreStandardDsteInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pre-standard-dste-interface";

    return path_buffer.str();

}

EntityPath Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::PreStandardDsteInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (allocated_bit_rate.is_set || is_set(allocated_bit_rate.operation)) leaf_name_data.push_back(allocated_bit_rate.get_name_leafdata());
    if (is_max_bandwidth_absolute.is_set || is_set(is_max_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bandwidth_absolute.get_name_leafdata());
    if (is_max_subpool_bandwidth_absolute.is_set || is_set(is_max_subpool_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_subpool_bandwidth_absolute.get_name_leafdata());
    if (max_bandwidth.is_set || is_set(max_bandwidth.operation)) leaf_name_data.push_back(max_bandwidth.get_name_leafdata());
    if (max_flow_bandwidth.is_set || is_set(max_flow_bandwidth.operation)) leaf_name_data.push_back(max_flow_bandwidth.get_name_leafdata());
    if (max_subpool_bandwidth.is_set || is_set(max_subpool_bandwidth.operation)) leaf_name_data.push_back(max_subpool_bandwidth.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::PreStandardDsteInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::PreStandardDsteInterface::get_children()
{
    return children;
}

void Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::PreStandardDsteInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "allocated-bit-rate")
    {
        allocated_bit_rate = value;
    }
    if(value_path == "is-max-bandwidth-absolute")
    {
        is_max_bandwidth_absolute = value;
    }
    if(value_path == "is-max-subpool-bandwidth-absolute")
    {
        is_max_subpool_bandwidth_absolute = value;
    }
    if(value_path == "max-bandwidth")
    {
        max_bandwidth = value;
    }
    if(value_path == "max-flow-bandwidth")
    {
        max_flow_bandwidth = value;
    }
    if(value_path == "max-subpool-bandwidth")
    {
        max_subpool_bandwidth = value;
    }
}

Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::StandardDsteInterface::StandardDsteInterface()
    :
    	allocated_bit_rate{YType::uint64, "allocated-bit-rate"},
	 is_max_bandwidth_absolute{YType::boolean, "is-max-bandwidth-absolute"},
	 is_max_bc0_bandwidth_absolute{YType::boolean, "is-max-bc0-bandwidth-absolute"},
	 is_max_bc1_bandwidth_absolute{YType::boolean, "is-max-bc1-bandwidth-absolute"},
	 max_bandwidth{YType::uint64, "max-bandwidth"},
	 max_flow_bandwidth{YType::uint64, "max-flow-bandwidth"},
	 max_pool0_bandwidth{YType::uint64, "max-pool0-bandwidth"},
	 max_pool1_bandwidth{YType::uint64, "max-pool1-bandwidth"}
{
    yang_name = "standard-dste-interface"; yang_parent_name = "bandwidth-information";
}

Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::StandardDsteInterface::~StandardDsteInterface()
{
}

bool Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::StandardDsteInterface::has_data() const
{
    return allocated_bit_rate.is_set
	|| is_max_bandwidth_absolute.is_set
	|| is_max_bc0_bandwidth_absolute.is_set
	|| is_max_bc1_bandwidth_absolute.is_set
	|| max_bandwidth.is_set
	|| max_flow_bandwidth.is_set
	|| max_pool0_bandwidth.is_set
	|| max_pool1_bandwidth.is_set;
}

bool Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::StandardDsteInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(allocated_bit_rate.operation)
	|| is_set(is_max_bandwidth_absolute.operation)
	|| is_set(is_max_bc0_bandwidth_absolute.operation)
	|| is_set(is_max_bc1_bandwidth_absolute.operation)
	|| is_set(max_bandwidth.operation)
	|| is_set(max_flow_bandwidth.operation)
	|| is_set(max_pool0_bandwidth.operation)
	|| is_set(max_pool1_bandwidth.operation);
}

std::string Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::StandardDsteInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "standard-dste-interface";

    return path_buffer.str();

}

EntityPath Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::StandardDsteInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (allocated_bit_rate.is_set || is_set(allocated_bit_rate.operation)) leaf_name_data.push_back(allocated_bit_rate.get_name_leafdata());
    if (is_max_bandwidth_absolute.is_set || is_set(is_max_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bandwidth_absolute.get_name_leafdata());
    if (is_max_bc0_bandwidth_absolute.is_set || is_set(is_max_bc0_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bc0_bandwidth_absolute.get_name_leafdata());
    if (is_max_bc1_bandwidth_absolute.is_set || is_set(is_max_bc1_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bc1_bandwidth_absolute.get_name_leafdata());
    if (max_bandwidth.is_set || is_set(max_bandwidth.operation)) leaf_name_data.push_back(max_bandwidth.get_name_leafdata());
    if (max_flow_bandwidth.is_set || is_set(max_flow_bandwidth.operation)) leaf_name_data.push_back(max_flow_bandwidth.get_name_leafdata());
    if (max_pool0_bandwidth.is_set || is_set(max_pool0_bandwidth.operation)) leaf_name_data.push_back(max_pool0_bandwidth.get_name_leafdata());
    if (max_pool1_bandwidth.is_set || is_set(max_pool1_bandwidth.operation)) leaf_name_data.push_back(max_pool1_bandwidth.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::StandardDsteInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::StandardDsteInterface::get_children()
{
    return children;
}

void Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::StandardDsteInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "allocated-bit-rate")
    {
        allocated_bit_rate = value;
    }
    if(value_path == "is-max-bandwidth-absolute")
    {
        is_max_bandwidth_absolute = value;
    }
    if(value_path == "is-max-bc0-bandwidth-absolute")
    {
        is_max_bc0_bandwidth_absolute = value;
    }
    if(value_path == "is-max-bc1-bandwidth-absolute")
    {
        is_max_bc1_bandwidth_absolute = value;
    }
    if(value_path == "max-bandwidth")
    {
        max_bandwidth = value;
    }
    if(value_path == "max-flow-bandwidth")
    {
        max_flow_bandwidth = value;
    }
    if(value_path == "max-pool0-bandwidth")
    {
        max_pool0_bandwidth = value;
    }
    if(value_path == "max-pool1-bandwidth")
    {
        max_pool1_bandwidth = value;
    }
}

Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::BandwidthInformation()
    :
    	dste_mode{YType::enumeration, "dste-mode"}
    	,
    pre_standard_dste_interface(std::make_unique<Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::PreStandardDsteInterface>())
	,standard_dste_interface(std::make_unique<Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::StandardDsteInterface>())
{
    pre_standard_dste_interface->parent = this;
    children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();

    standard_dste_interface->parent = this;
    children["standard-dste-interface"] = standard_dste_interface.get();

    yang_name = "bandwidth-information"; yang_parent_name = "controller-detailed";
}

Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::~BandwidthInformation()
{
}

bool Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::has_data() const
{
    return dste_mode.is_set
	|| (pre_standard_dste_interface !=  nullptr && pre_standard_dste_interface->has_data())
	|| (standard_dste_interface !=  nullptr && standard_dste_interface->has_data());
}

bool Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::has_operation() const
{
    return is_set(operation)
	|| is_set(dste_mode.operation)
	|| (pre_standard_dste_interface !=  nullptr && pre_standard_dste_interface->has_operation())
	|| (standard_dste_interface !=  nullptr && standard_dste_interface->has_operation());
}

std::string Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bandwidth-information";

    return path_buffer.str();

}

EntityPath Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (dste_mode.is_set || is_set(dste_mode.operation)) leaf_name_data.push_back(dste_mode.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "pre-standard-dste-interface")
    {
        if(pre_standard_dste_interface != nullptr)
        {
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
        else
        {
            pre_standard_dste_interface = std::make_unique<Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::PreStandardDsteInterface>();
            pre_standard_dste_interface->parent = this;
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
        return children.at("pre-standard-dste-interface");
    }

    if(child_yang_name == "standard-dste-interface")
    {
        if(standard_dste_interface != nullptr)
        {
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
        else
        {
            standard_dste_interface = std::make_unique<Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::StandardDsteInterface>();
            standard_dste_interface->parent = this;
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
        return children.at("standard-dste-interface");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::get_children()
{
    if(children.find("pre-standard-dste-interface") == children.end())
    {
        if(pre_standard_dste_interface != nullptr)
        {
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
    }

    if(children.find("standard-dste-interface") == children.end())
    {
        if(standard_dste_interface != nullptr)
        {
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
    }

    return children;
}

void Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "dste-mode")
    {
        dste_mode = value;
    }
}

Rsvp::ControllerDetaileds::ControllerDetailed::Flags::Flags()
    :
    	is_backup_tunnel{YType::boolean, "is-backup-tunnel"},
	 is_interface_created{YType::boolean, "is-interface-created"},
	 is_interface_down{YType::boolean, "is-interface-down"},
	 is_message_bundling_enabled{YType::boolean, "is-message-bundling-enabled"},
	 is_mpls_enabled{YType::boolean, "is-mpls-enabled"},
	 is_non_default_vrf{YType::boolean, "is-non-default-vrf"},
	 is_pacing_enabled{YType::boolean, "is-pacing-enabled"},
	 is_refresh_enabled{YType::boolean, "is-refresh-enabled"},
	 is_refresh_reduction_enabled{YType::boolean, "is-refresh-reduction-enabled"},
	 is_rel_s_refresh_enabled{YType::boolean, "is-rel-s-refresh-enabled"},
	 is_rsvp_configured{YType::boolean, "is-rsvp-configured"},
	 is_s_refresh_enabled{YType::boolean, "is-s-refresh-enabled"}
{
    yang_name = "flags"; yang_parent_name = "controller-detailed";
}

Rsvp::ControllerDetaileds::ControllerDetailed::Flags::~Flags()
{
}

bool Rsvp::ControllerDetaileds::ControllerDetailed::Flags::has_data() const
{
    return is_backup_tunnel.is_set
	|| is_interface_created.is_set
	|| is_interface_down.is_set
	|| is_message_bundling_enabled.is_set
	|| is_mpls_enabled.is_set
	|| is_non_default_vrf.is_set
	|| is_pacing_enabled.is_set
	|| is_refresh_enabled.is_set
	|| is_refresh_reduction_enabled.is_set
	|| is_rel_s_refresh_enabled.is_set
	|| is_rsvp_configured.is_set
	|| is_s_refresh_enabled.is_set;
}

bool Rsvp::ControllerDetaileds::ControllerDetailed::Flags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_backup_tunnel.operation)
	|| is_set(is_interface_created.operation)
	|| is_set(is_interface_down.operation)
	|| is_set(is_message_bundling_enabled.operation)
	|| is_set(is_mpls_enabled.operation)
	|| is_set(is_non_default_vrf.operation)
	|| is_set(is_pacing_enabled.operation)
	|| is_set(is_refresh_enabled.operation)
	|| is_set(is_refresh_reduction_enabled.operation)
	|| is_set(is_rel_s_refresh_enabled.operation)
	|| is_set(is_rsvp_configured.operation)
	|| is_set(is_s_refresh_enabled.operation);
}

std::string Rsvp::ControllerDetaileds::ControllerDetailed::Flags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flags";

    return path_buffer.str();

}

EntityPath Rsvp::ControllerDetaileds::ControllerDetailed::Flags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_backup_tunnel.is_set || is_set(is_backup_tunnel.operation)) leaf_name_data.push_back(is_backup_tunnel.get_name_leafdata());
    if (is_interface_created.is_set || is_set(is_interface_created.operation)) leaf_name_data.push_back(is_interface_created.get_name_leafdata());
    if (is_interface_down.is_set || is_set(is_interface_down.operation)) leaf_name_data.push_back(is_interface_down.get_name_leafdata());
    if (is_message_bundling_enabled.is_set || is_set(is_message_bundling_enabled.operation)) leaf_name_data.push_back(is_message_bundling_enabled.get_name_leafdata());
    if (is_mpls_enabled.is_set || is_set(is_mpls_enabled.operation)) leaf_name_data.push_back(is_mpls_enabled.get_name_leafdata());
    if (is_non_default_vrf.is_set || is_set(is_non_default_vrf.operation)) leaf_name_data.push_back(is_non_default_vrf.get_name_leafdata());
    if (is_pacing_enabled.is_set || is_set(is_pacing_enabled.operation)) leaf_name_data.push_back(is_pacing_enabled.get_name_leafdata());
    if (is_refresh_enabled.is_set || is_set(is_refresh_enabled.operation)) leaf_name_data.push_back(is_refresh_enabled.get_name_leafdata());
    if (is_refresh_reduction_enabled.is_set || is_set(is_refresh_reduction_enabled.operation)) leaf_name_data.push_back(is_refresh_reduction_enabled.get_name_leafdata());
    if (is_rel_s_refresh_enabled.is_set || is_set(is_rel_s_refresh_enabled.operation)) leaf_name_data.push_back(is_rel_s_refresh_enabled.get_name_leafdata());
    if (is_rsvp_configured.is_set || is_set(is_rsvp_configured.operation)) leaf_name_data.push_back(is_rsvp_configured.get_name_leafdata());
    if (is_s_refresh_enabled.is_set || is_set(is_s_refresh_enabled.operation)) leaf_name_data.push_back(is_s_refresh_enabled.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::ControllerDetaileds::ControllerDetailed::Flags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::ControllerDetaileds::ControllerDetailed::Flags::get_children()
{
    return children;
}

void Rsvp::ControllerDetaileds::ControllerDetailed::Flags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-backup-tunnel")
    {
        is_backup_tunnel = value;
    }
    if(value_path == "is-interface-created")
    {
        is_interface_created = value;
    }
    if(value_path == "is-interface-down")
    {
        is_interface_down = value;
    }
    if(value_path == "is-message-bundling-enabled")
    {
        is_message_bundling_enabled = value;
    }
    if(value_path == "is-mpls-enabled")
    {
        is_mpls_enabled = value;
    }
    if(value_path == "is-non-default-vrf")
    {
        is_non_default_vrf = value;
    }
    if(value_path == "is-pacing-enabled")
    {
        is_pacing_enabled = value;
    }
    if(value_path == "is-refresh-enabled")
    {
        is_refresh_enabled = value;
    }
    if(value_path == "is-refresh-reduction-enabled")
    {
        is_refresh_reduction_enabled = value;
    }
    if(value_path == "is-rel-s-refresh-enabled")
    {
        is_rel_s_refresh_enabled = value;
    }
    if(value_path == "is-rsvp-configured")
    {
        is_rsvp_configured = value;
    }
    if(value_path == "is-s-refresh-enabled")
    {
        is_s_refresh_enabled = value;
    }
}

Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::ExpiryTime::ExpiryTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "expiry-time"; yang_parent_name = "neighbor-array";
}

Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::ExpiryTime::~ExpiryTime()
{
}

bool Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::ExpiryTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::ExpiryTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::ExpiryTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "expiry-time";

    return path_buffer.str();

}

EntityPath Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::ExpiryTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::ExpiryTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::ExpiryTime::get_children()
{
    return children;
}

void Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::ExpiryTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::NeighborMessageId::NeighborMessageId()
    :
    	message_id{YType::uint32, "message-id"}
{
    yang_name = "neighbor-message-id"; yang_parent_name = "neighbor-array";
}

Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::NeighborMessageId::~NeighborMessageId()
{
}

bool Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::NeighborMessageId::has_data() const
{
    return message_id.is_set;
}

bool Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::NeighborMessageId::has_operation() const
{
    return is_set(operation)
	|| is_set(message_id.operation);
}

std::string Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::NeighborMessageId::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "neighbor-message-id";

    return path_buffer.str();

}

EntityPath Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::NeighborMessageId::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (message_id.is_set || is_set(message_id.operation)) leaf_name_data.push_back(message_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::NeighborMessageId::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::NeighborMessageId::get_children()
{
    return children;
}

void Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::NeighborMessageId::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "message-id")
    {
        message_id = value;
    }
}

Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::NeighborArray()
    :
    	is_neighbor_refresh_reduction_capable{YType::boolean, "is-neighbor-refresh-reduction-capable"},
	 message_ids{YType::uint32, "message-ids"},
	 neighbor_address{YType::str, "neighbor-address"},
	 outgoing_states{YType::int32, "outgoing-states"}
    	,
    expiry_time(std::make_unique<Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::ExpiryTime>())
{
    expiry_time->parent = this;
    children["expiry-time"] = expiry_time.get();

    yang_name = "neighbor-array"; yang_parent_name = "controller-detailed";
}

Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::~NeighborArray()
{
}

bool Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::has_data() const
{
    for (std::size_t index=0; index<neighbor_message_id.size(); index++)
    {
        if(neighbor_message_id[index]->has_data())
            return true;
    }
    return is_neighbor_refresh_reduction_capable.is_set
	|| message_ids.is_set
	|| neighbor_address.is_set
	|| outgoing_states.is_set
	|| (expiry_time !=  nullptr && expiry_time->has_data());
}

bool Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::has_operation() const
{
    for (std::size_t index=0; index<neighbor_message_id.size(); index++)
    {
        if(neighbor_message_id[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(is_neighbor_refresh_reduction_capable.operation)
	|| is_set(message_ids.operation)
	|| is_set(neighbor_address.operation)
	|| is_set(outgoing_states.operation)
	|| (expiry_time !=  nullptr && expiry_time->has_operation());
}

std::string Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "neighbor-array";

    return path_buffer.str();

}

EntityPath Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_neighbor_refresh_reduction_capable.is_set || is_set(is_neighbor_refresh_reduction_capable.operation)) leaf_name_data.push_back(is_neighbor_refresh_reduction_capable.get_name_leafdata());
    if (message_ids.is_set || is_set(message_ids.operation)) leaf_name_data.push_back(message_ids.get_name_leafdata());
    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (outgoing_states.is_set || is_set(outgoing_states.operation)) leaf_name_data.push_back(outgoing_states.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "expiry-time")
    {
        if(expiry_time != nullptr)
        {
            children["expiry-time"] = expiry_time.get();
        }
        else
        {
            expiry_time = std::make_unique<Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::ExpiryTime>();
            expiry_time->parent = this;
            children["expiry-time"] = expiry_time.get();
        }
        return children.at("expiry-time");
    }

    if(child_yang_name == "neighbor-message-id")
    {
        for(auto const & c : neighbor_message_id)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::NeighborMessageId>();
        c->parent = this;
        neighbor_message_id.push_back(std::move(c));
        children[segment_path] = neighbor_message_id.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::get_children()
{
    if(children.find("expiry-time") == children.end())
    {
        if(expiry_time != nullptr)
        {
            children["expiry-time"] = expiry_time.get();
        }
    }

    for (auto const & c : neighbor_message_id)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-neighbor-refresh-reduction-capable")
    {
        is_neighbor_refresh_reduction_capable = value;
    }
    if(value_path == "message-ids")
    {
        message_ids = value;
    }
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "outgoing-states")
    {
        outgoing_states = value;
    }
}

Rsvp::ControllerDetaileds::ControllerDetailed::ControllerDetailed()
    :
    	controller_name{YType::str, "controller-name"},
	 ack_hold_time{YType::uint32, "ack-hold-time"},
	 ack_max_size{YType::uint32, "ack-max-size"},
	 bundle_message_max_size{YType::uint32, "bundle-message-max-size"},
	 expiry_drops_tolerated{YType::int32, "expiry-drops-tolerated"},
	 expiry_interval{YType::int32, "expiry-interval"},
	 expiry_states{YType::int32, "expiry-states"},
	 expiry_timer_state{YType::enumeration, "expiry-timer-state"},
	 integrity_receive_password{YType::str, "integrity-receive-password"},
	 integrity_receive_password_optional{YType::uint8, "integrity-receive-password-optional"},
	 integrity_send_password{YType::str, "integrity-send-password"},
	 interface_name_xr{YType::str, "interface-name-xr"},
	 out_of_band_expiry_drops_tolerated{YType::uint32, "out-of-band-expiry-drops-tolerated"},
	 out_of_band_refresh_interval{YType::uint32, "out-of-band-refresh-interval"},
	 pacing_interval{YType::uint32, "pacing-interval"},
	 pacing_message_rate{YType::uint32, "pacing-message-rate"},
	 pacing_messages{YType::int32, "pacing-messages"},
	 pacing_timer_state{YType::enumeration, "pacing-timer-state"},
	 refresh_interval{YType::int32, "refresh-interval"},
	 refresh_timer_state{YType::enumeration, "refresh-timer-state"},
	 retransmit_time{YType::uint32, "retransmit-time"},
	 signalling_ip_tos{YType::uint8, "signalling-ip-tos"},
	 summary_refresh_max_size{YType::uint32, "summary-refresh-max-size"},
	 summary_refresh_timer_state{YType::enumeration, "summary-refresh-timer-state"}
    	,
    bandwidth_information(std::make_unique<Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation>())
	,flags(std::make_unique<Rsvp::ControllerDetaileds::ControllerDetailed::Flags>())
{
    bandwidth_information->parent = this;
    children["bandwidth-information"] = bandwidth_information.get();

    flags->parent = this;
    children["flags"] = flags.get();

    yang_name = "controller-detailed"; yang_parent_name = "controller-detaileds";
}

Rsvp::ControllerDetaileds::ControllerDetailed::~ControllerDetailed()
{
}

bool Rsvp::ControllerDetaileds::ControllerDetailed::has_data() const
{
    for (std::size_t index=0; index<neighbor_array.size(); index++)
    {
        if(neighbor_array[index]->has_data())
            return true;
    }
    return controller_name.is_set
	|| ack_hold_time.is_set
	|| ack_max_size.is_set
	|| bundle_message_max_size.is_set
	|| expiry_drops_tolerated.is_set
	|| expiry_interval.is_set
	|| expiry_states.is_set
	|| expiry_timer_state.is_set
	|| integrity_receive_password.is_set
	|| integrity_receive_password_optional.is_set
	|| integrity_send_password.is_set
	|| interface_name_xr.is_set
	|| out_of_band_expiry_drops_tolerated.is_set
	|| out_of_band_refresh_interval.is_set
	|| pacing_interval.is_set
	|| pacing_message_rate.is_set
	|| pacing_messages.is_set
	|| pacing_timer_state.is_set
	|| refresh_interval.is_set
	|| refresh_timer_state.is_set
	|| retransmit_time.is_set
	|| signalling_ip_tos.is_set
	|| summary_refresh_max_size.is_set
	|| summary_refresh_timer_state.is_set
	|| (bandwidth_information !=  nullptr && bandwidth_information->has_data())
	|| (flags !=  nullptr && flags->has_data());
}

bool Rsvp::ControllerDetaileds::ControllerDetailed::has_operation() const
{
    for (std::size_t index=0; index<neighbor_array.size(); index++)
    {
        if(neighbor_array[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(controller_name.operation)
	|| is_set(ack_hold_time.operation)
	|| is_set(ack_max_size.operation)
	|| is_set(bundle_message_max_size.operation)
	|| is_set(expiry_drops_tolerated.operation)
	|| is_set(expiry_interval.operation)
	|| is_set(expiry_states.operation)
	|| is_set(expiry_timer_state.operation)
	|| is_set(integrity_receive_password.operation)
	|| is_set(integrity_receive_password_optional.operation)
	|| is_set(integrity_send_password.operation)
	|| is_set(interface_name_xr.operation)
	|| is_set(out_of_band_expiry_drops_tolerated.operation)
	|| is_set(out_of_band_refresh_interval.operation)
	|| is_set(pacing_interval.operation)
	|| is_set(pacing_message_rate.operation)
	|| is_set(pacing_messages.operation)
	|| is_set(pacing_timer_state.operation)
	|| is_set(refresh_interval.operation)
	|| is_set(refresh_timer_state.operation)
	|| is_set(retransmit_time.operation)
	|| is_set(signalling_ip_tos.operation)
	|| is_set(summary_refresh_max_size.operation)
	|| is_set(summary_refresh_timer_state.operation)
	|| (bandwidth_information !=  nullptr && bandwidth_information->has_operation())
	|| (flags !=  nullptr && flags->has_operation());
}

std::string Rsvp::ControllerDetaileds::ControllerDetailed::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "controller-detailed" <<"[controller-name='" <<controller_name.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::ControllerDetaileds::ControllerDetailed::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-detaileds/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (controller_name.is_set || is_set(controller_name.operation)) leaf_name_data.push_back(controller_name.get_name_leafdata());
    if (ack_hold_time.is_set || is_set(ack_hold_time.operation)) leaf_name_data.push_back(ack_hold_time.get_name_leafdata());
    if (ack_max_size.is_set || is_set(ack_max_size.operation)) leaf_name_data.push_back(ack_max_size.get_name_leafdata());
    if (bundle_message_max_size.is_set || is_set(bundle_message_max_size.operation)) leaf_name_data.push_back(bundle_message_max_size.get_name_leafdata());
    if (expiry_drops_tolerated.is_set || is_set(expiry_drops_tolerated.operation)) leaf_name_data.push_back(expiry_drops_tolerated.get_name_leafdata());
    if (expiry_interval.is_set || is_set(expiry_interval.operation)) leaf_name_data.push_back(expiry_interval.get_name_leafdata());
    if (expiry_states.is_set || is_set(expiry_states.operation)) leaf_name_data.push_back(expiry_states.get_name_leafdata());
    if (expiry_timer_state.is_set || is_set(expiry_timer_state.operation)) leaf_name_data.push_back(expiry_timer_state.get_name_leafdata());
    if (integrity_receive_password.is_set || is_set(integrity_receive_password.operation)) leaf_name_data.push_back(integrity_receive_password.get_name_leafdata());
    if (integrity_receive_password_optional.is_set || is_set(integrity_receive_password_optional.operation)) leaf_name_data.push_back(integrity_receive_password_optional.get_name_leafdata());
    if (integrity_send_password.is_set || is_set(integrity_send_password.operation)) leaf_name_data.push_back(integrity_send_password.get_name_leafdata());
    if (interface_name_xr.is_set || is_set(interface_name_xr.operation)) leaf_name_data.push_back(interface_name_xr.get_name_leafdata());
    if (out_of_band_expiry_drops_tolerated.is_set || is_set(out_of_band_expiry_drops_tolerated.operation)) leaf_name_data.push_back(out_of_band_expiry_drops_tolerated.get_name_leafdata());
    if (out_of_band_refresh_interval.is_set || is_set(out_of_band_refresh_interval.operation)) leaf_name_data.push_back(out_of_band_refresh_interval.get_name_leafdata());
    if (pacing_interval.is_set || is_set(pacing_interval.operation)) leaf_name_data.push_back(pacing_interval.get_name_leafdata());
    if (pacing_message_rate.is_set || is_set(pacing_message_rate.operation)) leaf_name_data.push_back(pacing_message_rate.get_name_leafdata());
    if (pacing_messages.is_set || is_set(pacing_messages.operation)) leaf_name_data.push_back(pacing_messages.get_name_leafdata());
    if (pacing_timer_state.is_set || is_set(pacing_timer_state.operation)) leaf_name_data.push_back(pacing_timer_state.get_name_leafdata());
    if (refresh_interval.is_set || is_set(refresh_interval.operation)) leaf_name_data.push_back(refresh_interval.get_name_leafdata());
    if (refresh_timer_state.is_set || is_set(refresh_timer_state.operation)) leaf_name_data.push_back(refresh_timer_state.get_name_leafdata());
    if (retransmit_time.is_set || is_set(retransmit_time.operation)) leaf_name_data.push_back(retransmit_time.get_name_leafdata());
    if (signalling_ip_tos.is_set || is_set(signalling_ip_tos.operation)) leaf_name_data.push_back(signalling_ip_tos.get_name_leafdata());
    if (summary_refresh_max_size.is_set || is_set(summary_refresh_max_size.operation)) leaf_name_data.push_back(summary_refresh_max_size.get_name_leafdata());
    if (summary_refresh_timer_state.is_set || is_set(summary_refresh_timer_state.operation)) leaf_name_data.push_back(summary_refresh_timer_state.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::ControllerDetaileds::ControllerDetailed::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "bandwidth-information")
    {
        if(bandwidth_information != nullptr)
        {
            children["bandwidth-information"] = bandwidth_information.get();
        }
        else
        {
            bandwidth_information = std::make_unique<Rsvp::ControllerDetaileds::ControllerDetailed::BandwidthInformation>();
            bandwidth_information->parent = this;
            children["bandwidth-information"] = bandwidth_information.get();
        }
        return children.at("bandwidth-information");
    }

    if(child_yang_name == "flags")
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
        else
        {
            flags = std::make_unique<Rsvp::ControllerDetaileds::ControllerDetailed::Flags>();
            flags->parent = this;
            children["flags"] = flags.get();
        }
        return children.at("flags");
    }

    if(child_yang_name == "neighbor-array")
    {
        for(auto const & c : neighbor_array)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::ControllerDetaileds::ControllerDetailed::NeighborArray>();
        c->parent = this;
        neighbor_array.push_back(std::move(c));
        children[segment_path] = neighbor_array.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::ControllerDetaileds::ControllerDetailed::get_children()
{
    if(children.find("bandwidth-information") == children.end())
    {
        if(bandwidth_information != nullptr)
        {
            children["bandwidth-information"] = bandwidth_information.get();
        }
    }

    if(children.find("flags") == children.end())
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
    }

    for (auto const & c : neighbor_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::ControllerDetaileds::ControllerDetailed::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "controller-name")
    {
        controller_name = value;
    }
    if(value_path == "ack-hold-time")
    {
        ack_hold_time = value;
    }
    if(value_path == "ack-max-size")
    {
        ack_max_size = value;
    }
    if(value_path == "bundle-message-max-size")
    {
        bundle_message_max_size = value;
    }
    if(value_path == "expiry-drops-tolerated")
    {
        expiry_drops_tolerated = value;
    }
    if(value_path == "expiry-interval")
    {
        expiry_interval = value;
    }
    if(value_path == "expiry-states")
    {
        expiry_states = value;
    }
    if(value_path == "expiry-timer-state")
    {
        expiry_timer_state = value;
    }
    if(value_path == "integrity-receive-password")
    {
        integrity_receive_password = value;
    }
    if(value_path == "integrity-receive-password-optional")
    {
        integrity_receive_password_optional = value;
    }
    if(value_path == "integrity-send-password")
    {
        integrity_send_password = value;
    }
    if(value_path == "interface-name-xr")
    {
        interface_name_xr = value;
    }
    if(value_path == "out-of-band-expiry-drops-tolerated")
    {
        out_of_band_expiry_drops_tolerated = value;
    }
    if(value_path == "out-of-band-refresh-interval")
    {
        out_of_band_refresh_interval = value;
    }
    if(value_path == "pacing-interval")
    {
        pacing_interval = value;
    }
    if(value_path == "pacing-message-rate")
    {
        pacing_message_rate = value;
    }
    if(value_path == "pacing-messages")
    {
        pacing_messages = value;
    }
    if(value_path == "pacing-timer-state")
    {
        pacing_timer_state = value;
    }
    if(value_path == "refresh-interval")
    {
        refresh_interval = value;
    }
    if(value_path == "refresh-timer-state")
    {
        refresh_timer_state = value;
    }
    if(value_path == "retransmit-time")
    {
        retransmit_time = value;
    }
    if(value_path == "signalling-ip-tos")
    {
        signalling_ip_tos = value;
    }
    if(value_path == "summary-refresh-max-size")
    {
        summary_refresh_max_size = value;
    }
    if(value_path == "summary-refresh-timer-state")
    {
        summary_refresh_timer_state = value;
    }
}

Rsvp::ControllerDetaileds::ControllerDetaileds()
{
    yang_name = "controller-detaileds"; yang_parent_name = "rsvp";
}

Rsvp::ControllerDetaileds::~ControllerDetaileds()
{
}

bool Rsvp::ControllerDetaileds::has_data() const
{
    for (std::size_t index=0; index<controller_detailed.size(); index++)
    {
        if(controller_detailed[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::ControllerDetaileds::has_operation() const
{
    for (std::size_t index=0; index<controller_detailed.size(); index++)
    {
        if(controller_detailed[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::ControllerDetaileds::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "controller-detaileds";

    return path_buffer.str();

}

EntityPath Rsvp::ControllerDetaileds::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::ControllerDetaileds::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "controller-detailed")
    {
        for(auto const & c : controller_detailed)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::ControllerDetaileds::ControllerDetailed>();
        c->parent = this;
        controller_detailed.push_back(std::move(c));
        children[segment_path] = controller_detailed.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::ControllerDetaileds::get_children()
{
    for (auto const & c : controller_detailed)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::ControllerDetaileds::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::BwPoolInfo::BwPoolInfo()
    :
    	bandwidth_configuration_model{YType::enumeration, "bandwidth-configuration-model"},
	 bc0_percent{YType::uint32, "bc0-percent"},
	 bc1_percent{YType::uint32, "bc1-percent"},
	 is_bc0_percent_configured{YType::boolean, "is-bc0-percent-configured"},
	 is_bc1_percent_configured{YType::boolean, "is-bc1-percent-configured"},
	 is_max_res_pool_percent_configured{YType::boolean, "is-max-res-pool-percent-configured"},
	 max_res_pool_percent{YType::uint32, "max-res-pool-percent"}
{
    yang_name = "bw-pool-info"; yang_parent_name = "rsvp";
}

Rsvp::BwPoolInfo::~BwPoolInfo()
{
}

bool Rsvp::BwPoolInfo::has_data() const
{
    return bandwidth_configuration_model.is_set
	|| bc0_percent.is_set
	|| bc1_percent.is_set
	|| is_bc0_percent_configured.is_set
	|| is_bc1_percent_configured.is_set
	|| is_max_res_pool_percent_configured.is_set
	|| max_res_pool_percent.is_set;
}

bool Rsvp::BwPoolInfo::has_operation() const
{
    return is_set(operation)
	|| is_set(bandwidth_configuration_model.operation)
	|| is_set(bc0_percent.operation)
	|| is_set(bc1_percent.operation)
	|| is_set(is_bc0_percent_configured.operation)
	|| is_set(is_bc1_percent_configured.operation)
	|| is_set(is_max_res_pool_percent_configured.operation)
	|| is_set(max_res_pool_percent.operation);
}

std::string Rsvp::BwPoolInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bw-pool-info";

    return path_buffer.str();

}

EntityPath Rsvp::BwPoolInfo::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (bandwidth_configuration_model.is_set || is_set(bandwidth_configuration_model.operation)) leaf_name_data.push_back(bandwidth_configuration_model.get_name_leafdata());
    if (bc0_percent.is_set || is_set(bc0_percent.operation)) leaf_name_data.push_back(bc0_percent.get_name_leafdata());
    if (bc1_percent.is_set || is_set(bc1_percent.operation)) leaf_name_data.push_back(bc1_percent.get_name_leafdata());
    if (is_bc0_percent_configured.is_set || is_set(is_bc0_percent_configured.operation)) leaf_name_data.push_back(is_bc0_percent_configured.get_name_leafdata());
    if (is_bc1_percent_configured.is_set || is_set(is_bc1_percent_configured.operation)) leaf_name_data.push_back(is_bc1_percent_configured.get_name_leafdata());
    if (is_max_res_pool_percent_configured.is_set || is_set(is_max_res_pool_percent_configured.operation)) leaf_name_data.push_back(is_max_res_pool_percent_configured.get_name_leafdata());
    if (max_res_pool_percent.is_set || is_set(max_res_pool_percent.operation)) leaf_name_data.push_back(max_res_pool_percent.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::BwPoolInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::BwPoolInfo::get_children()
{
    return children;
}

void Rsvp::BwPoolInfo::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "bandwidth-configuration-model")
    {
        bandwidth_configuration_model = value;
    }
    if(value_path == "bc0-percent")
    {
        bc0_percent = value;
    }
    if(value_path == "bc1-percent")
    {
        bc1_percent = value;
    }
    if(value_path == "is-bc0-percent-configured")
    {
        is_bc0_percent_configured = value;
    }
    if(value_path == "is-bc1-percent-configured")
    {
        is_bc1_percent_configured = value;
    }
    if(value_path == "is-max-res-pool-percent-configured")
    {
        is_max_res_pool_percent_configured = value;
    }
    if(value_path == "max-res-pool-percent")
    {
        max_res_pool_percent = value;
    }
}

Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::PreStandardDsteInterface::PreStandardDsteInterface()
    :
    	allocated_bit_rate{YType::uint64, "allocated-bit-rate"},
	 is_max_bandwidth_absolute{YType::boolean, "is-max-bandwidth-absolute"},
	 is_max_subpool_bandwidth_absolute{YType::boolean, "is-max-subpool-bandwidth-absolute"},
	 max_bandwidth{YType::uint64, "max-bandwidth"},
	 max_flow_bandwidth{YType::uint64, "max-flow-bandwidth"},
	 max_subpool_bandwidth{YType::uint64, "max-subpool-bandwidth"}
{
    yang_name = "pre-standard-dste-interface"; yang_parent_name = "bandwidth-information";
}

Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::PreStandardDsteInterface::~PreStandardDsteInterface()
{
}

bool Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::PreStandardDsteInterface::has_data() const
{
    return allocated_bit_rate.is_set
	|| is_max_bandwidth_absolute.is_set
	|| is_max_subpool_bandwidth_absolute.is_set
	|| max_bandwidth.is_set
	|| max_flow_bandwidth.is_set
	|| max_subpool_bandwidth.is_set;
}

bool Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::PreStandardDsteInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(allocated_bit_rate.operation)
	|| is_set(is_max_bandwidth_absolute.operation)
	|| is_set(is_max_subpool_bandwidth_absolute.operation)
	|| is_set(max_bandwidth.operation)
	|| is_set(max_flow_bandwidth.operation)
	|| is_set(max_subpool_bandwidth.operation);
}

std::string Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::PreStandardDsteInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pre-standard-dste-interface";

    return path_buffer.str();

}

EntityPath Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::PreStandardDsteInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (allocated_bit_rate.is_set || is_set(allocated_bit_rate.operation)) leaf_name_data.push_back(allocated_bit_rate.get_name_leafdata());
    if (is_max_bandwidth_absolute.is_set || is_set(is_max_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bandwidth_absolute.get_name_leafdata());
    if (is_max_subpool_bandwidth_absolute.is_set || is_set(is_max_subpool_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_subpool_bandwidth_absolute.get_name_leafdata());
    if (max_bandwidth.is_set || is_set(max_bandwidth.operation)) leaf_name_data.push_back(max_bandwidth.get_name_leafdata());
    if (max_flow_bandwidth.is_set || is_set(max_flow_bandwidth.operation)) leaf_name_data.push_back(max_flow_bandwidth.get_name_leafdata());
    if (max_subpool_bandwidth.is_set || is_set(max_subpool_bandwidth.operation)) leaf_name_data.push_back(max_subpool_bandwidth.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::PreStandardDsteInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::PreStandardDsteInterface::get_children()
{
    return children;
}

void Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::PreStandardDsteInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "allocated-bit-rate")
    {
        allocated_bit_rate = value;
    }
    if(value_path == "is-max-bandwidth-absolute")
    {
        is_max_bandwidth_absolute = value;
    }
    if(value_path == "is-max-subpool-bandwidth-absolute")
    {
        is_max_subpool_bandwidth_absolute = value;
    }
    if(value_path == "max-bandwidth")
    {
        max_bandwidth = value;
    }
    if(value_path == "max-flow-bandwidth")
    {
        max_flow_bandwidth = value;
    }
    if(value_path == "max-subpool-bandwidth")
    {
        max_subpool_bandwidth = value;
    }
}

Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::StandardDsteInterface::StandardDsteInterface()
    :
    	allocated_bit_rate{YType::uint64, "allocated-bit-rate"},
	 is_max_bandwidth_absolute{YType::boolean, "is-max-bandwidth-absolute"},
	 is_max_bc0_bandwidth_absolute{YType::boolean, "is-max-bc0-bandwidth-absolute"},
	 is_max_bc1_bandwidth_absolute{YType::boolean, "is-max-bc1-bandwidth-absolute"},
	 max_bandwidth{YType::uint64, "max-bandwidth"},
	 max_flow_bandwidth{YType::uint64, "max-flow-bandwidth"},
	 max_pool0_bandwidth{YType::uint64, "max-pool0-bandwidth"},
	 max_pool1_bandwidth{YType::uint64, "max-pool1-bandwidth"}
{
    yang_name = "standard-dste-interface"; yang_parent_name = "bandwidth-information";
}

Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::StandardDsteInterface::~StandardDsteInterface()
{
}

bool Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::StandardDsteInterface::has_data() const
{
    return allocated_bit_rate.is_set
	|| is_max_bandwidth_absolute.is_set
	|| is_max_bc0_bandwidth_absolute.is_set
	|| is_max_bc1_bandwidth_absolute.is_set
	|| max_bandwidth.is_set
	|| max_flow_bandwidth.is_set
	|| max_pool0_bandwidth.is_set
	|| max_pool1_bandwidth.is_set;
}

bool Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::StandardDsteInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(allocated_bit_rate.operation)
	|| is_set(is_max_bandwidth_absolute.operation)
	|| is_set(is_max_bc0_bandwidth_absolute.operation)
	|| is_set(is_max_bc1_bandwidth_absolute.operation)
	|| is_set(max_bandwidth.operation)
	|| is_set(max_flow_bandwidth.operation)
	|| is_set(max_pool0_bandwidth.operation)
	|| is_set(max_pool1_bandwidth.operation);
}

std::string Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::StandardDsteInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "standard-dste-interface";

    return path_buffer.str();

}

EntityPath Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::StandardDsteInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (allocated_bit_rate.is_set || is_set(allocated_bit_rate.operation)) leaf_name_data.push_back(allocated_bit_rate.get_name_leafdata());
    if (is_max_bandwidth_absolute.is_set || is_set(is_max_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bandwidth_absolute.get_name_leafdata());
    if (is_max_bc0_bandwidth_absolute.is_set || is_set(is_max_bc0_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bc0_bandwidth_absolute.get_name_leafdata());
    if (is_max_bc1_bandwidth_absolute.is_set || is_set(is_max_bc1_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bc1_bandwidth_absolute.get_name_leafdata());
    if (max_bandwidth.is_set || is_set(max_bandwidth.operation)) leaf_name_data.push_back(max_bandwidth.get_name_leafdata());
    if (max_flow_bandwidth.is_set || is_set(max_flow_bandwidth.operation)) leaf_name_data.push_back(max_flow_bandwidth.get_name_leafdata());
    if (max_pool0_bandwidth.is_set || is_set(max_pool0_bandwidth.operation)) leaf_name_data.push_back(max_pool0_bandwidth.get_name_leafdata());
    if (max_pool1_bandwidth.is_set || is_set(max_pool1_bandwidth.operation)) leaf_name_data.push_back(max_pool1_bandwidth.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::StandardDsteInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::StandardDsteInterface::get_children()
{
    return children;
}

void Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::StandardDsteInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "allocated-bit-rate")
    {
        allocated_bit_rate = value;
    }
    if(value_path == "is-max-bandwidth-absolute")
    {
        is_max_bandwidth_absolute = value;
    }
    if(value_path == "is-max-bc0-bandwidth-absolute")
    {
        is_max_bc0_bandwidth_absolute = value;
    }
    if(value_path == "is-max-bc1-bandwidth-absolute")
    {
        is_max_bc1_bandwidth_absolute = value;
    }
    if(value_path == "max-bandwidth")
    {
        max_bandwidth = value;
    }
    if(value_path == "max-flow-bandwidth")
    {
        max_flow_bandwidth = value;
    }
    if(value_path == "max-pool0-bandwidth")
    {
        max_pool0_bandwidth = value;
    }
    if(value_path == "max-pool1-bandwidth")
    {
        max_pool1_bandwidth = value;
    }
}

Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::BandwidthInformation()
    :
    	dste_mode{YType::enumeration, "dste-mode"}
    	,
    pre_standard_dste_interface(std::make_unique<Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::PreStandardDsteInterface>())
	,standard_dste_interface(std::make_unique<Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::StandardDsteInterface>())
{
    pre_standard_dste_interface->parent = this;
    children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();

    standard_dste_interface->parent = this;
    children["standard-dste-interface"] = standard_dste_interface.get();

    yang_name = "bandwidth-information"; yang_parent_name = "controller-brief";
}

Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::~BandwidthInformation()
{
}

bool Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::has_data() const
{
    return dste_mode.is_set
	|| (pre_standard_dste_interface !=  nullptr && pre_standard_dste_interface->has_data())
	|| (standard_dste_interface !=  nullptr && standard_dste_interface->has_data());
}

bool Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::has_operation() const
{
    return is_set(operation)
	|| is_set(dste_mode.operation)
	|| (pre_standard_dste_interface !=  nullptr && pre_standard_dste_interface->has_operation())
	|| (standard_dste_interface !=  nullptr && standard_dste_interface->has_operation());
}

std::string Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bandwidth-information";

    return path_buffer.str();

}

EntityPath Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (dste_mode.is_set || is_set(dste_mode.operation)) leaf_name_data.push_back(dste_mode.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "pre-standard-dste-interface")
    {
        if(pre_standard_dste_interface != nullptr)
        {
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
        else
        {
            pre_standard_dste_interface = std::make_unique<Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::PreStandardDsteInterface>();
            pre_standard_dste_interface->parent = this;
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
        return children.at("pre-standard-dste-interface");
    }

    if(child_yang_name == "standard-dste-interface")
    {
        if(standard_dste_interface != nullptr)
        {
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
        else
        {
            standard_dste_interface = std::make_unique<Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::StandardDsteInterface>();
            standard_dste_interface->parent = this;
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
        return children.at("standard-dste-interface");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::get_children()
{
    if(children.find("pre-standard-dste-interface") == children.end())
    {
        if(pre_standard_dste_interface != nullptr)
        {
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
    }

    if(children.find("standard-dste-interface") == children.end())
    {
        if(standard_dste_interface != nullptr)
        {
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
    }

    return children;
}

void Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "dste-mode")
    {
        dste_mode = value;
    }
}

Rsvp::ControllerBriefs::ControllerBrief::ControllerBrief()
    :
    	controller_name{YType::str, "controller-name"},
	 interface_name_xr{YType::str, "interface-name-xr"}
    	,
    bandwidth_information(std::make_unique<Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation>())
{
    bandwidth_information->parent = this;
    children["bandwidth-information"] = bandwidth_information.get();

    yang_name = "controller-brief"; yang_parent_name = "controller-briefs";
}

Rsvp::ControllerBriefs::ControllerBrief::~ControllerBrief()
{
}

bool Rsvp::ControllerBriefs::ControllerBrief::has_data() const
{
    return controller_name.is_set
	|| interface_name_xr.is_set
	|| (bandwidth_information !=  nullptr && bandwidth_information->has_data());
}

bool Rsvp::ControllerBriefs::ControllerBrief::has_operation() const
{
    return is_set(operation)
	|| is_set(controller_name.operation)
	|| is_set(interface_name_xr.operation)
	|| (bandwidth_information !=  nullptr && bandwidth_information->has_operation());
}

std::string Rsvp::ControllerBriefs::ControllerBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "controller-brief" <<"[controller-name='" <<controller_name.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::ControllerBriefs::ControllerBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (controller_name.is_set || is_set(controller_name.operation)) leaf_name_data.push_back(controller_name.get_name_leafdata());
    if (interface_name_xr.is_set || is_set(interface_name_xr.operation)) leaf_name_data.push_back(interface_name_xr.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::ControllerBriefs::ControllerBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "bandwidth-information")
    {
        if(bandwidth_information != nullptr)
        {
            children["bandwidth-information"] = bandwidth_information.get();
        }
        else
        {
            bandwidth_information = std::make_unique<Rsvp::ControllerBriefs::ControllerBrief::BandwidthInformation>();
            bandwidth_information->parent = this;
            children["bandwidth-information"] = bandwidth_information.get();
        }
        return children.at("bandwidth-information");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::ControllerBriefs::ControllerBrief::get_children()
{
    if(children.find("bandwidth-information") == children.end())
    {
        if(bandwidth_information != nullptr)
        {
            children["bandwidth-information"] = bandwidth_information.get();
        }
    }

    return children;
}

void Rsvp::ControllerBriefs::ControllerBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "controller-name")
    {
        controller_name = value;
    }
    if(value_path == "interface-name-xr")
    {
        interface_name_xr = value;
    }
}

Rsvp::ControllerBriefs::ControllerBriefs()
{
    yang_name = "controller-briefs"; yang_parent_name = "rsvp";
}

Rsvp::ControllerBriefs::~ControllerBriefs()
{
}

bool Rsvp::ControllerBriefs::has_data() const
{
    for (std::size_t index=0; index<controller_brief.size(); index++)
    {
        if(controller_brief[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::ControllerBriefs::has_operation() const
{
    for (std::size_t index=0; index<controller_brief.size(); index++)
    {
        if(controller_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::ControllerBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "controller-briefs";

    return path_buffer.str();

}

EntityPath Rsvp::ControllerBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::ControllerBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "controller-brief")
    {
        for(auto const & c : controller_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::ControllerBriefs::ControllerBrief>();
        c->parent = this;
        controller_brief.push_back(std::move(c));
        children[segment_path] = controller_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::ControllerBriefs::get_children()
{
    for (auto const & c : controller_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::ControllerBriefs::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::~RsvpSession()
{
}

bool Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

Rsvp::PxsbDetails::PxsbDetail::Session::Session()
    :
    rsvp_session(std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "pxsb-detail";
}

Rsvp::PxsbDetails::PxsbDetail::Session::~Session()
{
}

bool Rsvp::PxsbDetails::PxsbDetail::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool Rsvp::PxsbDetails::PxsbDetail::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string Rsvp::PxsbDetails::PxsbDetail::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath Rsvp::PxsbDetails::PxsbDetail::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PxsbDetails::PxsbDetail::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PxsbDetails::PxsbDetail::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void Rsvp::PxsbDetails::PxsbDetail::Session::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::PxsbDetails::PxsbDetail::S2LSubLsp::S2LSubLsp()
    :
    	s2l_destination_address{YType::str, "s2l-destination-address"}
{
    yang_name = "s2l-sub-lsp"; yang_parent_name = "pxsb-detail";
}

Rsvp::PxsbDetails::PxsbDetail::S2LSubLsp::~S2LSubLsp()
{
}

bool Rsvp::PxsbDetails::PxsbDetail::S2LSubLsp::has_data() const
{
    return s2l_destination_address.is_set;
}

bool Rsvp::PxsbDetails::PxsbDetail::S2LSubLsp::has_operation() const
{
    return is_set(operation)
	|| is_set(s2l_destination_address.operation);
}

std::string Rsvp::PxsbDetails::PxsbDetail::S2LSubLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "s2l-sub-lsp";

    return path_buffer.str();

}

EntityPath Rsvp::PxsbDetails::PxsbDetail::S2LSubLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (s2l_destination_address.is_set || is_set(s2l_destination_address.operation)) leaf_name_data.push_back(s2l_destination_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PxsbDetails::PxsbDetail::S2LSubLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PxsbDetails::PxsbDetail::S2LSubLsp::get_children()
{
    return children;
}

void Rsvp::PxsbDetails::PxsbDetail::S2LSubLsp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "s2l-destination-address")
    {
        s2l_destination_address = value;
    }
}

Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::UdpIpv4Session::UdpIpv4Session()
    :
    	source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"}
{
    yang_name = "udp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::UdpIpv4Session::~UdpIpv4Session()
{
}

bool Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::UdpIpv4Session::has_data() const
{
    return source_address.is_set
	|| source_port.is_set;
}

bool Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::UdpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation);
}

std::string Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::UdpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "udp-ipv4-session";

    return path_buffer.str();

}

EntityPath Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::UdpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/template/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::UdpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::UdpIpv4Session::get_children()
{
    return children;
}

void Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::UdpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
}

Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::P2MpIpv4Session::P2MpIpv4Session()
    :
    	p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"},
	 sub_group_id{YType::uint16, "sub-group-id"}
{
    yang_name = "p2mp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::P2MpIpv4Session::~P2MpIpv4Session()
{
}

bool Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::P2MpIpv4Session::has_data() const
{
    return p2mp_sub_group_origin.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set;
}

bool Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::P2MpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation);
}

std::string Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::P2MpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "p2mp-ipv4-session";

    return path_buffer.str();

}

EntityPath Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::P2MpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/template/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::P2MpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::P2MpIpv4Session::get_children()
{
    return children;
}

void Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::P2MpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
}

Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::RsvpFilter()
    :
    	filter_type{YType::enumeration, "filter-type"}
    	,
    p2mp_ipv4_session(std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::P2MpIpv4Session>())
	,udp_ipv4_session(std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::UdpIpv4Session>())
{
    p2mp_ipv4_session->parent = this;
    children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();

    udp_ipv4_session->parent = this;
    children["udp-ipv4-session"] = udp_ipv4_session.get();

    yang_name = "rsvp-filter"; yang_parent_name = "template";
}

Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::~RsvpFilter()
{
}

bool Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::has_data() const
{
    return filter_type.is_set
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_data())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_data());
}

bool Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::has_operation() const
{
    return is_set(operation)
	|| is_set(filter_type.operation)
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_operation())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_operation());
}

std::string Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-filter";

    return path_buffer.str();

}

EntityPath Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/template/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (filter_type.is_set || is_set(filter_type.operation)) leaf_name_data.push_back(filter_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "p2mp-ipv4-session")
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        else
        {
            p2mp_ipv4_session = std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::P2MpIpv4Session>();
            p2mp_ipv4_session->parent = this;
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        return children.at("p2mp-ipv4-session");
    }

    if(child_yang_name == "udp-ipv4-session")
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        else
        {
            udp_ipv4_session = std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::UdpIpv4Session>();
            udp_ipv4_session->parent = this;
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        return children.at("udp-ipv4-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::get_children()
{
    if(children.find("p2mp-ipv4-session") == children.end())
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
    }

    if(children.find("udp-ipv4-session") == children.end())
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
    }

    return children;
}

void Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "filter-type")
    {
        filter_type = value;
    }
}

Rsvp::PxsbDetails::PxsbDetail::Template_::Template_()
    :
    rsvp_filter(std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter>())
{
    rsvp_filter->parent = this;
    children["rsvp-filter"] = rsvp_filter.get();

    yang_name = "template"; yang_parent_name = "pxsb-detail";
}

Rsvp::PxsbDetails::PxsbDetail::Template_::~Template_()
{
}

bool Rsvp::PxsbDetails::PxsbDetail::Template_::has_data() const
{
    return (rsvp_filter !=  nullptr && rsvp_filter->has_data());
}

bool Rsvp::PxsbDetails::PxsbDetail::Template_::has_operation() const
{
    return is_set(operation)
	|| (rsvp_filter !=  nullptr && rsvp_filter->has_operation());
}

std::string Rsvp::PxsbDetails::PxsbDetail::Template_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "template";

    return path_buffer.str();

}

EntityPath Rsvp::PxsbDetails::PxsbDetail::Template_::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PxsbDetails::PxsbDetail::Template_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-filter")
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
        else
        {
            rsvp_filter = std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Template_::RsvpFilter>();
            rsvp_filter->parent = this;
            children["rsvp-filter"] = rsvp_filter.get();
        }
        return children.at("rsvp-filter");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PxsbDetails::PxsbDetail::Template_::get_children()
{
    if(children.find("rsvp-filter") == children.end())
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
    }

    return children;
}

void Rsvp::PxsbDetails::PxsbDetail::Template_::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::PxsbDetails::PxsbDetail::TrafficSpec::TrafficSpec()
    :
    	traffic_average_rate{YType::uint64, "traffic-average-rate"},
	 traffic_max_burst{YType::uint64, "traffic-max-burst"},
	 traffic_max_unit{YType::uint32, "traffic-max-unit"},
	 traffic_min_unit{YType::uint32, "traffic-min-unit"},
	 traffic_peak_rate{YType::uint64, "traffic-peak-rate"}
{
    yang_name = "traffic-spec"; yang_parent_name = "pxsb-detail";
}

Rsvp::PxsbDetails::PxsbDetail::TrafficSpec::~TrafficSpec()
{
}

bool Rsvp::PxsbDetails::PxsbDetail::TrafficSpec::has_data() const
{
    return traffic_average_rate.is_set
	|| traffic_max_burst.is_set
	|| traffic_max_unit.is_set
	|| traffic_min_unit.is_set
	|| traffic_peak_rate.is_set;
}

bool Rsvp::PxsbDetails::PxsbDetail::TrafficSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_average_rate.operation)
	|| is_set(traffic_max_burst.operation)
	|| is_set(traffic_max_unit.operation)
	|| is_set(traffic_min_unit.operation)
	|| is_set(traffic_peak_rate.operation);
}

std::string Rsvp::PxsbDetails::PxsbDetail::TrafficSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "traffic-spec";

    return path_buffer.str();

}

EntityPath Rsvp::PxsbDetails::PxsbDetail::TrafficSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_average_rate.is_set || is_set(traffic_average_rate.operation)) leaf_name_data.push_back(traffic_average_rate.get_name_leafdata());
    if (traffic_max_burst.is_set || is_set(traffic_max_burst.operation)) leaf_name_data.push_back(traffic_max_burst.get_name_leafdata());
    if (traffic_max_unit.is_set || is_set(traffic_max_unit.operation)) leaf_name_data.push_back(traffic_max_unit.get_name_leafdata());
    if (traffic_min_unit.is_set || is_set(traffic_min_unit.operation)) leaf_name_data.push_back(traffic_min_unit.get_name_leafdata());
    if (traffic_peak_rate.is_set || is_set(traffic_peak_rate.operation)) leaf_name_data.push_back(traffic_peak_rate.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PxsbDetails::PxsbDetail::TrafficSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PxsbDetails::PxsbDetail::TrafficSpec::get_children()
{
    return children;
}

void Rsvp::PxsbDetails::PxsbDetail::TrafficSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-average-rate")
    {
        traffic_average_rate = value;
    }
    if(value_path == "traffic-max-burst")
    {
        traffic_max_burst = value;
    }
    if(value_path == "traffic-max-unit")
    {
        traffic_max_unit = value;
    }
    if(value_path == "traffic-min-unit")
    {
        traffic_min_unit = value;
    }
    if(value_path == "traffic-peak-rate")
    {
        traffic_peak_rate = value;
    }
}

Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::G709OtnTspec::G709OtnTspec()
    :
    	traffic_bit_rate{YType::uint64, "traffic-bit-rate"},
	 traffic_multiplier{YType::uint16, "traffic-multiplier"},
	 traffic_nvc{YType::uint16, "traffic-nvc"},
	 traffic_signal_type{YType::uint8, "traffic-signal-type"}
{
    yang_name = "g709otn-tspec"; yang_parent_name = "generic-traffic-spec";
}

Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::G709OtnTspec::~G709OtnTspec()
{
}

bool Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::G709OtnTspec::has_data() const
{
    return traffic_bit_rate.is_set
	|| traffic_multiplier.is_set
	|| traffic_nvc.is_set
	|| traffic_signal_type.is_set;
}

bool Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::G709OtnTspec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_bit_rate.operation)
	|| is_set(traffic_multiplier.operation)
	|| is_set(traffic_nvc.operation)
	|| is_set(traffic_signal_type.operation);
}

std::string Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::G709OtnTspec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-tspec";

    return path_buffer.str();

}

EntityPath Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::G709OtnTspec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/generic-traffic-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_bit_rate.is_set || is_set(traffic_bit_rate.operation)) leaf_name_data.push_back(traffic_bit_rate.get_name_leafdata());
    if (traffic_multiplier.is_set || is_set(traffic_multiplier.operation)) leaf_name_data.push_back(traffic_multiplier.get_name_leafdata());
    if (traffic_nvc.is_set || is_set(traffic_nvc.operation)) leaf_name_data.push_back(traffic_nvc.get_name_leafdata());
    if (traffic_signal_type.is_set || is_set(traffic_signal_type.operation)) leaf_name_data.push_back(traffic_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::G709OtnTspec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::G709OtnTspec::get_children()
{
    return children;
}

void Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::G709OtnTspec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-bit-rate")
    {
        traffic_bit_rate = value;
    }
    if(value_path == "traffic-multiplier")
    {
        traffic_multiplier = value;
    }
    if(value_path == "traffic-nvc")
    {
        traffic_nvc = value;
    }
    if(value_path == "traffic-signal-type")
    {
        traffic_signal_type = value;
    }
}

Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::IntsrvTspec::IntsrvTspec()
    :
    	traffic_average_rate{YType::uint64, "traffic-average-rate"},
	 traffic_max_burst{YType::uint64, "traffic-max-burst"},
	 traffic_max_unit{YType::uint32, "traffic-max-unit"},
	 traffic_min_unit{YType::uint32, "traffic-min-unit"},
	 traffic_peak_rate{YType::uint64, "traffic-peak-rate"}
{
    yang_name = "intsrv-tspec"; yang_parent_name = "generic-traffic-spec";
}

Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::IntsrvTspec::~IntsrvTspec()
{
}

bool Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::IntsrvTspec::has_data() const
{
    return traffic_average_rate.is_set
	|| traffic_max_burst.is_set
	|| traffic_max_unit.is_set
	|| traffic_min_unit.is_set
	|| traffic_peak_rate.is_set;
}

bool Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::IntsrvTspec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_average_rate.operation)
	|| is_set(traffic_max_burst.operation)
	|| is_set(traffic_max_unit.operation)
	|| is_set(traffic_min_unit.operation)
	|| is_set(traffic_peak_rate.operation);
}

std::string Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::IntsrvTspec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "intsrv-tspec";

    return path_buffer.str();

}

EntityPath Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::IntsrvTspec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/generic-traffic-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_average_rate.is_set || is_set(traffic_average_rate.operation)) leaf_name_data.push_back(traffic_average_rate.get_name_leafdata());
    if (traffic_max_burst.is_set || is_set(traffic_max_burst.operation)) leaf_name_data.push_back(traffic_max_burst.get_name_leafdata());
    if (traffic_max_unit.is_set || is_set(traffic_max_unit.operation)) leaf_name_data.push_back(traffic_max_unit.get_name_leafdata());
    if (traffic_min_unit.is_set || is_set(traffic_min_unit.operation)) leaf_name_data.push_back(traffic_min_unit.get_name_leafdata());
    if (traffic_peak_rate.is_set || is_set(traffic_peak_rate.operation)) leaf_name_data.push_back(traffic_peak_rate.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::IntsrvTspec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::IntsrvTspec::get_children()
{
    return children;
}

void Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::IntsrvTspec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-average-rate")
    {
        traffic_average_rate = value;
    }
    if(value_path == "traffic-max-burst")
    {
        traffic_max_burst = value;
    }
    if(value_path == "traffic-max-unit")
    {
        traffic_max_unit = value;
    }
    if(value_path == "traffic-min-unit")
    {
        traffic_min_unit = value;
    }
    if(value_path == "traffic-peak-rate")
    {
        traffic_peak_rate = value;
    }
}

Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::GenericTrafficSpec()
    :
    	tspec_type{YType::enumeration, "tspec-type"}
    	,
    g709otn_tspec(std::make_unique<Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::G709OtnTspec>())
	,intsrv_tspec(std::make_unique<Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::IntsrvTspec>())
{
    g709otn_tspec->parent = this;
    children["g709otn-tspec"] = g709otn_tspec.get();

    intsrv_tspec->parent = this;
    children["intsrv-tspec"] = intsrv_tspec.get();

    yang_name = "generic-traffic-spec"; yang_parent_name = "pxsb-detail";
}

Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::~GenericTrafficSpec()
{
}

bool Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::has_data() const
{
    return tspec_type.is_set
	|| (g709otn_tspec !=  nullptr && g709otn_tspec->has_data())
	|| (intsrv_tspec !=  nullptr && intsrv_tspec->has_data());
}

bool Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(tspec_type.operation)
	|| (g709otn_tspec !=  nullptr && g709otn_tspec->has_operation())
	|| (intsrv_tspec !=  nullptr && intsrv_tspec->has_operation());
}

std::string Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-traffic-spec";

    return path_buffer.str();

}

EntityPath Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (tspec_type.is_set || is_set(tspec_type.operation)) leaf_name_data.push_back(tspec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-tspec")
    {
        if(g709otn_tspec != nullptr)
        {
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
        else
        {
            g709otn_tspec = std::make_unique<Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::G709OtnTspec>();
            g709otn_tspec->parent = this;
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
        return children.at("g709otn-tspec");
    }

    if(child_yang_name == "intsrv-tspec")
    {
        if(intsrv_tspec != nullptr)
        {
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
        else
        {
            intsrv_tspec = std::make_unique<Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::IntsrvTspec>();
            intsrv_tspec->parent = this;
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
        return children.at("intsrv-tspec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::get_children()
{
    if(children.find("g709otn-tspec") == children.end())
    {
        if(g709otn_tspec != nullptr)
        {
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
    }

    if(children.find("intsrv-tspec") == children.end())
    {
        if(intsrv_tspec != nullptr)
        {
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
    }

    return children;
}

void Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "tspec-type")
    {
        tspec_type = value;
    }
}

Rsvp::PxsbDetails::PxsbDetail::Hop::Hop()
    :
    	neighbor_address{YType::str, "neighbor-address"},
	 neighbor_logical_interface_name{YType::str, "neighbor-logical-interface-name"}
{
    yang_name = "hop"; yang_parent_name = "pxsb-detail";
}

Rsvp::PxsbDetails::PxsbDetail::Hop::~Hop()
{
}

bool Rsvp::PxsbDetails::PxsbDetail::Hop::has_data() const
{
    return neighbor_address.is_set
	|| neighbor_logical_interface_name.is_set;
}

bool Rsvp::PxsbDetails::PxsbDetail::Hop::has_operation() const
{
    return is_set(operation)
	|| is_set(neighbor_address.operation)
	|| is_set(neighbor_logical_interface_name.operation);
}

std::string Rsvp::PxsbDetails::PxsbDetail::Hop::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hop";

    return path_buffer.str();

}

EntityPath Rsvp::PxsbDetails::PxsbDetail::Hop::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (neighbor_logical_interface_name.is_set || is_set(neighbor_logical_interface_name.operation)) leaf_name_data.push_back(neighbor_logical_interface_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PxsbDetails::PxsbDetail::Hop::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PxsbDetails::PxsbDetail::Hop::get_children()
{
    return children;
}

void Rsvp::PxsbDetails::PxsbDetail::Hop::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "neighbor-logical-interface-name")
    {
        neighbor_logical_interface_name = value;
    }
}

Rsvp::PxsbDetails::PxsbDetail::RsvpHeader::RsvpHeader()
    :
    	ip_source_address{YType::str, "ip-source-address"},
	 ip_tos{YType::uint8, "ip-tos"},
	 ip_ttl{YType::uint8, "ip-ttl"},
	 rsvp_header_flags{YType::uint8, "rsvp-header-flags"},
	 rsvp_message_type{YType::uint8, "rsvp-message-type"},
	 rsvp_ttl{YType::uint8, "rsvp-ttl"},
	 rsvp_version{YType::uint8, "rsvp-version"}
{
    yang_name = "rsvp-header"; yang_parent_name = "pxsb-detail";
}

Rsvp::PxsbDetails::PxsbDetail::RsvpHeader::~RsvpHeader()
{
}

bool Rsvp::PxsbDetails::PxsbDetail::RsvpHeader::has_data() const
{
    return ip_source_address.is_set
	|| ip_tos.is_set
	|| ip_ttl.is_set
	|| rsvp_header_flags.is_set
	|| rsvp_message_type.is_set
	|| rsvp_ttl.is_set
	|| rsvp_version.is_set;
}

bool Rsvp::PxsbDetails::PxsbDetail::RsvpHeader::has_operation() const
{
    return is_set(operation)
	|| is_set(ip_source_address.operation)
	|| is_set(ip_tos.operation)
	|| is_set(ip_ttl.operation)
	|| is_set(rsvp_header_flags.operation)
	|| is_set(rsvp_message_type.operation)
	|| is_set(rsvp_ttl.operation)
	|| is_set(rsvp_version.operation);
}

std::string Rsvp::PxsbDetails::PxsbDetail::RsvpHeader::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-header";

    return path_buffer.str();

}

EntityPath Rsvp::PxsbDetails::PxsbDetail::RsvpHeader::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ip_source_address.is_set || is_set(ip_source_address.operation)) leaf_name_data.push_back(ip_source_address.get_name_leafdata());
    if (ip_tos.is_set || is_set(ip_tos.operation)) leaf_name_data.push_back(ip_tos.get_name_leafdata());
    if (ip_ttl.is_set || is_set(ip_ttl.operation)) leaf_name_data.push_back(ip_ttl.get_name_leafdata());
    if (rsvp_header_flags.is_set || is_set(rsvp_header_flags.operation)) leaf_name_data.push_back(rsvp_header_flags.get_name_leafdata());
    if (rsvp_message_type.is_set || is_set(rsvp_message_type.operation)) leaf_name_data.push_back(rsvp_message_type.get_name_leafdata());
    if (rsvp_ttl.is_set || is_set(rsvp_ttl.operation)) leaf_name_data.push_back(rsvp_ttl.get_name_leafdata());
    if (rsvp_version.is_set || is_set(rsvp_version.operation)) leaf_name_data.push_back(rsvp_version.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PxsbDetails::PxsbDetail::RsvpHeader::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PxsbDetails::PxsbDetail::RsvpHeader::get_children()
{
    return children;
}

void Rsvp::PxsbDetails::PxsbDetail::RsvpHeader::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ip-source-address")
    {
        ip_source_address = value;
    }
    if(value_path == "ip-tos")
    {
        ip_tos = value;
    }
    if(value_path == "ip-ttl")
    {
        ip_ttl = value;
    }
    if(value_path == "rsvp-header-flags")
    {
        rsvp_header_flags = value;
    }
    if(value_path == "rsvp-message-type")
    {
        rsvp_message_type = value;
    }
    if(value_path == "rsvp-ttl")
    {
        rsvp_ttl = value;
    }
    if(value_path == "rsvp-version")
    {
        rsvp_version = value;
    }
}

Rsvp::PxsbDetails::PxsbDetail::PxsbDetail()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 dynamic_state{YType::uint32, "dynamic-state"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 input_interface{YType::str, "input-interface"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 protocol{YType::int32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::int32, "source-port"},
	 sub_group_id{YType::int32, "sub-group-id"},
	 sub_group_origin{YType::str, "sub-group-origin"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    generic_traffic_spec(std::make_unique<Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec>())
	,hop(std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Hop>())
	,rsvp_header(std::make_unique<Rsvp::PxsbDetails::PxsbDetail::RsvpHeader>())
	,s2l_sub_lsp(std::make_unique<Rsvp::PxsbDetails::PxsbDetail::S2LSubLsp>())
	,session(std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Session>())
	,template_(std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Template_>())
	,traffic_spec(std::make_unique<Rsvp::PxsbDetails::PxsbDetail::TrafficSpec>())
{
    generic_traffic_spec->parent = this;
    children["generic-traffic-spec"] = generic_traffic_spec.get();

    hop->parent = this;
    children["hop"] = hop.get();

    rsvp_header->parent = this;
    children["rsvp-header"] = rsvp_header.get();

    s2l_sub_lsp->parent = this;
    children["s2l-sub-lsp"] = s2l_sub_lsp.get();

    session->parent = this;
    children["session"] = session.get();

    template_->parent = this;
    children["template"] = template_.get();

    traffic_spec->parent = this;
    children["traffic-spec"] = traffic_spec.get();

    yang_name = "pxsb-detail"; yang_parent_name = "pxsb-details";
}

Rsvp::PxsbDetails::PxsbDetail::~PxsbDetail()
{
}

bool Rsvp::PxsbDetails::PxsbDetail::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| dynamic_state.is_set
	|| extended_tunnel_id.is_set
	|| input_interface.is_set
	|| p2mp_id.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set
	|| sub_group_origin.is_set
	|| vrf_name.is_set
	|| (generic_traffic_spec !=  nullptr && generic_traffic_spec->has_data())
	|| (hop !=  nullptr && hop->has_data())
	|| (rsvp_header !=  nullptr && rsvp_header->has_data())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_data())
	|| (session !=  nullptr && session->has_data())
	|| (template_ !=  nullptr && template_->has_data())
	|| (traffic_spec !=  nullptr && traffic_spec->has_data());
}

bool Rsvp::PxsbDetails::PxsbDetail::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(dynamic_state.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(input_interface.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(sub_group_origin.operation)
	|| is_set(vrf_name.operation)
	|| (generic_traffic_spec !=  nullptr && generic_traffic_spec->has_operation())
	|| (hop !=  nullptr && hop->has_operation())
	|| (rsvp_header !=  nullptr && rsvp_header->has_operation())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_operation())
	|| (session !=  nullptr && session->has_operation())
	|| (template_ !=  nullptr && template_->has_operation())
	|| (traffic_spec !=  nullptr && traffic_spec->has_operation());
}

std::string Rsvp::PxsbDetails::PxsbDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pxsb-detail";

    return path_buffer.str();

}

EntityPath Rsvp::PxsbDetails::PxsbDetail::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (dynamic_state.is_set || is_set(dynamic_state.operation)) leaf_name_data.push_back(dynamic_state.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (input_interface.is_set || is_set(input_interface.operation)) leaf_name_data.push_back(input_interface.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (sub_group_origin.is_set || is_set(sub_group_origin.operation)) leaf_name_data.push_back(sub_group_origin.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PxsbDetails::PxsbDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generic-traffic-spec")
    {
        if(generic_traffic_spec != nullptr)
        {
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
        else
        {
            generic_traffic_spec = std::make_unique<Rsvp::PxsbDetails::PxsbDetail::GenericTrafficSpec>();
            generic_traffic_spec->parent = this;
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
        return children.at("generic-traffic-spec");
    }

    if(child_yang_name == "hop")
    {
        if(hop != nullptr)
        {
            children["hop"] = hop.get();
        }
        else
        {
            hop = std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Hop>();
            hop->parent = this;
            children["hop"] = hop.get();
        }
        return children.at("hop");
    }

    if(child_yang_name == "rsvp-header")
    {
        if(rsvp_header != nullptr)
        {
            children["rsvp-header"] = rsvp_header.get();
        }
        else
        {
            rsvp_header = std::make_unique<Rsvp::PxsbDetails::PxsbDetail::RsvpHeader>();
            rsvp_header->parent = this;
            children["rsvp-header"] = rsvp_header.get();
        }
        return children.at("rsvp-header");
    }

    if(child_yang_name == "s2l-sub-lsp")
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        else
        {
            s2l_sub_lsp = std::make_unique<Rsvp::PxsbDetails::PxsbDetail::S2LSubLsp>();
            s2l_sub_lsp->parent = this;
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        return children.at("s2l-sub-lsp");
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    if(child_yang_name == "template")
    {
        if(template_ != nullptr)
        {
            children["template"] = template_.get();
        }
        else
        {
            template_ = std::make_unique<Rsvp::PxsbDetails::PxsbDetail::Template_>();
            template_->parent = this;
            children["template"] = template_.get();
        }
        return children.at("template");
    }

    if(child_yang_name == "traffic-spec")
    {
        if(traffic_spec != nullptr)
        {
            children["traffic-spec"] = traffic_spec.get();
        }
        else
        {
            traffic_spec = std::make_unique<Rsvp::PxsbDetails::PxsbDetail::TrafficSpec>();
            traffic_spec->parent = this;
            children["traffic-spec"] = traffic_spec.get();
        }
        return children.at("traffic-spec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PxsbDetails::PxsbDetail::get_children()
{
    if(children.find("generic-traffic-spec") == children.end())
    {
        if(generic_traffic_spec != nullptr)
        {
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
    }

    if(children.find("hop") == children.end())
    {
        if(hop != nullptr)
        {
            children["hop"] = hop.get();
        }
    }

    if(children.find("rsvp-header") == children.end())
    {
        if(rsvp_header != nullptr)
        {
            children["rsvp-header"] = rsvp_header.get();
        }
    }

    if(children.find("s2l-sub-lsp") == children.end())
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
    }

    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    if(children.find("template") == children.end())
    {
        if(template_ != nullptr)
        {
            children["template"] = template_.get();
        }
    }

    if(children.find("traffic-spec") == children.end())
    {
        if(traffic_spec != nullptr)
        {
            children["traffic-spec"] = traffic_spec.get();
        }
    }

    return children;
}

void Rsvp::PxsbDetails::PxsbDetail::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "dynamic-state")
    {
        dynamic_state = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "input-interface")
    {
        input_interface = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "sub-group-origin")
    {
        sub_group_origin = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

Rsvp::PxsbDetails::PxsbDetails()
{
    yang_name = "pxsb-details"; yang_parent_name = "rsvp";
}

Rsvp::PxsbDetails::~PxsbDetails()
{
}

bool Rsvp::PxsbDetails::has_data() const
{
    for (std::size_t index=0; index<pxsb_detail.size(); index++)
    {
        if(pxsb_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::PxsbDetails::has_operation() const
{
    for (std::size_t index=0; index<pxsb_detail.size(); index++)
    {
        if(pxsb_detail[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::PxsbDetails::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pxsb-details";

    return path_buffer.str();

}

EntityPath Rsvp::PxsbDetails::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PxsbDetails::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "pxsb-detail")
    {
        for(auto const & c : pxsb_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::PxsbDetails::PxsbDetail>();
        c->parent = this;
        pxsb_detail.push_back(std::move(c));
        children[segment_path] = pxsb_detail.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PxsbDetails::get_children()
{
    for (auto const & c : pxsb_detail)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::PxsbDetails::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::~RsvpSession()
{
}

bool Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

Rsvp::RxsbDetails::RxsbDetail::Session::Session()
    :
    rsvp_session(std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "rxsb-detail";
}

Rsvp::RxsbDetails::RxsbDetail::Session::~Session()
{
}

bool Rsvp::RxsbDetails::RxsbDetail::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool Rsvp::RxsbDetails::RxsbDetail::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string Rsvp::RxsbDetails::RxsbDetail::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath Rsvp::RxsbDetails::RxsbDetail::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RxsbDetails::RxsbDetail::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RxsbDetails::RxsbDetail::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void Rsvp::RxsbDetails::RxsbDetail::Session::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::RxsbDetails::RxsbDetail::S2LSubLsp::S2LSubLsp()
    :
    	s2l_destination_address{YType::str, "s2l-destination-address"}
{
    yang_name = "s2l-sub-lsp"; yang_parent_name = "rxsb-detail";
}

Rsvp::RxsbDetails::RxsbDetail::S2LSubLsp::~S2LSubLsp()
{
}

bool Rsvp::RxsbDetails::RxsbDetail::S2LSubLsp::has_data() const
{
    return s2l_destination_address.is_set;
}

bool Rsvp::RxsbDetails::RxsbDetail::S2LSubLsp::has_operation() const
{
    return is_set(operation)
	|| is_set(s2l_destination_address.operation);
}

std::string Rsvp::RxsbDetails::RxsbDetail::S2LSubLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "s2l-sub-lsp";

    return path_buffer.str();

}

EntityPath Rsvp::RxsbDetails::RxsbDetail::S2LSubLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (s2l_destination_address.is_set || is_set(s2l_destination_address.operation)) leaf_name_data.push_back(s2l_destination_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RxsbDetails::RxsbDetail::S2LSubLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RxsbDetails::RxsbDetail::S2LSubLsp::get_children()
{
    return children;
}

void Rsvp::RxsbDetails::RxsbDetail::S2LSubLsp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "s2l-destination-address")
    {
        s2l_destination_address = value;
    }
}

Rsvp::RxsbDetails::RxsbDetail::Style::Style()
    :
    	reservation_type{YType::enumeration, "reservation-type"}
{
    yang_name = "style"; yang_parent_name = "rxsb-detail";
}

Rsvp::RxsbDetails::RxsbDetail::Style::~Style()
{
}

bool Rsvp::RxsbDetails::RxsbDetail::Style::has_data() const
{
    return reservation_type.is_set;
}

bool Rsvp::RxsbDetails::RxsbDetail::Style::has_operation() const
{
    return is_set(operation)
	|| is_set(reservation_type.operation);
}

std::string Rsvp::RxsbDetails::RxsbDetail::Style::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "style";

    return path_buffer.str();

}

EntityPath Rsvp::RxsbDetails::RxsbDetail::Style::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (reservation_type.is_set || is_set(reservation_type.operation)) leaf_name_data.push_back(reservation_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RxsbDetails::RxsbDetail::Style::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RxsbDetails::RxsbDetail::Style::get_children()
{
    return children;
}

void Rsvp::RxsbDetails::RxsbDetail::Style::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "reservation-type")
    {
        reservation_type = value;
    }
}

Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::UdpIpv4Session::UdpIpv4Session()
    :
    	source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"}
{
    yang_name = "udp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::UdpIpv4Session::~UdpIpv4Session()
{
}

bool Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::UdpIpv4Session::has_data() const
{
    return source_address.is_set
	|| source_port.is_set;
}

bool Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::UdpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation);
}

std::string Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::UdpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "udp-ipv4-session";

    return path_buffer.str();

}

EntityPath Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::UdpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/filter/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::UdpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::UdpIpv4Session::get_children()
{
    return children;
}

void Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::UdpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
}

Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::P2MpIpv4Session::P2MpIpv4Session()
    :
    	p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"},
	 sub_group_id{YType::uint16, "sub-group-id"}
{
    yang_name = "p2mp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::P2MpIpv4Session::~P2MpIpv4Session()
{
}

bool Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::P2MpIpv4Session::has_data() const
{
    return p2mp_sub_group_origin.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set;
}

bool Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::P2MpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation);
}

std::string Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::P2MpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "p2mp-ipv4-session";

    return path_buffer.str();

}

EntityPath Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::P2MpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/filter/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::P2MpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::P2MpIpv4Session::get_children()
{
    return children;
}

void Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::P2MpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
}

Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::RsvpFilter()
    :
    	filter_type{YType::enumeration, "filter-type"}
    	,
    p2mp_ipv4_session(std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::P2MpIpv4Session>())
	,udp_ipv4_session(std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::UdpIpv4Session>())
{
    p2mp_ipv4_session->parent = this;
    children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();

    udp_ipv4_session->parent = this;
    children["udp-ipv4-session"] = udp_ipv4_session.get();

    yang_name = "rsvp-filter"; yang_parent_name = "filter";
}

Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::~RsvpFilter()
{
}

bool Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::has_data() const
{
    return filter_type.is_set
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_data())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_data());
}

bool Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::has_operation() const
{
    return is_set(operation)
	|| is_set(filter_type.operation)
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_operation())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_operation());
}

std::string Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-filter";

    return path_buffer.str();

}

EntityPath Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (filter_type.is_set || is_set(filter_type.operation)) leaf_name_data.push_back(filter_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "p2mp-ipv4-session")
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        else
        {
            p2mp_ipv4_session = std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::P2MpIpv4Session>();
            p2mp_ipv4_session->parent = this;
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        return children.at("p2mp-ipv4-session");
    }

    if(child_yang_name == "udp-ipv4-session")
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        else
        {
            udp_ipv4_session = std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::UdpIpv4Session>();
            udp_ipv4_session->parent = this;
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        return children.at("udp-ipv4-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::get_children()
{
    if(children.find("p2mp-ipv4-session") == children.end())
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
    }

    if(children.find("udp-ipv4-session") == children.end())
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
    }

    return children;
}

void Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "filter-type")
    {
        filter_type = value;
    }
}

Rsvp::RxsbDetails::RxsbDetail::Filter::Filter()
    :
    rsvp_filter(std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter>())
{
    rsvp_filter->parent = this;
    children["rsvp-filter"] = rsvp_filter.get();

    yang_name = "filter"; yang_parent_name = "rxsb-detail";
}

Rsvp::RxsbDetails::RxsbDetail::Filter::~Filter()
{
}

bool Rsvp::RxsbDetails::RxsbDetail::Filter::has_data() const
{
    return (rsvp_filter !=  nullptr && rsvp_filter->has_data());
}

bool Rsvp::RxsbDetails::RxsbDetail::Filter::has_operation() const
{
    return is_set(operation)
	|| (rsvp_filter !=  nullptr && rsvp_filter->has_operation());
}

std::string Rsvp::RxsbDetails::RxsbDetail::Filter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "filter";

    return path_buffer.str();

}

EntityPath Rsvp::RxsbDetails::RxsbDetail::Filter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RxsbDetails::RxsbDetail::Filter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-filter")
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
        else
        {
            rsvp_filter = std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Filter::RsvpFilter>();
            rsvp_filter->parent = this;
            children["rsvp-filter"] = rsvp_filter.get();
        }
        return children.at("rsvp-filter");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RxsbDetails::RxsbDetail::Filter::get_children()
{
    if(children.find("rsvp-filter") == children.end())
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
    }

    return children;
}

void Rsvp::RxsbDetails::RxsbDetail::Filter::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::RxsbDetails::RxsbDetail::FlowSpec::FlowSpec()
    :
    	flow_average_rate{YType::uint64, "flow-average-rate"},
	 flow_max_burst{YType::uint64, "flow-max-burst"},
	 flow_max_unit{YType::uint32, "flow-max-unit"},
	 flow_min_unit{YType::uint32, "flow-min-unit"},
	 flow_peak_rate{YType::uint64, "flow-peak-rate"},
	 flow_qos{YType::enumeration, "flow-qos"},
	 flow_requested_rate{YType::uint64, "flow-requested-rate"},
	 flow_slack{YType::uint32, "flow-slack"}
{
    yang_name = "flow-spec"; yang_parent_name = "rxsb-detail";
}

Rsvp::RxsbDetails::RxsbDetail::FlowSpec::~FlowSpec()
{
}

bool Rsvp::RxsbDetails::RxsbDetail::FlowSpec::has_data() const
{
    return flow_average_rate.is_set
	|| flow_max_burst.is_set
	|| flow_max_unit.is_set
	|| flow_min_unit.is_set
	|| flow_peak_rate.is_set
	|| flow_qos.is_set
	|| flow_requested_rate.is_set
	|| flow_slack.is_set;
}

bool Rsvp::RxsbDetails::RxsbDetail::FlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_average_rate.operation)
	|| is_set(flow_max_burst.operation)
	|| is_set(flow_max_unit.operation)
	|| is_set(flow_min_unit.operation)
	|| is_set(flow_peak_rate.operation)
	|| is_set(flow_qos.operation)
	|| is_set(flow_requested_rate.operation)
	|| is_set(flow_slack.operation);
}

std::string Rsvp::RxsbDetails::RxsbDetail::FlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flow-spec";

    return path_buffer.str();

}

EntityPath Rsvp::RxsbDetails::RxsbDetail::FlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_average_rate.is_set || is_set(flow_average_rate.operation)) leaf_name_data.push_back(flow_average_rate.get_name_leafdata());
    if (flow_max_burst.is_set || is_set(flow_max_burst.operation)) leaf_name_data.push_back(flow_max_burst.get_name_leafdata());
    if (flow_max_unit.is_set || is_set(flow_max_unit.operation)) leaf_name_data.push_back(flow_max_unit.get_name_leafdata());
    if (flow_min_unit.is_set || is_set(flow_min_unit.operation)) leaf_name_data.push_back(flow_min_unit.get_name_leafdata());
    if (flow_peak_rate.is_set || is_set(flow_peak_rate.operation)) leaf_name_data.push_back(flow_peak_rate.get_name_leafdata());
    if (flow_qos.is_set || is_set(flow_qos.operation)) leaf_name_data.push_back(flow_qos.get_name_leafdata());
    if (flow_requested_rate.is_set || is_set(flow_requested_rate.operation)) leaf_name_data.push_back(flow_requested_rate.get_name_leafdata());
    if (flow_slack.is_set || is_set(flow_slack.operation)) leaf_name_data.push_back(flow_slack.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RxsbDetails::RxsbDetail::FlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RxsbDetails::RxsbDetail::FlowSpec::get_children()
{
    return children;
}

void Rsvp::RxsbDetails::RxsbDetail::FlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-average-rate")
    {
        flow_average_rate = value;
    }
    if(value_path == "flow-max-burst")
    {
        flow_max_burst = value;
    }
    if(value_path == "flow-max-unit")
    {
        flow_max_unit = value;
    }
    if(value_path == "flow-min-unit")
    {
        flow_min_unit = value;
    }
    if(value_path == "flow-peak-rate")
    {
        flow_peak_rate = value;
    }
    if(value_path == "flow-qos")
    {
        flow_qos = value;
    }
    if(value_path == "flow-requested-rate")
    {
        flow_requested_rate = value;
    }
    if(value_path == "flow-slack")
    {
        flow_slack = value;
    }
}

Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::G709OtnFlowSpec::G709OtnFlowSpec()
    :
    	flow_bit_rate{YType::uint64, "flow-bit-rate"},
	 flow_multiplier{YType::uint16, "flow-multiplier"},
	 flow_nvc{YType::uint16, "flow-nvc"},
	 flow_signal_type{YType::uint8, "flow-signal-type"}
{
    yang_name = "g709otn-flow-spec"; yang_parent_name = "generic-flow-spec";
}

Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::G709OtnFlowSpec::~G709OtnFlowSpec()
{
}

bool Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::G709OtnFlowSpec::has_data() const
{
    return flow_bit_rate.is_set
	|| flow_multiplier.is_set
	|| flow_nvc.is_set
	|| flow_signal_type.is_set;
}

bool Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::G709OtnFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_bit_rate.operation)
	|| is_set(flow_multiplier.operation)
	|| is_set(flow_nvc.operation)
	|| is_set(flow_signal_type.operation);
}

std::string Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::G709OtnFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-flow-spec";

    return path_buffer.str();

}

EntityPath Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::G709OtnFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/generic-flow-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_bit_rate.is_set || is_set(flow_bit_rate.operation)) leaf_name_data.push_back(flow_bit_rate.get_name_leafdata());
    if (flow_multiplier.is_set || is_set(flow_multiplier.operation)) leaf_name_data.push_back(flow_multiplier.get_name_leafdata());
    if (flow_nvc.is_set || is_set(flow_nvc.operation)) leaf_name_data.push_back(flow_nvc.get_name_leafdata());
    if (flow_signal_type.is_set || is_set(flow_signal_type.operation)) leaf_name_data.push_back(flow_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::G709OtnFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::G709OtnFlowSpec::get_children()
{
    return children;
}

void Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::G709OtnFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-bit-rate")
    {
        flow_bit_rate = value;
    }
    if(value_path == "flow-multiplier")
    {
        flow_multiplier = value;
    }
    if(value_path == "flow-nvc")
    {
        flow_nvc = value;
    }
    if(value_path == "flow-signal-type")
    {
        flow_signal_type = value;
    }
}

Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::GenericFlowSpec()
    :
    	flow_spec_type{YType::enumeration, "flow-spec-type"}
    	,
    g709otn_flow_spec(std::make_unique<Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::G709OtnFlowSpec>())
{
    g709otn_flow_spec->parent = this;
    children["g709otn-flow-spec"] = g709otn_flow_spec.get();

    yang_name = "generic-flow-spec"; yang_parent_name = "rxsb-detail";
}

Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::~GenericFlowSpec()
{
}

bool Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::has_data() const
{
    return flow_spec_type.is_set
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_data());
}

bool Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_spec_type.operation)
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_operation());
}

std::string Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-flow-spec";

    return path_buffer.str();

}

EntityPath Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_spec_type.is_set || is_set(flow_spec_type.operation)) leaf_name_data.push_back(flow_spec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-flow-spec")
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        else
        {
            g709otn_flow_spec = std::make_unique<Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::G709OtnFlowSpec>();
            g709otn_flow_spec->parent = this;
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        return children.at("g709otn-flow-spec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::get_children()
{
    if(children.find("g709otn-flow-spec") == children.end())
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
    }

    return children;
}

void Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-spec-type")
    {
        flow_spec_type = value;
    }
}

Rsvp::RxsbDetails::RxsbDetail::Hop::Hop()
    :
    	neighbor_address{YType::str, "neighbor-address"},
	 neighbor_logical_interface_name{YType::str, "neighbor-logical-interface-name"}
{
    yang_name = "hop"; yang_parent_name = "rxsb-detail";
}

Rsvp::RxsbDetails::RxsbDetail::Hop::~Hop()
{
}

bool Rsvp::RxsbDetails::RxsbDetail::Hop::has_data() const
{
    return neighbor_address.is_set
	|| neighbor_logical_interface_name.is_set;
}

bool Rsvp::RxsbDetails::RxsbDetail::Hop::has_operation() const
{
    return is_set(operation)
	|| is_set(neighbor_address.operation)
	|| is_set(neighbor_logical_interface_name.operation);
}

std::string Rsvp::RxsbDetails::RxsbDetail::Hop::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hop";

    return path_buffer.str();

}

EntityPath Rsvp::RxsbDetails::RxsbDetail::Hop::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (neighbor_logical_interface_name.is_set || is_set(neighbor_logical_interface_name.operation)) leaf_name_data.push_back(neighbor_logical_interface_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RxsbDetails::RxsbDetail::Hop::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RxsbDetails::RxsbDetail::Hop::get_children()
{
    return children;
}

void Rsvp::RxsbDetails::RxsbDetail::Hop::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "neighbor-logical-interface-name")
    {
        neighbor_logical_interface_name = value;
    }
}

Rsvp::RxsbDetails::RxsbDetail::RsvpHeader::RsvpHeader()
    :
    	ip_source_address{YType::str, "ip-source-address"},
	 ip_tos{YType::uint8, "ip-tos"},
	 ip_ttl{YType::uint8, "ip-ttl"},
	 rsvp_header_flags{YType::uint8, "rsvp-header-flags"},
	 rsvp_message_type{YType::uint8, "rsvp-message-type"},
	 rsvp_ttl{YType::uint8, "rsvp-ttl"},
	 rsvp_version{YType::uint8, "rsvp-version"}
{
    yang_name = "rsvp-header"; yang_parent_name = "rxsb-detail";
}

Rsvp::RxsbDetails::RxsbDetail::RsvpHeader::~RsvpHeader()
{
}

bool Rsvp::RxsbDetails::RxsbDetail::RsvpHeader::has_data() const
{
    return ip_source_address.is_set
	|| ip_tos.is_set
	|| ip_ttl.is_set
	|| rsvp_header_flags.is_set
	|| rsvp_message_type.is_set
	|| rsvp_ttl.is_set
	|| rsvp_version.is_set;
}

bool Rsvp::RxsbDetails::RxsbDetail::RsvpHeader::has_operation() const
{
    return is_set(operation)
	|| is_set(ip_source_address.operation)
	|| is_set(ip_tos.operation)
	|| is_set(ip_ttl.operation)
	|| is_set(rsvp_header_flags.operation)
	|| is_set(rsvp_message_type.operation)
	|| is_set(rsvp_ttl.operation)
	|| is_set(rsvp_version.operation);
}

std::string Rsvp::RxsbDetails::RxsbDetail::RsvpHeader::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-header";

    return path_buffer.str();

}

EntityPath Rsvp::RxsbDetails::RxsbDetail::RsvpHeader::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ip_source_address.is_set || is_set(ip_source_address.operation)) leaf_name_data.push_back(ip_source_address.get_name_leafdata());
    if (ip_tos.is_set || is_set(ip_tos.operation)) leaf_name_data.push_back(ip_tos.get_name_leafdata());
    if (ip_ttl.is_set || is_set(ip_ttl.operation)) leaf_name_data.push_back(ip_ttl.get_name_leafdata());
    if (rsvp_header_flags.is_set || is_set(rsvp_header_flags.operation)) leaf_name_data.push_back(rsvp_header_flags.get_name_leafdata());
    if (rsvp_message_type.is_set || is_set(rsvp_message_type.operation)) leaf_name_data.push_back(rsvp_message_type.get_name_leafdata());
    if (rsvp_ttl.is_set || is_set(rsvp_ttl.operation)) leaf_name_data.push_back(rsvp_ttl.get_name_leafdata());
    if (rsvp_version.is_set || is_set(rsvp_version.operation)) leaf_name_data.push_back(rsvp_version.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RxsbDetails::RxsbDetail::RsvpHeader::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RxsbDetails::RxsbDetail::RsvpHeader::get_children()
{
    return children;
}

void Rsvp::RxsbDetails::RxsbDetail::RsvpHeader::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ip-source-address")
    {
        ip_source_address = value;
    }
    if(value_path == "ip-tos")
    {
        ip_tos = value;
    }
    if(value_path == "ip-ttl")
    {
        ip_ttl = value;
    }
    if(value_path == "rsvp-header-flags")
    {
        rsvp_header_flags = value;
    }
    if(value_path == "rsvp-message-type")
    {
        rsvp_message_type = value;
    }
    if(value_path == "rsvp-ttl")
    {
        rsvp_ttl = value;
    }
    if(value_path == "rsvp-version")
    {
        rsvp_version = value;
    }
}

Rsvp::RxsbDetails::RxsbDetail::RxsbDetail()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 dynamic_state{YType::uint32, "dynamic-state"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 input_interface{YType::str, "input-interface"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 protocol{YType::int32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::int32, "source-port"},
	 sub_group_id{YType::int32, "sub-group-id"},
	 sub_group_origin{YType::str, "sub-group-origin"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    filter(std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Filter>())
	,flow_spec(std::make_unique<Rsvp::RxsbDetails::RxsbDetail::FlowSpec>())
	,generic_flow_spec(std::make_unique<Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec>())
	,hop(std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Hop>())
	,rsvp_header(std::make_unique<Rsvp::RxsbDetails::RxsbDetail::RsvpHeader>())
	,s2l_sub_lsp(std::make_unique<Rsvp::RxsbDetails::RxsbDetail::S2LSubLsp>())
	,session(std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Session>())
	,style(std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Style>())
{
    filter->parent = this;
    children["filter"] = filter.get();

    flow_spec->parent = this;
    children["flow-spec"] = flow_spec.get();

    generic_flow_spec->parent = this;
    children["generic-flow-spec"] = generic_flow_spec.get();

    hop->parent = this;
    children["hop"] = hop.get();

    rsvp_header->parent = this;
    children["rsvp-header"] = rsvp_header.get();

    s2l_sub_lsp->parent = this;
    children["s2l-sub-lsp"] = s2l_sub_lsp.get();

    session->parent = this;
    children["session"] = session.get();

    style->parent = this;
    children["style"] = style.get();

    yang_name = "rxsb-detail"; yang_parent_name = "rxsb-details";
}

Rsvp::RxsbDetails::RxsbDetail::~RxsbDetail()
{
}

bool Rsvp::RxsbDetails::RxsbDetail::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| dynamic_state.is_set
	|| extended_tunnel_id.is_set
	|| input_interface.is_set
	|| p2mp_id.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set
	|| sub_group_origin.is_set
	|| vrf_name.is_set
	|| (filter !=  nullptr && filter->has_data())
	|| (flow_spec !=  nullptr && flow_spec->has_data())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_data())
	|| (hop !=  nullptr && hop->has_data())
	|| (rsvp_header !=  nullptr && rsvp_header->has_data())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_data())
	|| (session !=  nullptr && session->has_data())
	|| (style !=  nullptr && style->has_data());
}

bool Rsvp::RxsbDetails::RxsbDetail::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(dynamic_state.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(input_interface.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(sub_group_origin.operation)
	|| is_set(vrf_name.operation)
	|| (filter !=  nullptr && filter->has_operation())
	|| (flow_spec !=  nullptr && flow_spec->has_operation())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_operation())
	|| (hop !=  nullptr && hop->has_operation())
	|| (rsvp_header !=  nullptr && rsvp_header->has_operation())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_operation())
	|| (session !=  nullptr && session->has_operation())
	|| (style !=  nullptr && style->has_operation());
}

std::string Rsvp::RxsbDetails::RxsbDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rxsb-detail";

    return path_buffer.str();

}

EntityPath Rsvp::RxsbDetails::RxsbDetail::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (dynamic_state.is_set || is_set(dynamic_state.operation)) leaf_name_data.push_back(dynamic_state.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (input_interface.is_set || is_set(input_interface.operation)) leaf_name_data.push_back(input_interface.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (sub_group_origin.is_set || is_set(sub_group_origin.operation)) leaf_name_data.push_back(sub_group_origin.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RxsbDetails::RxsbDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "filter")
    {
        if(filter != nullptr)
        {
            children["filter"] = filter.get();
        }
        else
        {
            filter = std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Filter>();
            filter->parent = this;
            children["filter"] = filter.get();
        }
        return children.at("filter");
    }

    if(child_yang_name == "flow-spec")
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
        else
        {
            flow_spec = std::make_unique<Rsvp::RxsbDetails::RxsbDetail::FlowSpec>();
            flow_spec->parent = this;
            children["flow-spec"] = flow_spec.get();
        }
        return children.at("flow-spec");
    }

    if(child_yang_name == "generic-flow-spec")
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        else
        {
            generic_flow_spec = std::make_unique<Rsvp::RxsbDetails::RxsbDetail::GenericFlowSpec>();
            generic_flow_spec->parent = this;
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        return children.at("generic-flow-spec");
    }

    if(child_yang_name == "hop")
    {
        if(hop != nullptr)
        {
            children["hop"] = hop.get();
        }
        else
        {
            hop = std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Hop>();
            hop->parent = this;
            children["hop"] = hop.get();
        }
        return children.at("hop");
    }

    if(child_yang_name == "rsvp-header")
    {
        if(rsvp_header != nullptr)
        {
            children["rsvp-header"] = rsvp_header.get();
        }
        else
        {
            rsvp_header = std::make_unique<Rsvp::RxsbDetails::RxsbDetail::RsvpHeader>();
            rsvp_header->parent = this;
            children["rsvp-header"] = rsvp_header.get();
        }
        return children.at("rsvp-header");
    }

    if(child_yang_name == "s2l-sub-lsp")
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        else
        {
            s2l_sub_lsp = std::make_unique<Rsvp::RxsbDetails::RxsbDetail::S2LSubLsp>();
            s2l_sub_lsp->parent = this;
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        return children.at("s2l-sub-lsp");
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    if(child_yang_name == "style")
    {
        if(style != nullptr)
        {
            children["style"] = style.get();
        }
        else
        {
            style = std::make_unique<Rsvp::RxsbDetails::RxsbDetail::Style>();
            style->parent = this;
            children["style"] = style.get();
        }
        return children.at("style");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RxsbDetails::RxsbDetail::get_children()
{
    if(children.find("filter") == children.end())
    {
        if(filter != nullptr)
        {
            children["filter"] = filter.get();
        }
    }

    if(children.find("flow-spec") == children.end())
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
    }

    if(children.find("generic-flow-spec") == children.end())
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
    }

    if(children.find("hop") == children.end())
    {
        if(hop != nullptr)
        {
            children["hop"] = hop.get();
        }
    }

    if(children.find("rsvp-header") == children.end())
    {
        if(rsvp_header != nullptr)
        {
            children["rsvp-header"] = rsvp_header.get();
        }
    }

    if(children.find("s2l-sub-lsp") == children.end())
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
    }

    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    if(children.find("style") == children.end())
    {
        if(style != nullptr)
        {
            children["style"] = style.get();
        }
    }

    return children;
}

void Rsvp::RxsbDetails::RxsbDetail::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "dynamic-state")
    {
        dynamic_state = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "input-interface")
    {
        input_interface = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "sub-group-origin")
    {
        sub_group_origin = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

Rsvp::RxsbDetails::RxsbDetails()
{
    yang_name = "rxsb-details"; yang_parent_name = "rsvp";
}

Rsvp::RxsbDetails::~RxsbDetails()
{
}

bool Rsvp::RxsbDetails::has_data() const
{
    for (std::size_t index=0; index<rxsb_detail.size(); index++)
    {
        if(rxsb_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::RxsbDetails::has_operation() const
{
    for (std::size_t index=0; index<rxsb_detail.size(); index++)
    {
        if(rxsb_detail[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::RxsbDetails::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rxsb-details";

    return path_buffer.str();

}

EntityPath Rsvp::RxsbDetails::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RxsbDetails::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rxsb-detail")
    {
        for(auto const & c : rxsb_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::RxsbDetails::RxsbDetail>();
        c->parent = this;
        rxsb_detail.push_back(std::move(c));
        children[segment_path] = rxsb_detail.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RxsbDetails::get_children()
{
    for (auto const & c : rxsb_detail)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::RxsbDetails::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact::InterfaceNeighborListCompact()
    :
    	interface_neighbor_address{YType::str, "interface-neighbor-address"},
	 neighbor_interface_name{YType::str, "neighbor-interface-name"}
{
    yang_name = "interface-neighbor-list-compact"; yang_parent_name = "interface-neighbor-brief";
}

Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact::~InterfaceNeighborListCompact()
{
}

bool Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact::has_data() const
{
    return interface_neighbor_address.is_set
	|| neighbor_interface_name.is_set;
}

bool Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_neighbor_address.operation)
	|| is_set(neighbor_interface_name.operation);
}

std::string Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-neighbor-list-compact";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_neighbor_address.is_set || is_set(interface_neighbor_address.operation)) leaf_name_data.push_back(interface_neighbor_address.get_name_leafdata());
    if (neighbor_interface_name.is_set || is_set(neighbor_interface_name.operation)) leaf_name_data.push_back(neighbor_interface_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact::get_children()
{
    return children;
}

void Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-neighbor-address")
    {
        interface_neighbor_address = value;
    }
    if(value_path == "neighbor-interface-name")
    {
        neighbor_interface_name = value;
    }
}

Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborBrief()
    :
    	neighbor_address{YType::str, "neighbor-address"},
	 node_address{YType::str, "node-address"}
{
    yang_name = "interface-neighbor-brief"; yang_parent_name = "interface-neighbor-briefs";
}

Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief::~InterfaceNeighborBrief()
{
}

bool Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief::has_data() const
{
    for (std::size_t index=0; index<interface_neighbor_list_compact.size(); index++)
    {
        if(interface_neighbor_list_compact[index]->has_data())
            return true;
    }
    return neighbor_address.is_set
	|| node_address.is_set;
}

bool Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief::has_operation() const
{
    for (std::size_t index=0; index<interface_neighbor_list_compact.size(); index++)
    {
        if(interface_neighbor_list_compact[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(neighbor_address.operation)
	|| is_set(node_address.operation);
}

std::string Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-neighbor-brief" <<"[neighbor-address='" <<neighbor_address.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-neighbor-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (node_address.is_set || is_set(node_address.operation)) leaf_name_data.push_back(node_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-neighbor-list-compact")
    {
        for(auto const & c : interface_neighbor_list_compact)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief::InterfaceNeighborListCompact>();
        c->parent = this;
        interface_neighbor_list_compact.push_back(std::move(c));
        children[segment_path] = interface_neighbor_list_compact.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief::get_children()
{
    for (auto const & c : interface_neighbor_list_compact)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "node-address")
    {
        node_address = value;
    }
}

Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBriefs()
{
    yang_name = "interface-neighbor-briefs"; yang_parent_name = "rsvp";
}

Rsvp::InterfaceNeighborBriefs::~InterfaceNeighborBriefs()
{
}

bool Rsvp::InterfaceNeighborBriefs::has_data() const
{
    for (std::size_t index=0; index<interface_neighbor_brief.size(); index++)
    {
        if(interface_neighbor_brief[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::InterfaceNeighborBriefs::has_operation() const
{
    for (std::size_t index=0; index<interface_neighbor_brief.size(); index++)
    {
        if(interface_neighbor_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::InterfaceNeighborBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-neighbor-briefs";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceNeighborBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceNeighborBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-neighbor-brief")
    {
        for(auto const & c : interface_neighbor_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::InterfaceNeighborBriefs::InterfaceNeighborBrief>();
        c->parent = this;
        interface_neighbor_brief.push_back(std::move(c));
        children[segment_path] = interface_neighbor_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceNeighborBriefs::get_children()
{
    for (auto const & c : interface_neighbor_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::InterfaceNeighborBriefs::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::AuthenticationBriefs::AuthenticationBrief::AuthenticationBrief()
    :
    	destination_address{YType::str, "destination-address"},
	 interface_name{YType::str, "interface-name"},
	 mode_id{YType::enumeration, "mode-id"},
	 source_address{YType::str, "source-address"},
	 destination_address_xr{YType::str, "destination-address-xr"},
	 direction{YType::enumeration, "direction"},
	 key_id{YType::uint64, "key-id"},
	 key_id_valid{YType::uint32, "key-id-valid"},
	 key_source{YType::str, "key-source"},
	 key_type{YType::enumeration, "key-type"},
	 neighbor_address{YType::str, "neighbor-address"},
	 source_address_xr{YType::str, "source-address-xr"}
{
    yang_name = "authentication-brief"; yang_parent_name = "authentication-briefs";
}

Rsvp::AuthenticationBriefs::AuthenticationBrief::~AuthenticationBrief()
{
}

bool Rsvp::AuthenticationBriefs::AuthenticationBrief::has_data() const
{
    return destination_address.is_set
	|| interface_name.is_set
	|| mode_id.is_set
	|| source_address.is_set
	|| destination_address_xr.is_set
	|| direction.is_set
	|| key_id.is_set
	|| key_id_valid.is_set
	|| key_source.is_set
	|| key_type.is_set
	|| neighbor_address.is_set
	|| source_address_xr.is_set;
}

bool Rsvp::AuthenticationBriefs::AuthenticationBrief::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(interface_name.operation)
	|| is_set(mode_id.operation)
	|| is_set(source_address.operation)
	|| is_set(destination_address_xr.operation)
	|| is_set(direction.operation)
	|| is_set(key_id.operation)
	|| is_set(key_id_valid.operation)
	|| is_set(key_source.operation)
	|| is_set(key_type.operation)
	|| is_set(neighbor_address.operation)
	|| is_set(source_address_xr.operation);
}

std::string Rsvp::AuthenticationBriefs::AuthenticationBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "authentication-brief" <<"[destination-address='" <<destination_address.get() <<"']" <<"[interface-name='" <<interface_name.get() <<"']" <<"[mode-id='" <<mode_id.get() <<"']" <<"[source-address='" <<source_address.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::AuthenticationBriefs::AuthenticationBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/authentication-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (mode_id.is_set || is_set(mode_id.operation)) leaf_name_data.push_back(mode_id.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (destination_address_xr.is_set || is_set(destination_address_xr.operation)) leaf_name_data.push_back(destination_address_xr.get_name_leafdata());
    if (direction.is_set || is_set(direction.operation)) leaf_name_data.push_back(direction.get_name_leafdata());
    if (key_id.is_set || is_set(key_id.operation)) leaf_name_data.push_back(key_id.get_name_leafdata());
    if (key_id_valid.is_set || is_set(key_id_valid.operation)) leaf_name_data.push_back(key_id_valid.get_name_leafdata());
    if (key_source.is_set || is_set(key_source.operation)) leaf_name_data.push_back(key_source.get_name_leafdata());
    if (key_type.is_set || is_set(key_type.operation)) leaf_name_data.push_back(key_type.get_name_leafdata());
    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (source_address_xr.is_set || is_set(source_address_xr.operation)) leaf_name_data.push_back(source_address_xr.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::AuthenticationBriefs::AuthenticationBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::AuthenticationBriefs::AuthenticationBrief::get_children()
{
    return children;
}

void Rsvp::AuthenticationBriefs::AuthenticationBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "mode-id")
    {
        mode_id = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "destination-address-xr")
    {
        destination_address_xr = value;
    }
    if(value_path == "direction")
    {
        direction = value;
    }
    if(value_path == "key-id")
    {
        key_id = value;
    }
    if(value_path == "key-id-valid")
    {
        key_id_valid = value;
    }
    if(value_path == "key-source")
    {
        key_source = value;
    }
    if(value_path == "key-type")
    {
        key_type = value;
    }
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "source-address-xr")
    {
        source_address_xr = value;
    }
}

Rsvp::AuthenticationBriefs::AuthenticationBriefs()
{
    yang_name = "authentication-briefs"; yang_parent_name = "rsvp";
}

Rsvp::AuthenticationBriefs::~AuthenticationBriefs()
{
}

bool Rsvp::AuthenticationBriefs::has_data() const
{
    for (std::size_t index=0; index<authentication_brief.size(); index++)
    {
        if(authentication_brief[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::AuthenticationBriefs::has_operation() const
{
    for (std::size_t index=0; index<authentication_brief.size(); index++)
    {
        if(authentication_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::AuthenticationBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "authentication-briefs";

    return path_buffer.str();

}

EntityPath Rsvp::AuthenticationBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::AuthenticationBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "authentication-brief")
    {
        for(auto const & c : authentication_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::AuthenticationBriefs::AuthenticationBrief>();
        c->parent = this;
        authentication_brief.push_back(std::move(c));
        children[segment_path] = authentication_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::AuthenticationBriefs::get_children()
{
    for (auto const & c : authentication_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::AuthenticationBriefs::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/session-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/session-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/session-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/session-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::~RsvpSession()
{
}

bool Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/session-brief/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

Rsvp::SessionBriefs::SessionBrief::Session::Session()
    :
    rsvp_session(std::make_unique<Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "session-brief";
}

Rsvp::SessionBriefs::SessionBrief::Session::~Session()
{
}

bool Rsvp::SessionBriefs::SessionBrief::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool Rsvp::SessionBriefs::SessionBrief::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string Rsvp::SessionBriefs::SessionBrief::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath Rsvp::SessionBriefs::SessionBrief::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/session-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionBriefs::SessionBrief::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<Rsvp::SessionBriefs::SessionBrief::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionBriefs::SessionBrief::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void Rsvp::SessionBriefs::SessionBrief::Session::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::SessionBriefs::SessionBrief::SessionBrief()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 detail_list_size{YType::uint32, "detail-list-size"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 protocol{YType::int32, "protocol"},
	 ps_bs{YType::uint32, "ps-bs"},
	 requests{YType::uint32, "requests"},
	 rs_bs{YType::uint32, "rs-bs"},
	 session_type{YType::enumeration, "session-type"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    session(std::make_unique<Rsvp::SessionBriefs::SessionBrief::Session>())
{
    session->parent = this;
    children["session"] = session.get();

    yang_name = "session-brief"; yang_parent_name = "session-briefs";
}

Rsvp::SessionBriefs::SessionBrief::~SessionBrief()
{
}

bool Rsvp::SessionBriefs::SessionBrief::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| detail_list_size.is_set
	|| extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| protocol.is_set
	|| ps_bs.is_set
	|| requests.is_set
	|| rs_bs.is_set
	|| session_type.is_set
	|| vrf_name.is_set
	|| (session !=  nullptr && session->has_data());
}

bool Rsvp::SessionBriefs::SessionBrief::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(detail_list_size.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(protocol.operation)
	|| is_set(ps_bs.operation)
	|| is_set(requests.operation)
	|| is_set(rs_bs.operation)
	|| is_set(session_type.operation)
	|| is_set(vrf_name.operation)
	|| (session !=  nullptr && session->has_operation());
}

std::string Rsvp::SessionBriefs::SessionBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session-brief";

    return path_buffer.str();

}

EntityPath Rsvp::SessionBriefs::SessionBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (detail_list_size.is_set || is_set(detail_list_size.operation)) leaf_name_data.push_back(detail_list_size.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (ps_bs.is_set || is_set(ps_bs.operation)) leaf_name_data.push_back(ps_bs.get_name_leafdata());
    if (requests.is_set || is_set(requests.operation)) leaf_name_data.push_back(requests.get_name_leafdata());
    if (rs_bs.is_set || is_set(rs_bs.operation)) leaf_name_data.push_back(rs_bs.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionBriefs::SessionBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<Rsvp::SessionBriefs::SessionBrief::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionBriefs::SessionBrief::get_children()
{
    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    return children;
}

void Rsvp::SessionBriefs::SessionBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "detail-list-size")
    {
        detail_list_size = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "ps-bs")
    {
        ps_bs = value;
    }
    if(value_path == "requests")
    {
        requests = value;
    }
    if(value_path == "rs-bs")
    {
        rs_bs = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

Rsvp::SessionBriefs::SessionBriefs()
{
    yang_name = "session-briefs"; yang_parent_name = "rsvp";
}

Rsvp::SessionBriefs::~SessionBriefs()
{
}

bool Rsvp::SessionBriefs::has_data() const
{
    for (std::size_t index=0; index<session_brief.size(); index++)
    {
        if(session_brief[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::SessionBriefs::has_operation() const
{
    for (std::size_t index=0; index<session_brief.size(); index++)
    {
        if(session_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::SessionBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session-briefs";

    return path_buffer.str();

}

EntityPath Rsvp::SessionBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "session-brief")
    {
        for(auto const & c : session_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::SessionBriefs::SessionBrief>();
        c->parent = this;
        session_brief.push_back(std::move(c));
        children[segment_path] = session_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionBriefs::get_children()
{
    for (auto const & c : session_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::SessionBriefs::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::~RsvpSession()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::Session::Session()
    :
    rsvp_session(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "psb-detailed";
}

Rsvp::PsbDetaileds::PsbDetailed::Session::~Session()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool Rsvp::PsbDetaileds::PsbDetailed::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string Rsvp::PsbDetaileds::PsbDetailed::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::Session::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::PsbDetaileds::PsbDetailed::S2LSubLsp::S2LSubLsp()
    :
    	s2l_destination_address{YType::str, "s2l-destination-address"}
{
    yang_name = "s2l-sub-lsp"; yang_parent_name = "psb-detailed";
}

Rsvp::PsbDetaileds::PsbDetailed::S2LSubLsp::~S2LSubLsp()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::S2LSubLsp::has_data() const
{
    return s2l_destination_address.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::S2LSubLsp::has_operation() const
{
    return is_set(operation)
	|| is_set(s2l_destination_address.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::S2LSubLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "s2l-sub-lsp";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::S2LSubLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (s2l_destination_address.is_set || is_set(s2l_destination_address.operation)) leaf_name_data.push_back(s2l_destination_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::S2LSubLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::S2LSubLsp::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::S2LSubLsp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "s2l-destination-address")
    {
        s2l_destination_address = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session::UdpIpv4Session()
    :
    	source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"}
{
    yang_name = "udp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session::~UdpIpv4Session()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session::has_data() const
{
    return source_address.is_set
	|| source_port.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "udp-ipv4-session";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/template/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session::P2MpIpv4Session()
    :
    	p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"},
	 sub_group_id{YType::uint16, "sub-group-id"}
{
    yang_name = "p2mp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session::~P2MpIpv4Session()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session::has_data() const
{
    return p2mp_sub_group_origin.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "p2mp-ipv4-session";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/template/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::RsvpFilter()
    :
    	filter_type{YType::enumeration, "filter-type"}
    	,
    p2mp_ipv4_session(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session>())
	,udp_ipv4_session(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session>())
{
    p2mp_ipv4_session->parent = this;
    children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();

    udp_ipv4_session->parent = this;
    children["udp-ipv4-session"] = udp_ipv4_session.get();

    yang_name = "rsvp-filter"; yang_parent_name = "template";
}

Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::~RsvpFilter()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::has_data() const
{
    return filter_type.is_set
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_data())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_data());
}

bool Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::has_operation() const
{
    return is_set(operation)
	|| is_set(filter_type.operation)
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_operation())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_operation());
}

std::string Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-filter";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/template/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (filter_type.is_set || is_set(filter_type.operation)) leaf_name_data.push_back(filter_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "p2mp-ipv4-session")
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        else
        {
            p2mp_ipv4_session = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::P2MpIpv4Session>();
            p2mp_ipv4_session->parent = this;
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        return children.at("p2mp-ipv4-session");
    }

    if(child_yang_name == "udp-ipv4-session")
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        else
        {
            udp_ipv4_session = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::UdpIpv4Session>();
            udp_ipv4_session->parent = this;
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        return children.at("udp-ipv4-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::get_children()
{
    if(children.find("p2mp-ipv4-session") == children.end())
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
    }

    if(children.find("udp-ipv4-session") == children.end())
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
    }

    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "filter-type")
    {
        filter_type = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::Template_::Template_()
    :
    rsvp_filter(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter>())
{
    rsvp_filter->parent = this;
    children["rsvp-filter"] = rsvp_filter.get();

    yang_name = "template"; yang_parent_name = "psb-detailed";
}

Rsvp::PsbDetaileds::PsbDetailed::Template_::~Template_()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::Template_::has_data() const
{
    return (rsvp_filter !=  nullptr && rsvp_filter->has_data());
}

bool Rsvp::PsbDetaileds::PsbDetailed::Template_::has_operation() const
{
    return is_set(operation)
	|| (rsvp_filter !=  nullptr && rsvp_filter->has_operation());
}

std::string Rsvp::PsbDetaileds::PsbDetailed::Template_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "template";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::Template_::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::Template_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-filter")
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
        else
        {
            rsvp_filter = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Template_::RsvpFilter>();
            rsvp_filter->parent = this;
            children["rsvp-filter"] = rsvp_filter.get();
        }
        return children.at("rsvp-filter");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::Template_::get_children()
{
    if(children.find("rsvp-filter") == children.end())
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
    }

    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::Template_::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags::SessAttributeFlags()
    :
    	is_bandwidth_protect{YType::boolean, "is-bandwidth-protect"},
	 is_local_protect{YType::boolean, "is-local-protect"},
	 is_node_protect{YType::boolean, "is-node-protect"},
	 is_record_labels{YType::boolean, "is-record-labels"},
	 is_shared_explicit_requested{YType::boolean, "is-shared-explicit-requested"}
{
    yang_name = "sess-attribute-flags"; yang_parent_name = "session-attribute";
}

Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags::~SessAttributeFlags()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags::has_data() const
{
    return is_bandwidth_protect.is_set
	|| is_local_protect.is_set
	|| is_node_protect.is_set
	|| is_record_labels.is_set
	|| is_shared_explicit_requested.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bandwidth_protect.operation)
	|| is_set(is_local_protect.operation)
	|| is_set(is_node_protect.operation)
	|| is_set(is_record_labels.operation)
	|| is_set(is_shared_explicit_requested.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sess-attribute-flags";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/session-attribute/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bandwidth_protect.is_set || is_set(is_bandwidth_protect.operation)) leaf_name_data.push_back(is_bandwidth_protect.get_name_leafdata());
    if (is_local_protect.is_set || is_set(is_local_protect.operation)) leaf_name_data.push_back(is_local_protect.get_name_leafdata());
    if (is_node_protect.is_set || is_set(is_node_protect.operation)) leaf_name_data.push_back(is_node_protect.get_name_leafdata());
    if (is_record_labels.is_set || is_set(is_record_labels.operation)) leaf_name_data.push_back(is_record_labels.get_name_leafdata());
    if (is_shared_explicit_requested.is_set || is_set(is_shared_explicit_requested.operation)) leaf_name_data.push_back(is_shared_explicit_requested.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bandwidth-protect")
    {
        is_bandwidth_protect = value;
    }
    if(value_path == "is-local-protect")
    {
        is_local_protect = value;
    }
    if(value_path == "is-node-protect")
    {
        is_node_protect = value;
    }
    if(value_path == "is-record-labels")
    {
        is_record_labels = value;
    }
    if(value_path == "is-shared-explicit-requested")
    {
        is_shared_explicit_requested = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::SessionAttribute()
    :
    	reservation_priority{YType::uint8, "reservation-priority"},
	 setup_priority{YType::uint8, "setup-priority"}
    	,
    sess_attribute_flags(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags>())
{
    sess_attribute_flags->parent = this;
    children["sess-attribute-flags"] = sess_attribute_flags.get();

    yang_name = "session-attribute"; yang_parent_name = "psb-detailed";
}

Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::~SessionAttribute()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::has_data() const
{
    return reservation_priority.is_set
	|| setup_priority.is_set
	|| (sess_attribute_flags !=  nullptr && sess_attribute_flags->has_data());
}

bool Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::has_operation() const
{
    return is_set(operation)
	|| is_set(reservation_priority.operation)
	|| is_set(setup_priority.operation)
	|| (sess_attribute_flags !=  nullptr && sess_attribute_flags->has_operation());
}

std::string Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session-attribute";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (reservation_priority.is_set || is_set(reservation_priority.operation)) leaf_name_data.push_back(reservation_priority.get_name_leafdata());
    if (setup_priority.is_set || is_set(setup_priority.operation)) leaf_name_data.push_back(setup_priority.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "sess-attribute-flags")
    {
        if(sess_attribute_flags != nullptr)
        {
            children["sess-attribute-flags"] = sess_attribute_flags.get();
        }
        else
        {
            sess_attribute_flags = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::SessAttributeFlags>();
            sess_attribute_flags->parent = this;
            children["sess-attribute-flags"] = sess_attribute_flags.get();
        }
        return children.at("sess-attribute-flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::get_children()
{
    if(children.find("sess-attribute-flags") == children.end())
    {
        if(sess_attribute_flags != nullptr)
        {
            children["sess-attribute-flags"] = sess_attribute_flags.get();
        }
    }

    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "reservation-priority")
    {
        reservation_priority = value;
    }
    if(value_path == "setup-priority")
    {
        setup_priority = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::TrafficSpec::TrafficSpec()
    :
    	traffic_average_rate{YType::uint64, "traffic-average-rate"},
	 traffic_max_burst{YType::uint64, "traffic-max-burst"},
	 traffic_max_unit{YType::uint32, "traffic-max-unit"},
	 traffic_min_unit{YType::uint32, "traffic-min-unit"},
	 traffic_peak_rate{YType::uint64, "traffic-peak-rate"}
{
    yang_name = "traffic-spec"; yang_parent_name = "psb-detailed";
}

Rsvp::PsbDetaileds::PsbDetailed::TrafficSpec::~TrafficSpec()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::TrafficSpec::has_data() const
{
    return traffic_average_rate.is_set
	|| traffic_max_burst.is_set
	|| traffic_max_unit.is_set
	|| traffic_min_unit.is_set
	|| traffic_peak_rate.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::TrafficSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_average_rate.operation)
	|| is_set(traffic_max_burst.operation)
	|| is_set(traffic_max_unit.operation)
	|| is_set(traffic_min_unit.operation)
	|| is_set(traffic_peak_rate.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::TrafficSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "traffic-spec";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::TrafficSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_average_rate.is_set || is_set(traffic_average_rate.operation)) leaf_name_data.push_back(traffic_average_rate.get_name_leafdata());
    if (traffic_max_burst.is_set || is_set(traffic_max_burst.operation)) leaf_name_data.push_back(traffic_max_burst.get_name_leafdata());
    if (traffic_max_unit.is_set || is_set(traffic_max_unit.operation)) leaf_name_data.push_back(traffic_max_unit.get_name_leafdata());
    if (traffic_min_unit.is_set || is_set(traffic_min_unit.operation)) leaf_name_data.push_back(traffic_min_unit.get_name_leafdata());
    if (traffic_peak_rate.is_set || is_set(traffic_peak_rate.operation)) leaf_name_data.push_back(traffic_peak_rate.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::TrafficSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::TrafficSpec::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::TrafficSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-average-rate")
    {
        traffic_average_rate = value;
    }
    if(value_path == "traffic-max-burst")
    {
        traffic_max_burst = value;
    }
    if(value_path == "traffic-max-unit")
    {
        traffic_max_unit = value;
    }
    if(value_path == "traffic-min-unit")
    {
        traffic_min_unit = value;
    }
    if(value_path == "traffic-peak-rate")
    {
        traffic_peak_rate = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec::G709OtnTspec()
    :
    	traffic_bit_rate{YType::uint64, "traffic-bit-rate"},
	 traffic_multiplier{YType::uint16, "traffic-multiplier"},
	 traffic_nvc{YType::uint16, "traffic-nvc"},
	 traffic_signal_type{YType::uint8, "traffic-signal-type"}
{
    yang_name = "g709otn-tspec"; yang_parent_name = "generic-traffic-spec";
}

Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec::~G709OtnTspec()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec::has_data() const
{
    return traffic_bit_rate.is_set
	|| traffic_multiplier.is_set
	|| traffic_nvc.is_set
	|| traffic_signal_type.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_bit_rate.operation)
	|| is_set(traffic_multiplier.operation)
	|| is_set(traffic_nvc.operation)
	|| is_set(traffic_signal_type.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-tspec";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/generic-traffic-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_bit_rate.is_set || is_set(traffic_bit_rate.operation)) leaf_name_data.push_back(traffic_bit_rate.get_name_leafdata());
    if (traffic_multiplier.is_set || is_set(traffic_multiplier.operation)) leaf_name_data.push_back(traffic_multiplier.get_name_leafdata());
    if (traffic_nvc.is_set || is_set(traffic_nvc.operation)) leaf_name_data.push_back(traffic_nvc.get_name_leafdata());
    if (traffic_signal_type.is_set || is_set(traffic_signal_type.operation)) leaf_name_data.push_back(traffic_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-bit-rate")
    {
        traffic_bit_rate = value;
    }
    if(value_path == "traffic-multiplier")
    {
        traffic_multiplier = value;
    }
    if(value_path == "traffic-nvc")
    {
        traffic_nvc = value;
    }
    if(value_path == "traffic-signal-type")
    {
        traffic_signal_type = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec::IntsrvTspec()
    :
    	traffic_average_rate{YType::uint64, "traffic-average-rate"},
	 traffic_max_burst{YType::uint64, "traffic-max-burst"},
	 traffic_max_unit{YType::uint32, "traffic-max-unit"},
	 traffic_min_unit{YType::uint32, "traffic-min-unit"},
	 traffic_peak_rate{YType::uint64, "traffic-peak-rate"}
{
    yang_name = "intsrv-tspec"; yang_parent_name = "generic-traffic-spec";
}

Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec::~IntsrvTspec()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec::has_data() const
{
    return traffic_average_rate.is_set
	|| traffic_max_burst.is_set
	|| traffic_max_unit.is_set
	|| traffic_min_unit.is_set
	|| traffic_peak_rate.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_average_rate.operation)
	|| is_set(traffic_max_burst.operation)
	|| is_set(traffic_max_unit.operation)
	|| is_set(traffic_min_unit.operation)
	|| is_set(traffic_peak_rate.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "intsrv-tspec";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/generic-traffic-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_average_rate.is_set || is_set(traffic_average_rate.operation)) leaf_name_data.push_back(traffic_average_rate.get_name_leafdata());
    if (traffic_max_burst.is_set || is_set(traffic_max_burst.operation)) leaf_name_data.push_back(traffic_max_burst.get_name_leafdata());
    if (traffic_max_unit.is_set || is_set(traffic_max_unit.operation)) leaf_name_data.push_back(traffic_max_unit.get_name_leafdata());
    if (traffic_min_unit.is_set || is_set(traffic_min_unit.operation)) leaf_name_data.push_back(traffic_min_unit.get_name_leafdata());
    if (traffic_peak_rate.is_set || is_set(traffic_peak_rate.operation)) leaf_name_data.push_back(traffic_peak_rate.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-average-rate")
    {
        traffic_average_rate = value;
    }
    if(value_path == "traffic-max-burst")
    {
        traffic_max_burst = value;
    }
    if(value_path == "traffic-max-unit")
    {
        traffic_max_unit = value;
    }
    if(value_path == "traffic-min-unit")
    {
        traffic_min_unit = value;
    }
    if(value_path == "traffic-peak-rate")
    {
        traffic_peak_rate = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::GenericTrafficSpec()
    :
    	tspec_type{YType::enumeration, "tspec-type"}
    	,
    g709otn_tspec(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec>())
	,intsrv_tspec(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec>())
{
    g709otn_tspec->parent = this;
    children["g709otn-tspec"] = g709otn_tspec.get();

    intsrv_tspec->parent = this;
    children["intsrv-tspec"] = intsrv_tspec.get();

    yang_name = "generic-traffic-spec"; yang_parent_name = "psb-detailed";
}

Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::~GenericTrafficSpec()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::has_data() const
{
    return tspec_type.is_set
	|| (g709otn_tspec !=  nullptr && g709otn_tspec->has_data())
	|| (intsrv_tspec !=  nullptr && intsrv_tspec->has_data());
}

bool Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(tspec_type.operation)
	|| (g709otn_tspec !=  nullptr && g709otn_tspec->has_operation())
	|| (intsrv_tspec !=  nullptr && intsrv_tspec->has_operation());
}

std::string Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-traffic-spec";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (tspec_type.is_set || is_set(tspec_type.operation)) leaf_name_data.push_back(tspec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-tspec")
    {
        if(g709otn_tspec != nullptr)
        {
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
        else
        {
            g709otn_tspec = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::G709OtnTspec>();
            g709otn_tspec->parent = this;
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
        return children.at("g709otn-tspec");
    }

    if(child_yang_name == "intsrv-tspec")
    {
        if(intsrv_tspec != nullptr)
        {
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
        else
        {
            intsrv_tspec = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::IntsrvTspec>();
            intsrv_tspec->parent = this;
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
        return children.at("intsrv-tspec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::get_children()
{
    if(children.find("g709otn-tspec") == children.end())
    {
        if(g709otn_tspec != nullptr)
        {
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
    }

    if(children.find("intsrv-tspec") == children.end())
    {
        if(intsrv_tspec != nullptr)
        {
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
    }

    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "tspec-type")
    {
        tspec_type = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::PathFlags::PathFlags()
    :
    	is_bidirectional{YType::boolean, "is-bidirectional"},
	 is_local_repair{YType::boolean, "is-local-repair"},
	 is_local_sender{YType::boolean, "is-local-sender"},
	 is_lockout{YType::boolean, "is-lockout"},
	 is_message_id_valid{YType::boolean, "is-message-id-valid"},
	 is_non_rsvp_hop_upstream{YType::boolean, "is-non-rsvp-hop-upstream"}
{
    yang_name = "path-flags"; yang_parent_name = "psb-detailed";
}

Rsvp::PsbDetaileds::PsbDetailed::PathFlags::~PathFlags()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::PathFlags::has_data() const
{
    return is_bidirectional.is_set
	|| is_local_repair.is_set
	|| is_local_sender.is_set
	|| is_lockout.is_set
	|| is_message_id_valid.is_set
	|| is_non_rsvp_hop_upstream.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::PathFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bidirectional.operation)
	|| is_set(is_local_repair.operation)
	|| is_set(is_local_sender.operation)
	|| is_set(is_lockout.operation)
	|| is_set(is_message_id_valid.operation)
	|| is_set(is_non_rsvp_hop_upstream.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::PathFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "path-flags";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::PathFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bidirectional.is_set || is_set(is_bidirectional.operation)) leaf_name_data.push_back(is_bidirectional.get_name_leafdata());
    if (is_local_repair.is_set || is_set(is_local_repair.operation)) leaf_name_data.push_back(is_local_repair.get_name_leafdata());
    if (is_local_sender.is_set || is_set(is_local_sender.operation)) leaf_name_data.push_back(is_local_sender.get_name_leafdata());
    if (is_lockout.is_set || is_set(is_lockout.operation)) leaf_name_data.push_back(is_lockout.get_name_leafdata());
    if (is_message_id_valid.is_set || is_set(is_message_id_valid.operation)) leaf_name_data.push_back(is_message_id_valid.get_name_leafdata());
    if (is_non_rsvp_hop_upstream.is_set || is_set(is_non_rsvp_hop_upstream.operation)) leaf_name_data.push_back(is_non_rsvp_hop_upstream.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::PathFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::PathFlags::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::PathFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bidirectional")
    {
        is_bidirectional = value;
    }
    if(value_path == "is-local-repair")
    {
        is_local_repair = value;
    }
    if(value_path == "is-local-sender")
    {
        is_local_sender = value;
    }
    if(value_path == "is-lockout")
    {
        is_lockout = value;
    }
    if(value_path == "is-message-id-valid")
    {
        is_message_id_valid = value;
    }
    if(value_path == "is-non-rsvp-hop-upstream")
    {
        is_non_rsvp_hop_upstream = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::Hop::Hop()
    :
    	neighbor_address{YType::str, "neighbor-address"},
	 neighbor_logical_interface_name{YType::str, "neighbor-logical-interface-name"}
{
    yang_name = "hop"; yang_parent_name = "psb-detailed";
}

Rsvp::PsbDetaileds::PsbDetailed::Hop::~Hop()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::Hop::has_data() const
{
    return neighbor_address.is_set
	|| neighbor_logical_interface_name.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::Hop::has_operation() const
{
    return is_set(operation)
	|| is_set(neighbor_address.operation)
	|| is_set(neighbor_logical_interface_name.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::Hop::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hop";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::Hop::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (neighbor_logical_interface_name.is_set || is_set(neighbor_logical_interface_name.operation)) leaf_name_data.push_back(neighbor_logical_interface_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::Hop::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::Hop::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::Hop::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "neighbor-logical-interface-name")
    {
        neighbor_logical_interface_name = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::PolicySourceInfo::PolicySourceInfo()
    :
    	is_cable{YType::boolean, "is-cable"},
	 is_cops{YType::boolean, "is-cops"},
	 is_default{YType::boolean, "is-default"},
	 is_local{YType::boolean, "is-local"},
	 is_te_link{YType::boolean, "is-te-link"}
{
    yang_name = "policy-source-info"; yang_parent_name = "psb-detailed";
}

Rsvp::PsbDetaileds::PsbDetailed::PolicySourceInfo::~PolicySourceInfo()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::PolicySourceInfo::has_data() const
{
    return is_cable.is_set
	|| is_cops.is_set
	|| is_default.is_set
	|| is_local.is_set
	|| is_te_link.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::PolicySourceInfo::has_operation() const
{
    return is_set(operation)
	|| is_set(is_cable.operation)
	|| is_set(is_cops.operation)
	|| is_set(is_default.operation)
	|| is_set(is_local.operation)
	|| is_set(is_te_link.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::PolicySourceInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-source-info";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::PolicySourceInfo::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_cable.is_set || is_set(is_cable.operation)) leaf_name_data.push_back(is_cable.get_name_leafdata());
    if (is_cops.is_set || is_set(is_cops.operation)) leaf_name_data.push_back(is_cops.get_name_leafdata());
    if (is_default.is_set || is_set(is_default.operation)) leaf_name_data.push_back(is_default.get_name_leafdata());
    if (is_local.is_set || is_set(is_local.operation)) leaf_name_data.push_back(is_local.get_name_leafdata());
    if (is_te_link.is_set || is_set(is_te_link.operation)) leaf_name_data.push_back(is_te_link.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::PolicySourceInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::PolicySourceInfo::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::PolicySourceInfo::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-cable")
    {
        is_cable = value;
    }
    if(value_path == "is-cops")
    {
        is_cops = value;
    }
    if(value_path == "is-default")
    {
        is_default = value;
    }
    if(value_path == "is-local")
    {
        is_local = value;
    }
    if(value_path == "is-te-link")
    {
        is_te_link = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::Header::Header()
    :
    	ip_source_address{YType::str, "ip-source-address"},
	 ip_tos{YType::uint8, "ip-tos"},
	 ip_ttl{YType::uint8, "ip-ttl"},
	 rsvp_header_flags{YType::uint8, "rsvp-header-flags"},
	 rsvp_message_type{YType::uint8, "rsvp-message-type"},
	 rsvp_ttl{YType::uint8, "rsvp-ttl"},
	 rsvp_version{YType::uint8, "rsvp-version"}
{
    yang_name = "header"; yang_parent_name = "psb-detailed";
}

Rsvp::PsbDetaileds::PsbDetailed::Header::~Header()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::Header::has_data() const
{
    return ip_source_address.is_set
	|| ip_tos.is_set
	|| ip_ttl.is_set
	|| rsvp_header_flags.is_set
	|| rsvp_message_type.is_set
	|| rsvp_ttl.is_set
	|| rsvp_version.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::Header::has_operation() const
{
    return is_set(operation)
	|| is_set(ip_source_address.operation)
	|| is_set(ip_tos.operation)
	|| is_set(ip_ttl.operation)
	|| is_set(rsvp_header_flags.operation)
	|| is_set(rsvp_message_type.operation)
	|| is_set(rsvp_ttl.operation)
	|| is_set(rsvp_version.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::Header::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "header";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::Header::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ip_source_address.is_set || is_set(ip_source_address.operation)) leaf_name_data.push_back(ip_source_address.get_name_leafdata());
    if (ip_tos.is_set || is_set(ip_tos.operation)) leaf_name_data.push_back(ip_tos.get_name_leafdata());
    if (ip_ttl.is_set || is_set(ip_ttl.operation)) leaf_name_data.push_back(ip_ttl.get_name_leafdata());
    if (rsvp_header_flags.is_set || is_set(rsvp_header_flags.operation)) leaf_name_data.push_back(rsvp_header_flags.get_name_leafdata());
    if (rsvp_message_type.is_set || is_set(rsvp_message_type.operation)) leaf_name_data.push_back(rsvp_message_type.get_name_leafdata());
    if (rsvp_ttl.is_set || is_set(rsvp_ttl.operation)) leaf_name_data.push_back(rsvp_ttl.get_name_leafdata());
    if (rsvp_version.is_set || is_set(rsvp_version.operation)) leaf_name_data.push_back(rsvp_version.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::Header::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::Header::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::Header::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ip-source-address")
    {
        ip_source_address = value;
    }
    if(value_path == "ip-tos")
    {
        ip_tos = value;
    }
    if(value_path == "ip-ttl")
    {
        ip_ttl = value;
    }
    if(value_path == "rsvp-header-flags")
    {
        rsvp_header_flags = value;
    }
    if(value_path == "rsvp-message-type")
    {
        rsvp_message_type = value;
    }
    if(value_path == "rsvp-ttl")
    {
        rsvp_ttl = value;
    }
    if(value_path == "rsvp-version")
    {
        rsvp_version = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::ExpiryTime::ExpiryTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "expiry-time"; yang_parent_name = "psb-detailed";
}

Rsvp::PsbDetaileds::PsbDetailed::ExpiryTime::~ExpiryTime()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::ExpiryTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::ExpiryTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::ExpiryTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "expiry-time";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::ExpiryTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::ExpiryTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::ExpiryTime::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::ExpiryTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::PolicyFlags::PolicyFlags()
    :
    	is_accepted{YType::boolean, "is-accepted"},
	 is_forwarding{YType::boolean, "is-forwarding"},
	 is_installed{YType::boolean, "is-installed"}
{
    yang_name = "policy-flags"; yang_parent_name = "psb-detailed";
}

Rsvp::PsbDetaileds::PsbDetailed::PolicyFlags::~PolicyFlags()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::PolicyFlags::has_data() const
{
    return is_accepted.is_set
	|| is_forwarding.is_set
	|| is_installed.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::PolicyFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_accepted.operation)
	|| is_set(is_forwarding.operation)
	|| is_set(is_installed.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::PolicyFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-flags";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::PolicyFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_accepted.is_set || is_set(is_accepted.operation)) leaf_name_data.push_back(is_accepted.get_name_leafdata());
    if (is_forwarding.is_set || is_set(is_forwarding.operation)) leaf_name_data.push_back(is_forwarding.get_name_leafdata());
    if (is_installed.is_set || is_set(is_installed.operation)) leaf_name_data.push_back(is_installed.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::PolicyFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::PolicyFlags::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::PolicyFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-accepted")
    {
        is_accepted = value;
    }
    if(value_path == "is-forwarding")
    {
        is_forwarding = value;
    }
    if(value_path == "is-installed")
    {
        is_installed = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::PolicyQueryFlags::PolicyQueryFlags()
    :
    	is_bypass{YType::boolean, "is-bypass"},
	 is_needed{YType::boolean, "is-needed"},
	 is_report_required{YType::boolean, "is-report-required"},
	 is_resync{YType::boolean, "is-resync"}
{
    yang_name = "policy-query-flags"; yang_parent_name = "psb-detailed";
}

Rsvp::PsbDetaileds::PsbDetailed::PolicyQueryFlags::~PolicyQueryFlags()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::PolicyQueryFlags::has_data() const
{
    return is_bypass.is_set
	|| is_needed.is_set
	|| is_report_required.is_set
	|| is_resync.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::PolicyQueryFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bypass.operation)
	|| is_set(is_needed.operation)
	|| is_set(is_report_required.operation)
	|| is_set(is_resync.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::PolicyQueryFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-query-flags";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::PolicyQueryFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bypass.is_set || is_set(is_bypass.operation)) leaf_name_data.push_back(is_bypass.get_name_leafdata());
    if (is_needed.is_set || is_set(is_needed.operation)) leaf_name_data.push_back(is_needed.get_name_leafdata());
    if (is_report_required.is_set || is_set(is_report_required.operation)) leaf_name_data.push_back(is_report_required.get_name_leafdata());
    if (is_resync.is_set || is_set(is_resync.operation)) leaf_name_data.push_back(is_resync.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::PolicyQueryFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::PolicyQueryFlags::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::PolicyQueryFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bypass")
    {
        is_bypass = value;
    }
    if(value_path == "is-needed")
    {
        is_needed = value;
    }
    if(value_path == "is-report-required")
    {
        is_report_required = value;
    }
    if(value_path == "is-resync")
    {
        is_resync = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-local-downstream-label";
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-local-downstream-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GenericLocalDownstreamLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-local-downstream-label"; yang_parent_name = "label-info";
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::~GenericLocalDownstreamLabel()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-local-downstream-label";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-outgoing-downstream-label";
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-outgoing-downstream-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GenericOutgoingDownstreamLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-outgoing-downstream-label"; yang_parent_name = "label-info";
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::~GenericOutgoingDownstreamLabel()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-outgoing-downstream-label";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-merge-point-label";
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-merge-point-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GenericMergePointLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-merge-point-label"; yang_parent_name = "label-info";
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::~GenericMergePointLabel()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-merge-point-label";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-outgoing-upstream-label";
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-outgoing-upstream-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GenericOutgoingUpstreamLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-outgoing-upstream-label"; yang_parent_name = "label-info";
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::~GenericOutgoingUpstreamLabel()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-outgoing-upstream-label";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-local-upstream-label";
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-local-upstream-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GenericLocalUpstreamLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-local-upstream-label"; yang_parent_name = "label-info";
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::~GenericLocalUpstreamLabel()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-local-upstream-label";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-recovery-label";
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-recovery-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GenericRecoveryLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-recovery-label"; yang_parent_name = "label-info";
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::~GenericRecoveryLabel()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-recovery-label";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::LabelInfo()
    :
    	is_valid{YType::boolean, "is-valid"},
	 local_downstream_label{YType::uint32, "local-downstream-label"},
	 local_upstream_label{YType::uint32, "local-upstream-label"},
	 lsp_wrap_label{YType::uint32, "lsp-wrap-label"},
	 merge_point_label{YType::uint32, "merge-point-label"},
	 outgoing_downstream_label{YType::uint32, "outgoing-downstream-label"},
	 outgoing_upstream_label{YType::uint32, "outgoing-upstream-label"},
	 recovery_label{YType::uint32, "recovery-label"}
    	,
    generic_local_downstream_label(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel>())
	,generic_local_upstream_label(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel>())
	,generic_merge_point_label(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel>())
	,generic_outgoing_downstream_label(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel>())
	,generic_outgoing_upstream_label(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel>())
	,generic_recovery_label(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel>())
{
    generic_local_downstream_label->parent = this;
    children["generic-local-downstream-label"] = generic_local_downstream_label.get();

    generic_local_upstream_label->parent = this;
    children["generic-local-upstream-label"] = generic_local_upstream_label.get();

    generic_merge_point_label->parent = this;
    children["generic-merge-point-label"] = generic_merge_point_label.get();

    generic_outgoing_downstream_label->parent = this;
    children["generic-outgoing-downstream-label"] = generic_outgoing_downstream_label.get();

    generic_outgoing_upstream_label->parent = this;
    children["generic-outgoing-upstream-label"] = generic_outgoing_upstream_label.get();

    generic_recovery_label->parent = this;
    children["generic-recovery-label"] = generic_recovery_label.get();

    yang_name = "label-info"; yang_parent_name = "psb-detailed";
}

Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::~LabelInfo()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::has_data() const
{
    return is_valid.is_set
	|| local_downstream_label.is_set
	|| local_upstream_label.is_set
	|| lsp_wrap_label.is_set
	|| merge_point_label.is_set
	|| outgoing_downstream_label.is_set
	|| outgoing_upstream_label.is_set
	|| recovery_label.is_set
	|| (generic_local_downstream_label !=  nullptr && generic_local_downstream_label->has_data())
	|| (generic_local_upstream_label !=  nullptr && generic_local_upstream_label->has_data())
	|| (generic_merge_point_label !=  nullptr && generic_merge_point_label->has_data())
	|| (generic_outgoing_downstream_label !=  nullptr && generic_outgoing_downstream_label->has_data())
	|| (generic_outgoing_upstream_label !=  nullptr && generic_outgoing_upstream_label->has_data())
	|| (generic_recovery_label !=  nullptr && generic_recovery_label->has_data());
}

bool Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::has_operation() const
{
    return is_set(operation)
	|| is_set(is_valid.operation)
	|| is_set(local_downstream_label.operation)
	|| is_set(local_upstream_label.operation)
	|| is_set(lsp_wrap_label.operation)
	|| is_set(merge_point_label.operation)
	|| is_set(outgoing_downstream_label.operation)
	|| is_set(outgoing_upstream_label.operation)
	|| is_set(recovery_label.operation)
	|| (generic_local_downstream_label !=  nullptr && generic_local_downstream_label->has_operation())
	|| (generic_local_upstream_label !=  nullptr && generic_local_upstream_label->has_operation())
	|| (generic_merge_point_label !=  nullptr && generic_merge_point_label->has_operation())
	|| (generic_outgoing_downstream_label !=  nullptr && generic_outgoing_downstream_label->has_operation())
	|| (generic_outgoing_upstream_label !=  nullptr && generic_outgoing_upstream_label->has_operation())
	|| (generic_recovery_label !=  nullptr && generic_recovery_label->has_operation());
}

std::string Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "label-info";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_valid.is_set || is_set(is_valid.operation)) leaf_name_data.push_back(is_valid.get_name_leafdata());
    if (local_downstream_label.is_set || is_set(local_downstream_label.operation)) leaf_name_data.push_back(local_downstream_label.get_name_leafdata());
    if (local_upstream_label.is_set || is_set(local_upstream_label.operation)) leaf_name_data.push_back(local_upstream_label.get_name_leafdata());
    if (lsp_wrap_label.is_set || is_set(lsp_wrap_label.operation)) leaf_name_data.push_back(lsp_wrap_label.get_name_leafdata());
    if (merge_point_label.is_set || is_set(merge_point_label.operation)) leaf_name_data.push_back(merge_point_label.get_name_leafdata());
    if (outgoing_downstream_label.is_set || is_set(outgoing_downstream_label.operation)) leaf_name_data.push_back(outgoing_downstream_label.get_name_leafdata());
    if (outgoing_upstream_label.is_set || is_set(outgoing_upstream_label.operation)) leaf_name_data.push_back(outgoing_upstream_label.get_name_leafdata());
    if (recovery_label.is_set || is_set(recovery_label.operation)) leaf_name_data.push_back(recovery_label.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generic-local-downstream-label")
    {
        if(generic_local_downstream_label != nullptr)
        {
            children["generic-local-downstream-label"] = generic_local_downstream_label.get();
        }
        else
        {
            generic_local_downstream_label = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalDownstreamLabel>();
            generic_local_downstream_label->parent = this;
            children["generic-local-downstream-label"] = generic_local_downstream_label.get();
        }
        return children.at("generic-local-downstream-label");
    }

    if(child_yang_name == "generic-local-upstream-label")
    {
        if(generic_local_upstream_label != nullptr)
        {
            children["generic-local-upstream-label"] = generic_local_upstream_label.get();
        }
        else
        {
            generic_local_upstream_label = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericLocalUpstreamLabel>();
            generic_local_upstream_label->parent = this;
            children["generic-local-upstream-label"] = generic_local_upstream_label.get();
        }
        return children.at("generic-local-upstream-label");
    }

    if(child_yang_name == "generic-merge-point-label")
    {
        if(generic_merge_point_label != nullptr)
        {
            children["generic-merge-point-label"] = generic_merge_point_label.get();
        }
        else
        {
            generic_merge_point_label = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericMergePointLabel>();
            generic_merge_point_label->parent = this;
            children["generic-merge-point-label"] = generic_merge_point_label.get();
        }
        return children.at("generic-merge-point-label");
    }

    if(child_yang_name == "generic-outgoing-downstream-label")
    {
        if(generic_outgoing_downstream_label != nullptr)
        {
            children["generic-outgoing-downstream-label"] = generic_outgoing_downstream_label.get();
        }
        else
        {
            generic_outgoing_downstream_label = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel>();
            generic_outgoing_downstream_label->parent = this;
            children["generic-outgoing-downstream-label"] = generic_outgoing_downstream_label.get();
        }
        return children.at("generic-outgoing-downstream-label");
    }

    if(child_yang_name == "generic-outgoing-upstream-label")
    {
        if(generic_outgoing_upstream_label != nullptr)
        {
            children["generic-outgoing-upstream-label"] = generic_outgoing_upstream_label.get();
        }
        else
        {
            generic_outgoing_upstream_label = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel>();
            generic_outgoing_upstream_label->parent = this;
            children["generic-outgoing-upstream-label"] = generic_outgoing_upstream_label.get();
        }
        return children.at("generic-outgoing-upstream-label");
    }

    if(child_yang_name == "generic-recovery-label")
    {
        if(generic_recovery_label != nullptr)
        {
            children["generic-recovery-label"] = generic_recovery_label.get();
        }
        else
        {
            generic_recovery_label = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::GenericRecoveryLabel>();
            generic_recovery_label->parent = this;
            children["generic-recovery-label"] = generic_recovery_label.get();
        }
        return children.at("generic-recovery-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::get_children()
{
    if(children.find("generic-local-downstream-label") == children.end())
    {
        if(generic_local_downstream_label != nullptr)
        {
            children["generic-local-downstream-label"] = generic_local_downstream_label.get();
        }
    }

    if(children.find("generic-local-upstream-label") == children.end())
    {
        if(generic_local_upstream_label != nullptr)
        {
            children["generic-local-upstream-label"] = generic_local_upstream_label.get();
        }
    }

    if(children.find("generic-merge-point-label") == children.end())
    {
        if(generic_merge_point_label != nullptr)
        {
            children["generic-merge-point-label"] = generic_merge_point_label.get();
        }
    }

    if(children.find("generic-outgoing-downstream-label") == children.end())
    {
        if(generic_outgoing_downstream_label != nullptr)
        {
            children["generic-outgoing-downstream-label"] = generic_outgoing_downstream_label.get();
        }
    }

    if(children.find("generic-outgoing-upstream-label") == children.end())
    {
        if(generic_outgoing_upstream_label != nullptr)
        {
            children["generic-outgoing-upstream-label"] = generic_outgoing_upstream_label.get();
        }
    }

    if(children.find("generic-recovery-label") == children.end())
    {
        if(generic_recovery_label != nullptr)
        {
            children["generic-recovery-label"] = generic_recovery_label.get();
        }
    }

    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::LabelInfo::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-valid")
    {
        is_valid = value;
    }
    if(value_path == "local-downstream-label")
    {
        local_downstream_label = value;
    }
    if(value_path == "local-upstream-label")
    {
        local_upstream_label = value;
    }
    if(value_path == "lsp-wrap-label")
    {
        lsp_wrap_label = value;
    }
    if(value_path == "merge-point-label")
    {
        merge_point_label = value;
    }
    if(value_path == "outgoing-downstream-label")
    {
        outgoing_downstream_label = value;
    }
    if(value_path == "outgoing-upstream-label")
    {
        outgoing_upstream_label = value;
    }
    if(value_path == "recovery-label")
    {
        recovery_label = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::ClassType::ClassType()
    :
    	class_type{YType::uint8, "class-type"},
	 is_class_type_info_valid{YType::boolean, "is-class-type-info-valid"}
{
    yang_name = "class-type"; yang_parent_name = "psb-detailed";
}

Rsvp::PsbDetaileds::PsbDetailed::ClassType::~ClassType()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::ClassType::has_data() const
{
    return class_type.is_set
	|| is_class_type_info_valid.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::ClassType::has_operation() const
{
    return is_set(operation)
	|| is_set(class_type.operation)
	|| is_set(is_class_type_info_valid.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::ClassType::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "class-type";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::ClassType::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (class_type.is_set || is_set(class_type.operation)) leaf_name_data.push_back(class_type.get_name_leafdata());
    if (is_class_type_info_valid.is_set || is_set(is_class_type_info_valid.operation)) leaf_name_data.push_back(is_class_type_info_valid.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::ClassType::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::ClassType::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::ClassType::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "class-type")
    {
        class_type = value;
    }
    if(value_path == "is-class-type-info-valid")
    {
        is_class_type_info_valid = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags::PolicyFlags()
    :
    	is_accepted{YType::boolean, "is-accepted"},
	 is_forwarding{YType::boolean, "is-forwarding"},
	 is_installed{YType::boolean, "is-installed"}
{
    yang_name = "policy-flags"; yang_parent_name = "pfc";
}

Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags::~PolicyFlags()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags::has_data() const
{
    return is_accepted.is_set
	|| is_forwarding.is_set
	|| is_installed.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_accepted.operation)
	|| is_set(is_forwarding.operation)
	|| is_set(is_installed.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-flags";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/pfc/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_accepted.is_set || is_set(is_accepted.operation)) leaf_name_data.push_back(is_accepted.get_name_leafdata());
    if (is_forwarding.is_set || is_set(is_forwarding.operation)) leaf_name_data.push_back(is_forwarding.get_name_leafdata());
    if (is_installed.is_set || is_set(is_installed.operation)) leaf_name_data.push_back(is_installed.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-accepted")
    {
        is_accepted = value;
    }
    if(value_path == "is-forwarding")
    {
        is_forwarding = value;
    }
    if(value_path == "is-installed")
    {
        is_installed = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags::PolicyQueryFlags()
    :
    	is_bypass{YType::boolean, "is-bypass"},
	 is_needed{YType::boolean, "is-needed"},
	 is_report_required{YType::boolean, "is-report-required"},
	 is_resync{YType::boolean, "is-resync"}
{
    yang_name = "policy-query-flags"; yang_parent_name = "pfc";
}

Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags::~PolicyQueryFlags()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags::has_data() const
{
    return is_bypass.is_set
	|| is_needed.is_set
	|| is_report_required.is_set
	|| is_resync.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bypass.operation)
	|| is_set(is_needed.operation)
	|| is_set(is_report_required.operation)
	|| is_set(is_resync.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-query-flags";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/pfc/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bypass.is_set || is_set(is_bypass.operation)) leaf_name_data.push_back(is_bypass.get_name_leafdata());
    if (is_needed.is_set || is_set(is_needed.operation)) leaf_name_data.push_back(is_needed.get_name_leafdata());
    if (is_report_required.is_set || is_set(is_report_required.operation)) leaf_name_data.push_back(is_report_required.get_name_leafdata());
    if (is_resync.is_set || is_set(is_resync.operation)) leaf_name_data.push_back(is_resync.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bypass")
    {
        is_bypass = value;
    }
    if(value_path == "is-needed")
    {
        is_needed = value;
    }
    if(value_path == "is-report-required")
    {
        is_report_required = value;
    }
    if(value_path == "is-resync")
    {
        is_resync = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::Pfc::Pfc()
    :
    	output_interface{YType::str, "output-interface"}
    	,
    policy_flags(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags>())
	,policy_query_flags(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags>())
{
    policy_flags->parent = this;
    children["policy-flags"] = policy_flags.get();

    policy_query_flags->parent = this;
    children["policy-query-flags"] = policy_query_flags.get();

    yang_name = "pfc"; yang_parent_name = "psb-detailed";
}

Rsvp::PsbDetaileds::PsbDetailed::Pfc::~Pfc()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::Pfc::has_data() const
{
    return output_interface.is_set
	|| (policy_flags !=  nullptr && policy_flags->has_data())
	|| (policy_query_flags !=  nullptr && policy_query_flags->has_data());
}

bool Rsvp::PsbDetaileds::PsbDetailed::Pfc::has_operation() const
{
    return is_set(operation)
	|| is_set(output_interface.operation)
	|| (policy_flags !=  nullptr && policy_flags->has_operation())
	|| (policy_query_flags !=  nullptr && policy_query_flags->has_operation());
}

std::string Rsvp::PsbDetaileds::PsbDetailed::Pfc::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pfc";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::Pfc::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (output_interface.is_set || is_set(output_interface.operation)) leaf_name_data.push_back(output_interface.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::Pfc::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "policy-flags")
    {
        if(policy_flags != nullptr)
        {
            children["policy-flags"] = policy_flags.get();
        }
        else
        {
            policy_flags = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyFlags>();
            policy_flags->parent = this;
            children["policy-flags"] = policy_flags.get();
        }
        return children.at("policy-flags");
    }

    if(child_yang_name == "policy-query-flags")
    {
        if(policy_query_flags != nullptr)
        {
            children["policy-query-flags"] = policy_query_flags.get();
        }
        else
        {
            policy_query_flags = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Pfc::PolicyQueryFlags>();
            policy_query_flags->parent = this;
            children["policy-query-flags"] = policy_query_flags.get();
        }
        return children.at("policy-query-flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::Pfc::get_children()
{
    if(children.find("policy-flags") == children.end())
    {
        if(policy_flags != nullptr)
        {
            children["policy-flags"] = policy_flags.get();
        }
    }

    if(children.find("policy-query-flags") == children.end())
    {
        if(policy_query_flags != nullptr)
        {
            children["policy-query-flags"] = policy_query_flags.get();
        }
    }

    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::Pfc::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "output-interface")
    {
        output_interface = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject::Ipv4EroSubObject()
    :
    	ero_address{YType::str, "ero-address"},
	 is_strict_route{YType::boolean, "is-strict-route"},
	 prefix_length{YType::uint8, "prefix-length"}
{
    yang_name = "ipv4ero-sub-object"; yang_parent_name = "in-ero";
}

Rsvp::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject::~Ipv4EroSubObject()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject::has_data() const
{
    return ero_address.is_set
	|| is_strict_route.is_set
	|| prefix_length.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_address.operation)
	|| is_set(is_strict_route.operation)
	|| is_set(prefix_length.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4ero-sub-object";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/in-ero/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_address.is_set || is_set(ero_address.operation)) leaf_name_data.push_back(ero_address.get_name_leafdata());
    if (is_strict_route.is_set || is_set(is_strict_route.operation)) leaf_name_data.push_back(is_strict_route.get_name_leafdata());
    if (prefix_length.is_set || is_set(prefix_length.operation)) leaf_name_data.push_back(prefix_length.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-address")
    {
        ero_address = value;
    }
    if(value_path == "is-strict-route")
    {
        is_strict_route = value;
    }
    if(value_path == "prefix-length")
    {
        prefix_length = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject::UnnumberedEroSubObject()
    :
    	ero_interface_id{YType::uint32, "ero-interface-id"},
	 ero_router_id{YType::str, "ero-router-id"},
	 is_strict_route{YType::boolean, "is-strict-route"},
	 status{YType::enumeration, "status"}
{
    yang_name = "unnumbered-ero-sub-object"; yang_parent_name = "in-ero";
}

Rsvp::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject::~UnnumberedEroSubObject()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject::has_data() const
{
    return ero_interface_id.is_set
	|| ero_router_id.is_set
	|| is_strict_route.is_set
	|| status.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_interface_id.operation)
	|| is_set(ero_router_id.operation)
	|| is_set(is_strict_route.operation)
	|| is_set(status.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "unnumbered-ero-sub-object";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/in-ero/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_interface_id.is_set || is_set(ero_interface_id.operation)) leaf_name_data.push_back(ero_interface_id.get_name_leafdata());
    if (ero_router_id.is_set || is_set(ero_router_id.operation)) leaf_name_data.push_back(ero_router_id.get_name_leafdata());
    if (is_strict_route.is_set || is_set(is_strict_route.operation)) leaf_name_data.push_back(is_strict_route.get_name_leafdata());
    if (status.is_set || is_set(status.operation)) leaf_name_data.push_back(status.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-interface-id")
    {
        ero_interface_id = value;
    }
    if(value_path == "ero-router-id")
    {
        ero_router_id = value;
    }
    if(value_path == "is-strict-route")
    {
        is_strict_route = value;
    }
    if(value_path == "status")
    {
        status = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::InEro::InEro()
    :
    	ero_type{YType::enumeration, "ero-type"}
    	,
    ipv4ero_sub_object(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject>())
	,unnumbered_ero_sub_object(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject>())
{
    ipv4ero_sub_object->parent = this;
    children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();

    unnumbered_ero_sub_object->parent = this;
    children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();

    yang_name = "in-ero"; yang_parent_name = "psb-detailed";
}

Rsvp::PsbDetaileds::PsbDetailed::InEro::~InEro()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::InEro::has_data() const
{
    return ero_type.is_set
	|| (ipv4ero_sub_object !=  nullptr && ipv4ero_sub_object->has_data())
	|| (unnumbered_ero_sub_object !=  nullptr && unnumbered_ero_sub_object->has_data());
}

bool Rsvp::PsbDetaileds::PsbDetailed::InEro::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_type.operation)
	|| (ipv4ero_sub_object !=  nullptr && ipv4ero_sub_object->has_operation())
	|| (unnumbered_ero_sub_object !=  nullptr && unnumbered_ero_sub_object->has_operation());
}

std::string Rsvp::PsbDetaileds::PsbDetailed::InEro::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "in-ero";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::InEro::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_type.is_set || is_set(ero_type.operation)) leaf_name_data.push_back(ero_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::InEro::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4ero-sub-object")
    {
        if(ipv4ero_sub_object != nullptr)
        {
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
        else
        {
            ipv4ero_sub_object = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::InEro::Ipv4EroSubObject>();
            ipv4ero_sub_object->parent = this;
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
        return children.at("ipv4ero-sub-object");
    }

    if(child_yang_name == "unnumbered-ero-sub-object")
    {
        if(unnumbered_ero_sub_object != nullptr)
        {
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
        else
        {
            unnumbered_ero_sub_object = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::InEro::UnnumberedEroSubObject>();
            unnumbered_ero_sub_object->parent = this;
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
        return children.at("unnumbered-ero-sub-object");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::InEro::get_children()
{
    if(children.find("ipv4ero-sub-object") == children.end())
    {
        if(ipv4ero_sub_object != nullptr)
        {
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
    }

    if(children.find("unnumbered-ero-sub-object") == children.end())
    {
        if(unnumbered_ero_sub_object != nullptr)
        {
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
    }

    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::InEro::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-type")
    {
        ero_type = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject::Ipv4EroSubObject()
    :
    	ero_address{YType::str, "ero-address"},
	 is_strict_route{YType::boolean, "is-strict-route"},
	 prefix_length{YType::uint8, "prefix-length"}
{
    yang_name = "ipv4ero-sub-object"; yang_parent_name = "out-ero";
}

Rsvp::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject::~Ipv4EroSubObject()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject::has_data() const
{
    return ero_address.is_set
	|| is_strict_route.is_set
	|| prefix_length.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_address.operation)
	|| is_set(is_strict_route.operation)
	|| is_set(prefix_length.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4ero-sub-object";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/out-ero/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_address.is_set || is_set(ero_address.operation)) leaf_name_data.push_back(ero_address.get_name_leafdata());
    if (is_strict_route.is_set || is_set(is_strict_route.operation)) leaf_name_data.push_back(is_strict_route.get_name_leafdata());
    if (prefix_length.is_set || is_set(prefix_length.operation)) leaf_name_data.push_back(prefix_length.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-address")
    {
        ero_address = value;
    }
    if(value_path == "is-strict-route")
    {
        is_strict_route = value;
    }
    if(value_path == "prefix-length")
    {
        prefix_length = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject::UnnumberedEroSubObject()
    :
    	ero_interface_id{YType::uint32, "ero-interface-id"},
	 ero_router_id{YType::str, "ero-router-id"},
	 is_strict_route{YType::boolean, "is-strict-route"},
	 status{YType::enumeration, "status"}
{
    yang_name = "unnumbered-ero-sub-object"; yang_parent_name = "out-ero";
}

Rsvp::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject::~UnnumberedEroSubObject()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject::has_data() const
{
    return ero_interface_id.is_set
	|| ero_router_id.is_set
	|| is_strict_route.is_set
	|| status.is_set;
}

bool Rsvp::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_interface_id.operation)
	|| is_set(ero_router_id.operation)
	|| is_set(is_strict_route.operation)
	|| is_set(status.operation);
}

std::string Rsvp::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "unnumbered-ero-sub-object";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/out-ero/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_interface_id.is_set || is_set(ero_interface_id.operation)) leaf_name_data.push_back(ero_interface_id.get_name_leafdata());
    if (ero_router_id.is_set || is_set(ero_router_id.operation)) leaf_name_data.push_back(ero_router_id.get_name_leafdata());
    if (is_strict_route.is_set || is_set(is_strict_route.operation)) leaf_name_data.push_back(is_strict_route.get_name_leafdata());
    if (status.is_set || is_set(status.operation)) leaf_name_data.push_back(status.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject::get_children()
{
    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-interface-id")
    {
        ero_interface_id = value;
    }
    if(value_path == "ero-router-id")
    {
        ero_router_id = value;
    }
    if(value_path == "is-strict-route")
    {
        is_strict_route = value;
    }
    if(value_path == "status")
    {
        status = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::OutEro::OutEro()
    :
    	ero_type{YType::enumeration, "ero-type"}
    	,
    ipv4ero_sub_object(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject>())
	,unnumbered_ero_sub_object(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject>())
{
    ipv4ero_sub_object->parent = this;
    children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();

    unnumbered_ero_sub_object->parent = this;
    children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();

    yang_name = "out-ero"; yang_parent_name = "psb-detailed";
}

Rsvp::PsbDetaileds::PsbDetailed::OutEro::~OutEro()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::OutEro::has_data() const
{
    return ero_type.is_set
	|| (ipv4ero_sub_object !=  nullptr && ipv4ero_sub_object->has_data())
	|| (unnumbered_ero_sub_object !=  nullptr && unnumbered_ero_sub_object->has_data());
}

bool Rsvp::PsbDetaileds::PsbDetailed::OutEro::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_type.operation)
	|| (ipv4ero_sub_object !=  nullptr && ipv4ero_sub_object->has_operation())
	|| (unnumbered_ero_sub_object !=  nullptr && unnumbered_ero_sub_object->has_operation());
}

std::string Rsvp::PsbDetaileds::PsbDetailed::OutEro::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "out-ero";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::OutEro::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_type.is_set || is_set(ero_type.operation)) leaf_name_data.push_back(ero_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::OutEro::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4ero-sub-object")
    {
        if(ipv4ero_sub_object != nullptr)
        {
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
        else
        {
            ipv4ero_sub_object = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::OutEro::Ipv4EroSubObject>();
            ipv4ero_sub_object->parent = this;
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
        return children.at("ipv4ero-sub-object");
    }

    if(child_yang_name == "unnumbered-ero-sub-object")
    {
        if(unnumbered_ero_sub_object != nullptr)
        {
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
        else
        {
            unnumbered_ero_sub_object = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::OutEro::UnnumberedEroSubObject>();
            unnumbered_ero_sub_object->parent = this;
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
        return children.at("unnumbered-ero-sub-object");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::OutEro::get_children()
{
    if(children.find("ipv4ero-sub-object") == children.end())
    {
        if(ipv4ero_sub_object != nullptr)
        {
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
    }

    if(children.find("unnumbered-ero-sub-object") == children.end())
    {
        if(unnumbered_ero_sub_object != nullptr)
        {
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
    }

    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::OutEro::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-type")
    {
        ero_type = value;
    }
}

Rsvp::PsbDetaileds::PsbDetailed::PsbDetailed()
    :
    	backup_tunnel_name{YType::str, "backup-tunnel-name"},
	 destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 input_interface{YType::str, "input-interface"},
	 is_in_ero_valid{YType::boolean, "is-in-ero-valid"},
	 is_out_ero_valid{YType::boolean, "is-out-ero-valid"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 protocol{YType::int32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::int32, "source-port"},
	 sub_group_id{YType::int32, "sub-group-id"},
	 sub_group_origin{YType::str, "sub-group-origin"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    class_type(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::ClassType>())
	,expiry_time(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::ExpiryTime>())
	,generic_traffic_spec(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec>())
	,header(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Header>())
	,hop(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Hop>())
	,label_info(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo>())
	,path_flags(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::PathFlags>())
	,policy_flags(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::PolicyFlags>())
	,policy_query_flags(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::PolicyQueryFlags>())
	,policy_source_info(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::PolicySourceInfo>())
	,s2l_sub_lsp(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::S2LSubLsp>())
	,session(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Session>())
	,session_attribute(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute>())
	,template_(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Template_>())
	,traffic_spec(std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::TrafficSpec>())
{
    class_type->parent = this;
    children["class-type"] = class_type.get();

    expiry_time->parent = this;
    children["expiry-time"] = expiry_time.get();

    generic_traffic_spec->parent = this;
    children["generic-traffic-spec"] = generic_traffic_spec.get();

    header->parent = this;
    children["header"] = header.get();

    hop->parent = this;
    children["hop"] = hop.get();

    label_info->parent = this;
    children["label-info"] = label_info.get();

    path_flags->parent = this;
    children["path-flags"] = path_flags.get();

    policy_flags->parent = this;
    children["policy-flags"] = policy_flags.get();

    policy_query_flags->parent = this;
    children["policy-query-flags"] = policy_query_flags.get();

    policy_source_info->parent = this;
    children["policy-source-info"] = policy_source_info.get();

    s2l_sub_lsp->parent = this;
    children["s2l-sub-lsp"] = s2l_sub_lsp.get();

    session->parent = this;
    children["session"] = session.get();

    session_attribute->parent = this;
    children["session-attribute"] = session_attribute.get();

    template_->parent = this;
    children["template"] = template_.get();

    traffic_spec->parent = this;
    children["traffic-spec"] = traffic_spec.get();

    yang_name = "psb-detailed"; yang_parent_name = "psb-detaileds";
}

Rsvp::PsbDetaileds::PsbDetailed::~PsbDetailed()
{
}

bool Rsvp::PsbDetaileds::PsbDetailed::has_data() const
{
    for (std::size_t index=0; index<in_ero.size(); index++)
    {
        if(in_ero[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<out_ero.size(); index++)
    {
        if(out_ero[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<pfc.size(); index++)
    {
        if(pfc[index]->has_data())
            return true;
    }
    return backup_tunnel_name.is_set
	|| destination_address.is_set
	|| destination_port.is_set
	|| extended_tunnel_id.is_set
	|| input_interface.is_set
	|| is_in_ero_valid.is_set
	|| is_out_ero_valid.is_set
	|| p2mp_id.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set
	|| sub_group_origin.is_set
	|| vrf_name.is_set
	|| (class_type !=  nullptr && class_type->has_data())
	|| (expiry_time !=  nullptr && expiry_time->has_data())
	|| (generic_traffic_spec !=  nullptr && generic_traffic_spec->has_data())
	|| (header !=  nullptr && header->has_data())
	|| (hop !=  nullptr && hop->has_data())
	|| (label_info !=  nullptr && label_info->has_data())
	|| (path_flags !=  nullptr && path_flags->has_data())
	|| (policy_flags !=  nullptr && policy_flags->has_data())
	|| (policy_query_flags !=  nullptr && policy_query_flags->has_data())
	|| (policy_source_info !=  nullptr && policy_source_info->has_data())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_data())
	|| (session !=  nullptr && session->has_data())
	|| (session_attribute !=  nullptr && session_attribute->has_data())
	|| (template_ !=  nullptr && template_->has_data())
	|| (traffic_spec !=  nullptr && traffic_spec->has_data());
}

bool Rsvp::PsbDetaileds::PsbDetailed::has_operation() const
{
    for (std::size_t index=0; index<in_ero.size(); index++)
    {
        if(in_ero[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<out_ero.size(); index++)
    {
        if(out_ero[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<pfc.size(); index++)
    {
        if(pfc[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(backup_tunnel_name.operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(input_interface.operation)
	|| is_set(is_in_ero_valid.operation)
	|| is_set(is_out_ero_valid.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(sub_group_origin.operation)
	|| is_set(vrf_name.operation)
	|| (class_type !=  nullptr && class_type->has_operation())
	|| (expiry_time !=  nullptr && expiry_time->has_operation())
	|| (generic_traffic_spec !=  nullptr && generic_traffic_spec->has_operation())
	|| (header !=  nullptr && header->has_operation())
	|| (hop !=  nullptr && hop->has_operation())
	|| (label_info !=  nullptr && label_info->has_operation())
	|| (path_flags !=  nullptr && path_flags->has_operation())
	|| (policy_flags !=  nullptr && policy_flags->has_operation())
	|| (policy_query_flags !=  nullptr && policy_query_flags->has_operation())
	|| (policy_source_info !=  nullptr && policy_source_info->has_operation())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_operation())
	|| (session !=  nullptr && session->has_operation())
	|| (session_attribute !=  nullptr && session_attribute->has_operation())
	|| (template_ !=  nullptr && template_->has_operation())
	|| (traffic_spec !=  nullptr && traffic_spec->has_operation());
}

std::string Rsvp::PsbDetaileds::PsbDetailed::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "psb-detailed";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::PsbDetailed::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (backup_tunnel_name.is_set || is_set(backup_tunnel_name.operation)) leaf_name_data.push_back(backup_tunnel_name.get_name_leafdata());
    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (input_interface.is_set || is_set(input_interface.operation)) leaf_name_data.push_back(input_interface.get_name_leafdata());
    if (is_in_ero_valid.is_set || is_set(is_in_ero_valid.operation)) leaf_name_data.push_back(is_in_ero_valid.get_name_leafdata());
    if (is_out_ero_valid.is_set || is_set(is_out_ero_valid.operation)) leaf_name_data.push_back(is_out_ero_valid.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (sub_group_origin.is_set || is_set(sub_group_origin.operation)) leaf_name_data.push_back(sub_group_origin.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::PsbDetailed::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "class-type")
    {
        if(class_type != nullptr)
        {
            children["class-type"] = class_type.get();
        }
        else
        {
            class_type = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::ClassType>();
            class_type->parent = this;
            children["class-type"] = class_type.get();
        }
        return children.at("class-type");
    }

    if(child_yang_name == "expiry-time")
    {
        if(expiry_time != nullptr)
        {
            children["expiry-time"] = expiry_time.get();
        }
        else
        {
            expiry_time = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::ExpiryTime>();
            expiry_time->parent = this;
            children["expiry-time"] = expiry_time.get();
        }
        return children.at("expiry-time");
    }

    if(child_yang_name == "generic-traffic-spec")
    {
        if(generic_traffic_spec != nullptr)
        {
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
        else
        {
            generic_traffic_spec = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::GenericTrafficSpec>();
            generic_traffic_spec->parent = this;
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
        return children.at("generic-traffic-spec");
    }

    if(child_yang_name == "header")
    {
        if(header != nullptr)
        {
            children["header"] = header.get();
        }
        else
        {
            header = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Header>();
            header->parent = this;
            children["header"] = header.get();
        }
        return children.at("header");
    }

    if(child_yang_name == "hop")
    {
        if(hop != nullptr)
        {
            children["hop"] = hop.get();
        }
        else
        {
            hop = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Hop>();
            hop->parent = this;
            children["hop"] = hop.get();
        }
        return children.at("hop");
    }

    if(child_yang_name == "in-ero")
    {
        for(auto const & c : in_ero)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::InEro>();
        c->parent = this;
        in_ero.push_back(std::move(c));
        children[segment_path] = in_ero.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "label-info")
    {
        if(label_info != nullptr)
        {
            children["label-info"] = label_info.get();
        }
        else
        {
            label_info = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::LabelInfo>();
            label_info->parent = this;
            children["label-info"] = label_info.get();
        }
        return children.at("label-info");
    }

    if(child_yang_name == "out-ero")
    {
        for(auto const & c : out_ero)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::OutEro>();
        c->parent = this;
        out_ero.push_back(std::move(c));
        children[segment_path] = out_ero.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "path-flags")
    {
        if(path_flags != nullptr)
        {
            children["path-flags"] = path_flags.get();
        }
        else
        {
            path_flags = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::PathFlags>();
            path_flags->parent = this;
            children["path-flags"] = path_flags.get();
        }
        return children.at("path-flags");
    }

    if(child_yang_name == "pfc")
    {
        for(auto const & c : pfc)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Pfc>();
        c->parent = this;
        pfc.push_back(std::move(c));
        children[segment_path] = pfc.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "policy-flags")
    {
        if(policy_flags != nullptr)
        {
            children["policy-flags"] = policy_flags.get();
        }
        else
        {
            policy_flags = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::PolicyFlags>();
            policy_flags->parent = this;
            children["policy-flags"] = policy_flags.get();
        }
        return children.at("policy-flags");
    }

    if(child_yang_name == "policy-query-flags")
    {
        if(policy_query_flags != nullptr)
        {
            children["policy-query-flags"] = policy_query_flags.get();
        }
        else
        {
            policy_query_flags = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::PolicyQueryFlags>();
            policy_query_flags->parent = this;
            children["policy-query-flags"] = policy_query_flags.get();
        }
        return children.at("policy-query-flags");
    }

    if(child_yang_name == "policy-source-info")
    {
        if(policy_source_info != nullptr)
        {
            children["policy-source-info"] = policy_source_info.get();
        }
        else
        {
            policy_source_info = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::PolicySourceInfo>();
            policy_source_info->parent = this;
            children["policy-source-info"] = policy_source_info.get();
        }
        return children.at("policy-source-info");
    }

    if(child_yang_name == "s2l-sub-lsp")
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        else
        {
            s2l_sub_lsp = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::S2LSubLsp>();
            s2l_sub_lsp->parent = this;
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        return children.at("s2l-sub-lsp");
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    if(child_yang_name == "session-attribute")
    {
        if(session_attribute != nullptr)
        {
            children["session-attribute"] = session_attribute.get();
        }
        else
        {
            session_attribute = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::SessionAttribute>();
            session_attribute->parent = this;
            children["session-attribute"] = session_attribute.get();
        }
        return children.at("session-attribute");
    }

    if(child_yang_name == "template")
    {
        if(template_ != nullptr)
        {
            children["template"] = template_.get();
        }
        else
        {
            template_ = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::Template_>();
            template_->parent = this;
            children["template"] = template_.get();
        }
        return children.at("template");
    }

    if(child_yang_name == "traffic-spec")
    {
        if(traffic_spec != nullptr)
        {
            children["traffic-spec"] = traffic_spec.get();
        }
        else
        {
            traffic_spec = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed::TrafficSpec>();
            traffic_spec->parent = this;
            children["traffic-spec"] = traffic_spec.get();
        }
        return children.at("traffic-spec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::PsbDetailed::get_children()
{
    if(children.find("class-type") == children.end())
    {
        if(class_type != nullptr)
        {
            children["class-type"] = class_type.get();
        }
    }

    if(children.find("expiry-time") == children.end())
    {
        if(expiry_time != nullptr)
        {
            children["expiry-time"] = expiry_time.get();
        }
    }

    if(children.find("generic-traffic-spec") == children.end())
    {
        if(generic_traffic_spec != nullptr)
        {
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
    }

    if(children.find("header") == children.end())
    {
        if(header != nullptr)
        {
            children["header"] = header.get();
        }
    }

    if(children.find("hop") == children.end())
    {
        if(hop != nullptr)
        {
            children["hop"] = hop.get();
        }
    }

    for (auto const & c : in_ero)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("label-info") == children.end())
    {
        if(label_info != nullptr)
        {
            children["label-info"] = label_info.get();
        }
    }

    for (auto const & c : out_ero)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("path-flags") == children.end())
    {
        if(path_flags != nullptr)
        {
            children["path-flags"] = path_flags.get();
        }
    }

    for (auto const & c : pfc)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("policy-flags") == children.end())
    {
        if(policy_flags != nullptr)
        {
            children["policy-flags"] = policy_flags.get();
        }
    }

    if(children.find("policy-query-flags") == children.end())
    {
        if(policy_query_flags != nullptr)
        {
            children["policy-query-flags"] = policy_query_flags.get();
        }
    }

    if(children.find("policy-source-info") == children.end())
    {
        if(policy_source_info != nullptr)
        {
            children["policy-source-info"] = policy_source_info.get();
        }
    }

    if(children.find("s2l-sub-lsp") == children.end())
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
    }

    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    if(children.find("session-attribute") == children.end())
    {
        if(session_attribute != nullptr)
        {
            children["session-attribute"] = session_attribute.get();
        }
    }

    if(children.find("template") == children.end())
    {
        if(template_ != nullptr)
        {
            children["template"] = template_.get();
        }
    }

    if(children.find("traffic-spec") == children.end())
    {
        if(traffic_spec != nullptr)
        {
            children["traffic-spec"] = traffic_spec.get();
        }
    }

    return children;
}

void Rsvp::PsbDetaileds::PsbDetailed::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "backup-tunnel-name")
    {
        backup_tunnel_name = value;
    }
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "input-interface")
    {
        input_interface = value;
    }
    if(value_path == "is-in-ero-valid")
    {
        is_in_ero_valid = value;
    }
    if(value_path == "is-out-ero-valid")
    {
        is_out_ero_valid = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "sub-group-origin")
    {
        sub_group_origin = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

Rsvp::PsbDetaileds::PsbDetaileds()
{
    yang_name = "psb-detaileds"; yang_parent_name = "rsvp";
}

Rsvp::PsbDetaileds::~PsbDetaileds()
{
}

bool Rsvp::PsbDetaileds::has_data() const
{
    for (std::size_t index=0; index<psb_detailed.size(); index++)
    {
        if(psb_detailed[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::PsbDetaileds::has_operation() const
{
    for (std::size_t index=0; index<psb_detailed.size(); index++)
    {
        if(psb_detailed[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::PsbDetaileds::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "psb-detaileds";

    return path_buffer.str();

}

EntityPath Rsvp::PsbDetaileds::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbDetaileds::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "psb-detailed")
    {
        for(auto const & c : psb_detailed)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::PsbDetaileds::PsbDetailed>();
        c->parent = this;
        psb_detailed.push_back(std::move(c));
        children[segment_path] = psb_detailed.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbDetaileds::get_children()
{
    for (auto const & c : psb_detailed)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::PsbDetaileds::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::FrrSummary::PathStates::PathStates()
    :
    	active_instances{YType::uint32, "active-instances"},
	 active_wait_instances{YType::uint32, "active-wait-instances"},
	 ready_instances{YType::uint32, "ready-instances"},
	 total{YType::uint32, "total"}
{
    yang_name = "path-states"; yang_parent_name = "frr-summary";
}

Rsvp::FrrSummary::PathStates::~PathStates()
{
}

bool Rsvp::FrrSummary::PathStates::has_data() const
{
    return active_instances.is_set
	|| active_wait_instances.is_set
	|| ready_instances.is_set
	|| total.is_set;
}

bool Rsvp::FrrSummary::PathStates::has_operation() const
{
    return is_set(operation)
	|| is_set(active_instances.operation)
	|| is_set(active_wait_instances.operation)
	|| is_set(ready_instances.operation)
	|| is_set(total.operation);
}

std::string Rsvp::FrrSummary::PathStates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "path-states";

    return path_buffer.str();

}

EntityPath Rsvp::FrrSummary::PathStates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frr-summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (active_instances.is_set || is_set(active_instances.operation)) leaf_name_data.push_back(active_instances.get_name_leafdata());
    if (active_wait_instances.is_set || is_set(active_wait_instances.operation)) leaf_name_data.push_back(active_wait_instances.get_name_leafdata());
    if (ready_instances.is_set || is_set(ready_instances.operation)) leaf_name_data.push_back(ready_instances.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::FrrSummary::PathStates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::FrrSummary::PathStates::get_children()
{
    return children;
}

void Rsvp::FrrSummary::PathStates::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "active-instances")
    {
        active_instances = value;
    }
    if(value_path == "active-wait-instances")
    {
        active_wait_instances = value;
    }
    if(value_path == "ready-instances")
    {
        ready_instances = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

Rsvp::FrrSummary::ReservationStates::ReservationStates()
    :
    	active_instances{YType::uint32, "active-instances"},
	 active_wait_instances{YType::uint32, "active-wait-instances"},
	 ready_instances{YType::uint32, "ready-instances"},
	 total{YType::uint32, "total"}
{
    yang_name = "reservation-states"; yang_parent_name = "frr-summary";
}

Rsvp::FrrSummary::ReservationStates::~ReservationStates()
{
}

bool Rsvp::FrrSummary::ReservationStates::has_data() const
{
    return active_instances.is_set
	|| active_wait_instances.is_set
	|| ready_instances.is_set
	|| total.is_set;
}

bool Rsvp::FrrSummary::ReservationStates::has_operation() const
{
    return is_set(operation)
	|| is_set(active_instances.operation)
	|| is_set(active_wait_instances.operation)
	|| is_set(ready_instances.operation)
	|| is_set(total.operation);
}

std::string Rsvp::FrrSummary::ReservationStates::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "reservation-states";

    return path_buffer.str();

}

EntityPath Rsvp::FrrSummary::ReservationStates::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frr-summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (active_instances.is_set || is_set(active_instances.operation)) leaf_name_data.push_back(active_instances.get_name_leafdata());
    if (active_wait_instances.is_set || is_set(active_wait_instances.operation)) leaf_name_data.push_back(active_wait_instances.get_name_leafdata());
    if (ready_instances.is_set || is_set(ready_instances.operation)) leaf_name_data.push_back(ready_instances.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::FrrSummary::ReservationStates::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::FrrSummary::ReservationStates::get_children()
{
    return children;
}

void Rsvp::FrrSummary::ReservationStates::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "active-instances")
    {
        active_instances = value;
    }
    if(value_path == "active-wait-instances")
    {
        active_wait_instances = value;
    }
    if(value_path == "ready-instances")
    {
        ready_instances = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

Rsvp::FrrSummary::FrrSummary()
    :
    path_states(std::make_unique<Rsvp::FrrSummary::PathStates>())
	,reservation_states(std::make_unique<Rsvp::FrrSummary::ReservationStates>())
{
    path_states->parent = this;
    children["path-states"] = path_states.get();

    reservation_states->parent = this;
    children["reservation-states"] = reservation_states.get();

    yang_name = "frr-summary"; yang_parent_name = "rsvp";
}

Rsvp::FrrSummary::~FrrSummary()
{
}

bool Rsvp::FrrSummary::has_data() const
{
    return (path_states !=  nullptr && path_states->has_data())
	|| (reservation_states !=  nullptr && reservation_states->has_data());
}

bool Rsvp::FrrSummary::has_operation() const
{
    return is_set(operation)
	|| (path_states !=  nullptr && path_states->has_operation())
	|| (reservation_states !=  nullptr && reservation_states->has_operation());
}

std::string Rsvp::FrrSummary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frr-summary";

    return path_buffer.str();

}

EntityPath Rsvp::FrrSummary::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::FrrSummary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "path-states")
    {
        if(path_states != nullptr)
        {
            children["path-states"] = path_states.get();
        }
        else
        {
            path_states = std::make_unique<Rsvp::FrrSummary::PathStates>();
            path_states->parent = this;
            children["path-states"] = path_states.get();
        }
        return children.at("path-states");
    }

    if(child_yang_name == "reservation-states")
    {
        if(reservation_states != nullptr)
        {
            children["reservation-states"] = reservation_states.get();
        }
        else
        {
            reservation_states = std::make_unique<Rsvp::FrrSummary::ReservationStates>();
            reservation_states->parent = this;
            children["reservation-states"] = reservation_states.get();
        }
        return children.at("reservation-states");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::FrrSummary::get_children()
{
    if(children.find("path-states") == children.end())
    {
        if(path_states != nullptr)
        {
            children["path-states"] = path_states.get();
        }
    }

    if(children.find("reservation-states") == children.end())
    {
        if(reservation_states != nullptr)
        {
            children["reservation-states"] = reservation_states.get();
        }
    }

    return children;
}

void Rsvp::FrrSummary::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::RsbDetaileds::RsbDetailed::FlowSpec::FlowSpec()
    :
    	flow_average_rate{YType::uint64, "flow-average-rate"},
	 flow_max_burst{YType::uint64, "flow-max-burst"},
	 flow_max_unit{YType::uint32, "flow-max-unit"},
	 flow_min_unit{YType::uint32, "flow-min-unit"},
	 flow_peak_rate{YType::uint64, "flow-peak-rate"},
	 flow_qos{YType::enumeration, "flow-qos"},
	 flow_requested_rate{YType::uint64, "flow-requested-rate"},
	 flow_slack{YType::uint32, "flow-slack"}
{
    yang_name = "flow-spec"; yang_parent_name = "rsb-detailed";
}

Rsvp::RsbDetaileds::RsbDetailed::FlowSpec::~FlowSpec()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::FlowSpec::has_data() const
{
    return flow_average_rate.is_set
	|| flow_max_burst.is_set
	|| flow_max_unit.is_set
	|| flow_min_unit.is_set
	|| flow_peak_rate.is_set
	|| flow_qos.is_set
	|| flow_requested_rate.is_set
	|| flow_slack.is_set;
}

bool Rsvp::RsbDetaileds::RsbDetailed::FlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_average_rate.operation)
	|| is_set(flow_max_burst.operation)
	|| is_set(flow_max_unit.operation)
	|| is_set(flow_min_unit.operation)
	|| is_set(flow_peak_rate.operation)
	|| is_set(flow_qos.operation)
	|| is_set(flow_requested_rate.operation)
	|| is_set(flow_slack.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::FlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flow-spec";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::FlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_average_rate.is_set || is_set(flow_average_rate.operation)) leaf_name_data.push_back(flow_average_rate.get_name_leafdata());
    if (flow_max_burst.is_set || is_set(flow_max_burst.operation)) leaf_name_data.push_back(flow_max_burst.get_name_leafdata());
    if (flow_max_unit.is_set || is_set(flow_max_unit.operation)) leaf_name_data.push_back(flow_max_unit.get_name_leafdata());
    if (flow_min_unit.is_set || is_set(flow_min_unit.operation)) leaf_name_data.push_back(flow_min_unit.get_name_leafdata());
    if (flow_peak_rate.is_set || is_set(flow_peak_rate.operation)) leaf_name_data.push_back(flow_peak_rate.get_name_leafdata());
    if (flow_qos.is_set || is_set(flow_qos.operation)) leaf_name_data.push_back(flow_qos.get_name_leafdata());
    if (flow_requested_rate.is_set || is_set(flow_requested_rate.operation)) leaf_name_data.push_back(flow_requested_rate.get_name_leafdata());
    if (flow_slack.is_set || is_set(flow_slack.operation)) leaf_name_data.push_back(flow_slack.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::FlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::FlowSpec::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::FlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-average-rate")
    {
        flow_average_rate = value;
    }
    if(value_path == "flow-max-burst")
    {
        flow_max_burst = value;
    }
    if(value_path == "flow-max-unit")
    {
        flow_max_unit = value;
    }
    if(value_path == "flow-min-unit")
    {
        flow_min_unit = value;
    }
    if(value_path == "flow-peak-rate")
    {
        flow_peak_rate = value;
    }
    if(value_path == "flow-qos")
    {
        flow_qos = value;
    }
    if(value_path == "flow-requested-rate")
    {
        flow_requested_rate = value;
    }
    if(value_path == "flow-slack")
    {
        flow_slack = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec::G709OtnFlowSpec()
    :
    	flow_bit_rate{YType::uint64, "flow-bit-rate"},
	 flow_multiplier{YType::uint16, "flow-multiplier"},
	 flow_nvc{YType::uint16, "flow-nvc"},
	 flow_signal_type{YType::uint8, "flow-signal-type"}
{
    yang_name = "g709otn-flow-spec"; yang_parent_name = "generic-flow-spec";
}

Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec::~G709OtnFlowSpec()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec::has_data() const
{
    return flow_bit_rate.is_set
	|| flow_multiplier.is_set
	|| flow_nvc.is_set
	|| flow_signal_type.is_set;
}

bool Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_bit_rate.operation)
	|| is_set(flow_multiplier.operation)
	|| is_set(flow_nvc.operation)
	|| is_set(flow_signal_type.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-flow-spec";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/generic-flow-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_bit_rate.is_set || is_set(flow_bit_rate.operation)) leaf_name_data.push_back(flow_bit_rate.get_name_leafdata());
    if (flow_multiplier.is_set || is_set(flow_multiplier.operation)) leaf_name_data.push_back(flow_multiplier.get_name_leafdata());
    if (flow_nvc.is_set || is_set(flow_nvc.operation)) leaf_name_data.push_back(flow_nvc.get_name_leafdata());
    if (flow_signal_type.is_set || is_set(flow_signal_type.operation)) leaf_name_data.push_back(flow_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-bit-rate")
    {
        flow_bit_rate = value;
    }
    if(value_path == "flow-multiplier")
    {
        flow_multiplier = value;
    }
    if(value_path == "flow-nvc")
    {
        flow_nvc = value;
    }
    if(value_path == "flow-signal-type")
    {
        flow_signal_type = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::GenericFlowSpec()
    :
    	flow_spec_type{YType::enumeration, "flow-spec-type"}
    	,
    g709otn_flow_spec(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec>())
{
    g709otn_flow_spec->parent = this;
    children["g709otn-flow-spec"] = g709otn_flow_spec.get();

    yang_name = "generic-flow-spec"; yang_parent_name = "rsb-detailed";
}

Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::~GenericFlowSpec()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::has_data() const
{
    return flow_spec_type.is_set
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_data());
}

bool Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_spec_type.operation)
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_operation());
}

std::string Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-flow-spec";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_spec_type.is_set || is_set(flow_spec_type.operation)) leaf_name_data.push_back(flow_spec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-flow-spec")
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        else
        {
            g709otn_flow_spec = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::G709OtnFlowSpec>();
            g709otn_flow_spec->parent = this;
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        return children.at("g709otn-flow-spec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::get_children()
{
    if(children.find("g709otn-flow-spec") == children.end())
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
    }

    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-spec-type")
    {
        flow_spec_type = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::~RsvpSession()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::Session::Session()
    :
    rsvp_session(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "rsb-detailed";
}

Rsvp::RsbDetaileds::RsbDetailed::Session::~Session()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool Rsvp::RsbDetaileds::RsbDetailed::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string Rsvp::RsbDetaileds::RsbDetailed::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::Session::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::RsbDetaileds::RsbDetailed::S2LSubLsp::S2LSubLsp()
    :
    	s2l_destination_address{YType::str, "s2l-destination-address"}
{
    yang_name = "s2l-sub-lsp"; yang_parent_name = "rsb-detailed";
}

Rsvp::RsbDetaileds::RsbDetailed::S2LSubLsp::~S2LSubLsp()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::S2LSubLsp::has_data() const
{
    return s2l_destination_address.is_set;
}

bool Rsvp::RsbDetaileds::RsbDetailed::S2LSubLsp::has_operation() const
{
    return is_set(operation)
	|| is_set(s2l_destination_address.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::S2LSubLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "s2l-sub-lsp";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::S2LSubLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (s2l_destination_address.is_set || is_set(s2l_destination_address.operation)) leaf_name_data.push_back(s2l_destination_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::S2LSubLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::S2LSubLsp::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::S2LSubLsp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "s2l-destination-address")
    {
        s2l_destination_address = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::Style::Style()
    :
    	reservation_type{YType::enumeration, "reservation-type"}
{
    yang_name = "style"; yang_parent_name = "rsb-detailed";
}

Rsvp::RsbDetaileds::RsbDetailed::Style::~Style()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::Style::has_data() const
{
    return reservation_type.is_set;
}

bool Rsvp::RsbDetaileds::RsbDetailed::Style::has_operation() const
{
    return is_set(operation)
	|| is_set(reservation_type.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::Style::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "style";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::Style::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (reservation_type.is_set || is_set(reservation_type.operation)) leaf_name_data.push_back(reservation_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::Style::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::Style::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::Style::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "reservation-type")
    {
        reservation_type = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session::UdpIpv4Session()
    :
    	source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"}
{
    yang_name = "udp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session::~UdpIpv4Session()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session::has_data() const
{
    return source_address.is_set
	|| source_port.is_set;
}

bool Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "udp-ipv4-session";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/filter/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session::P2MpIpv4Session()
    :
    	p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"},
	 sub_group_id{YType::uint16, "sub-group-id"}
{
    yang_name = "p2mp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session::~P2MpIpv4Session()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session::has_data() const
{
    return p2mp_sub_group_origin.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set;
}

bool Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "p2mp-ipv4-session";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/filter/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::RsvpFilter()
    :
    	filter_type{YType::enumeration, "filter-type"}
    	,
    p2mp_ipv4_session(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session>())
	,udp_ipv4_session(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session>())
{
    p2mp_ipv4_session->parent = this;
    children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();

    udp_ipv4_session->parent = this;
    children["udp-ipv4-session"] = udp_ipv4_session.get();

    yang_name = "rsvp-filter"; yang_parent_name = "filter";
}

Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::~RsvpFilter()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::has_data() const
{
    return filter_type.is_set
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_data())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_data());
}

bool Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::has_operation() const
{
    return is_set(operation)
	|| is_set(filter_type.operation)
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_operation())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_operation());
}

std::string Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-filter";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (filter_type.is_set || is_set(filter_type.operation)) leaf_name_data.push_back(filter_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "p2mp-ipv4-session")
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        else
        {
            p2mp_ipv4_session = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::P2MpIpv4Session>();
            p2mp_ipv4_session->parent = this;
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        return children.at("p2mp-ipv4-session");
    }

    if(child_yang_name == "udp-ipv4-session")
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        else
        {
            udp_ipv4_session = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::UdpIpv4Session>();
            udp_ipv4_session->parent = this;
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        return children.at("udp-ipv4-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::get_children()
{
    if(children.find("p2mp-ipv4-session") == children.end())
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
    }

    if(children.find("udp-ipv4-session") == children.end())
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
    }

    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "filter-type")
    {
        filter_type = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::Filter::Filter()
    :
    rsvp_filter(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter>())
{
    rsvp_filter->parent = this;
    children["rsvp-filter"] = rsvp_filter.get();

    yang_name = "filter"; yang_parent_name = "rsb-detailed";
}

Rsvp::RsbDetaileds::RsbDetailed::Filter::~Filter()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::Filter::has_data() const
{
    return (rsvp_filter !=  nullptr && rsvp_filter->has_data());
}

bool Rsvp::RsbDetaileds::RsbDetailed::Filter::has_operation() const
{
    return is_set(operation)
	|| (rsvp_filter !=  nullptr && rsvp_filter->has_operation());
}

std::string Rsvp::RsbDetaileds::RsbDetailed::Filter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "filter";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::Filter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::Filter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-filter")
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
        else
        {
            rsvp_filter = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Filter::RsvpFilter>();
            rsvp_filter->parent = this;
            children["rsvp-filter"] = rsvp_filter.get();
        }
        return children.at("rsvp-filter");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::Filter::get_children()
{
    if(children.find("rsvp-filter") == children.end())
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
    }

    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::Filter::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::RsbDetaileds::RsbDetailed::RsbFlags::RsbFlags()
    :
    	is_local_receiver{YType::boolean, "is-local-receiver"},
	 is_local_repair{YType::boolean, "is-local-repair"},
	 is_lockout{YType::boolean, "is-lockout"},
	 is_merge_point{YType::boolean, "is-merge-point"},
	 is_message_id_valid{YType::boolean, "is-message-id-valid"}
{
    yang_name = "rsb-flags"; yang_parent_name = "rsb-detailed";
}

Rsvp::RsbDetaileds::RsbDetailed::RsbFlags::~RsbFlags()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::RsbFlags::has_data() const
{
    return is_local_receiver.is_set
	|| is_local_repair.is_set
	|| is_lockout.is_set
	|| is_merge_point.is_set
	|| is_message_id_valid.is_set;
}

bool Rsvp::RsbDetaileds::RsbDetailed::RsbFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_local_receiver.operation)
	|| is_set(is_local_repair.operation)
	|| is_set(is_lockout.operation)
	|| is_set(is_merge_point.operation)
	|| is_set(is_message_id_valid.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::RsbFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsb-flags";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::RsbFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_local_receiver.is_set || is_set(is_local_receiver.operation)) leaf_name_data.push_back(is_local_receiver.get_name_leafdata());
    if (is_local_repair.is_set || is_set(is_local_repair.operation)) leaf_name_data.push_back(is_local_repair.get_name_leafdata());
    if (is_lockout.is_set || is_set(is_lockout.operation)) leaf_name_data.push_back(is_lockout.get_name_leafdata());
    if (is_merge_point.is_set || is_set(is_merge_point.operation)) leaf_name_data.push_back(is_merge_point.get_name_leafdata());
    if (is_message_id_valid.is_set || is_set(is_message_id_valid.operation)) leaf_name_data.push_back(is_message_id_valid.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::RsbFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::RsbFlags::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::RsbFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-local-receiver")
    {
        is_local_receiver = value;
    }
    if(value_path == "is-local-repair")
    {
        is_local_repair = value;
    }
    if(value_path == "is-lockout")
    {
        is_lockout = value;
    }
    if(value_path == "is-merge-point")
    {
        is_merge_point = value;
    }
    if(value_path == "is-message-id-valid")
    {
        is_message_id_valid = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::Hop::Hop()
    :
    	neighbor_address{YType::str, "neighbor-address"},
	 neighbor_logical_interface_name{YType::str, "neighbor-logical-interface-name"}
{
    yang_name = "hop"; yang_parent_name = "rsb-detailed";
}

Rsvp::RsbDetaileds::RsbDetailed::Hop::~Hop()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::Hop::has_data() const
{
    return neighbor_address.is_set
	|| neighbor_logical_interface_name.is_set;
}

bool Rsvp::RsbDetaileds::RsbDetailed::Hop::has_operation() const
{
    return is_set(operation)
	|| is_set(neighbor_address.operation)
	|| is_set(neighbor_logical_interface_name.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::Hop::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hop";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::Hop::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (neighbor_logical_interface_name.is_set || is_set(neighbor_logical_interface_name.operation)) leaf_name_data.push_back(neighbor_logical_interface_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::Hop::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::Hop::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::Hop::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "neighbor-logical-interface-name")
    {
        neighbor_logical_interface_name = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::PolicySources::PolicySources()
    :
    	is_cable{YType::boolean, "is-cable"},
	 is_cops{YType::boolean, "is-cops"},
	 is_default{YType::boolean, "is-default"},
	 is_local{YType::boolean, "is-local"},
	 is_te_link{YType::boolean, "is-te-link"}
{
    yang_name = "policy-sources"; yang_parent_name = "rsb-detailed";
}

Rsvp::RsbDetaileds::RsbDetailed::PolicySources::~PolicySources()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::PolicySources::has_data() const
{
    return is_cable.is_set
	|| is_cops.is_set
	|| is_default.is_set
	|| is_local.is_set
	|| is_te_link.is_set;
}

bool Rsvp::RsbDetaileds::RsbDetailed::PolicySources::has_operation() const
{
    return is_set(operation)
	|| is_set(is_cable.operation)
	|| is_set(is_cops.operation)
	|| is_set(is_default.operation)
	|| is_set(is_local.operation)
	|| is_set(is_te_link.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::PolicySources::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-sources";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::PolicySources::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_cable.is_set || is_set(is_cable.operation)) leaf_name_data.push_back(is_cable.get_name_leafdata());
    if (is_cops.is_set || is_set(is_cops.operation)) leaf_name_data.push_back(is_cops.get_name_leafdata());
    if (is_default.is_set || is_set(is_default.operation)) leaf_name_data.push_back(is_default.get_name_leafdata());
    if (is_local.is_set || is_set(is_local.operation)) leaf_name_data.push_back(is_local.get_name_leafdata());
    if (is_te_link.is_set || is_set(is_te_link.operation)) leaf_name_data.push_back(is_te_link.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::PolicySources::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::PolicySources::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::PolicySources::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-cable")
    {
        is_cable = value;
    }
    if(value_path == "is-cops")
    {
        is_cops = value;
    }
    if(value_path == "is-default")
    {
        is_default = value;
    }
    if(value_path == "is-local")
    {
        is_local = value;
    }
    if(value_path == "is-te-link")
    {
        is_te_link = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::Header::Header()
    :
    	ip_source_address{YType::str, "ip-source-address"},
	 ip_tos{YType::uint8, "ip-tos"},
	 ip_ttl{YType::uint8, "ip-ttl"},
	 rsvp_header_flags{YType::uint8, "rsvp-header-flags"},
	 rsvp_message_type{YType::uint8, "rsvp-message-type"},
	 rsvp_ttl{YType::uint8, "rsvp-ttl"},
	 rsvp_version{YType::uint8, "rsvp-version"}
{
    yang_name = "header"; yang_parent_name = "rsb-detailed";
}

Rsvp::RsbDetaileds::RsbDetailed::Header::~Header()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::Header::has_data() const
{
    return ip_source_address.is_set
	|| ip_tos.is_set
	|| ip_ttl.is_set
	|| rsvp_header_flags.is_set
	|| rsvp_message_type.is_set
	|| rsvp_ttl.is_set
	|| rsvp_version.is_set;
}

bool Rsvp::RsbDetaileds::RsbDetailed::Header::has_operation() const
{
    return is_set(operation)
	|| is_set(ip_source_address.operation)
	|| is_set(ip_tos.operation)
	|| is_set(ip_ttl.operation)
	|| is_set(rsvp_header_flags.operation)
	|| is_set(rsvp_message_type.operation)
	|| is_set(rsvp_ttl.operation)
	|| is_set(rsvp_version.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::Header::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "header";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::Header::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ip_source_address.is_set || is_set(ip_source_address.operation)) leaf_name_data.push_back(ip_source_address.get_name_leafdata());
    if (ip_tos.is_set || is_set(ip_tos.operation)) leaf_name_data.push_back(ip_tos.get_name_leafdata());
    if (ip_ttl.is_set || is_set(ip_ttl.operation)) leaf_name_data.push_back(ip_ttl.get_name_leafdata());
    if (rsvp_header_flags.is_set || is_set(rsvp_header_flags.operation)) leaf_name_data.push_back(rsvp_header_flags.get_name_leafdata());
    if (rsvp_message_type.is_set || is_set(rsvp_message_type.operation)) leaf_name_data.push_back(rsvp_message_type.get_name_leafdata());
    if (rsvp_ttl.is_set || is_set(rsvp_ttl.operation)) leaf_name_data.push_back(rsvp_ttl.get_name_leafdata());
    if (rsvp_version.is_set || is_set(rsvp_version.operation)) leaf_name_data.push_back(rsvp_version.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::Header::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::Header::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::Header::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ip-source-address")
    {
        ip_source_address = value;
    }
    if(value_path == "ip-tos")
    {
        ip_tos = value;
    }
    if(value_path == "ip-ttl")
    {
        ip_ttl = value;
    }
    if(value_path == "rsvp-header-flags")
    {
        rsvp_header_flags = value;
    }
    if(value_path == "rsvp-message-type")
    {
        rsvp_message_type = value;
    }
    if(value_path == "rsvp-ttl")
    {
        rsvp_ttl = value;
    }
    if(value_path == "rsvp-version")
    {
        rsvp_version = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::PolicyFlags::PolicyFlags()
    :
    	is_accepted{YType::boolean, "is-accepted"},
	 is_forwarding{YType::boolean, "is-forwarding"},
	 is_installed{YType::boolean, "is-installed"}
{
    yang_name = "policy-flags"; yang_parent_name = "rsb-detailed";
}

Rsvp::RsbDetaileds::RsbDetailed::PolicyFlags::~PolicyFlags()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::PolicyFlags::has_data() const
{
    return is_accepted.is_set
	|| is_forwarding.is_set
	|| is_installed.is_set;
}

bool Rsvp::RsbDetaileds::RsbDetailed::PolicyFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_accepted.operation)
	|| is_set(is_forwarding.operation)
	|| is_set(is_installed.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::PolicyFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-flags";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::PolicyFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_accepted.is_set || is_set(is_accepted.operation)) leaf_name_data.push_back(is_accepted.get_name_leafdata());
    if (is_forwarding.is_set || is_set(is_forwarding.operation)) leaf_name_data.push_back(is_forwarding.get_name_leafdata());
    if (is_installed.is_set || is_set(is_installed.operation)) leaf_name_data.push_back(is_installed.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::PolicyFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::PolicyFlags::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::PolicyFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-accepted")
    {
        is_accepted = value;
    }
    if(value_path == "is-forwarding")
    {
        is_forwarding = value;
    }
    if(value_path == "is-installed")
    {
        is_installed = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::ExpiryTime::ExpiryTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "expiry-time"; yang_parent_name = "rsb-detailed";
}

Rsvp::RsbDetaileds::RsbDetailed::ExpiryTime::~ExpiryTime()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::ExpiryTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool Rsvp::RsbDetaileds::RsbDetailed::ExpiryTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::ExpiryTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "expiry-time";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::ExpiryTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::ExpiryTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::ExpiryTime::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::ExpiryTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::PolicyQueryFlags::PolicyQueryFlags()
    :
    	is_bypass{YType::boolean, "is-bypass"},
	 is_needed{YType::boolean, "is-needed"},
	 is_report_required{YType::boolean, "is-report-required"},
	 is_resync{YType::boolean, "is-resync"}
{
    yang_name = "policy-query-flags"; yang_parent_name = "rsb-detailed";
}

Rsvp::RsbDetaileds::RsbDetailed::PolicyQueryFlags::~PolicyQueryFlags()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::PolicyQueryFlags::has_data() const
{
    return is_bypass.is_set
	|| is_needed.is_set
	|| is_report_required.is_set
	|| is_resync.is_set;
}

bool Rsvp::RsbDetaileds::RsbDetailed::PolicyQueryFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bypass.operation)
	|| is_set(is_needed.operation)
	|| is_set(is_report_required.operation)
	|| is_set(is_resync.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::PolicyQueryFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-query-flags";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::PolicyQueryFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bypass.is_set || is_set(is_bypass.operation)) leaf_name_data.push_back(is_bypass.get_name_leafdata());
    if (is_needed.is_set || is_set(is_needed.operation)) leaf_name_data.push_back(is_needed.get_name_leafdata());
    if (is_report_required.is_set || is_set(is_report_required.operation)) leaf_name_data.push_back(is_report_required.get_name_leafdata());
    if (is_resync.is_set || is_set(is_resync.operation)) leaf_name_data.push_back(is_resync.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::PolicyQueryFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::PolicyQueryFlags::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::PolicyQueryFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bypass")
    {
        is_bypass = value;
    }
    if(value_path == "is-needed")
    {
        is_needed = value;
    }
    if(value_path == "is-report-required")
    {
        is_report_required = value;
    }
    if(value_path == "is-resync")
    {
        is_resync = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-local-downstream-label";
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-local-downstream-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GenericLocalDownstreamLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-local-downstream-label"; yang_parent_name = "label-info";
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::~GenericLocalDownstreamLabel()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-local-downstream-label";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-outgoing-downstream-label";
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-outgoing-downstream-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GenericOutgoingDownstreamLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-outgoing-downstream-label"; yang_parent_name = "label-info";
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::~GenericOutgoingDownstreamLabel()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-outgoing-downstream-label";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-merge-point-label";
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-merge-point-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GenericMergePointLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-merge-point-label"; yang_parent_name = "label-info";
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::~GenericMergePointLabel()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-merge-point-label";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-outgoing-upstream-label";
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-outgoing-upstream-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GenericOutgoingUpstreamLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-outgoing-upstream-label"; yang_parent_name = "label-info";
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::~GenericOutgoingUpstreamLabel()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-outgoing-upstream-label";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-local-upstream-label";
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-local-upstream-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GenericLocalUpstreamLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-local-upstream-label"; yang_parent_name = "label-info";
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::~GenericLocalUpstreamLabel()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-local-upstream-label";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-recovery-label";
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-recovery-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::get_children()
{
    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GenericRecoveryLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-recovery-label"; yang_parent_name = "label-info";
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::~GenericRecoveryLabel()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-recovery-label";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::LabelInfo()
    :
    	is_valid{YType::boolean, "is-valid"},
	 local_downstream_label{YType::uint32, "local-downstream-label"},
	 local_upstream_label{YType::uint32, "local-upstream-label"},
	 lsp_wrap_label{YType::uint32, "lsp-wrap-label"},
	 merge_point_label{YType::uint32, "merge-point-label"},
	 outgoing_downstream_label{YType::uint32, "outgoing-downstream-label"},
	 outgoing_upstream_label{YType::uint32, "outgoing-upstream-label"},
	 recovery_label{YType::uint32, "recovery-label"}
    	,
    generic_local_downstream_label(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel>())
	,generic_local_upstream_label(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel>())
	,generic_merge_point_label(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel>())
	,generic_outgoing_downstream_label(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel>())
	,generic_outgoing_upstream_label(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel>())
	,generic_recovery_label(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel>())
{
    generic_local_downstream_label->parent = this;
    children["generic-local-downstream-label"] = generic_local_downstream_label.get();

    generic_local_upstream_label->parent = this;
    children["generic-local-upstream-label"] = generic_local_upstream_label.get();

    generic_merge_point_label->parent = this;
    children["generic-merge-point-label"] = generic_merge_point_label.get();

    generic_outgoing_downstream_label->parent = this;
    children["generic-outgoing-downstream-label"] = generic_outgoing_downstream_label.get();

    generic_outgoing_upstream_label->parent = this;
    children["generic-outgoing-upstream-label"] = generic_outgoing_upstream_label.get();

    generic_recovery_label->parent = this;
    children["generic-recovery-label"] = generic_recovery_label.get();

    yang_name = "label-info"; yang_parent_name = "rsb-detailed";
}

Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::~LabelInfo()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::has_data() const
{
    return is_valid.is_set
	|| local_downstream_label.is_set
	|| local_upstream_label.is_set
	|| lsp_wrap_label.is_set
	|| merge_point_label.is_set
	|| outgoing_downstream_label.is_set
	|| outgoing_upstream_label.is_set
	|| recovery_label.is_set
	|| (generic_local_downstream_label !=  nullptr && generic_local_downstream_label->has_data())
	|| (generic_local_upstream_label !=  nullptr && generic_local_upstream_label->has_data())
	|| (generic_merge_point_label !=  nullptr && generic_merge_point_label->has_data())
	|| (generic_outgoing_downstream_label !=  nullptr && generic_outgoing_downstream_label->has_data())
	|| (generic_outgoing_upstream_label !=  nullptr && generic_outgoing_upstream_label->has_data())
	|| (generic_recovery_label !=  nullptr && generic_recovery_label->has_data());
}

bool Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::has_operation() const
{
    return is_set(operation)
	|| is_set(is_valid.operation)
	|| is_set(local_downstream_label.operation)
	|| is_set(local_upstream_label.operation)
	|| is_set(lsp_wrap_label.operation)
	|| is_set(merge_point_label.operation)
	|| is_set(outgoing_downstream_label.operation)
	|| is_set(outgoing_upstream_label.operation)
	|| is_set(recovery_label.operation)
	|| (generic_local_downstream_label !=  nullptr && generic_local_downstream_label->has_operation())
	|| (generic_local_upstream_label !=  nullptr && generic_local_upstream_label->has_operation())
	|| (generic_merge_point_label !=  nullptr && generic_merge_point_label->has_operation())
	|| (generic_outgoing_downstream_label !=  nullptr && generic_outgoing_downstream_label->has_operation())
	|| (generic_outgoing_upstream_label !=  nullptr && generic_outgoing_upstream_label->has_operation())
	|| (generic_recovery_label !=  nullptr && generic_recovery_label->has_operation());
}

std::string Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "label-info";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_valid.is_set || is_set(is_valid.operation)) leaf_name_data.push_back(is_valid.get_name_leafdata());
    if (local_downstream_label.is_set || is_set(local_downstream_label.operation)) leaf_name_data.push_back(local_downstream_label.get_name_leafdata());
    if (local_upstream_label.is_set || is_set(local_upstream_label.operation)) leaf_name_data.push_back(local_upstream_label.get_name_leafdata());
    if (lsp_wrap_label.is_set || is_set(lsp_wrap_label.operation)) leaf_name_data.push_back(lsp_wrap_label.get_name_leafdata());
    if (merge_point_label.is_set || is_set(merge_point_label.operation)) leaf_name_data.push_back(merge_point_label.get_name_leafdata());
    if (outgoing_downstream_label.is_set || is_set(outgoing_downstream_label.operation)) leaf_name_data.push_back(outgoing_downstream_label.get_name_leafdata());
    if (outgoing_upstream_label.is_set || is_set(outgoing_upstream_label.operation)) leaf_name_data.push_back(outgoing_upstream_label.get_name_leafdata());
    if (recovery_label.is_set || is_set(recovery_label.operation)) leaf_name_data.push_back(recovery_label.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generic-local-downstream-label")
    {
        if(generic_local_downstream_label != nullptr)
        {
            children["generic-local-downstream-label"] = generic_local_downstream_label.get();
        }
        else
        {
            generic_local_downstream_label = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalDownstreamLabel>();
            generic_local_downstream_label->parent = this;
            children["generic-local-downstream-label"] = generic_local_downstream_label.get();
        }
        return children.at("generic-local-downstream-label");
    }

    if(child_yang_name == "generic-local-upstream-label")
    {
        if(generic_local_upstream_label != nullptr)
        {
            children["generic-local-upstream-label"] = generic_local_upstream_label.get();
        }
        else
        {
            generic_local_upstream_label = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericLocalUpstreamLabel>();
            generic_local_upstream_label->parent = this;
            children["generic-local-upstream-label"] = generic_local_upstream_label.get();
        }
        return children.at("generic-local-upstream-label");
    }

    if(child_yang_name == "generic-merge-point-label")
    {
        if(generic_merge_point_label != nullptr)
        {
            children["generic-merge-point-label"] = generic_merge_point_label.get();
        }
        else
        {
            generic_merge_point_label = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericMergePointLabel>();
            generic_merge_point_label->parent = this;
            children["generic-merge-point-label"] = generic_merge_point_label.get();
        }
        return children.at("generic-merge-point-label");
    }

    if(child_yang_name == "generic-outgoing-downstream-label")
    {
        if(generic_outgoing_downstream_label != nullptr)
        {
            children["generic-outgoing-downstream-label"] = generic_outgoing_downstream_label.get();
        }
        else
        {
            generic_outgoing_downstream_label = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingDownstreamLabel>();
            generic_outgoing_downstream_label->parent = this;
            children["generic-outgoing-downstream-label"] = generic_outgoing_downstream_label.get();
        }
        return children.at("generic-outgoing-downstream-label");
    }

    if(child_yang_name == "generic-outgoing-upstream-label")
    {
        if(generic_outgoing_upstream_label != nullptr)
        {
            children["generic-outgoing-upstream-label"] = generic_outgoing_upstream_label.get();
        }
        else
        {
            generic_outgoing_upstream_label = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericOutgoingUpstreamLabel>();
            generic_outgoing_upstream_label->parent = this;
            children["generic-outgoing-upstream-label"] = generic_outgoing_upstream_label.get();
        }
        return children.at("generic-outgoing-upstream-label");
    }

    if(child_yang_name == "generic-recovery-label")
    {
        if(generic_recovery_label != nullptr)
        {
            children["generic-recovery-label"] = generic_recovery_label.get();
        }
        else
        {
            generic_recovery_label = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::GenericRecoveryLabel>();
            generic_recovery_label->parent = this;
            children["generic-recovery-label"] = generic_recovery_label.get();
        }
        return children.at("generic-recovery-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::get_children()
{
    if(children.find("generic-local-downstream-label") == children.end())
    {
        if(generic_local_downstream_label != nullptr)
        {
            children["generic-local-downstream-label"] = generic_local_downstream_label.get();
        }
    }

    if(children.find("generic-local-upstream-label") == children.end())
    {
        if(generic_local_upstream_label != nullptr)
        {
            children["generic-local-upstream-label"] = generic_local_upstream_label.get();
        }
    }

    if(children.find("generic-merge-point-label") == children.end())
    {
        if(generic_merge_point_label != nullptr)
        {
            children["generic-merge-point-label"] = generic_merge_point_label.get();
        }
    }

    if(children.find("generic-outgoing-downstream-label") == children.end())
    {
        if(generic_outgoing_downstream_label != nullptr)
        {
            children["generic-outgoing-downstream-label"] = generic_outgoing_downstream_label.get();
        }
    }

    if(children.find("generic-outgoing-upstream-label") == children.end())
    {
        if(generic_outgoing_upstream_label != nullptr)
        {
            children["generic-outgoing-upstream-label"] = generic_outgoing_upstream_label.get();
        }
    }

    if(children.find("generic-recovery-label") == children.end())
    {
        if(generic_recovery_label != nullptr)
        {
            children["generic-recovery-label"] = generic_recovery_label.get();
        }
    }

    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::LabelInfo::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-valid")
    {
        is_valid = value;
    }
    if(value_path == "local-downstream-label")
    {
        local_downstream_label = value;
    }
    if(value_path == "local-upstream-label")
    {
        local_upstream_label = value;
    }
    if(value_path == "lsp-wrap-label")
    {
        lsp_wrap_label = value;
    }
    if(value_path == "merge-point-label")
    {
        merge_point_label = value;
    }
    if(value_path == "outgoing-downstream-label")
    {
        outgoing_downstream_label = value;
    }
    if(value_path == "outgoing-upstream-label")
    {
        outgoing_upstream_label = value;
    }
    if(value_path == "recovery-label")
    {
        recovery_label = value;
    }
}

Rsvp::RsbDetaileds::RsbDetailed::RsbDetailed()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 input_adjusted_interface{YType::str, "input-adjusted-interface"},
	 input_physical_interface{YType::str, "input-physical-interface"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 protocol{YType::int32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::int32, "source-port"},
	 sub_group_id{YType::int32, "sub-group-id"},
	 sub_group_origin{YType::str, "sub-group-origin"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    expiry_time(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::ExpiryTime>())
	,filter(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Filter>())
	,flow_spec(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::FlowSpec>())
	,generic_flow_spec(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec>())
	,header(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Header>())
	,hop(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Hop>())
	,label_info(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo>())
	,policy_flags(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::PolicyFlags>())
	,policy_query_flags(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::PolicyQueryFlags>())
	,policy_sources(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::PolicySources>())
	,rsb_flags(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::RsbFlags>())
	,s2l_sub_lsp(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::S2LSubLsp>())
	,session(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Session>())
	,style(std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Style>())
{
    expiry_time->parent = this;
    children["expiry-time"] = expiry_time.get();

    filter->parent = this;
    children["filter"] = filter.get();

    flow_spec->parent = this;
    children["flow-spec"] = flow_spec.get();

    generic_flow_spec->parent = this;
    children["generic-flow-spec"] = generic_flow_spec.get();

    header->parent = this;
    children["header"] = header.get();

    hop->parent = this;
    children["hop"] = hop.get();

    label_info->parent = this;
    children["label-info"] = label_info.get();

    policy_flags->parent = this;
    children["policy-flags"] = policy_flags.get();

    policy_query_flags->parent = this;
    children["policy-query-flags"] = policy_query_flags.get();

    policy_sources->parent = this;
    children["policy-sources"] = policy_sources.get();

    rsb_flags->parent = this;
    children["rsb-flags"] = rsb_flags.get();

    s2l_sub_lsp->parent = this;
    children["s2l-sub-lsp"] = s2l_sub_lsp.get();

    session->parent = this;
    children["session"] = session.get();

    style->parent = this;
    children["style"] = style.get();

    yang_name = "rsb-detailed"; yang_parent_name = "rsb-detaileds";
}

Rsvp::RsbDetaileds::RsbDetailed::~RsbDetailed()
{
}

bool Rsvp::RsbDetaileds::RsbDetailed::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| extended_tunnel_id.is_set
	|| input_adjusted_interface.is_set
	|| input_physical_interface.is_set
	|| p2mp_id.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set
	|| sub_group_origin.is_set
	|| vrf_name.is_set
	|| (expiry_time !=  nullptr && expiry_time->has_data())
	|| (filter !=  nullptr && filter->has_data())
	|| (flow_spec !=  nullptr && flow_spec->has_data())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_data())
	|| (header !=  nullptr && header->has_data())
	|| (hop !=  nullptr && hop->has_data())
	|| (label_info !=  nullptr && label_info->has_data())
	|| (policy_flags !=  nullptr && policy_flags->has_data())
	|| (policy_query_flags !=  nullptr && policy_query_flags->has_data())
	|| (policy_sources !=  nullptr && policy_sources->has_data())
	|| (rsb_flags !=  nullptr && rsb_flags->has_data())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_data())
	|| (session !=  nullptr && session->has_data())
	|| (style !=  nullptr && style->has_data());
}

bool Rsvp::RsbDetaileds::RsbDetailed::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(input_adjusted_interface.operation)
	|| is_set(input_physical_interface.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(sub_group_origin.operation)
	|| is_set(vrf_name.operation)
	|| (expiry_time !=  nullptr && expiry_time->has_operation())
	|| (filter !=  nullptr && filter->has_operation())
	|| (flow_spec !=  nullptr && flow_spec->has_operation())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_operation())
	|| (header !=  nullptr && header->has_operation())
	|| (hop !=  nullptr && hop->has_operation())
	|| (label_info !=  nullptr && label_info->has_operation())
	|| (policy_flags !=  nullptr && policy_flags->has_operation())
	|| (policy_query_flags !=  nullptr && policy_query_flags->has_operation())
	|| (policy_sources !=  nullptr && policy_sources->has_operation())
	|| (rsb_flags !=  nullptr && rsb_flags->has_operation())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_operation())
	|| (session !=  nullptr && session->has_operation())
	|| (style !=  nullptr && style->has_operation());
}

std::string Rsvp::RsbDetaileds::RsbDetailed::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsb-detailed";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::RsbDetailed::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (input_adjusted_interface.is_set || is_set(input_adjusted_interface.operation)) leaf_name_data.push_back(input_adjusted_interface.get_name_leafdata());
    if (input_physical_interface.is_set || is_set(input_physical_interface.operation)) leaf_name_data.push_back(input_physical_interface.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (sub_group_origin.is_set || is_set(sub_group_origin.operation)) leaf_name_data.push_back(sub_group_origin.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::RsbDetailed::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "expiry-time")
    {
        if(expiry_time != nullptr)
        {
            children["expiry-time"] = expiry_time.get();
        }
        else
        {
            expiry_time = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::ExpiryTime>();
            expiry_time->parent = this;
            children["expiry-time"] = expiry_time.get();
        }
        return children.at("expiry-time");
    }

    if(child_yang_name == "filter")
    {
        if(filter != nullptr)
        {
            children["filter"] = filter.get();
        }
        else
        {
            filter = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Filter>();
            filter->parent = this;
            children["filter"] = filter.get();
        }
        return children.at("filter");
    }

    if(child_yang_name == "flow-spec")
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
        else
        {
            flow_spec = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::FlowSpec>();
            flow_spec->parent = this;
            children["flow-spec"] = flow_spec.get();
        }
        return children.at("flow-spec");
    }

    if(child_yang_name == "generic-flow-spec")
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        else
        {
            generic_flow_spec = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::GenericFlowSpec>();
            generic_flow_spec->parent = this;
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        return children.at("generic-flow-spec");
    }

    if(child_yang_name == "header")
    {
        if(header != nullptr)
        {
            children["header"] = header.get();
        }
        else
        {
            header = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Header>();
            header->parent = this;
            children["header"] = header.get();
        }
        return children.at("header");
    }

    if(child_yang_name == "hop")
    {
        if(hop != nullptr)
        {
            children["hop"] = hop.get();
        }
        else
        {
            hop = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Hop>();
            hop->parent = this;
            children["hop"] = hop.get();
        }
        return children.at("hop");
    }

    if(child_yang_name == "label-info")
    {
        if(label_info != nullptr)
        {
            children["label-info"] = label_info.get();
        }
        else
        {
            label_info = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::LabelInfo>();
            label_info->parent = this;
            children["label-info"] = label_info.get();
        }
        return children.at("label-info");
    }

    if(child_yang_name == "policy-flags")
    {
        if(policy_flags != nullptr)
        {
            children["policy-flags"] = policy_flags.get();
        }
        else
        {
            policy_flags = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::PolicyFlags>();
            policy_flags->parent = this;
            children["policy-flags"] = policy_flags.get();
        }
        return children.at("policy-flags");
    }

    if(child_yang_name == "policy-query-flags")
    {
        if(policy_query_flags != nullptr)
        {
            children["policy-query-flags"] = policy_query_flags.get();
        }
        else
        {
            policy_query_flags = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::PolicyQueryFlags>();
            policy_query_flags->parent = this;
            children["policy-query-flags"] = policy_query_flags.get();
        }
        return children.at("policy-query-flags");
    }

    if(child_yang_name == "policy-sources")
    {
        if(policy_sources != nullptr)
        {
            children["policy-sources"] = policy_sources.get();
        }
        else
        {
            policy_sources = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::PolicySources>();
            policy_sources->parent = this;
            children["policy-sources"] = policy_sources.get();
        }
        return children.at("policy-sources");
    }

    if(child_yang_name == "rsb-flags")
    {
        if(rsb_flags != nullptr)
        {
            children["rsb-flags"] = rsb_flags.get();
        }
        else
        {
            rsb_flags = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::RsbFlags>();
            rsb_flags->parent = this;
            children["rsb-flags"] = rsb_flags.get();
        }
        return children.at("rsb-flags");
    }

    if(child_yang_name == "s2l-sub-lsp")
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        else
        {
            s2l_sub_lsp = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::S2LSubLsp>();
            s2l_sub_lsp->parent = this;
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        return children.at("s2l-sub-lsp");
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    if(child_yang_name == "style")
    {
        if(style != nullptr)
        {
            children["style"] = style.get();
        }
        else
        {
            style = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed::Style>();
            style->parent = this;
            children["style"] = style.get();
        }
        return children.at("style");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::RsbDetailed::get_children()
{
    if(children.find("expiry-time") == children.end())
    {
        if(expiry_time != nullptr)
        {
            children["expiry-time"] = expiry_time.get();
        }
    }

    if(children.find("filter") == children.end())
    {
        if(filter != nullptr)
        {
            children["filter"] = filter.get();
        }
    }

    if(children.find("flow-spec") == children.end())
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
    }

    if(children.find("generic-flow-spec") == children.end())
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
    }

    if(children.find("header") == children.end())
    {
        if(header != nullptr)
        {
            children["header"] = header.get();
        }
    }

    if(children.find("hop") == children.end())
    {
        if(hop != nullptr)
        {
            children["hop"] = hop.get();
        }
    }

    if(children.find("label-info") == children.end())
    {
        if(label_info != nullptr)
        {
            children["label-info"] = label_info.get();
        }
    }

    if(children.find("policy-flags") == children.end())
    {
        if(policy_flags != nullptr)
        {
            children["policy-flags"] = policy_flags.get();
        }
    }

    if(children.find("policy-query-flags") == children.end())
    {
        if(policy_query_flags != nullptr)
        {
            children["policy-query-flags"] = policy_query_flags.get();
        }
    }

    if(children.find("policy-sources") == children.end())
    {
        if(policy_sources != nullptr)
        {
            children["policy-sources"] = policy_sources.get();
        }
    }

    if(children.find("rsb-flags") == children.end())
    {
        if(rsb_flags != nullptr)
        {
            children["rsb-flags"] = rsb_flags.get();
        }
    }

    if(children.find("s2l-sub-lsp") == children.end())
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
    }

    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    if(children.find("style") == children.end())
    {
        if(style != nullptr)
        {
            children["style"] = style.get();
        }
    }

    return children;
}

void Rsvp::RsbDetaileds::RsbDetailed::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "input-adjusted-interface")
    {
        input_adjusted_interface = value;
    }
    if(value_path == "input-physical-interface")
    {
        input_physical_interface = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "sub-group-origin")
    {
        sub_group_origin = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

Rsvp::RsbDetaileds::RsbDetaileds()
{
    yang_name = "rsb-detaileds"; yang_parent_name = "rsvp";
}

Rsvp::RsbDetaileds::~RsbDetaileds()
{
}

bool Rsvp::RsbDetaileds::has_data() const
{
    for (std::size_t index=0; index<rsb_detailed.size(); index++)
    {
        if(rsb_detailed[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::RsbDetaileds::has_operation() const
{
    for (std::size_t index=0; index<rsb_detailed.size(); index++)
    {
        if(rsb_detailed[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::RsbDetaileds::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsb-detaileds";

    return path_buffer.str();

}

EntityPath Rsvp::RsbDetaileds::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbDetaileds::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsb-detailed")
    {
        for(auto const & c : rsb_detailed)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::RsbDetaileds::RsbDetailed>();
        c->parent = this;
        rsb_detailed.push_back(std::move(c));
        children[segment_path] = rsb_detailed.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbDetaileds::get_children()
{
    for (auto const & c : rsb_detailed)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::RsbDetaileds::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface::PreStandardDsteInterface()
    :
    	allocated_bit_rate{YType::uint64, "allocated-bit-rate"},
	 is_max_bandwidth_absolute{YType::boolean, "is-max-bandwidth-absolute"},
	 is_max_subpool_bandwidth_absolute{YType::boolean, "is-max-subpool-bandwidth-absolute"},
	 max_bandwidth{YType::uint64, "max-bandwidth"},
	 max_flow_bandwidth{YType::uint64, "max-flow-bandwidth"},
	 max_subpool_bandwidth{YType::uint64, "max-subpool-bandwidth"}
{
    yang_name = "pre-standard-dste-interface"; yang_parent_name = "bandwidth-information";
}

Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface::~PreStandardDsteInterface()
{
}

bool Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface::has_data() const
{
    return allocated_bit_rate.is_set
	|| is_max_bandwidth_absolute.is_set
	|| is_max_subpool_bandwidth_absolute.is_set
	|| max_bandwidth.is_set
	|| max_flow_bandwidth.is_set
	|| max_subpool_bandwidth.is_set;
}

bool Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(allocated_bit_rate.operation)
	|| is_set(is_max_bandwidth_absolute.operation)
	|| is_set(is_max_subpool_bandwidth_absolute.operation)
	|| is_set(max_bandwidth.operation)
	|| is_set(max_flow_bandwidth.operation)
	|| is_set(max_subpool_bandwidth.operation);
}

std::string Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pre-standard-dste-interface";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (allocated_bit_rate.is_set || is_set(allocated_bit_rate.operation)) leaf_name_data.push_back(allocated_bit_rate.get_name_leafdata());
    if (is_max_bandwidth_absolute.is_set || is_set(is_max_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bandwidth_absolute.get_name_leafdata());
    if (is_max_subpool_bandwidth_absolute.is_set || is_set(is_max_subpool_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_subpool_bandwidth_absolute.get_name_leafdata());
    if (max_bandwidth.is_set || is_set(max_bandwidth.operation)) leaf_name_data.push_back(max_bandwidth.get_name_leafdata());
    if (max_flow_bandwidth.is_set || is_set(max_flow_bandwidth.operation)) leaf_name_data.push_back(max_flow_bandwidth.get_name_leafdata());
    if (max_subpool_bandwidth.is_set || is_set(max_subpool_bandwidth.operation)) leaf_name_data.push_back(max_subpool_bandwidth.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface::get_children()
{
    return children;
}

void Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "allocated-bit-rate")
    {
        allocated_bit_rate = value;
    }
    if(value_path == "is-max-bandwidth-absolute")
    {
        is_max_bandwidth_absolute = value;
    }
    if(value_path == "is-max-subpool-bandwidth-absolute")
    {
        is_max_subpool_bandwidth_absolute = value;
    }
    if(value_path == "max-bandwidth")
    {
        max_bandwidth = value;
    }
    if(value_path == "max-flow-bandwidth")
    {
        max_flow_bandwidth = value;
    }
    if(value_path == "max-subpool-bandwidth")
    {
        max_subpool_bandwidth = value;
    }
}

Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface::StandardDsteInterface()
    :
    	allocated_bit_rate{YType::uint64, "allocated-bit-rate"},
	 is_max_bandwidth_absolute{YType::boolean, "is-max-bandwidth-absolute"},
	 is_max_bc0_bandwidth_absolute{YType::boolean, "is-max-bc0-bandwidth-absolute"},
	 is_max_bc1_bandwidth_absolute{YType::boolean, "is-max-bc1-bandwidth-absolute"},
	 max_bandwidth{YType::uint64, "max-bandwidth"},
	 max_flow_bandwidth{YType::uint64, "max-flow-bandwidth"},
	 max_pool0_bandwidth{YType::uint64, "max-pool0-bandwidth"},
	 max_pool1_bandwidth{YType::uint64, "max-pool1-bandwidth"}
{
    yang_name = "standard-dste-interface"; yang_parent_name = "bandwidth-information";
}

Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface::~StandardDsteInterface()
{
}

bool Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface::has_data() const
{
    return allocated_bit_rate.is_set
	|| is_max_bandwidth_absolute.is_set
	|| is_max_bc0_bandwidth_absolute.is_set
	|| is_max_bc1_bandwidth_absolute.is_set
	|| max_bandwidth.is_set
	|| max_flow_bandwidth.is_set
	|| max_pool0_bandwidth.is_set
	|| max_pool1_bandwidth.is_set;
}

bool Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(allocated_bit_rate.operation)
	|| is_set(is_max_bandwidth_absolute.operation)
	|| is_set(is_max_bc0_bandwidth_absolute.operation)
	|| is_set(is_max_bc1_bandwidth_absolute.operation)
	|| is_set(max_bandwidth.operation)
	|| is_set(max_flow_bandwidth.operation)
	|| is_set(max_pool0_bandwidth.operation)
	|| is_set(max_pool1_bandwidth.operation);
}

std::string Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "standard-dste-interface";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (allocated_bit_rate.is_set || is_set(allocated_bit_rate.operation)) leaf_name_data.push_back(allocated_bit_rate.get_name_leafdata());
    if (is_max_bandwidth_absolute.is_set || is_set(is_max_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bandwidth_absolute.get_name_leafdata());
    if (is_max_bc0_bandwidth_absolute.is_set || is_set(is_max_bc0_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bc0_bandwidth_absolute.get_name_leafdata());
    if (is_max_bc1_bandwidth_absolute.is_set || is_set(is_max_bc1_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bc1_bandwidth_absolute.get_name_leafdata());
    if (max_bandwidth.is_set || is_set(max_bandwidth.operation)) leaf_name_data.push_back(max_bandwidth.get_name_leafdata());
    if (max_flow_bandwidth.is_set || is_set(max_flow_bandwidth.operation)) leaf_name_data.push_back(max_flow_bandwidth.get_name_leafdata());
    if (max_pool0_bandwidth.is_set || is_set(max_pool0_bandwidth.operation)) leaf_name_data.push_back(max_pool0_bandwidth.get_name_leafdata());
    if (max_pool1_bandwidth.is_set || is_set(max_pool1_bandwidth.operation)) leaf_name_data.push_back(max_pool1_bandwidth.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface::get_children()
{
    return children;
}

void Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "allocated-bit-rate")
    {
        allocated_bit_rate = value;
    }
    if(value_path == "is-max-bandwidth-absolute")
    {
        is_max_bandwidth_absolute = value;
    }
    if(value_path == "is-max-bc0-bandwidth-absolute")
    {
        is_max_bc0_bandwidth_absolute = value;
    }
    if(value_path == "is-max-bc1-bandwidth-absolute")
    {
        is_max_bc1_bandwidth_absolute = value;
    }
    if(value_path == "max-bandwidth")
    {
        max_bandwidth = value;
    }
    if(value_path == "max-flow-bandwidth")
    {
        max_flow_bandwidth = value;
    }
    if(value_path == "max-pool0-bandwidth")
    {
        max_pool0_bandwidth = value;
    }
    if(value_path == "max-pool1-bandwidth")
    {
        max_pool1_bandwidth = value;
    }
}

Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::BandwidthInformation()
    :
    	dste_mode{YType::enumeration, "dste-mode"}
    	,
    pre_standard_dste_interface(std::make_unique<Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface>())
	,standard_dste_interface(std::make_unique<Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface>())
{
    pre_standard_dste_interface->parent = this;
    children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();

    standard_dste_interface->parent = this;
    children["standard-dste-interface"] = standard_dste_interface.get();

    yang_name = "bandwidth-information"; yang_parent_name = "interface-summary";
}

Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::~BandwidthInformation()
{
}

bool Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::has_data() const
{
    return dste_mode.is_set
	|| (pre_standard_dste_interface !=  nullptr && pre_standard_dste_interface->has_data())
	|| (standard_dste_interface !=  nullptr && standard_dste_interface->has_data());
}

bool Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::has_operation() const
{
    return is_set(operation)
	|| is_set(dste_mode.operation)
	|| (pre_standard_dste_interface !=  nullptr && pre_standard_dste_interface->has_operation())
	|| (standard_dste_interface !=  nullptr && standard_dste_interface->has_operation());
}

std::string Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bandwidth-information";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (dste_mode.is_set || is_set(dste_mode.operation)) leaf_name_data.push_back(dste_mode.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "pre-standard-dste-interface")
    {
        if(pre_standard_dste_interface != nullptr)
        {
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
        else
        {
            pre_standard_dste_interface = std::make_unique<Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::PreStandardDsteInterface>();
            pre_standard_dste_interface->parent = this;
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
        return children.at("pre-standard-dste-interface");
    }

    if(child_yang_name == "standard-dste-interface")
    {
        if(standard_dste_interface != nullptr)
        {
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
        else
        {
            standard_dste_interface = std::make_unique<Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::StandardDsteInterface>();
            standard_dste_interface->parent = this;
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
        return children.at("standard-dste-interface");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::get_children()
{
    if(children.find("pre-standard-dste-interface") == children.end())
    {
        if(pre_standard_dste_interface != nullptr)
        {
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
    }

    if(children.find("standard-dste-interface") == children.end())
    {
        if(standard_dste_interface != nullptr)
        {
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
    }

    return children;
}

void Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "dste-mode")
    {
        dste_mode = value;
    }
}

Rsvp::InterfaceSummaries::InterfaceSummary::InterfaceSummary()
    :
    	interface_name{YType::str, "interface-name"},
	 interface_name_xr{YType::str, "interface-name-xr"},
	 paths_in{YType::uint32, "paths-in"},
	 paths_out{YType::uint32, "paths-out"},
	 reservations_in{YType::uint32, "reservations-in"},
	 reservations_out{YType::uint32, "reservations-out"}
    	,
    bandwidth_information(std::make_unique<Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation>())
{
    bandwidth_information->parent = this;
    children["bandwidth-information"] = bandwidth_information.get();

    yang_name = "interface-summary"; yang_parent_name = "interface-summaries";
}

Rsvp::InterfaceSummaries::InterfaceSummary::~InterfaceSummary()
{
}

bool Rsvp::InterfaceSummaries::InterfaceSummary::has_data() const
{
    return interface_name.is_set
	|| interface_name_xr.is_set
	|| paths_in.is_set
	|| paths_out.is_set
	|| reservations_in.is_set
	|| reservations_out.is_set
	|| (bandwidth_information !=  nullptr && bandwidth_information->has_data());
}

bool Rsvp::InterfaceSummaries::InterfaceSummary::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| is_set(interface_name_xr.operation)
	|| is_set(paths_in.operation)
	|| is_set(paths_out.operation)
	|| is_set(reservations_in.operation)
	|| is_set(reservations_out.operation)
	|| (bandwidth_information !=  nullptr && bandwidth_information->has_operation());
}

std::string Rsvp::InterfaceSummaries::InterfaceSummary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-summary" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceSummaries::InterfaceSummary::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-summaries/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (interface_name_xr.is_set || is_set(interface_name_xr.operation)) leaf_name_data.push_back(interface_name_xr.get_name_leafdata());
    if (paths_in.is_set || is_set(paths_in.operation)) leaf_name_data.push_back(paths_in.get_name_leafdata());
    if (paths_out.is_set || is_set(paths_out.operation)) leaf_name_data.push_back(paths_out.get_name_leafdata());
    if (reservations_in.is_set || is_set(reservations_in.operation)) leaf_name_data.push_back(reservations_in.get_name_leafdata());
    if (reservations_out.is_set || is_set(reservations_out.operation)) leaf_name_data.push_back(reservations_out.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceSummaries::InterfaceSummary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "bandwidth-information")
    {
        if(bandwidth_information != nullptr)
        {
            children["bandwidth-information"] = bandwidth_information.get();
        }
        else
        {
            bandwidth_information = std::make_unique<Rsvp::InterfaceSummaries::InterfaceSummary::BandwidthInformation>();
            bandwidth_information->parent = this;
            children["bandwidth-information"] = bandwidth_information.get();
        }
        return children.at("bandwidth-information");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceSummaries::InterfaceSummary::get_children()
{
    if(children.find("bandwidth-information") == children.end())
    {
        if(bandwidth_information != nullptr)
        {
            children["bandwidth-information"] = bandwidth_information.get();
        }
    }

    return children;
}

void Rsvp::InterfaceSummaries::InterfaceSummary::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "interface-name-xr")
    {
        interface_name_xr = value;
    }
    if(value_path == "paths-in")
    {
        paths_in = value;
    }
    if(value_path == "paths-out")
    {
        paths_out = value;
    }
    if(value_path == "reservations-in")
    {
        reservations_in = value;
    }
    if(value_path == "reservations-out")
    {
        reservations_out = value;
    }
}

Rsvp::InterfaceSummaries::InterfaceSummaries()
{
    yang_name = "interface-summaries"; yang_parent_name = "rsvp";
}

Rsvp::InterfaceSummaries::~InterfaceSummaries()
{
}

bool Rsvp::InterfaceSummaries::has_data() const
{
    for (std::size_t index=0; index<interface_summary.size(); index++)
    {
        if(interface_summary[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::InterfaceSummaries::has_operation() const
{
    for (std::size_t index=0; index<interface_summary.size(); index++)
    {
        if(interface_summary[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::InterfaceSummaries::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-summaries";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceSummaries::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceSummaries::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-summary")
    {
        for(auto const & c : interface_summary)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::InterfaceSummaries::InterfaceSummary>();
        c->parent = this;
        interface_summary.push_back(std::move(c));
        children[segment_path] = interface_summary.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceSummaries::get_children()
{
    for (auto const & c : interface_summary)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::InterfaceSummaries::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::HelloInstanceBriefs::HelloInstanceBrief::HelloInstanceBrief()
    :
    	destination_address{YType::str, "destination-address"},
	 source_address{YType::str, "source-address"},
	 destination_address_xr{YType::str, "destination-address-xr"},
	 hello_interface{YType::str, "hello-interface"},
	 instance_type{YType::enumeration, "instance-type"},
	 lost_communication_total{YType::uint16, "lost-communication-total"},
	 neighbor_hello_state{YType::enumeration, "neighbor-hello-state"},
	 source_address_xr{YType::str, "source-address-xr"}
{
    yang_name = "hello-instance-brief"; yang_parent_name = "hello-instance-briefs";
}

Rsvp::HelloInstanceBriefs::HelloInstanceBrief::~HelloInstanceBrief()
{
}

bool Rsvp::HelloInstanceBriefs::HelloInstanceBrief::has_data() const
{
    return destination_address.is_set
	|| source_address.is_set
	|| destination_address_xr.is_set
	|| hello_interface.is_set
	|| instance_type.is_set
	|| lost_communication_total.is_set
	|| neighbor_hello_state.is_set
	|| source_address_xr.is_set;
}

bool Rsvp::HelloInstanceBriefs::HelloInstanceBrief::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(source_address.operation)
	|| is_set(destination_address_xr.operation)
	|| is_set(hello_interface.operation)
	|| is_set(instance_type.operation)
	|| is_set(lost_communication_total.operation)
	|| is_set(neighbor_hello_state.operation)
	|| is_set(source_address_xr.operation);
}

std::string Rsvp::HelloInstanceBriefs::HelloInstanceBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hello-instance-brief" <<"[destination-address='" <<destination_address.get() <<"']" <<"[source-address='" <<source_address.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::HelloInstanceBriefs::HelloInstanceBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/hello-instance-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (destination_address_xr.is_set || is_set(destination_address_xr.operation)) leaf_name_data.push_back(destination_address_xr.get_name_leafdata());
    if (hello_interface.is_set || is_set(hello_interface.operation)) leaf_name_data.push_back(hello_interface.get_name_leafdata());
    if (instance_type.is_set || is_set(instance_type.operation)) leaf_name_data.push_back(instance_type.get_name_leafdata());
    if (lost_communication_total.is_set || is_set(lost_communication_total.operation)) leaf_name_data.push_back(lost_communication_total.get_name_leafdata());
    if (neighbor_hello_state.is_set || is_set(neighbor_hello_state.operation)) leaf_name_data.push_back(neighbor_hello_state.get_name_leafdata());
    if (source_address_xr.is_set || is_set(source_address_xr.operation)) leaf_name_data.push_back(source_address_xr.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::HelloInstanceBriefs::HelloInstanceBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::HelloInstanceBriefs::HelloInstanceBrief::get_children()
{
    return children;
}

void Rsvp::HelloInstanceBriefs::HelloInstanceBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "destination-address-xr")
    {
        destination_address_xr = value;
    }
    if(value_path == "hello-interface")
    {
        hello_interface = value;
    }
    if(value_path == "instance-type")
    {
        instance_type = value;
    }
    if(value_path == "lost-communication-total")
    {
        lost_communication_total = value;
    }
    if(value_path == "neighbor-hello-state")
    {
        neighbor_hello_state = value;
    }
    if(value_path == "source-address-xr")
    {
        source_address_xr = value;
    }
}

Rsvp::HelloInstanceBriefs::HelloInstanceBriefs()
{
    yang_name = "hello-instance-briefs"; yang_parent_name = "rsvp";
}

Rsvp::HelloInstanceBriefs::~HelloInstanceBriefs()
{
}

bool Rsvp::HelloInstanceBriefs::has_data() const
{
    for (std::size_t index=0; index<hello_instance_brief.size(); index++)
    {
        if(hello_instance_brief[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::HelloInstanceBriefs::has_operation() const
{
    for (std::size_t index=0; index<hello_instance_brief.size(); index++)
    {
        if(hello_instance_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::HelloInstanceBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hello-instance-briefs";

    return path_buffer.str();

}

EntityPath Rsvp::HelloInstanceBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::HelloInstanceBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "hello-instance-brief")
    {
        for(auto const & c : hello_instance_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::HelloInstanceBriefs::HelloInstanceBrief>();
        c->parent = this;
        hello_instance_brief.push_back(std::move(c));
        children[segment_path] = hello_instance_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::HelloInstanceBriefs::get_children()
{
    for (auto const & c : hello_instance_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::HelloInstanceBriefs::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::AuthenticationDetails::AuthenticationDetail::AuthCompact::AuthCompact()
    :
    	destination_address_xr{YType::str, "destination-address-xr"},
	 direction{YType::enumeration, "direction"},
	 key_id{YType::uint64, "key-id"},
	 key_id_valid{YType::uint32, "key-id-valid"},
	 key_source{YType::str, "key-source"},
	 key_type{YType::enumeration, "key-type"},
	 neighbor_address{YType::str, "neighbor-address"},
	 source_address_xr{YType::str, "source-address-xr"}
{
    yang_name = "auth-compact"; yang_parent_name = "authentication-detail";
}

Rsvp::AuthenticationDetails::AuthenticationDetail::AuthCompact::~AuthCompact()
{
}

bool Rsvp::AuthenticationDetails::AuthenticationDetail::AuthCompact::has_data() const
{
    return destination_address_xr.is_set
	|| direction.is_set
	|| key_id.is_set
	|| key_id_valid.is_set
	|| key_source.is_set
	|| key_type.is_set
	|| neighbor_address.is_set
	|| source_address_xr.is_set;
}

bool Rsvp::AuthenticationDetails::AuthenticationDetail::AuthCompact::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address_xr.operation)
	|| is_set(direction.operation)
	|| is_set(key_id.operation)
	|| is_set(key_id_valid.operation)
	|| is_set(key_source.operation)
	|| is_set(key_type.operation)
	|| is_set(neighbor_address.operation)
	|| is_set(source_address_xr.operation);
}

std::string Rsvp::AuthenticationDetails::AuthenticationDetail::AuthCompact::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "auth-compact";

    return path_buffer.str();

}

EntityPath Rsvp::AuthenticationDetails::AuthenticationDetail::AuthCompact::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address_xr.is_set || is_set(destination_address_xr.operation)) leaf_name_data.push_back(destination_address_xr.get_name_leafdata());
    if (direction.is_set || is_set(direction.operation)) leaf_name_data.push_back(direction.get_name_leafdata());
    if (key_id.is_set || is_set(key_id.operation)) leaf_name_data.push_back(key_id.get_name_leafdata());
    if (key_id_valid.is_set || is_set(key_id_valid.operation)) leaf_name_data.push_back(key_id_valid.get_name_leafdata());
    if (key_source.is_set || is_set(key_source.operation)) leaf_name_data.push_back(key_source.get_name_leafdata());
    if (key_type.is_set || is_set(key_type.operation)) leaf_name_data.push_back(key_type.get_name_leafdata());
    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (source_address_xr.is_set || is_set(source_address_xr.operation)) leaf_name_data.push_back(source_address_xr.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::AuthenticationDetails::AuthenticationDetail::AuthCompact::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::AuthenticationDetails::AuthenticationDetail::AuthCompact::get_children()
{
    return children;
}

void Rsvp::AuthenticationDetails::AuthenticationDetail::AuthCompact::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address-xr")
    {
        destination_address_xr = value;
    }
    if(value_path == "direction")
    {
        direction = value;
    }
    if(value_path == "key-id")
    {
        key_id = value;
    }
    if(value_path == "key-id-valid")
    {
        key_id_valid = value;
    }
    if(value_path == "key-source")
    {
        key_source = value;
    }
    if(value_path == "key-type")
    {
        key_type = value;
    }
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "source-address-xr")
    {
        source_address_xr = value;
    }
}

Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters::Counters()
    :
    	authentication_challenge_responses_sent{YType::uint32, "authentication-challenge-responses-sent"},
	 authentication_failures{YType::uint32, "authentication-failures"},
	 authentication_send_challenges_received{YType::uint32, "authentication-send-challenges-received"},
	 authentication_sent{YType::uint32, "authentication-sent"}
{
    yang_name = "counters"; yang_parent_name = "send-info";
}

Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters::~Counters()
{
}

bool Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters::has_data() const
{
    return authentication_challenge_responses_sent.is_set
	|| authentication_failures.is_set
	|| authentication_send_challenges_received.is_set
	|| authentication_sent.is_set;
}

bool Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters::has_operation() const
{
    return is_set(operation)
	|| is_set(authentication_challenge_responses_sent.operation)
	|| is_set(authentication_failures.operation)
	|| is_set(authentication_send_challenges_received.operation)
	|| is_set(authentication_sent.operation);
}

std::string Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "counters";

    return path_buffer.str();

}

EntityPath Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (authentication_challenge_responses_sent.is_set || is_set(authentication_challenge_responses_sent.operation)) leaf_name_data.push_back(authentication_challenge_responses_sent.get_name_leafdata());
    if (authentication_failures.is_set || is_set(authentication_failures.operation)) leaf_name_data.push_back(authentication_failures.get_name_leafdata());
    if (authentication_send_challenges_received.is_set || is_set(authentication_send_challenges_received.operation)) leaf_name_data.push_back(authentication_send_challenges_received.get_name_leafdata());
    if (authentication_sent.is_set || is_set(authentication_sent.operation)) leaf_name_data.push_back(authentication_sent.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters::get_children()
{
    return children;
}

void Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "authentication-challenge-responses-sent")
    {
        authentication_challenge_responses_sent = value;
    }
    if(value_path == "authentication-failures")
    {
        authentication_failures = value;
    }
    if(value_path == "authentication-send-challenges-received")
    {
        authentication_send_challenges_received = value;
    }
    if(value_path == "authentication-sent")
    {
        authentication_sent = value;
    }
}

Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::SendInfo()
    :
    	sequence{YType::uint64, "sequence"}
    	,
    counters(std::make_unique<Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters>())
{
    counters->parent = this;
    children["counters"] = counters.get();

    yang_name = "send-info"; yang_parent_name = "direction-info";
}

Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::~SendInfo()
{
}

bool Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::has_data() const
{
    return sequence.is_set
	|| (counters !=  nullptr && counters->has_data());
}

bool Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::has_operation() const
{
    return is_set(operation)
	|| is_set(sequence.operation)
	|| (counters !=  nullptr && counters->has_operation());
}

std::string Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "send-info";

    return path_buffer.str();

}

EntityPath Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (sequence.is_set || is_set(sequence.operation)) leaf_name_data.push_back(sequence.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "counters")
    {
        if(counters != nullptr)
        {
            children["counters"] = counters.get();
        }
        else
        {
            counters = std::make_unique<Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::Counters>();
            counters->parent = this;
            children["counters"] = counters.get();
        }
        return children.at("counters");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::get_children()
{
    if(children.find("counters") == children.end())
    {
        if(counters != nullptr)
        {
            children["counters"] = counters.get();
        }
    }

    return children;
}

void Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "sequence")
    {
        sequence = value;
    }
}

Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters::Counters()
    :
    	authentication_received_bad_digest{YType::uint32, "authentication-received-bad-digest"},
	 authentication_received_bad_message_format{YType::uint32, "authentication-received-bad-message-format"},
	 authentication_received_challenge_response{YType::uint32, "authentication-received-challenge-response"},
	 authentication_received_challenge_timeouts{YType::uint32, "authentication-received-challenge-timeouts"},
	 authentication_received_challenges_resent{YType::uint32, "authentication-received-challenges-resent"},
	 authentication_received_challenges_response_duplicate{YType::uint32, "authentication-received-challenges-response-duplicate"},
	 authentication_received_challenges_sent{YType::uint32, "authentication-received-challenges-sent"},
	 authentication_received_during_challenge{YType::uint32, "authentication-received-during-challenge"},
	 authentication_received_incomplete{YType::uint32, "authentication-received-incomplete"},
	 authentication_received_no_integrity{YType::uint32, "authentication-received-no-integrity"},
	 authentication_received_response_late{YType::uint32, "authentication-received-response-late"},
	 authentication_received_sequence_number_duplicate{YType::uint32, "authentication-received-sequence-number-duplicate"},
	 authentication_received_sequence_number_outof_range{YType::uint32, "authentication-received-sequence-number-outof-range"},
	 authentication_received_valid_messages{YType::uint32, "authentication-received-valid-messages"},
	 authentication_received_wrong_challenges_response{YType::uint32, "authentication-received-wrong-challenges-response"},
	 authentication_received_wrong_digest_type{YType::uint32, "authentication-received-wrong-digest-type"}
{
    yang_name = "counters"; yang_parent_name = "receive-info";
}

Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters::~Counters()
{
}

bool Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters::has_data() const
{
    return authentication_received_bad_digest.is_set
	|| authentication_received_bad_message_format.is_set
	|| authentication_received_challenge_response.is_set
	|| authentication_received_challenge_timeouts.is_set
	|| authentication_received_challenges_resent.is_set
	|| authentication_received_challenges_response_duplicate.is_set
	|| authentication_received_challenges_sent.is_set
	|| authentication_received_during_challenge.is_set
	|| authentication_received_incomplete.is_set
	|| authentication_received_no_integrity.is_set
	|| authentication_received_response_late.is_set
	|| authentication_received_sequence_number_duplicate.is_set
	|| authentication_received_sequence_number_outof_range.is_set
	|| authentication_received_valid_messages.is_set
	|| authentication_received_wrong_challenges_response.is_set
	|| authentication_received_wrong_digest_type.is_set;
}

bool Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters::has_operation() const
{
    return is_set(operation)
	|| is_set(authentication_received_bad_digest.operation)
	|| is_set(authentication_received_bad_message_format.operation)
	|| is_set(authentication_received_challenge_response.operation)
	|| is_set(authentication_received_challenge_timeouts.operation)
	|| is_set(authentication_received_challenges_resent.operation)
	|| is_set(authentication_received_challenges_response_duplicate.operation)
	|| is_set(authentication_received_challenges_sent.operation)
	|| is_set(authentication_received_during_challenge.operation)
	|| is_set(authentication_received_incomplete.operation)
	|| is_set(authentication_received_no_integrity.operation)
	|| is_set(authentication_received_response_late.operation)
	|| is_set(authentication_received_sequence_number_duplicate.operation)
	|| is_set(authentication_received_sequence_number_outof_range.operation)
	|| is_set(authentication_received_valid_messages.operation)
	|| is_set(authentication_received_wrong_challenges_response.operation)
	|| is_set(authentication_received_wrong_digest_type.operation);
}

std::string Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "counters";

    return path_buffer.str();

}

EntityPath Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (authentication_received_bad_digest.is_set || is_set(authentication_received_bad_digest.operation)) leaf_name_data.push_back(authentication_received_bad_digest.get_name_leafdata());
    if (authentication_received_bad_message_format.is_set || is_set(authentication_received_bad_message_format.operation)) leaf_name_data.push_back(authentication_received_bad_message_format.get_name_leafdata());
    if (authentication_received_challenge_response.is_set || is_set(authentication_received_challenge_response.operation)) leaf_name_data.push_back(authentication_received_challenge_response.get_name_leafdata());
    if (authentication_received_challenge_timeouts.is_set || is_set(authentication_received_challenge_timeouts.operation)) leaf_name_data.push_back(authentication_received_challenge_timeouts.get_name_leafdata());
    if (authentication_received_challenges_resent.is_set || is_set(authentication_received_challenges_resent.operation)) leaf_name_data.push_back(authentication_received_challenges_resent.get_name_leafdata());
    if (authentication_received_challenges_response_duplicate.is_set || is_set(authentication_received_challenges_response_duplicate.operation)) leaf_name_data.push_back(authentication_received_challenges_response_duplicate.get_name_leafdata());
    if (authentication_received_challenges_sent.is_set || is_set(authentication_received_challenges_sent.operation)) leaf_name_data.push_back(authentication_received_challenges_sent.get_name_leafdata());
    if (authentication_received_during_challenge.is_set || is_set(authentication_received_during_challenge.operation)) leaf_name_data.push_back(authentication_received_during_challenge.get_name_leafdata());
    if (authentication_received_incomplete.is_set || is_set(authentication_received_incomplete.operation)) leaf_name_data.push_back(authentication_received_incomplete.get_name_leafdata());
    if (authentication_received_no_integrity.is_set || is_set(authentication_received_no_integrity.operation)) leaf_name_data.push_back(authentication_received_no_integrity.get_name_leafdata());
    if (authentication_received_response_late.is_set || is_set(authentication_received_response_late.operation)) leaf_name_data.push_back(authentication_received_response_late.get_name_leafdata());
    if (authentication_received_sequence_number_duplicate.is_set || is_set(authentication_received_sequence_number_duplicate.operation)) leaf_name_data.push_back(authentication_received_sequence_number_duplicate.get_name_leafdata());
    if (authentication_received_sequence_number_outof_range.is_set || is_set(authentication_received_sequence_number_outof_range.operation)) leaf_name_data.push_back(authentication_received_sequence_number_outof_range.get_name_leafdata());
    if (authentication_received_valid_messages.is_set || is_set(authentication_received_valid_messages.operation)) leaf_name_data.push_back(authentication_received_valid_messages.get_name_leafdata());
    if (authentication_received_wrong_challenges_response.is_set || is_set(authentication_received_wrong_challenges_response.operation)) leaf_name_data.push_back(authentication_received_wrong_challenges_response.get_name_leafdata());
    if (authentication_received_wrong_digest_type.is_set || is_set(authentication_received_wrong_digest_type.operation)) leaf_name_data.push_back(authentication_received_wrong_digest_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters::get_children()
{
    return children;
}

void Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "authentication-received-bad-digest")
    {
        authentication_received_bad_digest = value;
    }
    if(value_path == "authentication-received-bad-message-format")
    {
        authentication_received_bad_message_format = value;
    }
    if(value_path == "authentication-received-challenge-response")
    {
        authentication_received_challenge_response = value;
    }
    if(value_path == "authentication-received-challenge-timeouts")
    {
        authentication_received_challenge_timeouts = value;
    }
    if(value_path == "authentication-received-challenges-resent")
    {
        authentication_received_challenges_resent = value;
    }
    if(value_path == "authentication-received-challenges-response-duplicate")
    {
        authentication_received_challenges_response_duplicate = value;
    }
    if(value_path == "authentication-received-challenges-sent")
    {
        authentication_received_challenges_sent = value;
    }
    if(value_path == "authentication-received-during-challenge")
    {
        authentication_received_during_challenge = value;
    }
    if(value_path == "authentication-received-incomplete")
    {
        authentication_received_incomplete = value;
    }
    if(value_path == "authentication-received-no-integrity")
    {
        authentication_received_no_integrity = value;
    }
    if(value_path == "authentication-received-response-late")
    {
        authentication_received_response_late = value;
    }
    if(value_path == "authentication-received-sequence-number-duplicate")
    {
        authentication_received_sequence_number_duplicate = value;
    }
    if(value_path == "authentication-received-sequence-number-outof-range")
    {
        authentication_received_sequence_number_outof_range = value;
    }
    if(value_path == "authentication-received-valid-messages")
    {
        authentication_received_valid_messages = value;
    }
    if(value_path == "authentication-received-wrong-challenges-response")
    {
        authentication_received_wrong_challenges_response = value;
    }
    if(value_path == "authentication-received-wrong-digest-type")
    {
        authentication_received_wrong_digest_type = value;
    }
}

Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::ReceiveInfo()
    :
    	sequence{YType::uint64, "sequence"},
	 sequence_window{YType::uint64, "sequence-window"},
	 sequence_window_count{YType::uint32, "sequence-window-count"},
	 sequence_window_size{YType::uint32, "sequence-window-size"}
    	,
    counters(std::make_unique<Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters>())
{
    counters->parent = this;
    children["counters"] = counters.get();

    yang_name = "receive-info"; yang_parent_name = "direction-info";
}

Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::~ReceiveInfo()
{
}

bool Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::has_data() const
{
    for (auto const & leaf : sequence_window.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return sequence.is_set
	|| sequence_window_count.is_set
	|| sequence_window_size.is_set
	|| (counters !=  nullptr && counters->has_data());
}

bool Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::has_operation() const
{
    for (auto const & leaf : sequence_window.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(sequence.operation)
	|| is_set(sequence_window.operation)
	|| is_set(sequence_window_count.operation)
	|| is_set(sequence_window_size.operation)
	|| (counters !=  nullptr && counters->has_operation());
}

std::string Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "receive-info";

    return path_buffer.str();

}

EntityPath Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (sequence.is_set || is_set(sequence.operation)) leaf_name_data.push_back(sequence.get_name_leafdata());
    if (sequence_window_count.is_set || is_set(sequence_window_count.operation)) leaf_name_data.push_back(sequence_window_count.get_name_leafdata());
    if (sequence_window_size.is_set || is_set(sequence_window_size.operation)) leaf_name_data.push_back(sequence_window_size.get_name_leafdata());

    auto sequence_window_name_datas = sequence_window.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), sequence_window_name_datas.begin(), sequence_window_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "counters")
    {
        if(counters != nullptr)
        {
            children["counters"] = counters.get();
        }
        else
        {
            counters = std::make_unique<Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::Counters>();
            counters->parent = this;
            children["counters"] = counters.get();
        }
        return children.at("counters");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::get_children()
{
    if(children.find("counters") == children.end())
    {
        if(counters != nullptr)
        {
            children["counters"] = counters.get();
        }
    }

    return children;
}

void Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "sequence")
    {
        sequence = value;
    }
    if(value_path == "sequence-window")
    {
        sequence_window.append(value);
    }
    if(value_path == "sequence-window-count")
    {
        sequence_window_count = value;
    }
    if(value_path == "sequence-window-size")
    {
        sequence_window_size = value;
    }
}

Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::DirectionInfo()
    :
    	auth_direction{YType::enumeration, "auth-direction"}
    	,
    receive_info(std::make_unique<Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo>())
	,send_info(std::make_unique<Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo>())
{
    receive_info->parent = this;
    children["receive-info"] = receive_info.get();

    send_info->parent = this;
    children["send-info"] = send_info.get();

    yang_name = "direction-info"; yang_parent_name = "authentication-detail";
}

Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::~DirectionInfo()
{
}

bool Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::has_data() const
{
    return auth_direction.is_set
	|| (receive_info !=  nullptr && receive_info->has_data())
	|| (send_info !=  nullptr && send_info->has_data());
}

bool Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::has_operation() const
{
    return is_set(operation)
	|| is_set(auth_direction.operation)
	|| (receive_info !=  nullptr && receive_info->has_operation())
	|| (send_info !=  nullptr && send_info->has_operation());
}

std::string Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "direction-info";

    return path_buffer.str();

}

EntityPath Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (auth_direction.is_set || is_set(auth_direction.operation)) leaf_name_data.push_back(auth_direction.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "receive-info")
    {
        if(receive_info != nullptr)
        {
            children["receive-info"] = receive_info.get();
        }
        else
        {
            receive_info = std::make_unique<Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::ReceiveInfo>();
            receive_info->parent = this;
            children["receive-info"] = receive_info.get();
        }
        return children.at("receive-info");
    }

    if(child_yang_name == "send-info")
    {
        if(send_info != nullptr)
        {
            children["send-info"] = send_info.get();
        }
        else
        {
            send_info = std::make_unique<Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::SendInfo>();
            send_info->parent = this;
            children["send-info"] = send_info.get();
        }
        return children.at("send-info");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::get_children()
{
    if(children.find("receive-info") == children.end())
    {
        if(receive_info != nullptr)
        {
            children["receive-info"] = receive_info.get();
        }
    }

    if(children.find("send-info") == children.end())
    {
        if(send_info != nullptr)
        {
            children["send-info"] = send_info.get();
        }
    }

    return children;
}

void Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "auth-direction")
    {
        auth_direction = value;
    }
}

Rsvp::AuthenticationDetails::AuthenticationDetail::AuthenticationDetail()
    :
    	destination_address{YType::str, "destination-address"},
	 interface_name{YType::str, "interface-name"},
	 mode_id{YType::enumeration, "mode-id"},
	 source_address{YType::str, "source-address"},
	 challenge_status{YType::enumeration, "challenge-status"},
	 key_digest_info{YType::uint32, "key-digest-info"},
	 key_status{YType::uint32, "key-status"},
	 lifetime{YType::uint32, "lifetime"},
	 lifetime_left{YType::uint32, "lifetime-left"}
    	,
    auth_compact(std::make_unique<Rsvp::AuthenticationDetails::AuthenticationDetail::AuthCompact>())
	,direction_info(std::make_unique<Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo>())
{
    auth_compact->parent = this;
    children["auth-compact"] = auth_compact.get();

    direction_info->parent = this;
    children["direction-info"] = direction_info.get();

    yang_name = "authentication-detail"; yang_parent_name = "authentication-details";
}

Rsvp::AuthenticationDetails::AuthenticationDetail::~AuthenticationDetail()
{
}

bool Rsvp::AuthenticationDetails::AuthenticationDetail::has_data() const
{
    return destination_address.is_set
	|| interface_name.is_set
	|| mode_id.is_set
	|| source_address.is_set
	|| challenge_status.is_set
	|| key_digest_info.is_set
	|| key_status.is_set
	|| lifetime.is_set
	|| lifetime_left.is_set
	|| (auth_compact !=  nullptr && auth_compact->has_data())
	|| (direction_info !=  nullptr && direction_info->has_data());
}

bool Rsvp::AuthenticationDetails::AuthenticationDetail::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(interface_name.operation)
	|| is_set(mode_id.operation)
	|| is_set(source_address.operation)
	|| is_set(challenge_status.operation)
	|| is_set(key_digest_info.operation)
	|| is_set(key_status.operation)
	|| is_set(lifetime.operation)
	|| is_set(lifetime_left.operation)
	|| (auth_compact !=  nullptr && auth_compact->has_operation())
	|| (direction_info !=  nullptr && direction_info->has_operation());
}

std::string Rsvp::AuthenticationDetails::AuthenticationDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "authentication-detail" <<"[destination-address='" <<destination_address.get() <<"']" <<"[interface-name='" <<interface_name.get() <<"']" <<"[mode-id='" <<mode_id.get() <<"']" <<"[source-address='" <<source_address.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::AuthenticationDetails::AuthenticationDetail::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/authentication-details/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (mode_id.is_set || is_set(mode_id.operation)) leaf_name_data.push_back(mode_id.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (challenge_status.is_set || is_set(challenge_status.operation)) leaf_name_data.push_back(challenge_status.get_name_leafdata());
    if (key_digest_info.is_set || is_set(key_digest_info.operation)) leaf_name_data.push_back(key_digest_info.get_name_leafdata());
    if (key_status.is_set || is_set(key_status.operation)) leaf_name_data.push_back(key_status.get_name_leafdata());
    if (lifetime.is_set || is_set(lifetime.operation)) leaf_name_data.push_back(lifetime.get_name_leafdata());
    if (lifetime_left.is_set || is_set(lifetime_left.operation)) leaf_name_data.push_back(lifetime_left.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::AuthenticationDetails::AuthenticationDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "auth-compact")
    {
        if(auth_compact != nullptr)
        {
            children["auth-compact"] = auth_compact.get();
        }
        else
        {
            auth_compact = std::make_unique<Rsvp::AuthenticationDetails::AuthenticationDetail::AuthCompact>();
            auth_compact->parent = this;
            children["auth-compact"] = auth_compact.get();
        }
        return children.at("auth-compact");
    }

    if(child_yang_name == "direction-info")
    {
        if(direction_info != nullptr)
        {
            children["direction-info"] = direction_info.get();
        }
        else
        {
            direction_info = std::make_unique<Rsvp::AuthenticationDetails::AuthenticationDetail::DirectionInfo>();
            direction_info->parent = this;
            children["direction-info"] = direction_info.get();
        }
        return children.at("direction-info");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::AuthenticationDetails::AuthenticationDetail::get_children()
{
    if(children.find("auth-compact") == children.end())
    {
        if(auth_compact != nullptr)
        {
            children["auth-compact"] = auth_compact.get();
        }
    }

    if(children.find("direction-info") == children.end())
    {
        if(direction_info != nullptr)
        {
            children["direction-info"] = direction_info.get();
        }
    }

    return children;
}

void Rsvp::AuthenticationDetails::AuthenticationDetail::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "mode-id")
    {
        mode_id = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "challenge-status")
    {
        challenge_status = value;
    }
    if(value_path == "key-digest-info")
    {
        key_digest_info = value;
    }
    if(value_path == "key-status")
    {
        key_status = value;
    }
    if(value_path == "lifetime")
    {
        lifetime = value;
    }
    if(value_path == "lifetime-left")
    {
        lifetime_left = value;
    }
}

Rsvp::AuthenticationDetails::AuthenticationDetails()
{
    yang_name = "authentication-details"; yang_parent_name = "rsvp";
}

Rsvp::AuthenticationDetails::~AuthenticationDetails()
{
}

bool Rsvp::AuthenticationDetails::has_data() const
{
    for (std::size_t index=0; index<authentication_detail.size(); index++)
    {
        if(authentication_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::AuthenticationDetails::has_operation() const
{
    for (std::size_t index=0; index<authentication_detail.size(); index++)
    {
        if(authentication_detail[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::AuthenticationDetails::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "authentication-details";

    return path_buffer.str();

}

EntityPath Rsvp::AuthenticationDetails::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::AuthenticationDetails::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "authentication-detail")
    {
        for(auto const & c : authentication_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::AuthenticationDetails::AuthenticationDetail>();
        c->parent = this;
        authentication_detail.push_back(std::move(c));
        children[segment_path] = authentication_detail.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::AuthenticationDetails::get_children()
{
    for (auto const & c : authentication_detail)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::AuthenticationDetails::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::~RsvpSession()
{
}

bool Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

Rsvp::RsbBriefs::RsbBrief::Session::Session()
    :
    rsvp_session(std::make_unique<Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "rsb-brief";
}

Rsvp::RsbBriefs::RsbBrief::Session::~Session()
{
}

bool Rsvp::RsbBriefs::RsbBrief::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool Rsvp::RsbBriefs::RsbBrief::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string Rsvp::RsbBriefs::RsbBrief::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath Rsvp::RsbBriefs::RsbBrief::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbBriefs::RsbBrief::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<Rsvp::RsbBriefs::RsbBrief::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbBriefs::RsbBrief::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void Rsvp::RsbBriefs::RsbBrief::Session::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::RsbBriefs::RsbBrief::S2LSubLsp::S2LSubLsp()
    :
    	s2l_destination_address{YType::str, "s2l-destination-address"}
{
    yang_name = "s2l-sub-lsp"; yang_parent_name = "rsb-brief";
}

Rsvp::RsbBriefs::RsbBrief::S2LSubLsp::~S2LSubLsp()
{
}

bool Rsvp::RsbBriefs::RsbBrief::S2LSubLsp::has_data() const
{
    return s2l_destination_address.is_set;
}

bool Rsvp::RsbBriefs::RsbBrief::S2LSubLsp::has_operation() const
{
    return is_set(operation)
	|| is_set(s2l_destination_address.operation);
}

std::string Rsvp::RsbBriefs::RsbBrief::S2LSubLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "s2l-sub-lsp";

    return path_buffer.str();

}

EntityPath Rsvp::RsbBriefs::RsbBrief::S2LSubLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (s2l_destination_address.is_set || is_set(s2l_destination_address.operation)) leaf_name_data.push_back(s2l_destination_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbBriefs::RsbBrief::S2LSubLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbBriefs::RsbBrief::S2LSubLsp::get_children()
{
    return children;
}

void Rsvp::RsbBriefs::RsbBrief::S2LSubLsp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "s2l-destination-address")
    {
        s2l_destination_address = value;
    }
}

Rsvp::RsbBriefs::RsbBrief::FlowSpec::FlowSpec()
    :
    	flow_average_rate{YType::uint64, "flow-average-rate"},
	 flow_max_burst{YType::uint64, "flow-max-burst"},
	 flow_max_unit{YType::uint32, "flow-max-unit"},
	 flow_min_unit{YType::uint32, "flow-min-unit"},
	 flow_peak_rate{YType::uint64, "flow-peak-rate"},
	 flow_qos{YType::enumeration, "flow-qos"},
	 flow_requested_rate{YType::uint64, "flow-requested-rate"},
	 flow_slack{YType::uint32, "flow-slack"}
{
    yang_name = "flow-spec"; yang_parent_name = "rsb-brief";
}

Rsvp::RsbBriefs::RsbBrief::FlowSpec::~FlowSpec()
{
}

bool Rsvp::RsbBriefs::RsbBrief::FlowSpec::has_data() const
{
    return flow_average_rate.is_set
	|| flow_max_burst.is_set
	|| flow_max_unit.is_set
	|| flow_min_unit.is_set
	|| flow_peak_rate.is_set
	|| flow_qos.is_set
	|| flow_requested_rate.is_set
	|| flow_slack.is_set;
}

bool Rsvp::RsbBriefs::RsbBrief::FlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_average_rate.operation)
	|| is_set(flow_max_burst.operation)
	|| is_set(flow_max_unit.operation)
	|| is_set(flow_min_unit.operation)
	|| is_set(flow_peak_rate.operation)
	|| is_set(flow_qos.operation)
	|| is_set(flow_requested_rate.operation)
	|| is_set(flow_slack.operation);
}

std::string Rsvp::RsbBriefs::RsbBrief::FlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flow-spec";

    return path_buffer.str();

}

EntityPath Rsvp::RsbBriefs::RsbBrief::FlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_average_rate.is_set || is_set(flow_average_rate.operation)) leaf_name_data.push_back(flow_average_rate.get_name_leafdata());
    if (flow_max_burst.is_set || is_set(flow_max_burst.operation)) leaf_name_data.push_back(flow_max_burst.get_name_leafdata());
    if (flow_max_unit.is_set || is_set(flow_max_unit.operation)) leaf_name_data.push_back(flow_max_unit.get_name_leafdata());
    if (flow_min_unit.is_set || is_set(flow_min_unit.operation)) leaf_name_data.push_back(flow_min_unit.get_name_leafdata());
    if (flow_peak_rate.is_set || is_set(flow_peak_rate.operation)) leaf_name_data.push_back(flow_peak_rate.get_name_leafdata());
    if (flow_qos.is_set || is_set(flow_qos.operation)) leaf_name_data.push_back(flow_qos.get_name_leafdata());
    if (flow_requested_rate.is_set || is_set(flow_requested_rate.operation)) leaf_name_data.push_back(flow_requested_rate.get_name_leafdata());
    if (flow_slack.is_set || is_set(flow_slack.operation)) leaf_name_data.push_back(flow_slack.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbBriefs::RsbBrief::FlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbBriefs::RsbBrief::FlowSpec::get_children()
{
    return children;
}

void Rsvp::RsbBriefs::RsbBrief::FlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-average-rate")
    {
        flow_average_rate = value;
    }
    if(value_path == "flow-max-burst")
    {
        flow_max_burst = value;
    }
    if(value_path == "flow-max-unit")
    {
        flow_max_unit = value;
    }
    if(value_path == "flow-min-unit")
    {
        flow_min_unit = value;
    }
    if(value_path == "flow-peak-rate")
    {
        flow_peak_rate = value;
    }
    if(value_path == "flow-qos")
    {
        flow_qos = value;
    }
    if(value_path == "flow-requested-rate")
    {
        flow_requested_rate = value;
    }
    if(value_path == "flow-slack")
    {
        flow_slack = value;
    }
}

Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec::G709OtnFlowSpec()
    :
    	flow_bit_rate{YType::uint64, "flow-bit-rate"},
	 flow_multiplier{YType::uint16, "flow-multiplier"},
	 flow_nvc{YType::uint16, "flow-nvc"},
	 flow_signal_type{YType::uint8, "flow-signal-type"}
{
    yang_name = "g709otn-flow-spec"; yang_parent_name = "generic-flow-spec";
}

Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec::~G709OtnFlowSpec()
{
}

bool Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec::has_data() const
{
    return flow_bit_rate.is_set
	|| flow_multiplier.is_set
	|| flow_nvc.is_set
	|| flow_signal_type.is_set;
}

bool Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_bit_rate.operation)
	|| is_set(flow_multiplier.operation)
	|| is_set(flow_nvc.operation)
	|| is_set(flow_signal_type.operation);
}

std::string Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-flow-spec";

    return path_buffer.str();

}

EntityPath Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/generic-flow-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_bit_rate.is_set || is_set(flow_bit_rate.operation)) leaf_name_data.push_back(flow_bit_rate.get_name_leafdata());
    if (flow_multiplier.is_set || is_set(flow_multiplier.operation)) leaf_name_data.push_back(flow_multiplier.get_name_leafdata());
    if (flow_nvc.is_set || is_set(flow_nvc.operation)) leaf_name_data.push_back(flow_nvc.get_name_leafdata());
    if (flow_signal_type.is_set || is_set(flow_signal_type.operation)) leaf_name_data.push_back(flow_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec::get_children()
{
    return children;
}

void Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-bit-rate")
    {
        flow_bit_rate = value;
    }
    if(value_path == "flow-multiplier")
    {
        flow_multiplier = value;
    }
    if(value_path == "flow-nvc")
    {
        flow_nvc = value;
    }
    if(value_path == "flow-signal-type")
    {
        flow_signal_type = value;
    }
}

Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::GenericFlowSpec()
    :
    	flow_spec_type{YType::enumeration, "flow-spec-type"}
    	,
    g709otn_flow_spec(std::make_unique<Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec>())
{
    g709otn_flow_spec->parent = this;
    children["g709otn-flow-spec"] = g709otn_flow_spec.get();

    yang_name = "generic-flow-spec"; yang_parent_name = "rsb-brief";
}

Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::~GenericFlowSpec()
{
}

bool Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::has_data() const
{
    return flow_spec_type.is_set
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_data());
}

bool Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_spec_type.operation)
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_operation());
}

std::string Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-flow-spec";

    return path_buffer.str();

}

EntityPath Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_spec_type.is_set || is_set(flow_spec_type.operation)) leaf_name_data.push_back(flow_spec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-flow-spec")
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        else
        {
            g709otn_flow_spec = std::make_unique<Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::G709OtnFlowSpec>();
            g709otn_flow_spec->parent = this;
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        return children.at("g709otn-flow-spec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::get_children()
{
    if(children.find("g709otn-flow-spec") == children.end())
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
    }

    return children;
}

void Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-spec-type")
    {
        flow_spec_type = value;
    }
}

Rsvp::RsbBriefs::RsbBrief::Style::Style()
    :
    	reservation_type{YType::enumeration, "reservation-type"}
{
    yang_name = "style"; yang_parent_name = "rsb-brief";
}

Rsvp::RsbBriefs::RsbBrief::Style::~Style()
{
}

bool Rsvp::RsbBriefs::RsbBrief::Style::has_data() const
{
    return reservation_type.is_set;
}

bool Rsvp::RsbBriefs::RsbBrief::Style::has_operation() const
{
    return is_set(operation)
	|| is_set(reservation_type.operation);
}

std::string Rsvp::RsbBriefs::RsbBrief::Style::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "style";

    return path_buffer.str();

}

EntityPath Rsvp::RsbBriefs::RsbBrief::Style::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (reservation_type.is_set || is_set(reservation_type.operation)) leaf_name_data.push_back(reservation_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbBriefs::RsbBrief::Style::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbBriefs::RsbBrief::Style::get_children()
{
    return children;
}

void Rsvp::RsbBriefs::RsbBrief::Style::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "reservation-type")
    {
        reservation_type = value;
    }
}

Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session::UdpIpv4Session()
    :
    	source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"}
{
    yang_name = "udp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session::~UdpIpv4Session()
{
}

bool Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session::has_data() const
{
    return source_address.is_set
	|| source_port.is_set;
}

bool Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation);
}

std::string Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "udp-ipv4-session";

    return path_buffer.str();

}

EntityPath Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/filter/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session::get_children()
{
    return children;
}

void Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
}

Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session::P2MpIpv4Session()
    :
    	p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"},
	 sub_group_id{YType::uint16, "sub-group-id"}
{
    yang_name = "p2mp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session::~P2MpIpv4Session()
{
}

bool Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session::has_data() const
{
    return p2mp_sub_group_origin.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set;
}

bool Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation);
}

std::string Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "p2mp-ipv4-session";

    return path_buffer.str();

}

EntityPath Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/filter/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session::get_children()
{
    return children;
}

void Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
}

Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::RsvpFilter()
    :
    	filter_type{YType::enumeration, "filter-type"}
    	,
    p2mp_ipv4_session(std::make_unique<Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session>())
	,udp_ipv4_session(std::make_unique<Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session>())
{
    p2mp_ipv4_session->parent = this;
    children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();

    udp_ipv4_session->parent = this;
    children["udp-ipv4-session"] = udp_ipv4_session.get();

    yang_name = "rsvp-filter"; yang_parent_name = "filter";
}

Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::~RsvpFilter()
{
}

bool Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::has_data() const
{
    return filter_type.is_set
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_data())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_data());
}

bool Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::has_operation() const
{
    return is_set(operation)
	|| is_set(filter_type.operation)
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_operation())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_operation());
}

std::string Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-filter";

    return path_buffer.str();

}

EntityPath Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (filter_type.is_set || is_set(filter_type.operation)) leaf_name_data.push_back(filter_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "p2mp-ipv4-session")
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        else
        {
            p2mp_ipv4_session = std::make_unique<Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::P2MpIpv4Session>();
            p2mp_ipv4_session->parent = this;
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        return children.at("p2mp-ipv4-session");
    }

    if(child_yang_name == "udp-ipv4-session")
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        else
        {
            udp_ipv4_session = std::make_unique<Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::UdpIpv4Session>();
            udp_ipv4_session->parent = this;
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        return children.at("udp-ipv4-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::get_children()
{
    if(children.find("p2mp-ipv4-session") == children.end())
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
    }

    if(children.find("udp-ipv4-session") == children.end())
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
    }

    return children;
}

void Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "filter-type")
    {
        filter_type = value;
    }
}

Rsvp::RsbBriefs::RsbBrief::Filter::Filter()
    :
    rsvp_filter(std::make_unique<Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter>())
{
    rsvp_filter->parent = this;
    children["rsvp-filter"] = rsvp_filter.get();

    yang_name = "filter"; yang_parent_name = "rsb-brief";
}

Rsvp::RsbBriefs::RsbBrief::Filter::~Filter()
{
}

bool Rsvp::RsbBriefs::RsbBrief::Filter::has_data() const
{
    return (rsvp_filter !=  nullptr && rsvp_filter->has_data());
}

bool Rsvp::RsbBriefs::RsbBrief::Filter::has_operation() const
{
    return is_set(operation)
	|| (rsvp_filter !=  nullptr && rsvp_filter->has_operation());
}

std::string Rsvp::RsbBriefs::RsbBrief::Filter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "filter";

    return path_buffer.str();

}

EntityPath Rsvp::RsbBriefs::RsbBrief::Filter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbBriefs::RsbBrief::Filter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-filter")
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
        else
        {
            rsvp_filter = std::make_unique<Rsvp::RsbBriefs::RsbBrief::Filter::RsvpFilter>();
            rsvp_filter->parent = this;
            children["rsvp-filter"] = rsvp_filter.get();
        }
        return children.at("rsvp-filter");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbBriefs::RsbBrief::Filter::get_children()
{
    if(children.find("rsvp-filter") == children.end())
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
    }

    return children;
}

void Rsvp::RsbBriefs::RsbBrief::Filter::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::RsbBriefs::RsbBrief::RsbBrief()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 input_interface{YType::str, "input-interface"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 protocol{YType::int32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::int32, "source-port"},
	 sub_group_id{YType::int32, "sub-group-id"},
	 sub_group_origin{YType::str, "sub-group-origin"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    filter(std::make_unique<Rsvp::RsbBriefs::RsbBrief::Filter>())
	,flow_spec(std::make_unique<Rsvp::RsbBriefs::RsbBrief::FlowSpec>())
	,generic_flow_spec(std::make_unique<Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec>())
	,s2l_sub_lsp(std::make_unique<Rsvp::RsbBriefs::RsbBrief::S2LSubLsp>())
	,session(std::make_unique<Rsvp::RsbBriefs::RsbBrief::Session>())
	,style(std::make_unique<Rsvp::RsbBriefs::RsbBrief::Style>())
{
    filter->parent = this;
    children["filter"] = filter.get();

    flow_spec->parent = this;
    children["flow-spec"] = flow_spec.get();

    generic_flow_spec->parent = this;
    children["generic-flow-spec"] = generic_flow_spec.get();

    s2l_sub_lsp->parent = this;
    children["s2l-sub-lsp"] = s2l_sub_lsp.get();

    session->parent = this;
    children["session"] = session.get();

    style->parent = this;
    children["style"] = style.get();

    yang_name = "rsb-brief"; yang_parent_name = "rsb-briefs";
}

Rsvp::RsbBriefs::RsbBrief::~RsbBrief()
{
}

bool Rsvp::RsbBriefs::RsbBrief::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| extended_tunnel_id.is_set
	|| input_interface.is_set
	|| p2mp_id.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set
	|| sub_group_origin.is_set
	|| vrf_name.is_set
	|| (filter !=  nullptr && filter->has_data())
	|| (flow_spec !=  nullptr && flow_spec->has_data())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_data())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_data())
	|| (session !=  nullptr && session->has_data())
	|| (style !=  nullptr && style->has_data());
}

bool Rsvp::RsbBriefs::RsbBrief::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(input_interface.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(sub_group_origin.operation)
	|| is_set(vrf_name.operation)
	|| (filter !=  nullptr && filter->has_operation())
	|| (flow_spec !=  nullptr && flow_spec->has_operation())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_operation())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_operation())
	|| (session !=  nullptr && session->has_operation())
	|| (style !=  nullptr && style->has_operation());
}

std::string Rsvp::RsbBriefs::RsbBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsb-brief";

    return path_buffer.str();

}

EntityPath Rsvp::RsbBriefs::RsbBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (input_interface.is_set || is_set(input_interface.operation)) leaf_name_data.push_back(input_interface.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (sub_group_origin.is_set || is_set(sub_group_origin.operation)) leaf_name_data.push_back(sub_group_origin.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbBriefs::RsbBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "filter")
    {
        if(filter != nullptr)
        {
            children["filter"] = filter.get();
        }
        else
        {
            filter = std::make_unique<Rsvp::RsbBriefs::RsbBrief::Filter>();
            filter->parent = this;
            children["filter"] = filter.get();
        }
        return children.at("filter");
    }

    if(child_yang_name == "flow-spec")
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
        else
        {
            flow_spec = std::make_unique<Rsvp::RsbBriefs::RsbBrief::FlowSpec>();
            flow_spec->parent = this;
            children["flow-spec"] = flow_spec.get();
        }
        return children.at("flow-spec");
    }

    if(child_yang_name == "generic-flow-spec")
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        else
        {
            generic_flow_spec = std::make_unique<Rsvp::RsbBriefs::RsbBrief::GenericFlowSpec>();
            generic_flow_spec->parent = this;
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        return children.at("generic-flow-spec");
    }

    if(child_yang_name == "s2l-sub-lsp")
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        else
        {
            s2l_sub_lsp = std::make_unique<Rsvp::RsbBriefs::RsbBrief::S2LSubLsp>();
            s2l_sub_lsp->parent = this;
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        return children.at("s2l-sub-lsp");
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<Rsvp::RsbBriefs::RsbBrief::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    if(child_yang_name == "style")
    {
        if(style != nullptr)
        {
            children["style"] = style.get();
        }
        else
        {
            style = std::make_unique<Rsvp::RsbBriefs::RsbBrief::Style>();
            style->parent = this;
            children["style"] = style.get();
        }
        return children.at("style");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbBriefs::RsbBrief::get_children()
{
    if(children.find("filter") == children.end())
    {
        if(filter != nullptr)
        {
            children["filter"] = filter.get();
        }
    }

    if(children.find("flow-spec") == children.end())
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
    }

    if(children.find("generic-flow-spec") == children.end())
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
    }

    if(children.find("s2l-sub-lsp") == children.end())
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
    }

    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    if(children.find("style") == children.end())
    {
        if(style != nullptr)
        {
            children["style"] = style.get();
        }
    }

    return children;
}

void Rsvp::RsbBriefs::RsbBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "input-interface")
    {
        input_interface = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "sub-group-origin")
    {
        sub_group_origin = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

Rsvp::RsbBriefs::RsbBriefs()
{
    yang_name = "rsb-briefs"; yang_parent_name = "rsvp";
}

Rsvp::RsbBriefs::~RsbBriefs()
{
}

bool Rsvp::RsbBriefs::has_data() const
{
    for (std::size_t index=0; index<rsb_brief.size(); index++)
    {
        if(rsb_brief[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::RsbBriefs::has_operation() const
{
    for (std::size_t index=0; index<rsb_brief.size(); index++)
    {
        if(rsb_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::RsbBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsb-briefs";

    return path_buffer.str();

}

EntityPath Rsvp::RsbBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RsbBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsb-brief")
    {
        for(auto const & c : rsb_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::RsbBriefs::RsbBrief>();
        c->parent = this;
        rsb_brief.push_back(std::move(c));
        children[segment_path] = rsb_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RsbBriefs::get_children()
{
    for (auto const & c : rsb_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::RsbBriefs::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::OpenConfig::GlobalCounters::GlobalCounters()
    :
    	in_ack_messages{YType::uint64, "in-ack-messages"},
	 in_hello_messages{YType::uint64, "in-hello-messages"},
	 in_path_error_messages{YType::uint64, "in-path-error-messages"},
	 in_path_messages{YType::uint64, "in-path-messages"},
	 in_path_tear_messages{YType::uint64, "in-path-tear-messages"},
	 in_reservation_error_messages{YType::uint64, "in-reservation-error-messages"},
	 in_reservation_messages{YType::uint64, "in-reservation-messages"},
	 in_reservation_tear_messages{YType::uint64, "in-reservation-tear-messages"},
	 in_srefresh_messages{YType::uint64, "in-srefresh-messages"},
	 out_ack_messages{YType::uint64, "out-ack-messages"},
	 out_hello_messages{YType::uint64, "out-hello-messages"},
	 out_path_error_messages{YType::uint64, "out-path-error-messages"},
	 out_path_messages{YType::uint64, "out-path-messages"},
	 out_path_tear_messages{YType::uint64, "out-path-tear-messages"},
	 out_reservation_error_messages{YType::uint64, "out-reservation-error-messages"},
	 out_reservation_messages{YType::uint64, "out-reservation-messages"},
	 out_reservation_tear_messages{YType::uint64, "out-reservation-tear-messages"},
	 out_srefresh_messages{YType::uint64, "out-srefresh-messages"},
	 path_timeouts{YType::uint64, "path-timeouts"},
	 rate_limited_messages{YType::uint64, "rate-limited-messages"},
	 reservation_timeouts{YType::uint64, "reservation-timeouts"}
{
    yang_name = "global-counters"; yang_parent_name = "open-config";
}

Rsvp::OpenConfig::GlobalCounters::~GlobalCounters()
{
}

bool Rsvp::OpenConfig::GlobalCounters::has_data() const
{
    return in_ack_messages.is_set
	|| in_hello_messages.is_set
	|| in_path_error_messages.is_set
	|| in_path_messages.is_set
	|| in_path_tear_messages.is_set
	|| in_reservation_error_messages.is_set
	|| in_reservation_messages.is_set
	|| in_reservation_tear_messages.is_set
	|| in_srefresh_messages.is_set
	|| out_ack_messages.is_set
	|| out_hello_messages.is_set
	|| out_path_error_messages.is_set
	|| out_path_messages.is_set
	|| out_path_tear_messages.is_set
	|| out_reservation_error_messages.is_set
	|| out_reservation_messages.is_set
	|| out_reservation_tear_messages.is_set
	|| out_srefresh_messages.is_set
	|| path_timeouts.is_set
	|| rate_limited_messages.is_set
	|| reservation_timeouts.is_set;
}

bool Rsvp::OpenConfig::GlobalCounters::has_operation() const
{
    return is_set(operation)
	|| is_set(in_ack_messages.operation)
	|| is_set(in_hello_messages.operation)
	|| is_set(in_path_error_messages.operation)
	|| is_set(in_path_messages.operation)
	|| is_set(in_path_tear_messages.operation)
	|| is_set(in_reservation_error_messages.operation)
	|| is_set(in_reservation_messages.operation)
	|| is_set(in_reservation_tear_messages.operation)
	|| is_set(in_srefresh_messages.operation)
	|| is_set(out_ack_messages.operation)
	|| is_set(out_hello_messages.operation)
	|| is_set(out_path_error_messages.operation)
	|| is_set(out_path_messages.operation)
	|| is_set(out_path_tear_messages.operation)
	|| is_set(out_reservation_error_messages.operation)
	|| is_set(out_reservation_messages.operation)
	|| is_set(out_reservation_tear_messages.operation)
	|| is_set(out_srefresh_messages.operation)
	|| is_set(path_timeouts.operation)
	|| is_set(rate_limited_messages.operation)
	|| is_set(reservation_timeouts.operation);
}

std::string Rsvp::OpenConfig::GlobalCounters::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "global-counters";

    return path_buffer.str();

}

EntityPath Rsvp::OpenConfig::GlobalCounters::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/open-config/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (in_ack_messages.is_set || is_set(in_ack_messages.operation)) leaf_name_data.push_back(in_ack_messages.get_name_leafdata());
    if (in_hello_messages.is_set || is_set(in_hello_messages.operation)) leaf_name_data.push_back(in_hello_messages.get_name_leafdata());
    if (in_path_error_messages.is_set || is_set(in_path_error_messages.operation)) leaf_name_data.push_back(in_path_error_messages.get_name_leafdata());
    if (in_path_messages.is_set || is_set(in_path_messages.operation)) leaf_name_data.push_back(in_path_messages.get_name_leafdata());
    if (in_path_tear_messages.is_set || is_set(in_path_tear_messages.operation)) leaf_name_data.push_back(in_path_tear_messages.get_name_leafdata());
    if (in_reservation_error_messages.is_set || is_set(in_reservation_error_messages.operation)) leaf_name_data.push_back(in_reservation_error_messages.get_name_leafdata());
    if (in_reservation_messages.is_set || is_set(in_reservation_messages.operation)) leaf_name_data.push_back(in_reservation_messages.get_name_leafdata());
    if (in_reservation_tear_messages.is_set || is_set(in_reservation_tear_messages.operation)) leaf_name_data.push_back(in_reservation_tear_messages.get_name_leafdata());
    if (in_srefresh_messages.is_set || is_set(in_srefresh_messages.operation)) leaf_name_data.push_back(in_srefresh_messages.get_name_leafdata());
    if (out_ack_messages.is_set || is_set(out_ack_messages.operation)) leaf_name_data.push_back(out_ack_messages.get_name_leafdata());
    if (out_hello_messages.is_set || is_set(out_hello_messages.operation)) leaf_name_data.push_back(out_hello_messages.get_name_leafdata());
    if (out_path_error_messages.is_set || is_set(out_path_error_messages.operation)) leaf_name_data.push_back(out_path_error_messages.get_name_leafdata());
    if (out_path_messages.is_set || is_set(out_path_messages.operation)) leaf_name_data.push_back(out_path_messages.get_name_leafdata());
    if (out_path_tear_messages.is_set || is_set(out_path_tear_messages.operation)) leaf_name_data.push_back(out_path_tear_messages.get_name_leafdata());
    if (out_reservation_error_messages.is_set || is_set(out_reservation_error_messages.operation)) leaf_name_data.push_back(out_reservation_error_messages.get_name_leafdata());
    if (out_reservation_messages.is_set || is_set(out_reservation_messages.operation)) leaf_name_data.push_back(out_reservation_messages.get_name_leafdata());
    if (out_reservation_tear_messages.is_set || is_set(out_reservation_tear_messages.operation)) leaf_name_data.push_back(out_reservation_tear_messages.get_name_leafdata());
    if (out_srefresh_messages.is_set || is_set(out_srefresh_messages.operation)) leaf_name_data.push_back(out_srefresh_messages.get_name_leafdata());
    if (path_timeouts.is_set || is_set(path_timeouts.operation)) leaf_name_data.push_back(path_timeouts.get_name_leafdata());
    if (rate_limited_messages.is_set || is_set(rate_limited_messages.operation)) leaf_name_data.push_back(rate_limited_messages.get_name_leafdata());
    if (reservation_timeouts.is_set || is_set(reservation_timeouts.operation)) leaf_name_data.push_back(reservation_timeouts.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::OpenConfig::GlobalCounters::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::OpenConfig::GlobalCounters::get_children()
{
    return children;
}

void Rsvp::OpenConfig::GlobalCounters::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "in-ack-messages")
    {
        in_ack_messages = value;
    }
    if(value_path == "in-hello-messages")
    {
        in_hello_messages = value;
    }
    if(value_path == "in-path-error-messages")
    {
        in_path_error_messages = value;
    }
    if(value_path == "in-path-messages")
    {
        in_path_messages = value;
    }
    if(value_path == "in-path-tear-messages")
    {
        in_path_tear_messages = value;
    }
    if(value_path == "in-reservation-error-messages")
    {
        in_reservation_error_messages = value;
    }
    if(value_path == "in-reservation-messages")
    {
        in_reservation_messages = value;
    }
    if(value_path == "in-reservation-tear-messages")
    {
        in_reservation_tear_messages = value;
    }
    if(value_path == "in-srefresh-messages")
    {
        in_srefresh_messages = value;
    }
    if(value_path == "out-ack-messages")
    {
        out_ack_messages = value;
    }
    if(value_path == "out-hello-messages")
    {
        out_hello_messages = value;
    }
    if(value_path == "out-path-error-messages")
    {
        out_path_error_messages = value;
    }
    if(value_path == "out-path-messages")
    {
        out_path_messages = value;
    }
    if(value_path == "out-path-tear-messages")
    {
        out_path_tear_messages = value;
    }
    if(value_path == "out-reservation-error-messages")
    {
        out_reservation_error_messages = value;
    }
    if(value_path == "out-reservation-messages")
    {
        out_reservation_messages = value;
    }
    if(value_path == "out-reservation-tear-messages")
    {
        out_reservation_tear_messages = value;
    }
    if(value_path == "out-srefresh-messages")
    {
        out_srefresh_messages = value;
    }
    if(value_path == "path-timeouts")
    {
        path_timeouts = value;
    }
    if(value_path == "rate-limited-messages")
    {
        rate_limited_messages = value;
    }
    if(value_path == "reservation-timeouts")
    {
        reservation_timeouts = value;
    }
}

Rsvp::OpenConfig::InterfaceCounters::InterfaceCounter::InterfaceCounter()
    :
    	interface_name{YType::str, "interface-name"},
	 in_ack_messages{YType::uint64, "in-ack-messages"},
	 in_hello_messages{YType::uint64, "in-hello-messages"},
	 in_path_error_messages{YType::uint64, "in-path-error-messages"},
	 in_path_messages{YType::uint64, "in-path-messages"},
	 in_path_tear_messages{YType::uint64, "in-path-tear-messages"},
	 in_reservation_error_messages{YType::uint64, "in-reservation-error-messages"},
	 in_reservation_messages{YType::uint64, "in-reservation-messages"},
	 in_reservation_tear_messages{YType::uint64, "in-reservation-tear-messages"},
	 in_srefresh_messages{YType::uint64, "in-srefresh-messages"},
	 interface_name_xr{YType::str, "interface-name-xr"},
	 out_ack_messages{YType::uint64, "out-ack-messages"},
	 out_hello_messages{YType::uint64, "out-hello-messages"},
	 out_path_error_messages{YType::uint64, "out-path-error-messages"},
	 out_path_messages{YType::uint64, "out-path-messages"},
	 out_path_tear_messages{YType::uint64, "out-path-tear-messages"},
	 out_reservation_error_messages{YType::uint64, "out-reservation-error-messages"},
	 out_reservation_messages{YType::uint64, "out-reservation-messages"},
	 out_reservation_tear_messages{YType::uint64, "out-reservation-tear-messages"},
	 out_srefresh_messages{YType::uint64, "out-srefresh-messages"}
{
    yang_name = "interface-counter"; yang_parent_name = "interface-counters";
}

Rsvp::OpenConfig::InterfaceCounters::InterfaceCounter::~InterfaceCounter()
{
}

bool Rsvp::OpenConfig::InterfaceCounters::InterfaceCounter::has_data() const
{
    return interface_name.is_set
	|| in_ack_messages.is_set
	|| in_hello_messages.is_set
	|| in_path_error_messages.is_set
	|| in_path_messages.is_set
	|| in_path_tear_messages.is_set
	|| in_reservation_error_messages.is_set
	|| in_reservation_messages.is_set
	|| in_reservation_tear_messages.is_set
	|| in_srefresh_messages.is_set
	|| interface_name_xr.is_set
	|| out_ack_messages.is_set
	|| out_hello_messages.is_set
	|| out_path_error_messages.is_set
	|| out_path_messages.is_set
	|| out_path_tear_messages.is_set
	|| out_reservation_error_messages.is_set
	|| out_reservation_messages.is_set
	|| out_reservation_tear_messages.is_set
	|| out_srefresh_messages.is_set;
}

bool Rsvp::OpenConfig::InterfaceCounters::InterfaceCounter::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| is_set(in_ack_messages.operation)
	|| is_set(in_hello_messages.operation)
	|| is_set(in_path_error_messages.operation)
	|| is_set(in_path_messages.operation)
	|| is_set(in_path_tear_messages.operation)
	|| is_set(in_reservation_error_messages.operation)
	|| is_set(in_reservation_messages.operation)
	|| is_set(in_reservation_tear_messages.operation)
	|| is_set(in_srefresh_messages.operation)
	|| is_set(interface_name_xr.operation)
	|| is_set(out_ack_messages.operation)
	|| is_set(out_hello_messages.operation)
	|| is_set(out_path_error_messages.operation)
	|| is_set(out_path_messages.operation)
	|| is_set(out_path_tear_messages.operation)
	|| is_set(out_reservation_error_messages.operation)
	|| is_set(out_reservation_messages.operation)
	|| is_set(out_reservation_tear_messages.operation)
	|| is_set(out_srefresh_messages.operation);
}

std::string Rsvp::OpenConfig::InterfaceCounters::InterfaceCounter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-counter" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::OpenConfig::InterfaceCounters::InterfaceCounter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/open-config/interface-counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (in_ack_messages.is_set || is_set(in_ack_messages.operation)) leaf_name_data.push_back(in_ack_messages.get_name_leafdata());
    if (in_hello_messages.is_set || is_set(in_hello_messages.operation)) leaf_name_data.push_back(in_hello_messages.get_name_leafdata());
    if (in_path_error_messages.is_set || is_set(in_path_error_messages.operation)) leaf_name_data.push_back(in_path_error_messages.get_name_leafdata());
    if (in_path_messages.is_set || is_set(in_path_messages.operation)) leaf_name_data.push_back(in_path_messages.get_name_leafdata());
    if (in_path_tear_messages.is_set || is_set(in_path_tear_messages.operation)) leaf_name_data.push_back(in_path_tear_messages.get_name_leafdata());
    if (in_reservation_error_messages.is_set || is_set(in_reservation_error_messages.operation)) leaf_name_data.push_back(in_reservation_error_messages.get_name_leafdata());
    if (in_reservation_messages.is_set || is_set(in_reservation_messages.operation)) leaf_name_data.push_back(in_reservation_messages.get_name_leafdata());
    if (in_reservation_tear_messages.is_set || is_set(in_reservation_tear_messages.operation)) leaf_name_data.push_back(in_reservation_tear_messages.get_name_leafdata());
    if (in_srefresh_messages.is_set || is_set(in_srefresh_messages.operation)) leaf_name_data.push_back(in_srefresh_messages.get_name_leafdata());
    if (interface_name_xr.is_set || is_set(interface_name_xr.operation)) leaf_name_data.push_back(interface_name_xr.get_name_leafdata());
    if (out_ack_messages.is_set || is_set(out_ack_messages.operation)) leaf_name_data.push_back(out_ack_messages.get_name_leafdata());
    if (out_hello_messages.is_set || is_set(out_hello_messages.operation)) leaf_name_data.push_back(out_hello_messages.get_name_leafdata());
    if (out_path_error_messages.is_set || is_set(out_path_error_messages.operation)) leaf_name_data.push_back(out_path_error_messages.get_name_leafdata());
    if (out_path_messages.is_set || is_set(out_path_messages.operation)) leaf_name_data.push_back(out_path_messages.get_name_leafdata());
    if (out_path_tear_messages.is_set || is_set(out_path_tear_messages.operation)) leaf_name_data.push_back(out_path_tear_messages.get_name_leafdata());
    if (out_reservation_error_messages.is_set || is_set(out_reservation_error_messages.operation)) leaf_name_data.push_back(out_reservation_error_messages.get_name_leafdata());
    if (out_reservation_messages.is_set || is_set(out_reservation_messages.operation)) leaf_name_data.push_back(out_reservation_messages.get_name_leafdata());
    if (out_reservation_tear_messages.is_set || is_set(out_reservation_tear_messages.operation)) leaf_name_data.push_back(out_reservation_tear_messages.get_name_leafdata());
    if (out_srefresh_messages.is_set || is_set(out_srefresh_messages.operation)) leaf_name_data.push_back(out_srefresh_messages.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::OpenConfig::InterfaceCounters::InterfaceCounter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::OpenConfig::InterfaceCounters::InterfaceCounter::get_children()
{
    return children;
}

void Rsvp::OpenConfig::InterfaceCounters::InterfaceCounter::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "in-ack-messages")
    {
        in_ack_messages = value;
    }
    if(value_path == "in-hello-messages")
    {
        in_hello_messages = value;
    }
    if(value_path == "in-path-error-messages")
    {
        in_path_error_messages = value;
    }
    if(value_path == "in-path-messages")
    {
        in_path_messages = value;
    }
    if(value_path == "in-path-tear-messages")
    {
        in_path_tear_messages = value;
    }
    if(value_path == "in-reservation-error-messages")
    {
        in_reservation_error_messages = value;
    }
    if(value_path == "in-reservation-messages")
    {
        in_reservation_messages = value;
    }
    if(value_path == "in-reservation-tear-messages")
    {
        in_reservation_tear_messages = value;
    }
    if(value_path == "in-srefresh-messages")
    {
        in_srefresh_messages = value;
    }
    if(value_path == "interface-name-xr")
    {
        interface_name_xr = value;
    }
    if(value_path == "out-ack-messages")
    {
        out_ack_messages = value;
    }
    if(value_path == "out-hello-messages")
    {
        out_hello_messages = value;
    }
    if(value_path == "out-path-error-messages")
    {
        out_path_error_messages = value;
    }
    if(value_path == "out-path-messages")
    {
        out_path_messages = value;
    }
    if(value_path == "out-path-tear-messages")
    {
        out_path_tear_messages = value;
    }
    if(value_path == "out-reservation-error-messages")
    {
        out_reservation_error_messages = value;
    }
    if(value_path == "out-reservation-messages")
    {
        out_reservation_messages = value;
    }
    if(value_path == "out-reservation-tear-messages")
    {
        out_reservation_tear_messages = value;
    }
    if(value_path == "out-srefresh-messages")
    {
        out_srefresh_messages = value;
    }
}

Rsvp::OpenConfig::InterfaceCounters::InterfaceCounters()
{
    yang_name = "interface-counters"; yang_parent_name = "open-config";
}

Rsvp::OpenConfig::InterfaceCounters::~InterfaceCounters()
{
}

bool Rsvp::OpenConfig::InterfaceCounters::has_data() const
{
    for (std::size_t index=0; index<interface_counter.size(); index++)
    {
        if(interface_counter[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::OpenConfig::InterfaceCounters::has_operation() const
{
    for (std::size_t index=0; index<interface_counter.size(); index++)
    {
        if(interface_counter[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::OpenConfig::InterfaceCounters::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-counters";

    return path_buffer.str();

}

EntityPath Rsvp::OpenConfig::InterfaceCounters::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/open-config/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::OpenConfig::InterfaceCounters::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-counter")
    {
        for(auto const & c : interface_counter)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::OpenConfig::InterfaceCounters::InterfaceCounter>();
        c->parent = this;
        interface_counter.push_back(std::move(c));
        children[segment_path] = interface_counter.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::OpenConfig::InterfaceCounters::get_children()
{
    for (auto const & c : interface_counter)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::OpenConfig::InterfaceCounters::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::OpenConfig::OpenConfig()
    :
    global_counters(std::make_unique<Rsvp::OpenConfig::GlobalCounters>())
	,interface_counters(std::make_unique<Rsvp::OpenConfig::InterfaceCounters>())
{
    global_counters->parent = this;
    children["global-counters"] = global_counters.get();

    interface_counters->parent = this;
    children["interface-counters"] = interface_counters.get();

    yang_name = "open-config"; yang_parent_name = "rsvp";
}

Rsvp::OpenConfig::~OpenConfig()
{
}

bool Rsvp::OpenConfig::has_data() const
{
    return (global_counters !=  nullptr && global_counters->has_data())
	|| (interface_counters !=  nullptr && interface_counters->has_data());
}

bool Rsvp::OpenConfig::has_operation() const
{
    return is_set(operation)
	|| (global_counters !=  nullptr && global_counters->has_operation())
	|| (interface_counters !=  nullptr && interface_counters->has_operation());
}

std::string Rsvp::OpenConfig::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "open-config";

    return path_buffer.str();

}

EntityPath Rsvp::OpenConfig::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::OpenConfig::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "global-counters")
    {
        if(global_counters != nullptr)
        {
            children["global-counters"] = global_counters.get();
        }
        else
        {
            global_counters = std::make_unique<Rsvp::OpenConfig::GlobalCounters>();
            global_counters->parent = this;
            children["global-counters"] = global_counters.get();
        }
        return children.at("global-counters");
    }

    if(child_yang_name == "interface-counters")
    {
        if(interface_counters != nullptr)
        {
            children["interface-counters"] = interface_counters.get();
        }
        else
        {
            interface_counters = std::make_unique<Rsvp::OpenConfig::InterfaceCounters>();
            interface_counters->parent = this;
            children["interface-counters"] = interface_counters.get();
        }
        return children.at("interface-counters");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::OpenConfig::get_children()
{
    if(children.find("global-counters") == children.end())
    {
        if(global_counters != nullptr)
        {
            children["global-counters"] = global_counters.get();
        }
    }

    if(children.find("interface-counters") == children.end())
    {
        if(interface_counters != nullptr)
        {
            children["interface-counters"] = interface_counters.get();
        }
    }

    return children;
}

void Rsvp::OpenConfig::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages::ReceivedMessages()
    :
    	ack{YType::uint32, "ack"},
	 bundle{YType::uint32, "bundle"},
	 challenge{YType::uint32, "challenge"},
	 hello{YType::uint32, "hello"},
	 path{YType::uint32, "path"},
	 path_error{YType::uint32, "path-error"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation{YType::uint32, "reservation"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 reservation_error{YType::uint32, "reservation-error"},
	 reservation_tear{YType::uint32, "reservation-tear"},
	 response{YType::uint32, "response"},
	 srefresh{YType::uint32, "srefresh"}
{
    yang_name = "received-messages"; yang_parent_name = "interface-message";
}

Rsvp::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages::~ReceivedMessages()
{
}

bool Rsvp::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages::has_data() const
{
    return ack.is_set
	|| bundle.is_set
	|| challenge.is_set
	|| hello.is_set
	|| path.is_set
	|| path_error.is_set
	|| path_tear.is_set
	|| reservation.is_set
	|| reservation_confirm.is_set
	|| reservation_error.is_set
	|| reservation_tear.is_set
	|| response.is_set
	|| srefresh.is_set;
}

bool Rsvp::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(ack.operation)
	|| is_set(bundle.operation)
	|| is_set(challenge.operation)
	|| is_set(hello.operation)
	|| is_set(path.operation)
	|| is_set(path_error.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(reservation_error.operation)
	|| is_set(reservation_tear.operation)
	|| is_set(response.operation)
	|| is_set(srefresh.operation);
}

std::string Rsvp::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "received-messages";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ack.is_set || is_set(ack.operation)) leaf_name_data.push_back(ack.get_name_leafdata());
    if (bundle.is_set || is_set(bundle.operation)) leaf_name_data.push_back(bundle.get_name_leafdata());
    if (challenge.is_set || is_set(challenge.operation)) leaf_name_data.push_back(challenge.get_name_leafdata());
    if (hello.is_set || is_set(hello.operation)) leaf_name_data.push_back(hello.get_name_leafdata());
    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_error.is_set || is_set(path_error.operation)) leaf_name_data.push_back(path_error.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation.is_set || is_set(reservation.operation)) leaf_name_data.push_back(reservation.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (reservation_error.is_set || is_set(reservation_error.operation)) leaf_name_data.push_back(reservation_error.get_name_leafdata());
    if (reservation_tear.is_set || is_set(reservation_tear.operation)) leaf_name_data.push_back(reservation_tear.get_name_leafdata());
    if (response.is_set || is_set(response.operation)) leaf_name_data.push_back(response.get_name_leafdata());
    if (srefresh.is_set || is_set(srefresh.operation)) leaf_name_data.push_back(srefresh.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages::get_children()
{
    return children;
}

void Rsvp::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ack")
    {
        ack = value;
    }
    if(value_path == "bundle")
    {
        bundle = value;
    }
    if(value_path == "challenge")
    {
        challenge = value;
    }
    if(value_path == "hello")
    {
        hello = value;
    }
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-error")
    {
        path_error = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation")
    {
        reservation = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "reservation-error")
    {
        reservation_error = value;
    }
    if(value_path == "reservation-tear")
    {
        reservation_tear = value;
    }
    if(value_path == "response")
    {
        response = value;
    }
    if(value_path == "srefresh")
    {
        srefresh = value;
    }
}

Rsvp::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages::TransmittedMessages()
    :
    	ack{YType::uint32, "ack"},
	 bundle{YType::uint32, "bundle"},
	 challenge{YType::uint32, "challenge"},
	 hello{YType::uint32, "hello"},
	 path{YType::uint32, "path"},
	 path_error{YType::uint32, "path-error"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation{YType::uint32, "reservation"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 reservation_error{YType::uint32, "reservation-error"},
	 reservation_tear{YType::uint32, "reservation-tear"},
	 response{YType::uint32, "response"},
	 srefresh{YType::uint32, "srefresh"}
{
    yang_name = "transmitted-messages"; yang_parent_name = "interface-message";
}

Rsvp::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages::~TransmittedMessages()
{
}

bool Rsvp::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages::has_data() const
{
    return ack.is_set
	|| bundle.is_set
	|| challenge.is_set
	|| hello.is_set
	|| path.is_set
	|| path_error.is_set
	|| path_tear.is_set
	|| reservation.is_set
	|| reservation_confirm.is_set
	|| reservation_error.is_set
	|| reservation_tear.is_set
	|| response.is_set
	|| srefresh.is_set;
}

bool Rsvp::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(ack.operation)
	|| is_set(bundle.operation)
	|| is_set(challenge.operation)
	|| is_set(hello.operation)
	|| is_set(path.operation)
	|| is_set(path_error.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(reservation_error.operation)
	|| is_set(reservation_tear.operation)
	|| is_set(response.operation)
	|| is_set(srefresh.operation);
}

std::string Rsvp::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "transmitted-messages";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ack.is_set || is_set(ack.operation)) leaf_name_data.push_back(ack.get_name_leafdata());
    if (bundle.is_set || is_set(bundle.operation)) leaf_name_data.push_back(bundle.get_name_leafdata());
    if (challenge.is_set || is_set(challenge.operation)) leaf_name_data.push_back(challenge.get_name_leafdata());
    if (hello.is_set || is_set(hello.operation)) leaf_name_data.push_back(hello.get_name_leafdata());
    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_error.is_set || is_set(path_error.operation)) leaf_name_data.push_back(path_error.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation.is_set || is_set(reservation.operation)) leaf_name_data.push_back(reservation.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (reservation_error.is_set || is_set(reservation_error.operation)) leaf_name_data.push_back(reservation_error.get_name_leafdata());
    if (reservation_tear.is_set || is_set(reservation_tear.operation)) leaf_name_data.push_back(reservation_tear.get_name_leafdata());
    if (response.is_set || is_set(response.operation)) leaf_name_data.push_back(response.get_name_leafdata());
    if (srefresh.is_set || is_set(srefresh.operation)) leaf_name_data.push_back(srefresh.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages::get_children()
{
    return children;
}

void Rsvp::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ack")
    {
        ack = value;
    }
    if(value_path == "bundle")
    {
        bundle = value;
    }
    if(value_path == "challenge")
    {
        challenge = value;
    }
    if(value_path == "hello")
    {
        hello = value;
    }
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-error")
    {
        path_error = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation")
    {
        reservation = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "reservation-error")
    {
        reservation_error = value;
    }
    if(value_path == "reservation-tear")
    {
        reservation_tear = value;
    }
    if(value_path == "response")
    {
        response = value;
    }
    if(value_path == "srefresh")
    {
        srefresh = value;
    }
}

Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages::BundleReceivedMessages()
    :
    	ack{YType::uint32, "ack"},
	 bundle{YType::uint32, "bundle"},
	 challenge{YType::uint32, "challenge"},
	 hello{YType::uint32, "hello"},
	 path{YType::uint32, "path"},
	 path_error{YType::uint32, "path-error"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation{YType::uint32, "reservation"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 reservation_error{YType::uint32, "reservation-error"},
	 reservation_tear{YType::uint32, "reservation-tear"},
	 response{YType::uint32, "response"},
	 srefresh{YType::uint32, "srefresh"}
{
    yang_name = "bundle-received-messages"; yang_parent_name = "interface-message";
}

Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages::~BundleReceivedMessages()
{
}

bool Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages::has_data() const
{
    return ack.is_set
	|| bundle.is_set
	|| challenge.is_set
	|| hello.is_set
	|| path.is_set
	|| path_error.is_set
	|| path_tear.is_set
	|| reservation.is_set
	|| reservation_confirm.is_set
	|| reservation_error.is_set
	|| reservation_tear.is_set
	|| response.is_set
	|| srefresh.is_set;
}

bool Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(ack.operation)
	|| is_set(bundle.operation)
	|| is_set(challenge.operation)
	|| is_set(hello.operation)
	|| is_set(path.operation)
	|| is_set(path_error.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(reservation_error.operation)
	|| is_set(reservation_tear.operation)
	|| is_set(response.operation)
	|| is_set(srefresh.operation);
}

std::string Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bundle-received-messages";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ack.is_set || is_set(ack.operation)) leaf_name_data.push_back(ack.get_name_leafdata());
    if (bundle.is_set || is_set(bundle.operation)) leaf_name_data.push_back(bundle.get_name_leafdata());
    if (challenge.is_set || is_set(challenge.operation)) leaf_name_data.push_back(challenge.get_name_leafdata());
    if (hello.is_set || is_set(hello.operation)) leaf_name_data.push_back(hello.get_name_leafdata());
    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_error.is_set || is_set(path_error.operation)) leaf_name_data.push_back(path_error.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation.is_set || is_set(reservation.operation)) leaf_name_data.push_back(reservation.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (reservation_error.is_set || is_set(reservation_error.operation)) leaf_name_data.push_back(reservation_error.get_name_leafdata());
    if (reservation_tear.is_set || is_set(reservation_tear.operation)) leaf_name_data.push_back(reservation_tear.get_name_leafdata());
    if (response.is_set || is_set(response.operation)) leaf_name_data.push_back(response.get_name_leafdata());
    if (srefresh.is_set || is_set(srefresh.operation)) leaf_name_data.push_back(srefresh.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages::get_children()
{
    return children;
}

void Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ack")
    {
        ack = value;
    }
    if(value_path == "bundle")
    {
        bundle = value;
    }
    if(value_path == "challenge")
    {
        challenge = value;
    }
    if(value_path == "hello")
    {
        hello = value;
    }
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-error")
    {
        path_error = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation")
    {
        reservation = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "reservation-error")
    {
        reservation_error = value;
    }
    if(value_path == "reservation-tear")
    {
        reservation_tear = value;
    }
    if(value_path == "response")
    {
        response = value;
    }
    if(value_path == "srefresh")
    {
        srefresh = value;
    }
}

Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages::BundleTransmittedMessages()
    :
    	ack{YType::uint32, "ack"},
	 bundle{YType::uint32, "bundle"},
	 challenge{YType::uint32, "challenge"},
	 hello{YType::uint32, "hello"},
	 path{YType::uint32, "path"},
	 path_error{YType::uint32, "path-error"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation{YType::uint32, "reservation"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 reservation_error{YType::uint32, "reservation-error"},
	 reservation_tear{YType::uint32, "reservation-tear"},
	 response{YType::uint32, "response"},
	 srefresh{YType::uint32, "srefresh"}
{
    yang_name = "bundle-transmitted-messages"; yang_parent_name = "interface-message";
}

Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages::~BundleTransmittedMessages()
{
}

bool Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages::has_data() const
{
    return ack.is_set
	|| bundle.is_set
	|| challenge.is_set
	|| hello.is_set
	|| path.is_set
	|| path_error.is_set
	|| path_tear.is_set
	|| reservation.is_set
	|| reservation_confirm.is_set
	|| reservation_error.is_set
	|| reservation_tear.is_set
	|| response.is_set
	|| srefresh.is_set;
}

bool Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(ack.operation)
	|| is_set(bundle.operation)
	|| is_set(challenge.operation)
	|| is_set(hello.operation)
	|| is_set(path.operation)
	|| is_set(path_error.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(reservation_error.operation)
	|| is_set(reservation_tear.operation)
	|| is_set(response.operation)
	|| is_set(srefresh.operation);
}

std::string Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bundle-transmitted-messages";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ack.is_set || is_set(ack.operation)) leaf_name_data.push_back(ack.get_name_leafdata());
    if (bundle.is_set || is_set(bundle.operation)) leaf_name_data.push_back(bundle.get_name_leafdata());
    if (challenge.is_set || is_set(challenge.operation)) leaf_name_data.push_back(challenge.get_name_leafdata());
    if (hello.is_set || is_set(hello.operation)) leaf_name_data.push_back(hello.get_name_leafdata());
    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_error.is_set || is_set(path_error.operation)) leaf_name_data.push_back(path_error.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation.is_set || is_set(reservation.operation)) leaf_name_data.push_back(reservation.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (reservation_error.is_set || is_set(reservation_error.operation)) leaf_name_data.push_back(reservation_error.get_name_leafdata());
    if (reservation_tear.is_set || is_set(reservation_tear.operation)) leaf_name_data.push_back(reservation_tear.get_name_leafdata());
    if (response.is_set || is_set(response.operation)) leaf_name_data.push_back(response.get_name_leafdata());
    if (srefresh.is_set || is_set(srefresh.operation)) leaf_name_data.push_back(srefresh.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages::get_children()
{
    return children;
}

void Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ack")
    {
        ack = value;
    }
    if(value_path == "bundle")
    {
        bundle = value;
    }
    if(value_path == "challenge")
    {
        challenge = value;
    }
    if(value_path == "hello")
    {
        hello = value;
    }
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-error")
    {
        path_error = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation")
    {
        reservation = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "reservation-error")
    {
        reservation_error = value;
    }
    if(value_path == "reservation-tear")
    {
        reservation_tear = value;
    }
    if(value_path == "response")
    {
        response = value;
    }
    if(value_path == "srefresh")
    {
        srefresh = value;
    }
}

Rsvp::Counters::InterfaceMessages::InterfaceMessage::InterfaceMessage()
    :
    	interface_name{YType::str, "interface-name"},
	 out_of_order_messages{YType::uint32, "out-of-order-messages"},
	 rate_limited_messages{YType::uint32, "rate-limited-messages"},
	 retransmitted_messages{YType::uint32, "retransmitted-messages"}
    	,
    bundle_received_messages(std::make_unique<Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages>())
	,bundle_transmitted_messages(std::make_unique<Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages>())
	,received_messages(std::make_unique<Rsvp::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages>())
	,transmitted_messages(std::make_unique<Rsvp::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages>())
{
    bundle_received_messages->parent = this;
    children["bundle-received-messages"] = bundle_received_messages.get();

    bundle_transmitted_messages->parent = this;
    children["bundle-transmitted-messages"] = bundle_transmitted_messages.get();

    received_messages->parent = this;
    children["received-messages"] = received_messages.get();

    transmitted_messages->parent = this;
    children["transmitted-messages"] = transmitted_messages.get();

    yang_name = "interface-message"; yang_parent_name = "interface-messages";
}

Rsvp::Counters::InterfaceMessages::InterfaceMessage::~InterfaceMessage()
{
}

bool Rsvp::Counters::InterfaceMessages::InterfaceMessage::has_data() const
{
    return interface_name.is_set
	|| out_of_order_messages.is_set
	|| rate_limited_messages.is_set
	|| retransmitted_messages.is_set
	|| (bundle_received_messages !=  nullptr && bundle_received_messages->has_data())
	|| (bundle_transmitted_messages !=  nullptr && bundle_transmitted_messages->has_data())
	|| (received_messages !=  nullptr && received_messages->has_data())
	|| (transmitted_messages !=  nullptr && transmitted_messages->has_data());
}

bool Rsvp::Counters::InterfaceMessages::InterfaceMessage::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| is_set(out_of_order_messages.operation)
	|| is_set(rate_limited_messages.operation)
	|| is_set(retransmitted_messages.operation)
	|| (bundle_received_messages !=  nullptr && bundle_received_messages->has_operation())
	|| (bundle_transmitted_messages !=  nullptr && bundle_transmitted_messages->has_operation())
	|| (received_messages !=  nullptr && received_messages->has_operation())
	|| (transmitted_messages !=  nullptr && transmitted_messages->has_operation());
}

std::string Rsvp::Counters::InterfaceMessages::InterfaceMessage::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-message" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::InterfaceMessages::InterfaceMessage::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/interface-messages/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (out_of_order_messages.is_set || is_set(out_of_order_messages.operation)) leaf_name_data.push_back(out_of_order_messages.get_name_leafdata());
    if (rate_limited_messages.is_set || is_set(rate_limited_messages.operation)) leaf_name_data.push_back(rate_limited_messages.get_name_leafdata());
    if (retransmitted_messages.is_set || is_set(retransmitted_messages.operation)) leaf_name_data.push_back(retransmitted_messages.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::InterfaceMessages::InterfaceMessage::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "bundle-received-messages")
    {
        if(bundle_received_messages != nullptr)
        {
            children["bundle-received-messages"] = bundle_received_messages.get();
        }
        else
        {
            bundle_received_messages = std::make_unique<Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleReceivedMessages>();
            bundle_received_messages->parent = this;
            children["bundle-received-messages"] = bundle_received_messages.get();
        }
        return children.at("bundle-received-messages");
    }

    if(child_yang_name == "bundle-transmitted-messages")
    {
        if(bundle_transmitted_messages != nullptr)
        {
            children["bundle-transmitted-messages"] = bundle_transmitted_messages.get();
        }
        else
        {
            bundle_transmitted_messages = std::make_unique<Rsvp::Counters::InterfaceMessages::InterfaceMessage::BundleTransmittedMessages>();
            bundle_transmitted_messages->parent = this;
            children["bundle-transmitted-messages"] = bundle_transmitted_messages.get();
        }
        return children.at("bundle-transmitted-messages");
    }

    if(child_yang_name == "received-messages")
    {
        if(received_messages != nullptr)
        {
            children["received-messages"] = received_messages.get();
        }
        else
        {
            received_messages = std::make_unique<Rsvp::Counters::InterfaceMessages::InterfaceMessage::ReceivedMessages>();
            received_messages->parent = this;
            children["received-messages"] = received_messages.get();
        }
        return children.at("received-messages");
    }

    if(child_yang_name == "transmitted-messages")
    {
        if(transmitted_messages != nullptr)
        {
            children["transmitted-messages"] = transmitted_messages.get();
        }
        else
        {
            transmitted_messages = std::make_unique<Rsvp::Counters::InterfaceMessages::InterfaceMessage::TransmittedMessages>();
            transmitted_messages->parent = this;
            children["transmitted-messages"] = transmitted_messages.get();
        }
        return children.at("transmitted-messages");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::InterfaceMessages::InterfaceMessage::get_children()
{
    if(children.find("bundle-received-messages") == children.end())
    {
        if(bundle_received_messages != nullptr)
        {
            children["bundle-received-messages"] = bundle_received_messages.get();
        }
    }

    if(children.find("bundle-transmitted-messages") == children.end())
    {
        if(bundle_transmitted_messages != nullptr)
        {
            children["bundle-transmitted-messages"] = bundle_transmitted_messages.get();
        }
    }

    if(children.find("received-messages") == children.end())
    {
        if(received_messages != nullptr)
        {
            children["received-messages"] = received_messages.get();
        }
    }

    if(children.find("transmitted-messages") == children.end())
    {
        if(transmitted_messages != nullptr)
        {
            children["transmitted-messages"] = transmitted_messages.get();
        }
    }

    return children;
}

void Rsvp::Counters::InterfaceMessages::InterfaceMessage::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "out-of-order-messages")
    {
        out_of_order_messages = value;
    }
    if(value_path == "rate-limited-messages")
    {
        rate_limited_messages = value;
    }
    if(value_path == "retransmitted-messages")
    {
        retransmitted_messages = value;
    }
}

Rsvp::Counters::InterfaceMessages::InterfaceMessages()
{
    yang_name = "interface-messages"; yang_parent_name = "counters";
}

Rsvp::Counters::InterfaceMessages::~InterfaceMessages()
{
}

bool Rsvp::Counters::InterfaceMessages::has_data() const
{
    for (std::size_t index=0; index<interface_message.size(); index++)
    {
        if(interface_message[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::Counters::InterfaceMessages::has_operation() const
{
    for (std::size_t index=0; index<interface_message.size(); index++)
    {
        if(interface_message[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::Counters::InterfaceMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-messages";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::InterfaceMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::InterfaceMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-message")
    {
        for(auto const & c : interface_message)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::Counters::InterfaceMessages::InterfaceMessage>();
        c->parent = this;
        interface_message.push_back(std::move(c));
        children[segment_path] = interface_message.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::InterfaceMessages::get_children()
{
    for (auto const & c : interface_message)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::Counters::InterfaceMessages::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::Counters::MessageSummary::ReceivedMessages::ReceivedMessages()
    :
    	ack{YType::uint32, "ack"},
	 bundle{YType::uint32, "bundle"},
	 challenge{YType::uint32, "challenge"},
	 hello{YType::uint32, "hello"},
	 path{YType::uint32, "path"},
	 path_error{YType::uint32, "path-error"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation{YType::uint32, "reservation"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 reservation_error{YType::uint32, "reservation-error"},
	 reservation_tear{YType::uint32, "reservation-tear"},
	 response{YType::uint32, "response"},
	 srefresh{YType::uint32, "srefresh"}
{
    yang_name = "received-messages"; yang_parent_name = "message-summary";
}

Rsvp::Counters::MessageSummary::ReceivedMessages::~ReceivedMessages()
{
}

bool Rsvp::Counters::MessageSummary::ReceivedMessages::has_data() const
{
    return ack.is_set
	|| bundle.is_set
	|| challenge.is_set
	|| hello.is_set
	|| path.is_set
	|| path_error.is_set
	|| path_tear.is_set
	|| reservation.is_set
	|| reservation_confirm.is_set
	|| reservation_error.is_set
	|| reservation_tear.is_set
	|| response.is_set
	|| srefresh.is_set;
}

bool Rsvp::Counters::MessageSummary::ReceivedMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(ack.operation)
	|| is_set(bundle.operation)
	|| is_set(challenge.operation)
	|| is_set(hello.operation)
	|| is_set(path.operation)
	|| is_set(path_error.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(reservation_error.operation)
	|| is_set(reservation_tear.operation)
	|| is_set(response.operation)
	|| is_set(srefresh.operation);
}

std::string Rsvp::Counters::MessageSummary::ReceivedMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "received-messages";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::MessageSummary::ReceivedMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/message-summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ack.is_set || is_set(ack.operation)) leaf_name_data.push_back(ack.get_name_leafdata());
    if (bundle.is_set || is_set(bundle.operation)) leaf_name_data.push_back(bundle.get_name_leafdata());
    if (challenge.is_set || is_set(challenge.operation)) leaf_name_data.push_back(challenge.get_name_leafdata());
    if (hello.is_set || is_set(hello.operation)) leaf_name_data.push_back(hello.get_name_leafdata());
    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_error.is_set || is_set(path_error.operation)) leaf_name_data.push_back(path_error.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation.is_set || is_set(reservation.operation)) leaf_name_data.push_back(reservation.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (reservation_error.is_set || is_set(reservation_error.operation)) leaf_name_data.push_back(reservation_error.get_name_leafdata());
    if (reservation_tear.is_set || is_set(reservation_tear.operation)) leaf_name_data.push_back(reservation_tear.get_name_leafdata());
    if (response.is_set || is_set(response.operation)) leaf_name_data.push_back(response.get_name_leafdata());
    if (srefresh.is_set || is_set(srefresh.operation)) leaf_name_data.push_back(srefresh.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::MessageSummary::ReceivedMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::MessageSummary::ReceivedMessages::get_children()
{
    return children;
}

void Rsvp::Counters::MessageSummary::ReceivedMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ack")
    {
        ack = value;
    }
    if(value_path == "bundle")
    {
        bundle = value;
    }
    if(value_path == "challenge")
    {
        challenge = value;
    }
    if(value_path == "hello")
    {
        hello = value;
    }
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-error")
    {
        path_error = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation")
    {
        reservation = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "reservation-error")
    {
        reservation_error = value;
    }
    if(value_path == "reservation-tear")
    {
        reservation_tear = value;
    }
    if(value_path == "response")
    {
        response = value;
    }
    if(value_path == "srefresh")
    {
        srefresh = value;
    }
}

Rsvp::Counters::MessageSummary::TransmittedMessages::TransmittedMessages()
    :
    	ack{YType::uint32, "ack"},
	 bundle{YType::uint32, "bundle"},
	 challenge{YType::uint32, "challenge"},
	 hello{YType::uint32, "hello"},
	 path{YType::uint32, "path"},
	 path_error{YType::uint32, "path-error"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation{YType::uint32, "reservation"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 reservation_error{YType::uint32, "reservation-error"},
	 reservation_tear{YType::uint32, "reservation-tear"},
	 response{YType::uint32, "response"},
	 srefresh{YType::uint32, "srefresh"}
{
    yang_name = "transmitted-messages"; yang_parent_name = "message-summary";
}

Rsvp::Counters::MessageSummary::TransmittedMessages::~TransmittedMessages()
{
}

bool Rsvp::Counters::MessageSummary::TransmittedMessages::has_data() const
{
    return ack.is_set
	|| bundle.is_set
	|| challenge.is_set
	|| hello.is_set
	|| path.is_set
	|| path_error.is_set
	|| path_tear.is_set
	|| reservation.is_set
	|| reservation_confirm.is_set
	|| reservation_error.is_set
	|| reservation_tear.is_set
	|| response.is_set
	|| srefresh.is_set;
}

bool Rsvp::Counters::MessageSummary::TransmittedMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(ack.operation)
	|| is_set(bundle.operation)
	|| is_set(challenge.operation)
	|| is_set(hello.operation)
	|| is_set(path.operation)
	|| is_set(path_error.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(reservation_error.operation)
	|| is_set(reservation_tear.operation)
	|| is_set(response.operation)
	|| is_set(srefresh.operation);
}

std::string Rsvp::Counters::MessageSummary::TransmittedMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "transmitted-messages";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::MessageSummary::TransmittedMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/message-summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ack.is_set || is_set(ack.operation)) leaf_name_data.push_back(ack.get_name_leafdata());
    if (bundle.is_set || is_set(bundle.operation)) leaf_name_data.push_back(bundle.get_name_leafdata());
    if (challenge.is_set || is_set(challenge.operation)) leaf_name_data.push_back(challenge.get_name_leafdata());
    if (hello.is_set || is_set(hello.operation)) leaf_name_data.push_back(hello.get_name_leafdata());
    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_error.is_set || is_set(path_error.operation)) leaf_name_data.push_back(path_error.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation.is_set || is_set(reservation.operation)) leaf_name_data.push_back(reservation.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (reservation_error.is_set || is_set(reservation_error.operation)) leaf_name_data.push_back(reservation_error.get_name_leafdata());
    if (reservation_tear.is_set || is_set(reservation_tear.operation)) leaf_name_data.push_back(reservation_tear.get_name_leafdata());
    if (response.is_set || is_set(response.operation)) leaf_name_data.push_back(response.get_name_leafdata());
    if (srefresh.is_set || is_set(srefresh.operation)) leaf_name_data.push_back(srefresh.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::MessageSummary::TransmittedMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::MessageSummary::TransmittedMessages::get_children()
{
    return children;
}

void Rsvp::Counters::MessageSummary::TransmittedMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ack")
    {
        ack = value;
    }
    if(value_path == "bundle")
    {
        bundle = value;
    }
    if(value_path == "challenge")
    {
        challenge = value;
    }
    if(value_path == "hello")
    {
        hello = value;
    }
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-error")
    {
        path_error = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation")
    {
        reservation = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "reservation-error")
    {
        reservation_error = value;
    }
    if(value_path == "reservation-tear")
    {
        reservation_tear = value;
    }
    if(value_path == "response")
    {
        response = value;
    }
    if(value_path == "srefresh")
    {
        srefresh = value;
    }
}

Rsvp::Counters::MessageSummary::BundleReceivedMessages::BundleReceivedMessages()
    :
    	ack{YType::uint32, "ack"},
	 bundle{YType::uint32, "bundle"},
	 challenge{YType::uint32, "challenge"},
	 hello{YType::uint32, "hello"},
	 path{YType::uint32, "path"},
	 path_error{YType::uint32, "path-error"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation{YType::uint32, "reservation"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 reservation_error{YType::uint32, "reservation-error"},
	 reservation_tear{YType::uint32, "reservation-tear"},
	 response{YType::uint32, "response"},
	 srefresh{YType::uint32, "srefresh"}
{
    yang_name = "bundle-received-messages"; yang_parent_name = "message-summary";
}

Rsvp::Counters::MessageSummary::BundleReceivedMessages::~BundleReceivedMessages()
{
}

bool Rsvp::Counters::MessageSummary::BundleReceivedMessages::has_data() const
{
    return ack.is_set
	|| bundle.is_set
	|| challenge.is_set
	|| hello.is_set
	|| path.is_set
	|| path_error.is_set
	|| path_tear.is_set
	|| reservation.is_set
	|| reservation_confirm.is_set
	|| reservation_error.is_set
	|| reservation_tear.is_set
	|| response.is_set
	|| srefresh.is_set;
}

bool Rsvp::Counters::MessageSummary::BundleReceivedMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(ack.operation)
	|| is_set(bundle.operation)
	|| is_set(challenge.operation)
	|| is_set(hello.operation)
	|| is_set(path.operation)
	|| is_set(path_error.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(reservation_error.operation)
	|| is_set(reservation_tear.operation)
	|| is_set(response.operation)
	|| is_set(srefresh.operation);
}

std::string Rsvp::Counters::MessageSummary::BundleReceivedMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bundle-received-messages";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::MessageSummary::BundleReceivedMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/message-summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ack.is_set || is_set(ack.operation)) leaf_name_data.push_back(ack.get_name_leafdata());
    if (bundle.is_set || is_set(bundle.operation)) leaf_name_data.push_back(bundle.get_name_leafdata());
    if (challenge.is_set || is_set(challenge.operation)) leaf_name_data.push_back(challenge.get_name_leafdata());
    if (hello.is_set || is_set(hello.operation)) leaf_name_data.push_back(hello.get_name_leafdata());
    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_error.is_set || is_set(path_error.operation)) leaf_name_data.push_back(path_error.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation.is_set || is_set(reservation.operation)) leaf_name_data.push_back(reservation.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (reservation_error.is_set || is_set(reservation_error.operation)) leaf_name_data.push_back(reservation_error.get_name_leafdata());
    if (reservation_tear.is_set || is_set(reservation_tear.operation)) leaf_name_data.push_back(reservation_tear.get_name_leafdata());
    if (response.is_set || is_set(response.operation)) leaf_name_data.push_back(response.get_name_leafdata());
    if (srefresh.is_set || is_set(srefresh.operation)) leaf_name_data.push_back(srefresh.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::MessageSummary::BundleReceivedMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::MessageSummary::BundleReceivedMessages::get_children()
{
    return children;
}

void Rsvp::Counters::MessageSummary::BundleReceivedMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ack")
    {
        ack = value;
    }
    if(value_path == "bundle")
    {
        bundle = value;
    }
    if(value_path == "challenge")
    {
        challenge = value;
    }
    if(value_path == "hello")
    {
        hello = value;
    }
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-error")
    {
        path_error = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation")
    {
        reservation = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "reservation-error")
    {
        reservation_error = value;
    }
    if(value_path == "reservation-tear")
    {
        reservation_tear = value;
    }
    if(value_path == "response")
    {
        response = value;
    }
    if(value_path == "srefresh")
    {
        srefresh = value;
    }
}

Rsvp::Counters::MessageSummary::BundleTransmittedMessages::BundleTransmittedMessages()
    :
    	ack{YType::uint32, "ack"},
	 bundle{YType::uint32, "bundle"},
	 challenge{YType::uint32, "challenge"},
	 hello{YType::uint32, "hello"},
	 path{YType::uint32, "path"},
	 path_error{YType::uint32, "path-error"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation{YType::uint32, "reservation"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 reservation_error{YType::uint32, "reservation-error"},
	 reservation_tear{YType::uint32, "reservation-tear"},
	 response{YType::uint32, "response"},
	 srefresh{YType::uint32, "srefresh"}
{
    yang_name = "bundle-transmitted-messages"; yang_parent_name = "message-summary";
}

Rsvp::Counters::MessageSummary::BundleTransmittedMessages::~BundleTransmittedMessages()
{
}

bool Rsvp::Counters::MessageSummary::BundleTransmittedMessages::has_data() const
{
    return ack.is_set
	|| bundle.is_set
	|| challenge.is_set
	|| hello.is_set
	|| path.is_set
	|| path_error.is_set
	|| path_tear.is_set
	|| reservation.is_set
	|| reservation_confirm.is_set
	|| reservation_error.is_set
	|| reservation_tear.is_set
	|| response.is_set
	|| srefresh.is_set;
}

bool Rsvp::Counters::MessageSummary::BundleTransmittedMessages::has_operation() const
{
    return is_set(operation)
	|| is_set(ack.operation)
	|| is_set(bundle.operation)
	|| is_set(challenge.operation)
	|| is_set(hello.operation)
	|| is_set(path.operation)
	|| is_set(path_error.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(reservation_error.operation)
	|| is_set(reservation_tear.operation)
	|| is_set(response.operation)
	|| is_set(srefresh.operation);
}

std::string Rsvp::Counters::MessageSummary::BundleTransmittedMessages::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bundle-transmitted-messages";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::MessageSummary::BundleTransmittedMessages::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/message-summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ack.is_set || is_set(ack.operation)) leaf_name_data.push_back(ack.get_name_leafdata());
    if (bundle.is_set || is_set(bundle.operation)) leaf_name_data.push_back(bundle.get_name_leafdata());
    if (challenge.is_set || is_set(challenge.operation)) leaf_name_data.push_back(challenge.get_name_leafdata());
    if (hello.is_set || is_set(hello.operation)) leaf_name_data.push_back(hello.get_name_leafdata());
    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_error.is_set || is_set(path_error.operation)) leaf_name_data.push_back(path_error.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation.is_set || is_set(reservation.operation)) leaf_name_data.push_back(reservation.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (reservation_error.is_set || is_set(reservation_error.operation)) leaf_name_data.push_back(reservation_error.get_name_leafdata());
    if (reservation_tear.is_set || is_set(reservation_tear.operation)) leaf_name_data.push_back(reservation_tear.get_name_leafdata());
    if (response.is_set || is_set(response.operation)) leaf_name_data.push_back(response.get_name_leafdata());
    if (srefresh.is_set || is_set(srefresh.operation)) leaf_name_data.push_back(srefresh.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::MessageSummary::BundleTransmittedMessages::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::MessageSummary::BundleTransmittedMessages::get_children()
{
    return children;
}

void Rsvp::Counters::MessageSummary::BundleTransmittedMessages::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ack")
    {
        ack = value;
    }
    if(value_path == "bundle")
    {
        bundle = value;
    }
    if(value_path == "challenge")
    {
        challenge = value;
    }
    if(value_path == "hello")
    {
        hello = value;
    }
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-error")
    {
        path_error = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation")
    {
        reservation = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "reservation-error")
    {
        reservation_error = value;
    }
    if(value_path == "reservation-tear")
    {
        reservation_tear = value;
    }
    if(value_path == "response")
    {
        response = value;
    }
    if(value_path == "srefresh")
    {
        srefresh = value;
    }
}

Rsvp::Counters::MessageSummary::MessageSummary()
    :
    	out_of_order_messages{YType::uint32, "out-of-order-messages"},
	 rate_limited_messages{YType::uint32, "rate-limited-messages"},
	 retransmitted_messages{YType::uint32, "retransmitted-messages"}
    	,
    bundle_received_messages(std::make_unique<Rsvp::Counters::MessageSummary::BundleReceivedMessages>())
	,bundle_transmitted_messages(std::make_unique<Rsvp::Counters::MessageSummary::BundleTransmittedMessages>())
	,received_messages(std::make_unique<Rsvp::Counters::MessageSummary::ReceivedMessages>())
	,transmitted_messages(std::make_unique<Rsvp::Counters::MessageSummary::TransmittedMessages>())
{
    bundle_received_messages->parent = this;
    children["bundle-received-messages"] = bundle_received_messages.get();

    bundle_transmitted_messages->parent = this;
    children["bundle-transmitted-messages"] = bundle_transmitted_messages.get();

    received_messages->parent = this;
    children["received-messages"] = received_messages.get();

    transmitted_messages->parent = this;
    children["transmitted-messages"] = transmitted_messages.get();

    yang_name = "message-summary"; yang_parent_name = "counters";
}

Rsvp::Counters::MessageSummary::~MessageSummary()
{
}

bool Rsvp::Counters::MessageSummary::has_data() const
{
    return out_of_order_messages.is_set
	|| rate_limited_messages.is_set
	|| retransmitted_messages.is_set
	|| (bundle_received_messages !=  nullptr && bundle_received_messages->has_data())
	|| (bundle_transmitted_messages !=  nullptr && bundle_transmitted_messages->has_data())
	|| (received_messages !=  nullptr && received_messages->has_data())
	|| (transmitted_messages !=  nullptr && transmitted_messages->has_data());
}

bool Rsvp::Counters::MessageSummary::has_operation() const
{
    return is_set(operation)
	|| is_set(out_of_order_messages.operation)
	|| is_set(rate_limited_messages.operation)
	|| is_set(retransmitted_messages.operation)
	|| (bundle_received_messages !=  nullptr && bundle_received_messages->has_operation())
	|| (bundle_transmitted_messages !=  nullptr && bundle_transmitted_messages->has_operation())
	|| (received_messages !=  nullptr && received_messages->has_operation())
	|| (transmitted_messages !=  nullptr && transmitted_messages->has_operation());
}

std::string Rsvp::Counters::MessageSummary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "message-summary";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::MessageSummary::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (out_of_order_messages.is_set || is_set(out_of_order_messages.operation)) leaf_name_data.push_back(out_of_order_messages.get_name_leafdata());
    if (rate_limited_messages.is_set || is_set(rate_limited_messages.operation)) leaf_name_data.push_back(rate_limited_messages.get_name_leafdata());
    if (retransmitted_messages.is_set || is_set(retransmitted_messages.operation)) leaf_name_data.push_back(retransmitted_messages.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::MessageSummary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "bundle-received-messages")
    {
        if(bundle_received_messages != nullptr)
        {
            children["bundle-received-messages"] = bundle_received_messages.get();
        }
        else
        {
            bundle_received_messages = std::make_unique<Rsvp::Counters::MessageSummary::BundleReceivedMessages>();
            bundle_received_messages->parent = this;
            children["bundle-received-messages"] = bundle_received_messages.get();
        }
        return children.at("bundle-received-messages");
    }

    if(child_yang_name == "bundle-transmitted-messages")
    {
        if(bundle_transmitted_messages != nullptr)
        {
            children["bundle-transmitted-messages"] = bundle_transmitted_messages.get();
        }
        else
        {
            bundle_transmitted_messages = std::make_unique<Rsvp::Counters::MessageSummary::BundleTransmittedMessages>();
            bundle_transmitted_messages->parent = this;
            children["bundle-transmitted-messages"] = bundle_transmitted_messages.get();
        }
        return children.at("bundle-transmitted-messages");
    }

    if(child_yang_name == "received-messages")
    {
        if(received_messages != nullptr)
        {
            children["received-messages"] = received_messages.get();
        }
        else
        {
            received_messages = std::make_unique<Rsvp::Counters::MessageSummary::ReceivedMessages>();
            received_messages->parent = this;
            children["received-messages"] = received_messages.get();
        }
        return children.at("received-messages");
    }

    if(child_yang_name == "transmitted-messages")
    {
        if(transmitted_messages != nullptr)
        {
            children["transmitted-messages"] = transmitted_messages.get();
        }
        else
        {
            transmitted_messages = std::make_unique<Rsvp::Counters::MessageSummary::TransmittedMessages>();
            transmitted_messages->parent = this;
            children["transmitted-messages"] = transmitted_messages.get();
        }
        return children.at("transmitted-messages");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::MessageSummary::get_children()
{
    if(children.find("bundle-received-messages") == children.end())
    {
        if(bundle_received_messages != nullptr)
        {
            children["bundle-received-messages"] = bundle_received_messages.get();
        }
    }

    if(children.find("bundle-transmitted-messages") == children.end())
    {
        if(bundle_transmitted_messages != nullptr)
        {
            children["bundle-transmitted-messages"] = bundle_transmitted_messages.get();
        }
    }

    if(children.find("received-messages") == children.end())
    {
        if(received_messages != nullptr)
        {
            children["received-messages"] = received_messages.get();
        }
    }

    if(children.find("transmitted-messages") == children.end())
    {
        if(transmitted_messages != nullptr)
        {
            children["transmitted-messages"] = transmitted_messages.get();
        }
    }

    return children;
}

void Rsvp::Counters::MessageSummary::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "out-of-order-messages")
    {
        out_of_order_messages = value;
    }
    if(value_path == "rate-limited-messages")
    {
        rate_limited_messages = value;
    }
    if(value_path == "retransmitted-messages")
    {
        retransmitted_messages = value;
    }
}

Rsvp::Counters::PrefixFiltering::Accesses::Access::Forwarded::Forwarded()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "forwarded"; yang_parent_name = "access";
}

Rsvp::Counters::PrefixFiltering::Accesses::Access::Forwarded::~Forwarded()
{
}

bool Rsvp::Counters::PrefixFiltering::Accesses::Access::Forwarded::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool Rsvp::Counters::PrefixFiltering::Accesses::Access::Forwarded::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string Rsvp::Counters::PrefixFiltering::Accesses::Access::Forwarded::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "forwarded";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Accesses::Access::Forwarded::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Accesses::Access::Forwarded::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Accesses::Access::Forwarded::get_children()
{
    return children;
}

void Rsvp::Counters::PrefixFiltering::Accesses::Access::Forwarded::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

Rsvp::Counters::PrefixFiltering::Accesses::Access::LocallyDestined::LocallyDestined()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "locally-destined"; yang_parent_name = "access";
}

Rsvp::Counters::PrefixFiltering::Accesses::Access::LocallyDestined::~LocallyDestined()
{
}

bool Rsvp::Counters::PrefixFiltering::Accesses::Access::LocallyDestined::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool Rsvp::Counters::PrefixFiltering::Accesses::Access::LocallyDestined::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string Rsvp::Counters::PrefixFiltering::Accesses::Access::LocallyDestined::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "locally-destined";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Accesses::Access::LocallyDestined::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Accesses::Access::LocallyDestined::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Accesses::Access::LocallyDestined::get_children()
{
    return children;
}

void Rsvp::Counters::PrefixFiltering::Accesses::Access::LocallyDestined::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

Rsvp::Counters::PrefixFiltering::Accesses::Access::Dropped::Dropped()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "dropped"; yang_parent_name = "access";
}

Rsvp::Counters::PrefixFiltering::Accesses::Access::Dropped::~Dropped()
{
}

bool Rsvp::Counters::PrefixFiltering::Accesses::Access::Dropped::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool Rsvp::Counters::PrefixFiltering::Accesses::Access::Dropped::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string Rsvp::Counters::PrefixFiltering::Accesses::Access::Dropped::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "dropped";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Accesses::Access::Dropped::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Accesses::Access::Dropped::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Accesses::Access::Dropped::get_children()
{
    return children;
}

void Rsvp::Counters::PrefixFiltering::Accesses::Access::Dropped::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

Rsvp::Counters::PrefixFiltering::Accesses::Access::Total::Total()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "total"; yang_parent_name = "access";
}

Rsvp::Counters::PrefixFiltering::Accesses::Access::Total::~Total()
{
}

bool Rsvp::Counters::PrefixFiltering::Accesses::Access::Total::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool Rsvp::Counters::PrefixFiltering::Accesses::Access::Total::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string Rsvp::Counters::PrefixFiltering::Accesses::Access::Total::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "total";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Accesses::Access::Total::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Accesses::Access::Total::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Accesses::Access::Total::get_children()
{
    return children;
}

void Rsvp::Counters::PrefixFiltering::Accesses::Access::Total::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

Rsvp::Counters::PrefixFiltering::Accesses::Access::Access()
    :
    	access_list_name{YType::str, "access-list-name"}
    	,
    dropped(std::make_unique<Rsvp::Counters::PrefixFiltering::Accesses::Access::Dropped>())
	,forwarded(std::make_unique<Rsvp::Counters::PrefixFiltering::Accesses::Access::Forwarded>())
	,locally_destined(std::make_unique<Rsvp::Counters::PrefixFiltering::Accesses::Access::LocallyDestined>())
	,total(std::make_unique<Rsvp::Counters::PrefixFiltering::Accesses::Access::Total>())
{
    dropped->parent = this;
    children["dropped"] = dropped.get();

    forwarded->parent = this;
    children["forwarded"] = forwarded.get();

    locally_destined->parent = this;
    children["locally-destined"] = locally_destined.get();

    total->parent = this;
    children["total"] = total.get();

    yang_name = "access"; yang_parent_name = "accesses";
}

Rsvp::Counters::PrefixFiltering::Accesses::Access::~Access()
{
}

bool Rsvp::Counters::PrefixFiltering::Accesses::Access::has_data() const
{
    return access_list_name.is_set
	|| (dropped !=  nullptr && dropped->has_data())
	|| (forwarded !=  nullptr && forwarded->has_data())
	|| (locally_destined !=  nullptr && locally_destined->has_data())
	|| (total !=  nullptr && total->has_data());
}

bool Rsvp::Counters::PrefixFiltering::Accesses::Access::has_operation() const
{
    return is_set(operation)
	|| is_set(access_list_name.operation)
	|| (dropped !=  nullptr && dropped->has_operation())
	|| (forwarded !=  nullptr && forwarded->has_operation())
	|| (locally_destined !=  nullptr && locally_destined->has_operation())
	|| (total !=  nullptr && total->has_operation());
}

std::string Rsvp::Counters::PrefixFiltering::Accesses::Access::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "access" <<"[access-list-name='" <<access_list_name.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Accesses::Access::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/accesses/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (access_list_name.is_set || is_set(access_list_name.operation)) leaf_name_data.push_back(access_list_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Accesses::Access::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "dropped")
    {
        if(dropped != nullptr)
        {
            children["dropped"] = dropped.get();
        }
        else
        {
            dropped = std::make_unique<Rsvp::Counters::PrefixFiltering::Accesses::Access::Dropped>();
            dropped->parent = this;
            children["dropped"] = dropped.get();
        }
        return children.at("dropped");
    }

    if(child_yang_name == "forwarded")
    {
        if(forwarded != nullptr)
        {
            children["forwarded"] = forwarded.get();
        }
        else
        {
            forwarded = std::make_unique<Rsvp::Counters::PrefixFiltering::Accesses::Access::Forwarded>();
            forwarded->parent = this;
            children["forwarded"] = forwarded.get();
        }
        return children.at("forwarded");
    }

    if(child_yang_name == "locally-destined")
    {
        if(locally_destined != nullptr)
        {
            children["locally-destined"] = locally_destined.get();
        }
        else
        {
            locally_destined = std::make_unique<Rsvp::Counters::PrefixFiltering::Accesses::Access::LocallyDestined>();
            locally_destined->parent = this;
            children["locally-destined"] = locally_destined.get();
        }
        return children.at("locally-destined");
    }

    if(child_yang_name == "total")
    {
        if(total != nullptr)
        {
            children["total"] = total.get();
        }
        else
        {
            total = std::make_unique<Rsvp::Counters::PrefixFiltering::Accesses::Access::Total>();
            total->parent = this;
            children["total"] = total.get();
        }
        return children.at("total");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Accesses::Access::get_children()
{
    if(children.find("dropped") == children.end())
    {
        if(dropped != nullptr)
        {
            children["dropped"] = dropped.get();
        }
    }

    if(children.find("forwarded") == children.end())
    {
        if(forwarded != nullptr)
        {
            children["forwarded"] = forwarded.get();
        }
    }

    if(children.find("locally-destined") == children.end())
    {
        if(locally_destined != nullptr)
        {
            children["locally-destined"] = locally_destined.get();
        }
    }

    if(children.find("total") == children.end())
    {
        if(total != nullptr)
        {
            children["total"] = total.get();
        }
    }

    return children;
}

void Rsvp::Counters::PrefixFiltering::Accesses::Access::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "access-list-name")
    {
        access_list_name = value;
    }
}

Rsvp::Counters::PrefixFiltering::Accesses::Accesses()
{
    yang_name = "accesses"; yang_parent_name = "prefix-filtering";
}

Rsvp::Counters::PrefixFiltering::Accesses::~Accesses()
{
}

bool Rsvp::Counters::PrefixFiltering::Accesses::has_data() const
{
    for (std::size_t index=0; index<access.size(); index++)
    {
        if(access[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::Counters::PrefixFiltering::Accesses::has_operation() const
{
    for (std::size_t index=0; index<access.size(); index++)
    {
        if(access[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::Counters::PrefixFiltering::Accesses::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "accesses";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Accesses::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Accesses::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "access")
    {
        for(auto const & c : access)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::Counters::PrefixFiltering::Accesses::Access>();
        c->parent = this;
        access.push_back(std::move(c));
        children[segment_path] = access.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Accesses::get_children()
{
    for (auto const & c : access)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::Counters::PrefixFiltering::Accesses::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Forwarded::Forwarded()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "forwarded"; yang_parent_name = "summary";
}

Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Forwarded::~Forwarded()
{
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Forwarded::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Forwarded::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Forwarded::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "forwarded";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Forwarded::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Forwarded::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Forwarded::get_children()
{
    return children;
}

void Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Forwarded::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

Rsvp::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined::LocallyDestined()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "locally-destined"; yang_parent_name = "summary";
}

Rsvp::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined::~LocallyDestined()
{
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string Rsvp::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "locally-destined";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined::get_children()
{
    return children;
}

void Rsvp::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Dropped::Dropped()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "dropped"; yang_parent_name = "summary";
}

Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Dropped::~Dropped()
{
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Dropped::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Dropped::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Dropped::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "dropped";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Dropped::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Dropped::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Dropped::get_children()
{
    return children;
}

void Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Dropped::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped::DefaultActionDropped()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "default-action-dropped"; yang_parent_name = "summary";
}

Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped::~DefaultActionDropped()
{
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "default-action-dropped";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped::get_children()
{
    return children;
}

void Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed::DefaultActionProcessed()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "default-action-processed"; yang_parent_name = "summary";
}

Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed::~DefaultActionProcessed()
{
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "default-action-processed";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed::get_children()
{
    return children;
}

void Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Total::Total()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "total"; yang_parent_name = "summary";
}

Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Total::~Total()
{
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Total::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Total::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Total::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "total";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Total::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Total::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Total::get_children()
{
    return children;
}

void Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Total::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Summary()
    :
    default_action_dropped(std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped>())
	,default_action_processed(std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed>())
	,dropped(std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Dropped>())
	,forwarded(std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Forwarded>())
	,locally_destined(std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined>())
	,total(std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Total>())
{
    default_action_dropped->parent = this;
    children["default-action-dropped"] = default_action_dropped.get();

    default_action_processed->parent = this;
    children["default-action-processed"] = default_action_processed.get();

    dropped->parent = this;
    children["dropped"] = dropped.get();

    forwarded->parent = this;
    children["forwarded"] = forwarded.get();

    locally_destined->parent = this;
    children["locally-destined"] = locally_destined.get();

    total->parent = this;
    children["total"] = total.get();

    yang_name = "summary"; yang_parent_name = "interfaces";
}

Rsvp::Counters::PrefixFiltering::Interfaces::Summary::~Summary()
{
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Summary::has_data() const
{
    return (default_action_dropped !=  nullptr && default_action_dropped->has_data())
	|| (default_action_processed !=  nullptr && default_action_processed->has_data())
	|| (dropped !=  nullptr && dropped->has_data())
	|| (forwarded !=  nullptr && forwarded->has_data())
	|| (locally_destined !=  nullptr && locally_destined->has_data())
	|| (total !=  nullptr && total->has_data());
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Summary::has_operation() const
{
    return is_set(operation)
	|| (default_action_dropped !=  nullptr && default_action_dropped->has_operation())
	|| (default_action_processed !=  nullptr && default_action_processed->has_operation())
	|| (dropped !=  nullptr && dropped->has_operation())
	|| (forwarded !=  nullptr && forwarded->has_operation())
	|| (locally_destined !=  nullptr && locally_destined->has_operation())
	|| (total !=  nullptr && total->has_operation());
}

std::string Rsvp::Counters::PrefixFiltering::Interfaces::Summary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "summary";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Interfaces::Summary::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Interfaces::Summary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "default-action-dropped")
    {
        if(default_action_dropped != nullptr)
        {
            children["default-action-dropped"] = default_action_dropped.get();
        }
        else
        {
            default_action_dropped = std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionDropped>();
            default_action_dropped->parent = this;
            children["default-action-dropped"] = default_action_dropped.get();
        }
        return children.at("default-action-dropped");
    }

    if(child_yang_name == "default-action-processed")
    {
        if(default_action_processed != nullptr)
        {
            children["default-action-processed"] = default_action_processed.get();
        }
        else
        {
            default_action_processed = std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Summary::DefaultActionProcessed>();
            default_action_processed->parent = this;
            children["default-action-processed"] = default_action_processed.get();
        }
        return children.at("default-action-processed");
    }

    if(child_yang_name == "dropped")
    {
        if(dropped != nullptr)
        {
            children["dropped"] = dropped.get();
        }
        else
        {
            dropped = std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Dropped>();
            dropped->parent = this;
            children["dropped"] = dropped.get();
        }
        return children.at("dropped");
    }

    if(child_yang_name == "forwarded")
    {
        if(forwarded != nullptr)
        {
            children["forwarded"] = forwarded.get();
        }
        else
        {
            forwarded = std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Forwarded>();
            forwarded->parent = this;
            children["forwarded"] = forwarded.get();
        }
        return children.at("forwarded");
    }

    if(child_yang_name == "locally-destined")
    {
        if(locally_destined != nullptr)
        {
            children["locally-destined"] = locally_destined.get();
        }
        else
        {
            locally_destined = std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Summary::LocallyDestined>();
            locally_destined->parent = this;
            children["locally-destined"] = locally_destined.get();
        }
        return children.at("locally-destined");
    }

    if(child_yang_name == "total")
    {
        if(total != nullptr)
        {
            children["total"] = total.get();
        }
        else
        {
            total = std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Summary::Total>();
            total->parent = this;
            children["total"] = total.get();
        }
        return children.at("total");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Interfaces::Summary::get_children()
{
    if(children.find("default-action-dropped") == children.end())
    {
        if(default_action_dropped != nullptr)
        {
            children["default-action-dropped"] = default_action_dropped.get();
        }
    }

    if(children.find("default-action-processed") == children.end())
    {
        if(default_action_processed != nullptr)
        {
            children["default-action-processed"] = default_action_processed.get();
        }
    }

    if(children.find("dropped") == children.end())
    {
        if(dropped != nullptr)
        {
            children["dropped"] = dropped.get();
        }
    }

    if(children.find("forwarded") == children.end())
    {
        if(forwarded != nullptr)
        {
            children["forwarded"] = forwarded.get();
        }
    }

    if(children.find("locally-destined") == children.end())
    {
        if(locally_destined != nullptr)
        {
            children["locally-destined"] = locally_destined.get();
        }
    }

    if(children.find("total") == children.end())
    {
        if(total != nullptr)
        {
            children["total"] = total.get();
        }
    }

    return children;
}

void Rsvp::Counters::PrefixFiltering::Interfaces::Summary::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded::Forwarded()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "forwarded"; yang_parent_name = "interface";
}

Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded::~Forwarded()
{
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "forwarded";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded::get_children()
{
    return children;
}

void Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined::LocallyDestined()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "locally-destined"; yang_parent_name = "interface";
}

Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined::~LocallyDestined()
{
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "locally-destined";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined::get_children()
{
    return children;
}

void Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped::Dropped()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "dropped"; yang_parent_name = "interface";
}

Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped::~Dropped()
{
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "dropped";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped::get_children()
{
    return children;
}

void Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped::DefaultActionDropped()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "default-action-dropped"; yang_parent_name = "interface";
}

Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped::~DefaultActionDropped()
{
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "default-action-dropped";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped::get_children()
{
    return children;
}

void Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed::DefaultActionProcessed()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "default-action-processed"; yang_parent_name = "interface";
}

Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed::~DefaultActionProcessed()
{
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "default-action-processed";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed::get_children()
{
    return children;
}

void Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total::Total()
    :
    	path{YType::uint32, "path"},
	 path_tear{YType::uint32, "path-tear"},
	 reservation_confirm{YType::uint32, "reservation-confirm"},
	 total{YType::uint32, "total"}
{
    yang_name = "total"; yang_parent_name = "interface";
}

Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total::~Total()
{
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total::has_data() const
{
    return path.is_set
	|| path_tear.is_set
	|| reservation_confirm.is_set
	|| total.is_set;
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total::has_operation() const
{
    return is_set(operation)
	|| is_set(path.operation)
	|| is_set(path_tear.operation)
	|| is_set(reservation_confirm.operation)
	|| is_set(total.operation);
}

std::string Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "total";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (path.is_set || is_set(path.operation)) leaf_name_data.push_back(path.get_name_leafdata());
    if (path_tear.is_set || is_set(path_tear.operation)) leaf_name_data.push_back(path_tear.get_name_leafdata());
    if (reservation_confirm.is_set || is_set(reservation_confirm.operation)) leaf_name_data.push_back(reservation_confirm.get_name_leafdata());
    if (total.is_set || is_set(total.operation)) leaf_name_data.push_back(total.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total::get_children()
{
    return children;
}

void Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "path")
    {
        path = value;
    }
    if(value_path == "path-tear")
    {
        path_tear = value;
    }
    if(value_path == "reservation-confirm")
    {
        reservation_confirm = value;
    }
    if(value_path == "total")
    {
        total = value;
    }
}

Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Interface()
    :
    	interface_name{YType::str, "interface-name"}
    	,
    default_action_dropped(std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped>())
	,default_action_processed(std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed>())
	,dropped(std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped>())
	,forwarded(std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded>())
	,locally_destined(std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined>())
	,total(std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total>())
{
    default_action_dropped->parent = this;
    children["default-action-dropped"] = default_action_dropped.get();

    default_action_processed->parent = this;
    children["default-action-processed"] = default_action_processed.get();

    dropped->parent = this;
    children["dropped"] = dropped.get();

    forwarded->parent = this;
    children["forwarded"] = forwarded.get();

    locally_destined->parent = this;
    children["locally-destined"] = locally_destined.get();

    total->parent = this;
    children["total"] = total.get();

    yang_name = "interface"; yang_parent_name = "interfaces";
}

Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::~Interface()
{
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::has_data() const
{
    return interface_name.is_set
	|| (default_action_dropped !=  nullptr && default_action_dropped->has_data())
	|| (default_action_processed !=  nullptr && default_action_processed->has_data())
	|| (dropped !=  nullptr && dropped->has_data())
	|| (forwarded !=  nullptr && forwarded->has_data())
	|| (locally_destined !=  nullptr && locally_destined->has_data())
	|| (total !=  nullptr && total->has_data());
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| (default_action_dropped !=  nullptr && default_action_dropped->has_operation())
	|| (default_action_processed !=  nullptr && default_action_processed->has_operation())
	|| (dropped !=  nullptr && dropped->has_operation())
	|| (forwarded !=  nullptr && forwarded->has_operation())
	|| (locally_destined !=  nullptr && locally_destined->has_operation())
	|| (total !=  nullptr && total->has_operation());
}

std::string Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/interfaces/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "default-action-dropped")
    {
        if(default_action_dropped != nullptr)
        {
            children["default-action-dropped"] = default_action_dropped.get();
        }
        else
        {
            default_action_dropped = std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionDropped>();
            default_action_dropped->parent = this;
            children["default-action-dropped"] = default_action_dropped.get();
        }
        return children.at("default-action-dropped");
    }

    if(child_yang_name == "default-action-processed")
    {
        if(default_action_processed != nullptr)
        {
            children["default-action-processed"] = default_action_processed.get();
        }
        else
        {
            default_action_processed = std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::DefaultActionProcessed>();
            default_action_processed->parent = this;
            children["default-action-processed"] = default_action_processed.get();
        }
        return children.at("default-action-processed");
    }

    if(child_yang_name == "dropped")
    {
        if(dropped != nullptr)
        {
            children["dropped"] = dropped.get();
        }
        else
        {
            dropped = std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Dropped>();
            dropped->parent = this;
            children["dropped"] = dropped.get();
        }
        return children.at("dropped");
    }

    if(child_yang_name == "forwarded")
    {
        if(forwarded != nullptr)
        {
            children["forwarded"] = forwarded.get();
        }
        else
        {
            forwarded = std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Forwarded>();
            forwarded->parent = this;
            children["forwarded"] = forwarded.get();
        }
        return children.at("forwarded");
    }

    if(child_yang_name == "locally-destined")
    {
        if(locally_destined != nullptr)
        {
            children["locally-destined"] = locally_destined.get();
        }
        else
        {
            locally_destined = std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::LocallyDestined>();
            locally_destined->parent = this;
            children["locally-destined"] = locally_destined.get();
        }
        return children.at("locally-destined");
    }

    if(child_yang_name == "total")
    {
        if(total != nullptr)
        {
            children["total"] = total.get();
        }
        else
        {
            total = std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::Total>();
            total->parent = this;
            children["total"] = total.get();
        }
        return children.at("total");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::get_children()
{
    if(children.find("default-action-dropped") == children.end())
    {
        if(default_action_dropped != nullptr)
        {
            children["default-action-dropped"] = default_action_dropped.get();
        }
    }

    if(children.find("default-action-processed") == children.end())
    {
        if(default_action_processed != nullptr)
        {
            children["default-action-processed"] = default_action_processed.get();
        }
    }

    if(children.find("dropped") == children.end())
    {
        if(dropped != nullptr)
        {
            children["dropped"] = dropped.get();
        }
    }

    if(children.find("forwarded") == children.end())
    {
        if(forwarded != nullptr)
        {
            children["forwarded"] = forwarded.get();
        }
    }

    if(children.find("locally-destined") == children.end())
    {
        if(locally_destined != nullptr)
        {
            children["locally-destined"] = locally_destined.get();
        }
    }

    if(children.find("total") == children.end())
    {
        if(total != nullptr)
        {
            children["total"] = total.get();
        }
    }

    return children;
}

void Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
}

Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interfaces_()
{
    yang_name = "interfaces"; yang_parent_name = "interfaces";
}

Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::~Interfaces_()
{
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::has_data() const
{
    for (std::size_t index=0; index<interface.size(); index++)
    {
        if(interface[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::has_operation() const
{
    for (std::size_t index=0; index<interface.size(); index++)
    {
        if(interface[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interfaces";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface")
    {
        for(auto const & c : interface)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::Interface>();
        c->parent = this;
        interface.push_back(std::move(c));
        children[segment_path] = interface.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::get_children()
{
    for (auto const & c : interface)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces()
    :
    interfaces(std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_>())
	,summary(std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Summary>())
{
    interfaces->parent = this;
    children["interfaces"] = interfaces.get();

    summary->parent = this;
    children["summary"] = summary.get();

    yang_name = "interfaces"; yang_parent_name = "prefix-filtering";
}

Rsvp::Counters::PrefixFiltering::Interfaces::~Interfaces()
{
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::has_data() const
{
    return (interfaces !=  nullptr && interfaces->has_data())
	|| (summary !=  nullptr && summary->has_data());
}

bool Rsvp::Counters::PrefixFiltering::Interfaces::has_operation() const
{
    return is_set(operation)
	|| (interfaces !=  nullptr && interfaces->has_operation())
	|| (summary !=  nullptr && summary->has_operation());
}

std::string Rsvp::Counters::PrefixFiltering::Interfaces::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interfaces";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::Interfaces::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::Interfaces::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interfaces")
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
        else
        {
            interfaces = std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Interfaces_>();
            interfaces->parent = this;
            children["interfaces"] = interfaces.get();
        }
        return children.at("interfaces");
    }

    if(child_yang_name == "summary")
    {
        if(summary != nullptr)
        {
            children["summary"] = summary.get();
        }
        else
        {
            summary = std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces::Summary>();
            summary->parent = this;
            children["summary"] = summary.get();
        }
        return children.at("summary");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::Interfaces::get_children()
{
    if(children.find("interfaces") == children.end())
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
    }

    if(children.find("summary") == children.end())
    {
        if(summary != nullptr)
        {
            children["summary"] = summary.get();
        }
    }

    return children;
}

void Rsvp::Counters::PrefixFiltering::Interfaces::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::Counters::PrefixFiltering::PrefixFiltering()
    :
    accesses(std::make_unique<Rsvp::Counters::PrefixFiltering::Accesses>())
	,interfaces(std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces>())
{
    accesses->parent = this;
    children["accesses"] = accesses.get();

    interfaces->parent = this;
    children["interfaces"] = interfaces.get();

    yang_name = "prefix-filtering"; yang_parent_name = "counters";
}

Rsvp::Counters::PrefixFiltering::~PrefixFiltering()
{
}

bool Rsvp::Counters::PrefixFiltering::has_data() const
{
    return (accesses !=  nullptr && accesses->has_data())
	|| (interfaces !=  nullptr && interfaces->has_data());
}

bool Rsvp::Counters::PrefixFiltering::has_operation() const
{
    return is_set(operation)
	|| (accesses !=  nullptr && accesses->has_operation())
	|| (interfaces !=  nullptr && interfaces->has_operation());
}

std::string Rsvp::Counters::PrefixFiltering::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "prefix-filtering";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::PrefixFiltering::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::PrefixFiltering::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "accesses")
    {
        if(accesses != nullptr)
        {
            children["accesses"] = accesses.get();
        }
        else
        {
            accesses = std::make_unique<Rsvp::Counters::PrefixFiltering::Accesses>();
            accesses->parent = this;
            children["accesses"] = accesses.get();
        }
        return children.at("accesses");
    }

    if(child_yang_name == "interfaces")
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
        else
        {
            interfaces = std::make_unique<Rsvp::Counters::PrefixFiltering::Interfaces>();
            interfaces->parent = this;
            children["interfaces"] = interfaces.get();
        }
        return children.at("interfaces");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::PrefixFiltering::get_children()
{
    if(children.find("accesses") == children.end())
    {
        if(accesses != nullptr)
        {
            children["accesses"] = accesses.get();
        }
    }

    if(children.find("interfaces") == children.end())
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
    }

    return children;
}

void Rsvp::Counters::PrefixFiltering::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::Counters::OutOfResource::Interfaces::Summary::Summary()
    :
    	dropped_path_messages{YType::uint32, "dropped-path-messages"}
{
    yang_name = "summary"; yang_parent_name = "interfaces";
}

Rsvp::Counters::OutOfResource::Interfaces::Summary::~Summary()
{
}

bool Rsvp::Counters::OutOfResource::Interfaces::Summary::has_data() const
{
    return dropped_path_messages.is_set;
}

bool Rsvp::Counters::OutOfResource::Interfaces::Summary::has_operation() const
{
    return is_set(operation)
	|| is_set(dropped_path_messages.operation);
}

std::string Rsvp::Counters::OutOfResource::Interfaces::Summary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "summary";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::OutOfResource::Interfaces::Summary::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/out-of-resource/interfaces/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (dropped_path_messages.is_set || is_set(dropped_path_messages.operation)) leaf_name_data.push_back(dropped_path_messages.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::OutOfResource::Interfaces::Summary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::OutOfResource::Interfaces::Summary::get_children()
{
    return children;
}

void Rsvp::Counters::OutOfResource::Interfaces::Summary::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "dropped-path-messages")
    {
        dropped_path_messages = value;
    }
}

Rsvp::Counters::OutOfResource::Interfaces::Interfaces_::Interface::Interface()
    :
    	interface_name{YType::str, "interface-name"},
	 dropped_path_messages{YType::uint32, "dropped-path-messages"}
{
    yang_name = "interface"; yang_parent_name = "interfaces";
}

Rsvp::Counters::OutOfResource::Interfaces::Interfaces_::Interface::~Interface()
{
}

bool Rsvp::Counters::OutOfResource::Interfaces::Interfaces_::Interface::has_data() const
{
    return interface_name.is_set
	|| dropped_path_messages.is_set;
}

bool Rsvp::Counters::OutOfResource::Interfaces::Interfaces_::Interface::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| is_set(dropped_path_messages.operation);
}

std::string Rsvp::Counters::OutOfResource::Interfaces::Interfaces_::Interface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::OutOfResource::Interfaces::Interfaces_::Interface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/out-of-resource/interfaces/interfaces/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (dropped_path_messages.is_set || is_set(dropped_path_messages.operation)) leaf_name_data.push_back(dropped_path_messages.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::OutOfResource::Interfaces::Interfaces_::Interface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::OutOfResource::Interfaces::Interfaces_::Interface::get_children()
{
    return children;
}

void Rsvp::Counters::OutOfResource::Interfaces::Interfaces_::Interface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "dropped-path-messages")
    {
        dropped_path_messages = value;
    }
}

Rsvp::Counters::OutOfResource::Interfaces::Interfaces_::Interfaces_()
{
    yang_name = "interfaces"; yang_parent_name = "interfaces";
}

Rsvp::Counters::OutOfResource::Interfaces::Interfaces_::~Interfaces_()
{
}

bool Rsvp::Counters::OutOfResource::Interfaces::Interfaces_::has_data() const
{
    for (std::size_t index=0; index<interface.size(); index++)
    {
        if(interface[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::Counters::OutOfResource::Interfaces::Interfaces_::has_operation() const
{
    for (std::size_t index=0; index<interface.size(); index++)
    {
        if(interface[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::Counters::OutOfResource::Interfaces::Interfaces_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interfaces";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::OutOfResource::Interfaces::Interfaces_::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/out-of-resource/interfaces/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::OutOfResource::Interfaces::Interfaces_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface")
    {
        for(auto const & c : interface)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::Counters::OutOfResource::Interfaces::Interfaces_::Interface>();
        c->parent = this;
        interface.push_back(std::move(c));
        children[segment_path] = interface.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::OutOfResource::Interfaces::Interfaces_::get_children()
{
    for (auto const & c : interface)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::Counters::OutOfResource::Interfaces::Interfaces_::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::Counters::OutOfResource::Interfaces::Interfaces()
    :
    interfaces(std::make_unique<Rsvp::Counters::OutOfResource::Interfaces::Interfaces_>())
	,summary(std::make_unique<Rsvp::Counters::OutOfResource::Interfaces::Summary>())
{
    interfaces->parent = this;
    children["interfaces"] = interfaces.get();

    summary->parent = this;
    children["summary"] = summary.get();

    yang_name = "interfaces"; yang_parent_name = "out-of-resource";
}

Rsvp::Counters::OutOfResource::Interfaces::~Interfaces()
{
}

bool Rsvp::Counters::OutOfResource::Interfaces::has_data() const
{
    return (interfaces !=  nullptr && interfaces->has_data())
	|| (summary !=  nullptr && summary->has_data());
}

bool Rsvp::Counters::OutOfResource::Interfaces::has_operation() const
{
    return is_set(operation)
	|| (interfaces !=  nullptr && interfaces->has_operation())
	|| (summary !=  nullptr && summary->has_operation());
}

std::string Rsvp::Counters::OutOfResource::Interfaces::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interfaces";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::OutOfResource::Interfaces::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/out-of-resource/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::OutOfResource::Interfaces::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interfaces")
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
        else
        {
            interfaces = std::make_unique<Rsvp::Counters::OutOfResource::Interfaces::Interfaces_>();
            interfaces->parent = this;
            children["interfaces"] = interfaces.get();
        }
        return children.at("interfaces");
    }

    if(child_yang_name == "summary")
    {
        if(summary != nullptr)
        {
            children["summary"] = summary.get();
        }
        else
        {
            summary = std::make_unique<Rsvp::Counters::OutOfResource::Interfaces::Summary>();
            summary->parent = this;
            children["summary"] = summary.get();
        }
        return children.at("summary");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::OutOfResource::Interfaces::get_children()
{
    if(children.find("interfaces") == children.end())
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
    }

    if(children.find("summary") == children.end())
    {
        if(summary != nullptr)
        {
            children["summary"] = summary.get();
        }
    }

    return children;
}

void Rsvp::Counters::OutOfResource::Interfaces::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::Counters::OutOfResource::OutOfResource()
    :
    interfaces(std::make_unique<Rsvp::Counters::OutOfResource::Interfaces>())
{
    interfaces->parent = this;
    children["interfaces"] = interfaces.get();

    yang_name = "out-of-resource"; yang_parent_name = "counters";
}

Rsvp::Counters::OutOfResource::~OutOfResource()
{
}

bool Rsvp::Counters::OutOfResource::has_data() const
{
    return (interfaces !=  nullptr && interfaces->has_data());
}

bool Rsvp::Counters::OutOfResource::has_operation() const
{
    return is_set(operation)
	|| (interfaces !=  nullptr && interfaces->has_operation());
}

std::string Rsvp::Counters::OutOfResource::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "out-of-resource";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::OutOfResource::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::OutOfResource::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interfaces")
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
        else
        {
            interfaces = std::make_unique<Rsvp::Counters::OutOfResource::Interfaces>();
            interfaces->parent = this;
            children["interfaces"] = interfaces.get();
        }
        return children.at("interfaces");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::OutOfResource::get_children()
{
    if(children.find("interfaces") == children.end())
    {
        if(interfaces != nullptr)
        {
            children["interfaces"] = interfaces.get();
        }
    }

    return children;
}

void Rsvp::Counters::OutOfResource::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::Counters::InterfaceEvents::InterfaceEvent::InterfaceEvent()
    :
    	interface_name{YType::str, "interface-name"},
	 expired_paths{YType::uint32, "expired-paths"},
	 expired_reservations{YType::uint32, "expired-reservations"},
	 nac_ks{YType::uint32, "nac-ks"}
{
    yang_name = "interface-event"; yang_parent_name = "interface-events";
}

Rsvp::Counters::InterfaceEvents::InterfaceEvent::~InterfaceEvent()
{
}

bool Rsvp::Counters::InterfaceEvents::InterfaceEvent::has_data() const
{
    return interface_name.is_set
	|| expired_paths.is_set
	|| expired_reservations.is_set
	|| nac_ks.is_set;
}

bool Rsvp::Counters::InterfaceEvents::InterfaceEvent::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| is_set(expired_paths.operation)
	|| is_set(expired_reservations.operation)
	|| is_set(nac_ks.operation);
}

std::string Rsvp::Counters::InterfaceEvents::InterfaceEvent::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-event" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::InterfaceEvents::InterfaceEvent::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/interface-events/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (expired_paths.is_set || is_set(expired_paths.operation)) leaf_name_data.push_back(expired_paths.get_name_leafdata());
    if (expired_reservations.is_set || is_set(expired_reservations.operation)) leaf_name_data.push_back(expired_reservations.get_name_leafdata());
    if (nac_ks.is_set || is_set(nac_ks.operation)) leaf_name_data.push_back(nac_ks.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::InterfaceEvents::InterfaceEvent::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::InterfaceEvents::InterfaceEvent::get_children()
{
    return children;
}

void Rsvp::Counters::InterfaceEvents::InterfaceEvent::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "expired-paths")
    {
        expired_paths = value;
    }
    if(value_path == "expired-reservations")
    {
        expired_reservations = value;
    }
    if(value_path == "nac-ks")
    {
        nac_ks = value;
    }
}

Rsvp::Counters::InterfaceEvents::InterfaceEvents()
{
    yang_name = "interface-events"; yang_parent_name = "counters";
}

Rsvp::Counters::InterfaceEvents::~InterfaceEvents()
{
}

bool Rsvp::Counters::InterfaceEvents::has_data() const
{
    for (std::size_t index=0; index<interface_event.size(); index++)
    {
        if(interface_event[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::Counters::InterfaceEvents::has_operation() const
{
    for (std::size_t index=0; index<interface_event.size(); index++)
    {
        if(interface_event[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::Counters::InterfaceEvents::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-events";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::InterfaceEvents::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::InterfaceEvents::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-event")
    {
        for(auto const & c : interface_event)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::Counters::InterfaceEvents::InterfaceEvent>();
        c->parent = this;
        interface_event.push_back(std::move(c));
        children[segment_path] = interface_event.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::InterfaceEvents::get_children()
{
    for (auto const & c : interface_event)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::Counters::InterfaceEvents::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::Counters::Nsr::Nsr()
    :
    	last_cleared_timestamp{YType::uint32, "last-cleared-timestamp"},
	 last_idt_states{YType::uint32, "last-idt-states"},
	 rsvp_process_role{YType::enumeration, "rsvp-process-role"},
	 total_deletions{YType::uint32, "total-deletions"},
	 total_id_ts{YType::uint32, "total-id-ts"},
	 total_nacks{YType::uint64, "total-nacks"},
	 total_states{YType::uint32, "total-states"}
{
    yang_name = "nsr"; yang_parent_name = "counters";
}

Rsvp::Counters::Nsr::~Nsr()
{
}

bool Rsvp::Counters::Nsr::has_data() const
{
    return last_cleared_timestamp.is_set
	|| last_idt_states.is_set
	|| rsvp_process_role.is_set
	|| total_deletions.is_set
	|| total_id_ts.is_set
	|| total_nacks.is_set
	|| total_states.is_set;
}

bool Rsvp::Counters::Nsr::has_operation() const
{
    return is_set(operation)
	|| is_set(last_cleared_timestamp.operation)
	|| is_set(last_idt_states.operation)
	|| is_set(rsvp_process_role.operation)
	|| is_set(total_deletions.operation)
	|| is_set(total_id_ts.operation)
	|| is_set(total_nacks.operation)
	|| is_set(total_states.operation);
}

std::string Rsvp::Counters::Nsr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nsr";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::Nsr::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (last_cleared_timestamp.is_set || is_set(last_cleared_timestamp.operation)) leaf_name_data.push_back(last_cleared_timestamp.get_name_leafdata());
    if (last_idt_states.is_set || is_set(last_idt_states.operation)) leaf_name_data.push_back(last_idt_states.get_name_leafdata());
    if (rsvp_process_role.is_set || is_set(rsvp_process_role.operation)) leaf_name_data.push_back(rsvp_process_role.get_name_leafdata());
    if (total_deletions.is_set || is_set(total_deletions.operation)) leaf_name_data.push_back(total_deletions.get_name_leafdata());
    if (total_id_ts.is_set || is_set(total_id_ts.operation)) leaf_name_data.push_back(total_id_ts.get_name_leafdata());
    if (total_nacks.is_set || is_set(total_nacks.operation)) leaf_name_data.push_back(total_nacks.get_name_leafdata());
    if (total_states.is_set || is_set(total_states.operation)) leaf_name_data.push_back(total_states.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::Nsr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::Nsr::get_children()
{
    return children;
}

void Rsvp::Counters::Nsr::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "last-cleared-timestamp")
    {
        last_cleared_timestamp = value;
    }
    if(value_path == "last-idt-states")
    {
        last_idt_states = value;
    }
    if(value_path == "rsvp-process-role")
    {
        rsvp_process_role = value;
    }
    if(value_path == "total-deletions")
    {
        total_deletions = value;
    }
    if(value_path == "total-id-ts")
    {
        total_id_ts = value;
    }
    if(value_path == "total-nacks")
    {
        total_nacks = value;
    }
    if(value_path == "total-states")
    {
        total_states = value;
    }
}

Rsvp::Counters::Issu::Issu()
    :
    	last_cleared_timestamp{YType::uint32, "last-cleared-timestamp"},
	 last_idt_states{YType::uint32, "last-idt-states"},
	 rsvp_process_role{YType::enumeration, "rsvp-process-role"},
	 total_deletions{YType::uint32, "total-deletions"},
	 total_id_ts{YType::uint32, "total-id-ts"},
	 total_nacks{YType::uint64, "total-nacks"},
	 total_states{YType::uint32, "total-states"}
{
    yang_name = "issu"; yang_parent_name = "counters";
}

Rsvp::Counters::Issu::~Issu()
{
}

bool Rsvp::Counters::Issu::has_data() const
{
    return last_cleared_timestamp.is_set
	|| last_idt_states.is_set
	|| rsvp_process_role.is_set
	|| total_deletions.is_set
	|| total_id_ts.is_set
	|| total_nacks.is_set
	|| total_states.is_set;
}

bool Rsvp::Counters::Issu::has_operation() const
{
    return is_set(operation)
	|| is_set(last_cleared_timestamp.operation)
	|| is_set(last_idt_states.operation)
	|| is_set(rsvp_process_role.operation)
	|| is_set(total_deletions.operation)
	|| is_set(total_id_ts.operation)
	|| is_set(total_nacks.operation)
	|| is_set(total_states.operation);
}

std::string Rsvp::Counters::Issu::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "issu";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::Issu::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (last_cleared_timestamp.is_set || is_set(last_cleared_timestamp.operation)) leaf_name_data.push_back(last_cleared_timestamp.get_name_leafdata());
    if (last_idt_states.is_set || is_set(last_idt_states.operation)) leaf_name_data.push_back(last_idt_states.get_name_leafdata());
    if (rsvp_process_role.is_set || is_set(rsvp_process_role.operation)) leaf_name_data.push_back(rsvp_process_role.get_name_leafdata());
    if (total_deletions.is_set || is_set(total_deletions.operation)) leaf_name_data.push_back(total_deletions.get_name_leafdata());
    if (total_id_ts.is_set || is_set(total_id_ts.operation)) leaf_name_data.push_back(total_id_ts.get_name_leafdata());
    if (total_nacks.is_set || is_set(total_nacks.operation)) leaf_name_data.push_back(total_nacks.get_name_leafdata());
    if (total_states.is_set || is_set(total_states.operation)) leaf_name_data.push_back(total_states.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::Issu::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::Issu::get_children()
{
    return children;
}

void Rsvp::Counters::Issu::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "last-cleared-timestamp")
    {
        last_cleared_timestamp = value;
    }
    if(value_path == "last-idt-states")
    {
        last_idt_states = value;
    }
    if(value_path == "rsvp-process-role")
    {
        rsvp_process_role = value;
    }
    if(value_path == "total-deletions")
    {
        total_deletions = value;
    }
    if(value_path == "total-id-ts")
    {
        total_id_ts = value;
    }
    if(value_path == "total-nacks")
    {
        total_nacks = value;
    }
    if(value_path == "total-states")
    {
        total_states = value;
    }
}

Rsvp::Counters::Database::Database()
    :
    	incoming_paths{YType::uint32, "incoming-paths"},
	 incoming_reservations{YType::uint32, "incoming-reservations"},
	 interfaces{YType::uint32, "interfaces"},
	 outgoing_paths{YType::uint32, "outgoing-paths"},
	 outgoing_reservations{YType::uint32, "outgoing-reservations"},
	 sessions{YType::uint32, "sessions"}
{
    yang_name = "database"; yang_parent_name = "counters";
}

Rsvp::Counters::Database::~Database()
{
}

bool Rsvp::Counters::Database::has_data() const
{
    return incoming_paths.is_set
	|| incoming_reservations.is_set
	|| interfaces.is_set
	|| outgoing_paths.is_set
	|| outgoing_reservations.is_set
	|| sessions.is_set;
}

bool Rsvp::Counters::Database::has_operation() const
{
    return is_set(operation)
	|| is_set(incoming_paths.operation)
	|| is_set(incoming_reservations.operation)
	|| is_set(interfaces.operation)
	|| is_set(outgoing_paths.operation)
	|| is_set(outgoing_reservations.operation)
	|| is_set(sessions.operation);
}

std::string Rsvp::Counters::Database::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "database";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::Database::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (incoming_paths.is_set || is_set(incoming_paths.operation)) leaf_name_data.push_back(incoming_paths.get_name_leafdata());
    if (incoming_reservations.is_set || is_set(incoming_reservations.operation)) leaf_name_data.push_back(incoming_reservations.get_name_leafdata());
    if (interfaces.is_set || is_set(interfaces.operation)) leaf_name_data.push_back(interfaces.get_name_leafdata());
    if (outgoing_paths.is_set || is_set(outgoing_paths.operation)) leaf_name_data.push_back(outgoing_paths.get_name_leafdata());
    if (outgoing_reservations.is_set || is_set(outgoing_reservations.operation)) leaf_name_data.push_back(outgoing_reservations.get_name_leafdata());
    if (sessions.is_set || is_set(sessions.operation)) leaf_name_data.push_back(sessions.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::Database::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::Database::get_children()
{
    return children;
}

void Rsvp::Counters::Database::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "incoming-paths")
    {
        incoming_paths = value;
    }
    if(value_path == "incoming-reservations")
    {
        incoming_reservations = value;
    }
    if(value_path == "interfaces")
    {
        interfaces = value;
    }
    if(value_path == "outgoing-paths")
    {
        outgoing_paths = value;
    }
    if(value_path == "outgoing-reservations")
    {
        outgoing_reservations = value;
    }
    if(value_path == "sessions")
    {
        sessions = value;
    }
}

Rsvp::Counters::EventSyncs::EventSync::EventSync()
    :
    	interface_name{YType::str, "interface-name"},
	 expired_paths{YType::uint32, "expired-paths"},
	 expired_reservations{YType::uint32, "expired-reservations"},
	 nac_ks{YType::uint32, "nac-ks"}
{
    yang_name = "event-sync"; yang_parent_name = "event-syncs";
}

Rsvp::Counters::EventSyncs::EventSync::~EventSync()
{
}

bool Rsvp::Counters::EventSyncs::EventSync::has_data() const
{
    return interface_name.is_set
	|| expired_paths.is_set
	|| expired_reservations.is_set
	|| nac_ks.is_set;
}

bool Rsvp::Counters::EventSyncs::EventSync::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| is_set(expired_paths.operation)
	|| is_set(expired_reservations.operation)
	|| is_set(nac_ks.operation);
}

std::string Rsvp::Counters::EventSyncs::EventSync::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "event-sync" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::EventSyncs::EventSync::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/event-syncs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (expired_paths.is_set || is_set(expired_paths.operation)) leaf_name_data.push_back(expired_paths.get_name_leafdata());
    if (expired_reservations.is_set || is_set(expired_reservations.operation)) leaf_name_data.push_back(expired_reservations.get_name_leafdata());
    if (nac_ks.is_set || is_set(nac_ks.operation)) leaf_name_data.push_back(nac_ks.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::EventSyncs::EventSync::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::EventSyncs::EventSync::get_children()
{
    return children;
}

void Rsvp::Counters::EventSyncs::EventSync::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "expired-paths")
    {
        expired_paths = value;
    }
    if(value_path == "expired-reservations")
    {
        expired_reservations = value;
    }
    if(value_path == "nac-ks")
    {
        nac_ks = value;
    }
}

Rsvp::Counters::EventSyncs::EventSyncs()
{
    yang_name = "event-syncs"; yang_parent_name = "counters";
}

Rsvp::Counters::EventSyncs::~EventSyncs()
{
}

bool Rsvp::Counters::EventSyncs::has_data() const
{
    for (std::size_t index=0; index<event_sync.size(); index++)
    {
        if(event_sync[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::Counters::EventSyncs::has_operation() const
{
    for (std::size_t index=0; index<event_sync.size(); index++)
    {
        if(event_sync[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::Counters::EventSyncs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "event-syncs";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::EventSyncs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::EventSyncs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "event-sync")
    {
        for(auto const & c : event_sync)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::Counters::EventSyncs::EventSync>();
        c->parent = this;
        event_sync.push_back(std::move(c));
        children[segment_path] = event_sync.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::EventSyncs::get_children()
{
    for (auto const & c : event_sync)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::Counters::EventSyncs::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::Counters::Counters()
    :
    database(std::make_unique<Rsvp::Counters::Database>())
	,event_syncs(std::make_unique<Rsvp::Counters::EventSyncs>())
	,interface_events(std::make_unique<Rsvp::Counters::InterfaceEvents>())
	,interface_messages(std::make_unique<Rsvp::Counters::InterfaceMessages>())
	,issu(std::make_unique<Rsvp::Counters::Issu>())
	,message_summary(std::make_unique<Rsvp::Counters::MessageSummary>())
	,nsr(std::make_unique<Rsvp::Counters::Nsr>())
	,out_of_resource(std::make_unique<Rsvp::Counters::OutOfResource>())
	,prefix_filtering(std::make_unique<Rsvp::Counters::PrefixFiltering>())
{
    database->parent = this;
    children["database"] = database.get();

    event_syncs->parent = this;
    children["event-syncs"] = event_syncs.get();

    interface_events->parent = this;
    children["interface-events"] = interface_events.get();

    interface_messages->parent = this;
    children["interface-messages"] = interface_messages.get();

    issu->parent = this;
    children["issu"] = issu.get();

    message_summary->parent = this;
    children["message-summary"] = message_summary.get();

    nsr->parent = this;
    children["nsr"] = nsr.get();

    out_of_resource->parent = this;
    children["out-of-resource"] = out_of_resource.get();

    prefix_filtering->parent = this;
    children["prefix-filtering"] = prefix_filtering.get();

    yang_name = "counters"; yang_parent_name = "rsvp";
}

Rsvp::Counters::~Counters()
{
}

bool Rsvp::Counters::has_data() const
{
    return (database !=  nullptr && database->has_data())
	|| (event_syncs !=  nullptr && event_syncs->has_data())
	|| (interface_events !=  nullptr && interface_events->has_data())
	|| (interface_messages !=  nullptr && interface_messages->has_data())
	|| (issu !=  nullptr && issu->has_data())
	|| (message_summary !=  nullptr && message_summary->has_data())
	|| (nsr !=  nullptr && nsr->has_data())
	|| (out_of_resource !=  nullptr && out_of_resource->has_data())
	|| (prefix_filtering !=  nullptr && prefix_filtering->has_data());
}

bool Rsvp::Counters::has_operation() const
{
    return is_set(operation)
	|| (database !=  nullptr && database->has_operation())
	|| (event_syncs !=  nullptr && event_syncs->has_operation())
	|| (interface_events !=  nullptr && interface_events->has_operation())
	|| (interface_messages !=  nullptr && interface_messages->has_operation())
	|| (issu !=  nullptr && issu->has_operation())
	|| (message_summary !=  nullptr && message_summary->has_operation())
	|| (nsr !=  nullptr && nsr->has_operation())
	|| (out_of_resource !=  nullptr && out_of_resource->has_operation())
	|| (prefix_filtering !=  nullptr && prefix_filtering->has_operation());
}

std::string Rsvp::Counters::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "counters";

    return path_buffer.str();

}

EntityPath Rsvp::Counters::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Counters::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "database")
    {
        if(database != nullptr)
        {
            children["database"] = database.get();
        }
        else
        {
            database = std::make_unique<Rsvp::Counters::Database>();
            database->parent = this;
            children["database"] = database.get();
        }
        return children.at("database");
    }

    if(child_yang_name == "event-syncs")
    {
        if(event_syncs != nullptr)
        {
            children["event-syncs"] = event_syncs.get();
        }
        else
        {
            event_syncs = std::make_unique<Rsvp::Counters::EventSyncs>();
            event_syncs->parent = this;
            children["event-syncs"] = event_syncs.get();
        }
        return children.at("event-syncs");
    }

    if(child_yang_name == "interface-events")
    {
        if(interface_events != nullptr)
        {
            children["interface-events"] = interface_events.get();
        }
        else
        {
            interface_events = std::make_unique<Rsvp::Counters::InterfaceEvents>();
            interface_events->parent = this;
            children["interface-events"] = interface_events.get();
        }
        return children.at("interface-events");
    }

    if(child_yang_name == "interface-messages")
    {
        if(interface_messages != nullptr)
        {
            children["interface-messages"] = interface_messages.get();
        }
        else
        {
            interface_messages = std::make_unique<Rsvp::Counters::InterfaceMessages>();
            interface_messages->parent = this;
            children["interface-messages"] = interface_messages.get();
        }
        return children.at("interface-messages");
    }

    if(child_yang_name == "issu")
    {
        if(issu != nullptr)
        {
            children["issu"] = issu.get();
        }
        else
        {
            issu = std::make_unique<Rsvp::Counters::Issu>();
            issu->parent = this;
            children["issu"] = issu.get();
        }
        return children.at("issu");
    }

    if(child_yang_name == "message-summary")
    {
        if(message_summary != nullptr)
        {
            children["message-summary"] = message_summary.get();
        }
        else
        {
            message_summary = std::make_unique<Rsvp::Counters::MessageSummary>();
            message_summary->parent = this;
            children["message-summary"] = message_summary.get();
        }
        return children.at("message-summary");
    }

    if(child_yang_name == "nsr")
    {
        if(nsr != nullptr)
        {
            children["nsr"] = nsr.get();
        }
        else
        {
            nsr = std::make_unique<Rsvp::Counters::Nsr>();
            nsr->parent = this;
            children["nsr"] = nsr.get();
        }
        return children.at("nsr");
    }

    if(child_yang_name == "out-of-resource")
    {
        if(out_of_resource != nullptr)
        {
            children["out-of-resource"] = out_of_resource.get();
        }
        else
        {
            out_of_resource = std::make_unique<Rsvp::Counters::OutOfResource>();
            out_of_resource->parent = this;
            children["out-of-resource"] = out_of_resource.get();
        }
        return children.at("out-of-resource");
    }

    if(child_yang_name == "prefix-filtering")
    {
        if(prefix_filtering != nullptr)
        {
            children["prefix-filtering"] = prefix_filtering.get();
        }
        else
        {
            prefix_filtering = std::make_unique<Rsvp::Counters::PrefixFiltering>();
            prefix_filtering->parent = this;
            children["prefix-filtering"] = prefix_filtering.get();
        }
        return children.at("prefix-filtering");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Counters::get_children()
{
    if(children.find("database") == children.end())
    {
        if(database != nullptr)
        {
            children["database"] = database.get();
        }
    }

    if(children.find("event-syncs") == children.end())
    {
        if(event_syncs != nullptr)
        {
            children["event-syncs"] = event_syncs.get();
        }
    }

    if(children.find("interface-events") == children.end())
    {
        if(interface_events != nullptr)
        {
            children["interface-events"] = interface_events.get();
        }
    }

    if(children.find("interface-messages") == children.end())
    {
        if(interface_messages != nullptr)
        {
            children["interface-messages"] = interface_messages.get();
        }
    }

    if(children.find("issu") == children.end())
    {
        if(issu != nullptr)
        {
            children["issu"] = issu.get();
        }
    }

    if(children.find("message-summary") == children.end())
    {
        if(message_summary != nullptr)
        {
            children["message-summary"] = message_summary.get();
        }
    }

    if(children.find("nsr") == children.end())
    {
        if(nsr != nullptr)
        {
            children["nsr"] = nsr.get();
        }
    }

    if(children.find("out-of-resource") == children.end())
    {
        if(out_of_resource != nullptr)
        {
            children["out-of-resource"] = out_of_resource.get();
        }
    }

    if(children.find("prefix-filtering") == children.end())
    {
        if(prefix_filtering != nullptr)
        {
            children["prefix-filtering"] = prefix_filtering.get();
        }
    }

    return children;
}

void Rsvp::Counters::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface::PreStandardDsteInterface()
    :
    	allocated_bit_rate{YType::uint64, "allocated-bit-rate"},
	 is_max_bandwidth_absolute{YType::boolean, "is-max-bandwidth-absolute"},
	 is_max_subpool_bandwidth_absolute{YType::boolean, "is-max-subpool-bandwidth-absolute"},
	 max_bandwidth{YType::uint64, "max-bandwidth"},
	 max_flow_bandwidth{YType::uint64, "max-flow-bandwidth"},
	 max_subpool_bandwidth{YType::uint64, "max-subpool-bandwidth"}
{
    yang_name = "pre-standard-dste-interface"; yang_parent_name = "bandwidth-information";
}

Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface::~PreStandardDsteInterface()
{
}

bool Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface::has_data() const
{
    return allocated_bit_rate.is_set
	|| is_max_bandwidth_absolute.is_set
	|| is_max_subpool_bandwidth_absolute.is_set
	|| max_bandwidth.is_set
	|| max_flow_bandwidth.is_set
	|| max_subpool_bandwidth.is_set;
}

bool Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(allocated_bit_rate.operation)
	|| is_set(is_max_bandwidth_absolute.operation)
	|| is_set(is_max_subpool_bandwidth_absolute.operation)
	|| is_set(max_bandwidth.operation)
	|| is_set(max_flow_bandwidth.operation)
	|| is_set(max_subpool_bandwidth.operation);
}

std::string Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pre-standard-dste-interface";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (allocated_bit_rate.is_set || is_set(allocated_bit_rate.operation)) leaf_name_data.push_back(allocated_bit_rate.get_name_leafdata());
    if (is_max_bandwidth_absolute.is_set || is_set(is_max_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bandwidth_absolute.get_name_leafdata());
    if (is_max_subpool_bandwidth_absolute.is_set || is_set(is_max_subpool_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_subpool_bandwidth_absolute.get_name_leafdata());
    if (max_bandwidth.is_set || is_set(max_bandwidth.operation)) leaf_name_data.push_back(max_bandwidth.get_name_leafdata());
    if (max_flow_bandwidth.is_set || is_set(max_flow_bandwidth.operation)) leaf_name_data.push_back(max_flow_bandwidth.get_name_leafdata());
    if (max_subpool_bandwidth.is_set || is_set(max_subpool_bandwidth.operation)) leaf_name_data.push_back(max_subpool_bandwidth.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface::get_children()
{
    return children;
}

void Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "allocated-bit-rate")
    {
        allocated_bit_rate = value;
    }
    if(value_path == "is-max-bandwidth-absolute")
    {
        is_max_bandwidth_absolute = value;
    }
    if(value_path == "is-max-subpool-bandwidth-absolute")
    {
        is_max_subpool_bandwidth_absolute = value;
    }
    if(value_path == "max-bandwidth")
    {
        max_bandwidth = value;
    }
    if(value_path == "max-flow-bandwidth")
    {
        max_flow_bandwidth = value;
    }
    if(value_path == "max-subpool-bandwidth")
    {
        max_subpool_bandwidth = value;
    }
}

Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface::StandardDsteInterface()
    :
    	allocated_bit_rate{YType::uint64, "allocated-bit-rate"},
	 is_max_bandwidth_absolute{YType::boolean, "is-max-bandwidth-absolute"},
	 is_max_bc0_bandwidth_absolute{YType::boolean, "is-max-bc0-bandwidth-absolute"},
	 is_max_bc1_bandwidth_absolute{YType::boolean, "is-max-bc1-bandwidth-absolute"},
	 max_bandwidth{YType::uint64, "max-bandwidth"},
	 max_flow_bandwidth{YType::uint64, "max-flow-bandwidth"},
	 max_pool0_bandwidth{YType::uint64, "max-pool0-bandwidth"},
	 max_pool1_bandwidth{YType::uint64, "max-pool1-bandwidth"}
{
    yang_name = "standard-dste-interface"; yang_parent_name = "bandwidth-information";
}

Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface::~StandardDsteInterface()
{
}

bool Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface::has_data() const
{
    return allocated_bit_rate.is_set
	|| is_max_bandwidth_absolute.is_set
	|| is_max_bc0_bandwidth_absolute.is_set
	|| is_max_bc1_bandwidth_absolute.is_set
	|| max_bandwidth.is_set
	|| max_flow_bandwidth.is_set
	|| max_pool0_bandwidth.is_set
	|| max_pool1_bandwidth.is_set;
}

bool Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(allocated_bit_rate.operation)
	|| is_set(is_max_bandwidth_absolute.operation)
	|| is_set(is_max_bc0_bandwidth_absolute.operation)
	|| is_set(is_max_bc1_bandwidth_absolute.operation)
	|| is_set(max_bandwidth.operation)
	|| is_set(max_flow_bandwidth.operation)
	|| is_set(max_pool0_bandwidth.operation)
	|| is_set(max_pool1_bandwidth.operation);
}

std::string Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "standard-dste-interface";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (allocated_bit_rate.is_set || is_set(allocated_bit_rate.operation)) leaf_name_data.push_back(allocated_bit_rate.get_name_leafdata());
    if (is_max_bandwidth_absolute.is_set || is_set(is_max_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bandwidth_absolute.get_name_leafdata());
    if (is_max_bc0_bandwidth_absolute.is_set || is_set(is_max_bc0_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bc0_bandwidth_absolute.get_name_leafdata());
    if (is_max_bc1_bandwidth_absolute.is_set || is_set(is_max_bc1_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bc1_bandwidth_absolute.get_name_leafdata());
    if (max_bandwidth.is_set || is_set(max_bandwidth.operation)) leaf_name_data.push_back(max_bandwidth.get_name_leafdata());
    if (max_flow_bandwidth.is_set || is_set(max_flow_bandwidth.operation)) leaf_name_data.push_back(max_flow_bandwidth.get_name_leafdata());
    if (max_pool0_bandwidth.is_set || is_set(max_pool0_bandwidth.operation)) leaf_name_data.push_back(max_pool0_bandwidth.get_name_leafdata());
    if (max_pool1_bandwidth.is_set || is_set(max_pool1_bandwidth.operation)) leaf_name_data.push_back(max_pool1_bandwidth.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface::get_children()
{
    return children;
}

void Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "allocated-bit-rate")
    {
        allocated_bit_rate = value;
    }
    if(value_path == "is-max-bandwidth-absolute")
    {
        is_max_bandwidth_absolute = value;
    }
    if(value_path == "is-max-bc0-bandwidth-absolute")
    {
        is_max_bc0_bandwidth_absolute = value;
    }
    if(value_path == "is-max-bc1-bandwidth-absolute")
    {
        is_max_bc1_bandwidth_absolute = value;
    }
    if(value_path == "max-bandwidth")
    {
        max_bandwidth = value;
    }
    if(value_path == "max-flow-bandwidth")
    {
        max_flow_bandwidth = value;
    }
    if(value_path == "max-pool0-bandwidth")
    {
        max_pool0_bandwidth = value;
    }
    if(value_path == "max-pool1-bandwidth")
    {
        max_pool1_bandwidth = value;
    }
}

Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::BandwidthInformation()
    :
    	dste_mode{YType::enumeration, "dste-mode"}
    	,
    pre_standard_dste_interface(std::make_unique<Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface>())
	,standard_dste_interface(std::make_unique<Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface>())
{
    pre_standard_dste_interface->parent = this;
    children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();

    standard_dste_interface->parent = this;
    children["standard-dste-interface"] = standard_dste_interface.get();

    yang_name = "bandwidth-information"; yang_parent_name = "interface-detailed";
}

Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::~BandwidthInformation()
{
}

bool Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::has_data() const
{
    return dste_mode.is_set
	|| (pre_standard_dste_interface !=  nullptr && pre_standard_dste_interface->has_data())
	|| (standard_dste_interface !=  nullptr && standard_dste_interface->has_data());
}

bool Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::has_operation() const
{
    return is_set(operation)
	|| is_set(dste_mode.operation)
	|| (pre_standard_dste_interface !=  nullptr && pre_standard_dste_interface->has_operation())
	|| (standard_dste_interface !=  nullptr && standard_dste_interface->has_operation());
}

std::string Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bandwidth-information";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (dste_mode.is_set || is_set(dste_mode.operation)) leaf_name_data.push_back(dste_mode.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "pre-standard-dste-interface")
    {
        if(pre_standard_dste_interface != nullptr)
        {
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
        else
        {
            pre_standard_dste_interface = std::make_unique<Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::PreStandardDsteInterface>();
            pre_standard_dste_interface->parent = this;
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
        return children.at("pre-standard-dste-interface");
    }

    if(child_yang_name == "standard-dste-interface")
    {
        if(standard_dste_interface != nullptr)
        {
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
        else
        {
            standard_dste_interface = std::make_unique<Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::StandardDsteInterface>();
            standard_dste_interface->parent = this;
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
        return children.at("standard-dste-interface");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::get_children()
{
    if(children.find("pre-standard-dste-interface") == children.end())
    {
        if(pre_standard_dste_interface != nullptr)
        {
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
    }

    if(children.find("standard-dste-interface") == children.end())
    {
        if(standard_dste_interface != nullptr)
        {
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
    }

    return children;
}

void Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "dste-mode")
    {
        dste_mode = value;
    }
}

Rsvp::InterfaceDetaileds::InterfaceDetailed::Flags::Flags()
    :
    	is_backup_tunnel{YType::boolean, "is-backup-tunnel"},
	 is_interface_created{YType::boolean, "is-interface-created"},
	 is_interface_down{YType::boolean, "is-interface-down"},
	 is_message_bundling_enabled{YType::boolean, "is-message-bundling-enabled"},
	 is_mpls_enabled{YType::boolean, "is-mpls-enabled"},
	 is_non_default_vrf{YType::boolean, "is-non-default-vrf"},
	 is_pacing_enabled{YType::boolean, "is-pacing-enabled"},
	 is_refresh_enabled{YType::boolean, "is-refresh-enabled"},
	 is_refresh_reduction_enabled{YType::boolean, "is-refresh-reduction-enabled"},
	 is_rel_s_refresh_enabled{YType::boolean, "is-rel-s-refresh-enabled"},
	 is_rsvp_configured{YType::boolean, "is-rsvp-configured"},
	 is_s_refresh_enabled{YType::boolean, "is-s-refresh-enabled"}
{
    yang_name = "flags"; yang_parent_name = "interface-detailed";
}

Rsvp::InterfaceDetaileds::InterfaceDetailed::Flags::~Flags()
{
}

bool Rsvp::InterfaceDetaileds::InterfaceDetailed::Flags::has_data() const
{
    return is_backup_tunnel.is_set
	|| is_interface_created.is_set
	|| is_interface_down.is_set
	|| is_message_bundling_enabled.is_set
	|| is_mpls_enabled.is_set
	|| is_non_default_vrf.is_set
	|| is_pacing_enabled.is_set
	|| is_refresh_enabled.is_set
	|| is_refresh_reduction_enabled.is_set
	|| is_rel_s_refresh_enabled.is_set
	|| is_rsvp_configured.is_set
	|| is_s_refresh_enabled.is_set;
}

bool Rsvp::InterfaceDetaileds::InterfaceDetailed::Flags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_backup_tunnel.operation)
	|| is_set(is_interface_created.operation)
	|| is_set(is_interface_down.operation)
	|| is_set(is_message_bundling_enabled.operation)
	|| is_set(is_mpls_enabled.operation)
	|| is_set(is_non_default_vrf.operation)
	|| is_set(is_pacing_enabled.operation)
	|| is_set(is_refresh_enabled.operation)
	|| is_set(is_refresh_reduction_enabled.operation)
	|| is_set(is_rel_s_refresh_enabled.operation)
	|| is_set(is_rsvp_configured.operation)
	|| is_set(is_s_refresh_enabled.operation);
}

std::string Rsvp::InterfaceDetaileds::InterfaceDetailed::Flags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flags";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceDetaileds::InterfaceDetailed::Flags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_backup_tunnel.is_set || is_set(is_backup_tunnel.operation)) leaf_name_data.push_back(is_backup_tunnel.get_name_leafdata());
    if (is_interface_created.is_set || is_set(is_interface_created.operation)) leaf_name_data.push_back(is_interface_created.get_name_leafdata());
    if (is_interface_down.is_set || is_set(is_interface_down.operation)) leaf_name_data.push_back(is_interface_down.get_name_leafdata());
    if (is_message_bundling_enabled.is_set || is_set(is_message_bundling_enabled.operation)) leaf_name_data.push_back(is_message_bundling_enabled.get_name_leafdata());
    if (is_mpls_enabled.is_set || is_set(is_mpls_enabled.operation)) leaf_name_data.push_back(is_mpls_enabled.get_name_leafdata());
    if (is_non_default_vrf.is_set || is_set(is_non_default_vrf.operation)) leaf_name_data.push_back(is_non_default_vrf.get_name_leafdata());
    if (is_pacing_enabled.is_set || is_set(is_pacing_enabled.operation)) leaf_name_data.push_back(is_pacing_enabled.get_name_leafdata());
    if (is_refresh_enabled.is_set || is_set(is_refresh_enabled.operation)) leaf_name_data.push_back(is_refresh_enabled.get_name_leafdata());
    if (is_refresh_reduction_enabled.is_set || is_set(is_refresh_reduction_enabled.operation)) leaf_name_data.push_back(is_refresh_reduction_enabled.get_name_leafdata());
    if (is_rel_s_refresh_enabled.is_set || is_set(is_rel_s_refresh_enabled.operation)) leaf_name_data.push_back(is_rel_s_refresh_enabled.get_name_leafdata());
    if (is_rsvp_configured.is_set || is_set(is_rsvp_configured.operation)) leaf_name_data.push_back(is_rsvp_configured.get_name_leafdata());
    if (is_s_refresh_enabled.is_set || is_set(is_s_refresh_enabled.operation)) leaf_name_data.push_back(is_s_refresh_enabled.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceDetaileds::InterfaceDetailed::Flags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceDetaileds::InterfaceDetailed::Flags::get_children()
{
    return children;
}

void Rsvp::InterfaceDetaileds::InterfaceDetailed::Flags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-backup-tunnel")
    {
        is_backup_tunnel = value;
    }
    if(value_path == "is-interface-created")
    {
        is_interface_created = value;
    }
    if(value_path == "is-interface-down")
    {
        is_interface_down = value;
    }
    if(value_path == "is-message-bundling-enabled")
    {
        is_message_bundling_enabled = value;
    }
    if(value_path == "is-mpls-enabled")
    {
        is_mpls_enabled = value;
    }
    if(value_path == "is-non-default-vrf")
    {
        is_non_default_vrf = value;
    }
    if(value_path == "is-pacing-enabled")
    {
        is_pacing_enabled = value;
    }
    if(value_path == "is-refresh-enabled")
    {
        is_refresh_enabled = value;
    }
    if(value_path == "is-refresh-reduction-enabled")
    {
        is_refresh_reduction_enabled = value;
    }
    if(value_path == "is-rel-s-refresh-enabled")
    {
        is_rel_s_refresh_enabled = value;
    }
    if(value_path == "is-rsvp-configured")
    {
        is_rsvp_configured = value;
    }
    if(value_path == "is-s-refresh-enabled")
    {
        is_s_refresh_enabled = value;
    }
}

Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime::ExpiryTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "expiry-time"; yang_parent_name = "neighbor-array";
}

Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime::~ExpiryTime()
{
}

bool Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "expiry-time";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime::get_children()
{
    return children;
}

void Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId::NeighborMessageId()
    :
    	message_id{YType::uint32, "message-id"}
{
    yang_name = "neighbor-message-id"; yang_parent_name = "neighbor-array";
}

Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId::~NeighborMessageId()
{
}

bool Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId::has_data() const
{
    return message_id.is_set;
}

bool Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId::has_operation() const
{
    return is_set(operation)
	|| is_set(message_id.operation);
}

std::string Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "neighbor-message-id";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (message_id.is_set || is_set(message_id.operation)) leaf_name_data.push_back(message_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId::get_children()
{
    return children;
}

void Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "message-id")
    {
        message_id = value;
    }
}

Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborArray()
    :
    	is_neighbor_refresh_reduction_capable{YType::boolean, "is-neighbor-refresh-reduction-capable"},
	 message_ids{YType::uint32, "message-ids"},
	 neighbor_address{YType::str, "neighbor-address"},
	 outgoing_states{YType::int32, "outgoing-states"}
    	,
    expiry_time(std::make_unique<Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime>())
{
    expiry_time->parent = this;
    children["expiry-time"] = expiry_time.get();

    yang_name = "neighbor-array"; yang_parent_name = "interface-detailed";
}

Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::~NeighborArray()
{
}

bool Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::has_data() const
{
    for (std::size_t index=0; index<neighbor_message_id.size(); index++)
    {
        if(neighbor_message_id[index]->has_data())
            return true;
    }
    return is_neighbor_refresh_reduction_capable.is_set
	|| message_ids.is_set
	|| neighbor_address.is_set
	|| outgoing_states.is_set
	|| (expiry_time !=  nullptr && expiry_time->has_data());
}

bool Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::has_operation() const
{
    for (std::size_t index=0; index<neighbor_message_id.size(); index++)
    {
        if(neighbor_message_id[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(is_neighbor_refresh_reduction_capable.operation)
	|| is_set(message_ids.operation)
	|| is_set(neighbor_address.operation)
	|| is_set(outgoing_states.operation)
	|| (expiry_time !=  nullptr && expiry_time->has_operation());
}

std::string Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "neighbor-array";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_neighbor_refresh_reduction_capable.is_set || is_set(is_neighbor_refresh_reduction_capable.operation)) leaf_name_data.push_back(is_neighbor_refresh_reduction_capable.get_name_leafdata());
    if (message_ids.is_set || is_set(message_ids.operation)) leaf_name_data.push_back(message_ids.get_name_leafdata());
    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (outgoing_states.is_set || is_set(outgoing_states.operation)) leaf_name_data.push_back(outgoing_states.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "expiry-time")
    {
        if(expiry_time != nullptr)
        {
            children["expiry-time"] = expiry_time.get();
        }
        else
        {
            expiry_time = std::make_unique<Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::ExpiryTime>();
            expiry_time->parent = this;
            children["expiry-time"] = expiry_time.get();
        }
        return children.at("expiry-time");
    }

    if(child_yang_name == "neighbor-message-id")
    {
        for(auto const & c : neighbor_message_id)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::NeighborMessageId>();
        c->parent = this;
        neighbor_message_id.push_back(std::move(c));
        children[segment_path] = neighbor_message_id.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::get_children()
{
    if(children.find("expiry-time") == children.end())
    {
        if(expiry_time != nullptr)
        {
            children["expiry-time"] = expiry_time.get();
        }
    }

    for (auto const & c : neighbor_message_id)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-neighbor-refresh-reduction-capable")
    {
        is_neighbor_refresh_reduction_capable = value;
    }
    if(value_path == "message-ids")
    {
        message_ids = value;
    }
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "outgoing-states")
    {
        outgoing_states = value;
    }
}

Rsvp::InterfaceDetaileds::InterfaceDetailed::InterfaceDetailed()
    :
    	interface_name{YType::str, "interface-name"},
	 ack_hold_time{YType::uint32, "ack-hold-time"},
	 ack_max_size{YType::uint32, "ack-max-size"},
	 bundle_message_max_size{YType::uint32, "bundle-message-max-size"},
	 expiry_drops_tolerated{YType::int32, "expiry-drops-tolerated"},
	 expiry_interval{YType::int32, "expiry-interval"},
	 expiry_states{YType::int32, "expiry-states"},
	 expiry_timer_state{YType::enumeration, "expiry-timer-state"},
	 integrity_receive_password{YType::str, "integrity-receive-password"},
	 integrity_receive_password_optional{YType::uint8, "integrity-receive-password-optional"},
	 integrity_send_password{YType::str, "integrity-send-password"},
	 interface_name_xr{YType::str, "interface-name-xr"},
	 out_of_band_expiry_drops_tolerated{YType::uint32, "out-of-band-expiry-drops-tolerated"},
	 out_of_band_refresh_interval{YType::uint32, "out-of-band-refresh-interval"},
	 pacing_interval{YType::uint32, "pacing-interval"},
	 pacing_message_rate{YType::uint32, "pacing-message-rate"},
	 pacing_messages{YType::int32, "pacing-messages"},
	 pacing_timer_state{YType::enumeration, "pacing-timer-state"},
	 refresh_interval{YType::int32, "refresh-interval"},
	 refresh_timer_state{YType::enumeration, "refresh-timer-state"},
	 retransmit_time{YType::uint32, "retransmit-time"},
	 signalling_ip_tos{YType::uint8, "signalling-ip-tos"},
	 summary_refresh_max_size{YType::uint32, "summary-refresh-max-size"},
	 summary_refresh_timer_state{YType::enumeration, "summary-refresh-timer-state"}
    	,
    bandwidth_information(std::make_unique<Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation>())
	,flags(std::make_unique<Rsvp::InterfaceDetaileds::InterfaceDetailed::Flags>())
{
    bandwidth_information->parent = this;
    children["bandwidth-information"] = bandwidth_information.get();

    flags->parent = this;
    children["flags"] = flags.get();

    yang_name = "interface-detailed"; yang_parent_name = "interface-detaileds";
}

Rsvp::InterfaceDetaileds::InterfaceDetailed::~InterfaceDetailed()
{
}

bool Rsvp::InterfaceDetaileds::InterfaceDetailed::has_data() const
{
    for (std::size_t index=0; index<neighbor_array.size(); index++)
    {
        if(neighbor_array[index]->has_data())
            return true;
    }
    return interface_name.is_set
	|| ack_hold_time.is_set
	|| ack_max_size.is_set
	|| bundle_message_max_size.is_set
	|| expiry_drops_tolerated.is_set
	|| expiry_interval.is_set
	|| expiry_states.is_set
	|| expiry_timer_state.is_set
	|| integrity_receive_password.is_set
	|| integrity_receive_password_optional.is_set
	|| integrity_send_password.is_set
	|| interface_name_xr.is_set
	|| out_of_band_expiry_drops_tolerated.is_set
	|| out_of_band_refresh_interval.is_set
	|| pacing_interval.is_set
	|| pacing_message_rate.is_set
	|| pacing_messages.is_set
	|| pacing_timer_state.is_set
	|| refresh_interval.is_set
	|| refresh_timer_state.is_set
	|| retransmit_time.is_set
	|| signalling_ip_tos.is_set
	|| summary_refresh_max_size.is_set
	|| summary_refresh_timer_state.is_set
	|| (bandwidth_information !=  nullptr && bandwidth_information->has_data())
	|| (flags !=  nullptr && flags->has_data());
}

bool Rsvp::InterfaceDetaileds::InterfaceDetailed::has_operation() const
{
    for (std::size_t index=0; index<neighbor_array.size(); index++)
    {
        if(neighbor_array[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| is_set(ack_hold_time.operation)
	|| is_set(ack_max_size.operation)
	|| is_set(bundle_message_max_size.operation)
	|| is_set(expiry_drops_tolerated.operation)
	|| is_set(expiry_interval.operation)
	|| is_set(expiry_states.operation)
	|| is_set(expiry_timer_state.operation)
	|| is_set(integrity_receive_password.operation)
	|| is_set(integrity_receive_password_optional.operation)
	|| is_set(integrity_send_password.operation)
	|| is_set(interface_name_xr.operation)
	|| is_set(out_of_band_expiry_drops_tolerated.operation)
	|| is_set(out_of_band_refresh_interval.operation)
	|| is_set(pacing_interval.operation)
	|| is_set(pacing_message_rate.operation)
	|| is_set(pacing_messages.operation)
	|| is_set(pacing_timer_state.operation)
	|| is_set(refresh_interval.operation)
	|| is_set(refresh_timer_state.operation)
	|| is_set(retransmit_time.operation)
	|| is_set(signalling_ip_tos.operation)
	|| is_set(summary_refresh_max_size.operation)
	|| is_set(summary_refresh_timer_state.operation)
	|| (bandwidth_information !=  nullptr && bandwidth_information->has_operation())
	|| (flags !=  nullptr && flags->has_operation());
}

std::string Rsvp::InterfaceDetaileds::InterfaceDetailed::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-detailed" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceDetaileds::InterfaceDetailed::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-detaileds/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (ack_hold_time.is_set || is_set(ack_hold_time.operation)) leaf_name_data.push_back(ack_hold_time.get_name_leafdata());
    if (ack_max_size.is_set || is_set(ack_max_size.operation)) leaf_name_data.push_back(ack_max_size.get_name_leafdata());
    if (bundle_message_max_size.is_set || is_set(bundle_message_max_size.operation)) leaf_name_data.push_back(bundle_message_max_size.get_name_leafdata());
    if (expiry_drops_tolerated.is_set || is_set(expiry_drops_tolerated.operation)) leaf_name_data.push_back(expiry_drops_tolerated.get_name_leafdata());
    if (expiry_interval.is_set || is_set(expiry_interval.operation)) leaf_name_data.push_back(expiry_interval.get_name_leafdata());
    if (expiry_states.is_set || is_set(expiry_states.operation)) leaf_name_data.push_back(expiry_states.get_name_leafdata());
    if (expiry_timer_state.is_set || is_set(expiry_timer_state.operation)) leaf_name_data.push_back(expiry_timer_state.get_name_leafdata());
    if (integrity_receive_password.is_set || is_set(integrity_receive_password.operation)) leaf_name_data.push_back(integrity_receive_password.get_name_leafdata());
    if (integrity_receive_password_optional.is_set || is_set(integrity_receive_password_optional.operation)) leaf_name_data.push_back(integrity_receive_password_optional.get_name_leafdata());
    if (integrity_send_password.is_set || is_set(integrity_send_password.operation)) leaf_name_data.push_back(integrity_send_password.get_name_leafdata());
    if (interface_name_xr.is_set || is_set(interface_name_xr.operation)) leaf_name_data.push_back(interface_name_xr.get_name_leafdata());
    if (out_of_band_expiry_drops_tolerated.is_set || is_set(out_of_band_expiry_drops_tolerated.operation)) leaf_name_data.push_back(out_of_band_expiry_drops_tolerated.get_name_leafdata());
    if (out_of_band_refresh_interval.is_set || is_set(out_of_band_refresh_interval.operation)) leaf_name_data.push_back(out_of_band_refresh_interval.get_name_leafdata());
    if (pacing_interval.is_set || is_set(pacing_interval.operation)) leaf_name_data.push_back(pacing_interval.get_name_leafdata());
    if (pacing_message_rate.is_set || is_set(pacing_message_rate.operation)) leaf_name_data.push_back(pacing_message_rate.get_name_leafdata());
    if (pacing_messages.is_set || is_set(pacing_messages.operation)) leaf_name_data.push_back(pacing_messages.get_name_leafdata());
    if (pacing_timer_state.is_set || is_set(pacing_timer_state.operation)) leaf_name_data.push_back(pacing_timer_state.get_name_leafdata());
    if (refresh_interval.is_set || is_set(refresh_interval.operation)) leaf_name_data.push_back(refresh_interval.get_name_leafdata());
    if (refresh_timer_state.is_set || is_set(refresh_timer_state.operation)) leaf_name_data.push_back(refresh_timer_state.get_name_leafdata());
    if (retransmit_time.is_set || is_set(retransmit_time.operation)) leaf_name_data.push_back(retransmit_time.get_name_leafdata());
    if (signalling_ip_tos.is_set || is_set(signalling_ip_tos.operation)) leaf_name_data.push_back(signalling_ip_tos.get_name_leafdata());
    if (summary_refresh_max_size.is_set || is_set(summary_refresh_max_size.operation)) leaf_name_data.push_back(summary_refresh_max_size.get_name_leafdata());
    if (summary_refresh_timer_state.is_set || is_set(summary_refresh_timer_state.operation)) leaf_name_data.push_back(summary_refresh_timer_state.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceDetaileds::InterfaceDetailed::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "bandwidth-information")
    {
        if(bandwidth_information != nullptr)
        {
            children["bandwidth-information"] = bandwidth_information.get();
        }
        else
        {
            bandwidth_information = std::make_unique<Rsvp::InterfaceDetaileds::InterfaceDetailed::BandwidthInformation>();
            bandwidth_information->parent = this;
            children["bandwidth-information"] = bandwidth_information.get();
        }
        return children.at("bandwidth-information");
    }

    if(child_yang_name == "flags")
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
        else
        {
            flags = std::make_unique<Rsvp::InterfaceDetaileds::InterfaceDetailed::Flags>();
            flags->parent = this;
            children["flags"] = flags.get();
        }
        return children.at("flags");
    }

    if(child_yang_name == "neighbor-array")
    {
        for(auto const & c : neighbor_array)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::InterfaceDetaileds::InterfaceDetailed::NeighborArray>();
        c->parent = this;
        neighbor_array.push_back(std::move(c));
        children[segment_path] = neighbor_array.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceDetaileds::InterfaceDetailed::get_children()
{
    if(children.find("bandwidth-information") == children.end())
    {
        if(bandwidth_information != nullptr)
        {
            children["bandwidth-information"] = bandwidth_information.get();
        }
    }

    if(children.find("flags") == children.end())
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
    }

    for (auto const & c : neighbor_array)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::InterfaceDetaileds::InterfaceDetailed::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "ack-hold-time")
    {
        ack_hold_time = value;
    }
    if(value_path == "ack-max-size")
    {
        ack_max_size = value;
    }
    if(value_path == "bundle-message-max-size")
    {
        bundle_message_max_size = value;
    }
    if(value_path == "expiry-drops-tolerated")
    {
        expiry_drops_tolerated = value;
    }
    if(value_path == "expiry-interval")
    {
        expiry_interval = value;
    }
    if(value_path == "expiry-states")
    {
        expiry_states = value;
    }
    if(value_path == "expiry-timer-state")
    {
        expiry_timer_state = value;
    }
    if(value_path == "integrity-receive-password")
    {
        integrity_receive_password = value;
    }
    if(value_path == "integrity-receive-password-optional")
    {
        integrity_receive_password_optional = value;
    }
    if(value_path == "integrity-send-password")
    {
        integrity_send_password = value;
    }
    if(value_path == "interface-name-xr")
    {
        interface_name_xr = value;
    }
    if(value_path == "out-of-band-expiry-drops-tolerated")
    {
        out_of_band_expiry_drops_tolerated = value;
    }
    if(value_path == "out-of-band-refresh-interval")
    {
        out_of_band_refresh_interval = value;
    }
    if(value_path == "pacing-interval")
    {
        pacing_interval = value;
    }
    if(value_path == "pacing-message-rate")
    {
        pacing_message_rate = value;
    }
    if(value_path == "pacing-messages")
    {
        pacing_messages = value;
    }
    if(value_path == "pacing-timer-state")
    {
        pacing_timer_state = value;
    }
    if(value_path == "refresh-interval")
    {
        refresh_interval = value;
    }
    if(value_path == "refresh-timer-state")
    {
        refresh_timer_state = value;
    }
    if(value_path == "retransmit-time")
    {
        retransmit_time = value;
    }
    if(value_path == "signalling-ip-tos")
    {
        signalling_ip_tos = value;
    }
    if(value_path == "summary-refresh-max-size")
    {
        summary_refresh_max_size = value;
    }
    if(value_path == "summary-refresh-timer-state")
    {
        summary_refresh_timer_state = value;
    }
}

Rsvp::InterfaceDetaileds::InterfaceDetaileds()
{
    yang_name = "interface-detaileds"; yang_parent_name = "rsvp";
}

Rsvp::InterfaceDetaileds::~InterfaceDetaileds()
{
}

bool Rsvp::InterfaceDetaileds::has_data() const
{
    for (std::size_t index=0; index<interface_detailed.size(); index++)
    {
        if(interface_detailed[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::InterfaceDetaileds::has_operation() const
{
    for (std::size_t index=0; index<interface_detailed.size(); index++)
    {
        if(interface_detailed[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::InterfaceDetaileds::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-detaileds";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceDetaileds::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceDetaileds::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-detailed")
    {
        for(auto const & c : interface_detailed)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::InterfaceDetaileds::InterfaceDetailed>();
        c->parent = this;
        interface_detailed.push_back(std::move(c));
        children[segment_path] = interface_detailed.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceDetaileds::get_children()
{
    for (auto const & c : interface_detailed)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::InterfaceDetaileds::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::GracefulRestart::RecoveryTimeLeft::RecoveryTimeLeft()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "recovery-time-left"; yang_parent_name = "graceful-restart";
}

Rsvp::GracefulRestart::RecoveryTimeLeft::~RecoveryTimeLeft()
{
}

bool Rsvp::GracefulRestart::RecoveryTimeLeft::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool Rsvp::GracefulRestart::RecoveryTimeLeft::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string Rsvp::GracefulRestart::RecoveryTimeLeft::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "recovery-time-left";

    return path_buffer.str();

}

EntityPath Rsvp::GracefulRestart::RecoveryTimeLeft::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/graceful-restart/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::GracefulRestart::RecoveryTimeLeft::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::GracefulRestart::RecoveryTimeLeft::get_children()
{
    return children;
}

void Rsvp::GracefulRestart::RecoveryTimeLeft::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

Rsvp::GracefulRestart::RecoveryTimerExpTime::RecoveryTimerExpTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "recovery-timer-exp-time"; yang_parent_name = "graceful-restart";
}

Rsvp::GracefulRestart::RecoveryTimerExpTime::~RecoveryTimerExpTime()
{
}

bool Rsvp::GracefulRestart::RecoveryTimerExpTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool Rsvp::GracefulRestart::RecoveryTimerExpTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string Rsvp::GracefulRestart::RecoveryTimerExpTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "recovery-timer-exp-time";

    return path_buffer.str();

}

EntityPath Rsvp::GracefulRestart::RecoveryTimerExpTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/graceful-restart/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::GracefulRestart::RecoveryTimerExpTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::GracefulRestart::RecoveryTimerExpTime::get_children()
{
    return children;
}

void Rsvp::GracefulRestart::RecoveryTimerExpTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

Rsvp::GracefulRestart::LocalNodeAddress::LocalNodeAddress()
    :
    	application_type{YType::enumeration, "application-type"},
	 local_node_ip_address{YType::str, "local-node-ip-address"}
{
    yang_name = "local-node-address"; yang_parent_name = "graceful-restart";
}

Rsvp::GracefulRestart::LocalNodeAddress::~LocalNodeAddress()
{
}

bool Rsvp::GracefulRestart::LocalNodeAddress::has_data() const
{
    return application_type.is_set
	|| local_node_ip_address.is_set;
}

bool Rsvp::GracefulRestart::LocalNodeAddress::has_operation() const
{
    return is_set(operation)
	|| is_set(application_type.operation)
	|| is_set(local_node_ip_address.operation);
}

std::string Rsvp::GracefulRestart::LocalNodeAddress::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "local-node-address";

    return path_buffer.str();

}

EntityPath Rsvp::GracefulRestart::LocalNodeAddress::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/graceful-restart/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (application_type.is_set || is_set(application_type.operation)) leaf_name_data.push_back(application_type.get_name_leafdata());
    if (local_node_ip_address.is_set || is_set(local_node_ip_address.operation)) leaf_name_data.push_back(local_node_ip_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::GracefulRestart::LocalNodeAddress::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::GracefulRestart::LocalNodeAddress::get_children()
{
    return children;
}

void Rsvp::GracefulRestart::LocalNodeAddress::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "application-type")
    {
        application_type = value;
    }
    if(value_path == "local-node-ip-address")
    {
        local_node_ip_address = value;
    }
}

Rsvp::GracefulRestart::GracefulRestart()
    :
    	global_neighbors{YType::uint32, "global-neighbors"},
	 hello_interval{YType::uint32, "hello-interval"},
	 is_gr_enabled{YType::boolean, "is-gr-enabled"},
	 is_recovery_timer_running{YType::boolean, "is-recovery-timer-running"},
	 missed_hellos{YType::uint8, "missed-hellos"},
	 pending_states{YType::uint32, "pending-states"},
	 recovery_time{YType::uint32, "recovery-time"},
	 restart_time{YType::uint32, "restart-time"}
    	,
    recovery_time_left(std::make_unique<Rsvp::GracefulRestart::RecoveryTimeLeft>())
	,recovery_timer_exp_time(std::make_unique<Rsvp::GracefulRestart::RecoveryTimerExpTime>())
{
    recovery_time_left->parent = this;
    children["recovery-time-left"] = recovery_time_left.get();

    recovery_timer_exp_time->parent = this;
    children["recovery-timer-exp-time"] = recovery_timer_exp_time.get();

    yang_name = "graceful-restart"; yang_parent_name = "rsvp";
}

Rsvp::GracefulRestart::~GracefulRestart()
{
}

bool Rsvp::GracefulRestart::has_data() const
{
    for (std::size_t index=0; index<local_node_address.size(); index++)
    {
        if(local_node_address[index]->has_data())
            return true;
    }
    return global_neighbors.is_set
	|| hello_interval.is_set
	|| is_gr_enabled.is_set
	|| is_recovery_timer_running.is_set
	|| missed_hellos.is_set
	|| pending_states.is_set
	|| recovery_time.is_set
	|| restart_time.is_set
	|| (recovery_time_left !=  nullptr && recovery_time_left->has_data())
	|| (recovery_timer_exp_time !=  nullptr && recovery_timer_exp_time->has_data());
}

bool Rsvp::GracefulRestart::has_operation() const
{
    for (std::size_t index=0; index<local_node_address.size(); index++)
    {
        if(local_node_address[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(global_neighbors.operation)
	|| is_set(hello_interval.operation)
	|| is_set(is_gr_enabled.operation)
	|| is_set(is_recovery_timer_running.operation)
	|| is_set(missed_hellos.operation)
	|| is_set(pending_states.operation)
	|| is_set(recovery_time.operation)
	|| is_set(restart_time.operation)
	|| (recovery_time_left !=  nullptr && recovery_time_left->has_operation())
	|| (recovery_timer_exp_time !=  nullptr && recovery_timer_exp_time->has_operation());
}

std::string Rsvp::GracefulRestart::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "graceful-restart";

    return path_buffer.str();

}

EntityPath Rsvp::GracefulRestart::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (global_neighbors.is_set || is_set(global_neighbors.operation)) leaf_name_data.push_back(global_neighbors.get_name_leafdata());
    if (hello_interval.is_set || is_set(hello_interval.operation)) leaf_name_data.push_back(hello_interval.get_name_leafdata());
    if (is_gr_enabled.is_set || is_set(is_gr_enabled.operation)) leaf_name_data.push_back(is_gr_enabled.get_name_leafdata());
    if (is_recovery_timer_running.is_set || is_set(is_recovery_timer_running.operation)) leaf_name_data.push_back(is_recovery_timer_running.get_name_leafdata());
    if (missed_hellos.is_set || is_set(missed_hellos.operation)) leaf_name_data.push_back(missed_hellos.get_name_leafdata());
    if (pending_states.is_set || is_set(pending_states.operation)) leaf_name_data.push_back(pending_states.get_name_leafdata());
    if (recovery_time.is_set || is_set(recovery_time.operation)) leaf_name_data.push_back(recovery_time.get_name_leafdata());
    if (restart_time.is_set || is_set(restart_time.operation)) leaf_name_data.push_back(restart_time.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::GracefulRestart::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "local-node-address")
    {
        for(auto const & c : local_node_address)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::GracefulRestart::LocalNodeAddress>();
        c->parent = this;
        local_node_address.push_back(std::move(c));
        children[segment_path] = local_node_address.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "recovery-time-left")
    {
        if(recovery_time_left != nullptr)
        {
            children["recovery-time-left"] = recovery_time_left.get();
        }
        else
        {
            recovery_time_left = std::make_unique<Rsvp::GracefulRestart::RecoveryTimeLeft>();
            recovery_time_left->parent = this;
            children["recovery-time-left"] = recovery_time_left.get();
        }
        return children.at("recovery-time-left");
    }

    if(child_yang_name == "recovery-timer-exp-time")
    {
        if(recovery_timer_exp_time != nullptr)
        {
            children["recovery-timer-exp-time"] = recovery_timer_exp_time.get();
        }
        else
        {
            recovery_timer_exp_time = std::make_unique<Rsvp::GracefulRestart::RecoveryTimerExpTime>();
            recovery_timer_exp_time->parent = this;
            children["recovery-timer-exp-time"] = recovery_timer_exp_time.get();
        }
        return children.at("recovery-timer-exp-time");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::GracefulRestart::get_children()
{
    for (auto const & c : local_node_address)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("recovery-time-left") == children.end())
    {
        if(recovery_time_left != nullptr)
        {
            children["recovery-time-left"] = recovery_time_left.get();
        }
    }

    if(children.find("recovery-timer-exp-time") == children.end())
    {
        if(recovery_timer_exp_time != nullptr)
        {
            children["recovery-timer-exp-time"] = recovery_timer_exp_time.get();
        }
    }

    return children;
}

void Rsvp::GracefulRestart::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "global-neighbors")
    {
        global_neighbors = value;
    }
    if(value_path == "hello-interval")
    {
        hello_interval = value;
    }
    if(value_path == "is-gr-enabled")
    {
        is_gr_enabled = value;
    }
    if(value_path == "is-recovery-timer-running")
    {
        is_recovery_timer_running = value;
    }
    if(value_path == "missed-hellos")
    {
        missed_hellos = value;
    }
    if(value_path == "pending-states")
    {
        pending_states = value;
    }
    if(value_path == "recovery-time")
    {
        recovery_time = value;
    }
    if(value_path == "restart-time")
    {
        restart_time = value;
    }
}

Rsvp::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief::HelloInterfaceInstanceBrief()
    :
    	destination_address{YType::str, "destination-address"},
	 source_address{YType::str, "source-address"},
	 destination_address_xr{YType::str, "destination-address-xr"},
	 hello_interface{YType::str, "hello-interface"},
	 instance_type{YType::enumeration, "instance-type"},
	 source_address_xr{YType::str, "source-address-xr"}
{
    yang_name = "hello-interface-instance-brief"; yang_parent_name = "hello-interface-instance-briefs";
}

Rsvp::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief::~HelloInterfaceInstanceBrief()
{
}

bool Rsvp::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief::has_data() const
{
    return destination_address.is_set
	|| source_address.is_set
	|| destination_address_xr.is_set
	|| hello_interface.is_set
	|| instance_type.is_set
	|| source_address_xr.is_set;
}

bool Rsvp::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(source_address.operation)
	|| is_set(destination_address_xr.operation)
	|| is_set(hello_interface.operation)
	|| is_set(instance_type.operation)
	|| is_set(source_address_xr.operation);
}

std::string Rsvp::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hello-interface-instance-brief" <<"[destination-address='" <<destination_address.get() <<"']" <<"[source-address='" <<source_address.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/hello-interface-instance-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (destination_address_xr.is_set || is_set(destination_address_xr.operation)) leaf_name_data.push_back(destination_address_xr.get_name_leafdata());
    if (hello_interface.is_set || is_set(hello_interface.operation)) leaf_name_data.push_back(hello_interface.get_name_leafdata());
    if (instance_type.is_set || is_set(instance_type.operation)) leaf_name_data.push_back(instance_type.get_name_leafdata());
    if (source_address_xr.is_set || is_set(source_address_xr.operation)) leaf_name_data.push_back(source_address_xr.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief::get_children()
{
    return children;
}

void Rsvp::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "destination-address-xr")
    {
        destination_address_xr = value;
    }
    if(value_path == "hello-interface")
    {
        hello_interface = value;
    }
    if(value_path == "instance-type")
    {
        instance_type = value;
    }
    if(value_path == "source-address-xr")
    {
        source_address_xr = value;
    }
}

Rsvp::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBriefs()
{
    yang_name = "hello-interface-instance-briefs"; yang_parent_name = "rsvp";
}

Rsvp::HelloInterfaceInstanceBriefs::~HelloInterfaceInstanceBriefs()
{
}

bool Rsvp::HelloInterfaceInstanceBriefs::has_data() const
{
    for (std::size_t index=0; index<hello_interface_instance_brief.size(); index++)
    {
        if(hello_interface_instance_brief[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::HelloInterfaceInstanceBriefs::has_operation() const
{
    for (std::size_t index=0; index<hello_interface_instance_brief.size(); index++)
    {
        if(hello_interface_instance_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::HelloInterfaceInstanceBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hello-interface-instance-briefs";

    return path_buffer.str();

}

EntityPath Rsvp::HelloInterfaceInstanceBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::HelloInterfaceInstanceBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "hello-interface-instance-brief")
    {
        for(auto const & c : hello_interface_instance_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::HelloInterfaceInstanceBriefs::HelloInterfaceInstanceBrief>();
        c->parent = this;
        hello_interface_instance_brief.push_back(std::move(c));
        children[segment_path] = hello_interface_instance_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::HelloInterfaceInstanceBriefs::get_children()
{
    for (auto const & c : hello_interface_instance_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::HelloInterfaceInstanceBriefs::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime::LastMessageSentTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "last-message-sent-time"; yang_parent_name = "hello-interface-instance-detail";
}

Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime::~LastMessageSentTime()
{
}

bool Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "last-message-sent-time";

    return path_buffer.str();

}

EntityPath Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime::get_children()
{
    return children;
}

void Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::HelloInterfaceInstanceDetail()
    :
    	destination_address{YType::str, "destination-address"},
	 source_address{YType::str, "source-address"},
	 destination_address_xr{YType::str, "destination-address-xr"},
	 destination_instance{YType::uint32, "destination-instance"},
	 hello_global_neighbor_id{YType::str, "hello-global-neighbor-id"},
	 hello_interface{YType::str, "hello-interface"},
	 hello_messages_received{YType::uint64, "hello-messages-received"},
	 hello_messages_sent{YType::uint64, "hello-messages-sent"},
	 instance_type{YType::enumeration, "instance-type"},
	 source_address_xr{YType::str, "source-address-xr"},
	 source_instance{YType::uint32, "source-instance"}
    	,
    last_message_sent_time(std::make_unique<Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime>())
{
    last_message_sent_time->parent = this;
    children["last-message-sent-time"] = last_message_sent_time.get();

    yang_name = "hello-interface-instance-detail"; yang_parent_name = "hello-interface-instance-details";
}

Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::~HelloInterfaceInstanceDetail()
{
}

bool Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::has_data() const
{
    return destination_address.is_set
	|| source_address.is_set
	|| destination_address_xr.is_set
	|| destination_instance.is_set
	|| hello_global_neighbor_id.is_set
	|| hello_interface.is_set
	|| hello_messages_received.is_set
	|| hello_messages_sent.is_set
	|| instance_type.is_set
	|| source_address_xr.is_set
	|| source_instance.is_set
	|| (last_message_sent_time !=  nullptr && last_message_sent_time->has_data());
}

bool Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(source_address.operation)
	|| is_set(destination_address_xr.operation)
	|| is_set(destination_instance.operation)
	|| is_set(hello_global_neighbor_id.operation)
	|| is_set(hello_interface.operation)
	|| is_set(hello_messages_received.operation)
	|| is_set(hello_messages_sent.operation)
	|| is_set(instance_type.operation)
	|| is_set(source_address_xr.operation)
	|| is_set(source_instance.operation)
	|| (last_message_sent_time !=  nullptr && last_message_sent_time->has_operation());
}

std::string Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hello-interface-instance-detail" <<"[destination-address='" <<destination_address.get() <<"']" <<"[source-address='" <<source_address.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/hello-interface-instance-details/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (destination_address_xr.is_set || is_set(destination_address_xr.operation)) leaf_name_data.push_back(destination_address_xr.get_name_leafdata());
    if (destination_instance.is_set || is_set(destination_instance.operation)) leaf_name_data.push_back(destination_instance.get_name_leafdata());
    if (hello_global_neighbor_id.is_set || is_set(hello_global_neighbor_id.operation)) leaf_name_data.push_back(hello_global_neighbor_id.get_name_leafdata());
    if (hello_interface.is_set || is_set(hello_interface.operation)) leaf_name_data.push_back(hello_interface.get_name_leafdata());
    if (hello_messages_received.is_set || is_set(hello_messages_received.operation)) leaf_name_data.push_back(hello_messages_received.get_name_leafdata());
    if (hello_messages_sent.is_set || is_set(hello_messages_sent.operation)) leaf_name_data.push_back(hello_messages_sent.get_name_leafdata());
    if (instance_type.is_set || is_set(instance_type.operation)) leaf_name_data.push_back(instance_type.get_name_leafdata());
    if (source_address_xr.is_set || is_set(source_address_xr.operation)) leaf_name_data.push_back(source_address_xr.get_name_leafdata());
    if (source_instance.is_set || is_set(source_instance.operation)) leaf_name_data.push_back(source_instance.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "last-message-sent-time")
    {
        if(last_message_sent_time != nullptr)
        {
            children["last-message-sent-time"] = last_message_sent_time.get();
        }
        else
        {
            last_message_sent_time = std::make_unique<Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::LastMessageSentTime>();
            last_message_sent_time->parent = this;
            children["last-message-sent-time"] = last_message_sent_time.get();
        }
        return children.at("last-message-sent-time");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::get_children()
{
    if(children.find("last-message-sent-time") == children.end())
    {
        if(last_message_sent_time != nullptr)
        {
            children["last-message-sent-time"] = last_message_sent_time.get();
        }
    }

    return children;
}

void Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "destination-address-xr")
    {
        destination_address_xr = value;
    }
    if(value_path == "destination-instance")
    {
        destination_instance = value;
    }
    if(value_path == "hello-global-neighbor-id")
    {
        hello_global_neighbor_id = value;
    }
    if(value_path == "hello-interface")
    {
        hello_interface = value;
    }
    if(value_path == "hello-messages-received")
    {
        hello_messages_received = value;
    }
    if(value_path == "hello-messages-sent")
    {
        hello_messages_sent = value;
    }
    if(value_path == "instance-type")
    {
        instance_type = value;
    }
    if(value_path == "source-address-xr")
    {
        source_address_xr = value;
    }
    if(value_path == "source-instance")
    {
        source_instance = value;
    }
}

Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetails()
{
    yang_name = "hello-interface-instance-details"; yang_parent_name = "rsvp";
}

Rsvp::HelloInterfaceInstanceDetails::~HelloInterfaceInstanceDetails()
{
}

bool Rsvp::HelloInterfaceInstanceDetails::has_data() const
{
    for (std::size_t index=0; index<hello_interface_instance_detail.size(); index++)
    {
        if(hello_interface_instance_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::HelloInterfaceInstanceDetails::has_operation() const
{
    for (std::size_t index=0; index<hello_interface_instance_detail.size(); index++)
    {
        if(hello_interface_instance_detail[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::HelloInterfaceInstanceDetails::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hello-interface-instance-details";

    return path_buffer.str();

}

EntityPath Rsvp::HelloInterfaceInstanceDetails::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::HelloInterfaceInstanceDetails::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "hello-interface-instance-detail")
    {
        for(auto const & c : hello_interface_instance_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::HelloInterfaceInstanceDetails::HelloInterfaceInstanceDetail>();
        c->parent = this;
        hello_interface_instance_detail.push_back(std::move(c));
        children[segment_path] = hello_interface_instance_detail.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::HelloInterfaceInstanceDetails::get_children()
{
    for (auto const & c : hello_interface_instance_detail)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::HelloInterfaceInstanceDetails::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail::InterfaceNeighborListDetail()
    :
    	interface_neighbor_address{YType::str, "interface-neighbor-address"},
	 is_rr_enabled{YType::boolean, "is-rr-enabled"},
	 neighbor_epoch{YType::uint32, "neighbor-epoch"},
	 neighbor_interface_name{YType::str, "neighbor-interface-name"},
	 out_of_order_messages{YType::uint32, "out-of-order-messages"},
	 retransmitted_messages{YType::uint32, "retransmitted-messages"}
{
    yang_name = "interface-neighbor-list-detail"; yang_parent_name = "interface-neighbor-detail";
}

Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail::~InterfaceNeighborListDetail()
{
}

bool Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail::has_data() const
{
    return interface_neighbor_address.is_set
	|| is_rr_enabled.is_set
	|| neighbor_epoch.is_set
	|| neighbor_interface_name.is_set
	|| out_of_order_messages.is_set
	|| retransmitted_messages.is_set;
}

bool Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_neighbor_address.operation)
	|| is_set(is_rr_enabled.operation)
	|| is_set(neighbor_epoch.operation)
	|| is_set(neighbor_interface_name.operation)
	|| is_set(out_of_order_messages.operation)
	|| is_set(retransmitted_messages.operation);
}

std::string Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-neighbor-list-detail";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_neighbor_address.is_set || is_set(interface_neighbor_address.operation)) leaf_name_data.push_back(interface_neighbor_address.get_name_leafdata());
    if (is_rr_enabled.is_set || is_set(is_rr_enabled.operation)) leaf_name_data.push_back(is_rr_enabled.get_name_leafdata());
    if (neighbor_epoch.is_set || is_set(neighbor_epoch.operation)) leaf_name_data.push_back(neighbor_epoch.get_name_leafdata());
    if (neighbor_interface_name.is_set || is_set(neighbor_interface_name.operation)) leaf_name_data.push_back(neighbor_interface_name.get_name_leafdata());
    if (out_of_order_messages.is_set || is_set(out_of_order_messages.operation)) leaf_name_data.push_back(out_of_order_messages.get_name_leafdata());
    if (retransmitted_messages.is_set || is_set(retransmitted_messages.operation)) leaf_name_data.push_back(retransmitted_messages.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail::get_children()
{
    return children;
}

void Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-neighbor-address")
    {
        interface_neighbor_address = value;
    }
    if(value_path == "is-rr-enabled")
    {
        is_rr_enabled = value;
    }
    if(value_path == "neighbor-epoch")
    {
        neighbor_epoch = value;
    }
    if(value_path == "neighbor-interface-name")
    {
        neighbor_interface_name = value;
    }
    if(value_path == "out-of-order-messages")
    {
        out_of_order_messages = value;
    }
    if(value_path == "retransmitted-messages")
    {
        retransmitted_messages = value;
    }
}

Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborDetail()
    :
    	neighbor_address{YType::str, "neighbor-address"},
	 node_address{YType::str, "node-address"}
{
    yang_name = "interface-neighbor-detail"; yang_parent_name = "interface-neighbor-details";
}

Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail::~InterfaceNeighborDetail()
{
}

bool Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail::has_data() const
{
    for (std::size_t index=0; index<interface_neighbor_list_detail.size(); index++)
    {
        if(interface_neighbor_list_detail[index]->has_data())
            return true;
    }
    return neighbor_address.is_set
	|| node_address.is_set;
}

bool Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail::has_operation() const
{
    for (std::size_t index=0; index<interface_neighbor_list_detail.size(); index++)
    {
        if(interface_neighbor_list_detail[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(neighbor_address.operation)
	|| is_set(node_address.operation);
}

std::string Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-neighbor-detail" <<"[neighbor-address='" <<neighbor_address.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-neighbor-details/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (node_address.is_set || is_set(node_address.operation)) leaf_name_data.push_back(node_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-neighbor-list-detail")
    {
        for(auto const & c : interface_neighbor_list_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail::InterfaceNeighborListDetail>();
        c->parent = this;
        interface_neighbor_list_detail.push_back(std::move(c));
        children[segment_path] = interface_neighbor_list_detail.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail::get_children()
{
    for (auto const & c : interface_neighbor_list_detail)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "node-address")
    {
        node_address = value;
    }
}

Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetails()
{
    yang_name = "interface-neighbor-details"; yang_parent_name = "rsvp";
}

Rsvp::InterfaceNeighborDetails::~InterfaceNeighborDetails()
{
}

bool Rsvp::InterfaceNeighborDetails::has_data() const
{
    for (std::size_t index=0; index<interface_neighbor_detail.size(); index++)
    {
        if(interface_neighbor_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::InterfaceNeighborDetails::has_operation() const
{
    for (std::size_t index=0; index<interface_neighbor_detail.size(); index++)
    {
        if(interface_neighbor_detail[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::InterfaceNeighborDetails::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-neighbor-details";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceNeighborDetails::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceNeighborDetails::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-neighbor-detail")
    {
        for(auto const & c : interface_neighbor_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::InterfaceNeighborDetails::InterfaceNeighborDetail>();
        c->parent = this;
        interface_neighbor_detail.push_back(std::move(c));
        children[segment_path] = interface_neighbor_detail.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceNeighborDetails::get_children()
{
    for (auto const & c : interface_neighbor_detail)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::InterfaceNeighborDetails::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::Nsr::Status::IdtStatus::IdtStatus()
    :
    	declare_time{YType::uint32, "declare-time"},
	 idt_end_time{YType::uint32, "idt-end-time"},
	 idt_start_time{YType::uint32, "idt-start-time"},
	 not_ready_reason{YType::enumeration, "not-ready-reason"},
	 sync_status{YType::enumeration, "sync-status"},
	 withdraw_time{YType::uint32, "withdraw-time"}
{
    yang_name = "idt-status"; yang_parent_name = "status";
}

Rsvp::Nsr::Status::IdtStatus::~IdtStatus()
{
}

bool Rsvp::Nsr::Status::IdtStatus::has_data() const
{
    return declare_time.is_set
	|| idt_end_time.is_set
	|| idt_start_time.is_set
	|| not_ready_reason.is_set
	|| sync_status.is_set
	|| withdraw_time.is_set;
}

bool Rsvp::Nsr::Status::IdtStatus::has_operation() const
{
    return is_set(operation)
	|| is_set(declare_time.operation)
	|| is_set(idt_end_time.operation)
	|| is_set(idt_start_time.operation)
	|| is_set(not_ready_reason.operation)
	|| is_set(sync_status.operation)
	|| is_set(withdraw_time.operation);
}

std::string Rsvp::Nsr::Status::IdtStatus::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "idt-status";

    return path_buffer.str();

}

EntityPath Rsvp::Nsr::Status::IdtStatus::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/nsr/status/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (declare_time.is_set || is_set(declare_time.operation)) leaf_name_data.push_back(declare_time.get_name_leafdata());
    if (idt_end_time.is_set || is_set(idt_end_time.operation)) leaf_name_data.push_back(idt_end_time.get_name_leafdata());
    if (idt_start_time.is_set || is_set(idt_start_time.operation)) leaf_name_data.push_back(idt_start_time.get_name_leafdata());
    if (not_ready_reason.is_set || is_set(not_ready_reason.operation)) leaf_name_data.push_back(not_ready_reason.get_name_leafdata());
    if (sync_status.is_set || is_set(sync_status.operation)) leaf_name_data.push_back(sync_status.get_name_leafdata());
    if (withdraw_time.is_set || is_set(withdraw_time.operation)) leaf_name_data.push_back(withdraw_time.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Nsr::Status::IdtStatus::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Nsr::Status::IdtStatus::get_children()
{
    return children;
}

void Rsvp::Nsr::Status::IdtStatus::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "declare-time")
    {
        declare_time = value;
    }
    if(value_path == "idt-end-time")
    {
        idt_end_time = value;
    }
    if(value_path == "idt-start-time")
    {
        idt_start_time = value;
    }
    if(value_path == "not-ready-reason")
    {
        not_ready_reason = value;
    }
    if(value_path == "sync-status")
    {
        sync_status = value;
    }
    if(value_path == "withdraw-time")
    {
        withdraw_time = value;
    }
}

Rsvp::Nsr::Status::PreviousIdtStatus::PreviousIdtStatus()
    :
    	declare_time{YType::uint32, "declare-time"},
	 idt_end_time{YType::uint32, "idt-end-time"},
	 idt_start_time{YType::uint32, "idt-start-time"},
	 not_ready_reason{YType::enumeration, "not-ready-reason"},
	 sync_status{YType::enumeration, "sync-status"},
	 withdraw_time{YType::uint32, "withdraw-time"}
{
    yang_name = "previous-idt-status"; yang_parent_name = "status";
}

Rsvp::Nsr::Status::PreviousIdtStatus::~PreviousIdtStatus()
{
}

bool Rsvp::Nsr::Status::PreviousIdtStatus::has_data() const
{
    return declare_time.is_set
	|| idt_end_time.is_set
	|| idt_start_time.is_set
	|| not_ready_reason.is_set
	|| sync_status.is_set
	|| withdraw_time.is_set;
}

bool Rsvp::Nsr::Status::PreviousIdtStatus::has_operation() const
{
    return is_set(operation)
	|| is_set(declare_time.operation)
	|| is_set(idt_end_time.operation)
	|| is_set(idt_start_time.operation)
	|| is_set(not_ready_reason.operation)
	|| is_set(sync_status.operation)
	|| is_set(withdraw_time.operation);
}

std::string Rsvp::Nsr::Status::PreviousIdtStatus::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "previous-idt-status";

    return path_buffer.str();

}

EntityPath Rsvp::Nsr::Status::PreviousIdtStatus::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/nsr/status/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (declare_time.is_set || is_set(declare_time.operation)) leaf_name_data.push_back(declare_time.get_name_leafdata());
    if (idt_end_time.is_set || is_set(idt_end_time.operation)) leaf_name_data.push_back(idt_end_time.get_name_leafdata());
    if (idt_start_time.is_set || is_set(idt_start_time.operation)) leaf_name_data.push_back(idt_start_time.get_name_leafdata());
    if (not_ready_reason.is_set || is_set(not_ready_reason.operation)) leaf_name_data.push_back(not_ready_reason.get_name_leafdata());
    if (sync_status.is_set || is_set(sync_status.operation)) leaf_name_data.push_back(sync_status.get_name_leafdata());
    if (withdraw_time.is_set || is_set(withdraw_time.operation)) leaf_name_data.push_back(withdraw_time.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Nsr::Status::PreviousIdtStatus::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Nsr::Status::PreviousIdtStatus::get_children()
{
    return children;
}

void Rsvp::Nsr::Status::PreviousIdtStatus::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "declare-time")
    {
        declare_time = value;
    }
    if(value_path == "idt-end-time")
    {
        idt_end_time = value;
    }
    if(value_path == "idt-start-time")
    {
        idt_start_time = value;
    }
    if(value_path == "not-ready-reason")
    {
        not_ready_reason = value;
    }
    if(value_path == "sync-status")
    {
        sync_status = value;
    }
    if(value_path == "withdraw-time")
    {
        withdraw_time = value;
    }
}

Rsvp::Nsr::Status::Status()
    :
    	role{YType::enumeration, "role"}
    	,
    idt_status(std::make_unique<Rsvp::Nsr::Status::IdtStatus>())
	,previous_idt_status(std::make_unique<Rsvp::Nsr::Status::PreviousIdtStatus>())
{
    idt_status->parent = this;
    children["idt-status"] = idt_status.get();

    previous_idt_status->parent = this;
    children["previous-idt-status"] = previous_idt_status.get();

    yang_name = "status"; yang_parent_name = "nsr";
}

Rsvp::Nsr::Status::~Status()
{
}

bool Rsvp::Nsr::Status::has_data() const
{
    return role.is_set
	|| (idt_status !=  nullptr && idt_status->has_data())
	|| (previous_idt_status !=  nullptr && previous_idt_status->has_data());
}

bool Rsvp::Nsr::Status::has_operation() const
{
    return is_set(operation)
	|| is_set(role.operation)
	|| (idt_status !=  nullptr && idt_status->has_operation())
	|| (previous_idt_status !=  nullptr && previous_idt_status->has_operation());
}

std::string Rsvp::Nsr::Status::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "status";

    return path_buffer.str();

}

EntityPath Rsvp::Nsr::Status::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/nsr/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (role.is_set || is_set(role.operation)) leaf_name_data.push_back(role.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Nsr::Status::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "idt-status")
    {
        if(idt_status != nullptr)
        {
            children["idt-status"] = idt_status.get();
        }
        else
        {
            idt_status = std::make_unique<Rsvp::Nsr::Status::IdtStatus>();
            idt_status->parent = this;
            children["idt-status"] = idt_status.get();
        }
        return children.at("idt-status");
    }

    if(child_yang_name == "previous-idt-status")
    {
        if(previous_idt_status != nullptr)
        {
            children["previous-idt-status"] = previous_idt_status.get();
        }
        else
        {
            previous_idt_status = std::make_unique<Rsvp::Nsr::Status::PreviousIdtStatus>();
            previous_idt_status->parent = this;
            children["previous-idt-status"] = previous_idt_status.get();
        }
        return children.at("previous-idt-status");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Nsr::Status::get_children()
{
    if(children.find("idt-status") == children.end())
    {
        if(idt_status != nullptr)
        {
            children["idt-status"] = idt_status.get();
        }
    }

    if(children.find("previous-idt-status") == children.end())
    {
        if(previous_idt_status != nullptr)
        {
            children["previous-idt-status"] = previous_idt_status.get();
        }
    }

    return children;
}

void Rsvp::Nsr::Status::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "role")
    {
        role = value;
    }
}

Rsvp::Nsr::Nsr()
    :
    status(std::make_unique<Rsvp::Nsr::Status>())
{
    status->parent = this;
    children["status"] = status.get();

    yang_name = "nsr"; yang_parent_name = "rsvp";
}

Rsvp::Nsr::~Nsr()
{
}

bool Rsvp::Nsr::has_data() const
{
    return (status !=  nullptr && status->has_data());
}

bool Rsvp::Nsr::has_operation() const
{
    return is_set(operation)
	|| (status !=  nullptr && status->has_operation());
}

std::string Rsvp::Nsr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nsr";

    return path_buffer.str();

}

EntityPath Rsvp::Nsr::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Nsr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "status")
    {
        if(status != nullptr)
        {
            children["status"] = status.get();
        }
        else
        {
            status = std::make_unique<Rsvp::Nsr::Status>();
            status->parent = this;
            children["status"] = status.get();
        }
        return children.at("status");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Nsr::get_children()
{
    if(children.find("status") == children.end())
    {
        if(status != nullptr)
        {
            children["status"] = status.get();
        }
    }

    return children;
}

void Rsvp::Nsr::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::Summary::IssuStatus::IdtStatus::IdtStatus()
    :
    	declare_time{YType::uint32, "declare-time"},
	 idt_end_time{YType::uint32, "idt-end-time"},
	 idt_start_time{YType::uint32, "idt-start-time"},
	 not_ready_reason{YType::enumeration, "not-ready-reason"},
	 sync_status{YType::enumeration, "sync-status"},
	 withdraw_time{YType::uint32, "withdraw-time"}
{
    yang_name = "idt-status"; yang_parent_name = "issu-status";
}

Rsvp::Summary::IssuStatus::IdtStatus::~IdtStatus()
{
}

bool Rsvp::Summary::IssuStatus::IdtStatus::has_data() const
{
    return declare_time.is_set
	|| idt_end_time.is_set
	|| idt_start_time.is_set
	|| not_ready_reason.is_set
	|| sync_status.is_set
	|| withdraw_time.is_set;
}

bool Rsvp::Summary::IssuStatus::IdtStatus::has_operation() const
{
    return is_set(operation)
	|| is_set(declare_time.operation)
	|| is_set(idt_end_time.operation)
	|| is_set(idt_start_time.operation)
	|| is_set(not_ready_reason.operation)
	|| is_set(sync_status.operation)
	|| is_set(withdraw_time.operation);
}

std::string Rsvp::Summary::IssuStatus::IdtStatus::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "idt-status";

    return path_buffer.str();

}

EntityPath Rsvp::Summary::IssuStatus::IdtStatus::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/issu-status/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (declare_time.is_set || is_set(declare_time.operation)) leaf_name_data.push_back(declare_time.get_name_leafdata());
    if (idt_end_time.is_set || is_set(idt_end_time.operation)) leaf_name_data.push_back(idt_end_time.get_name_leafdata());
    if (idt_start_time.is_set || is_set(idt_start_time.operation)) leaf_name_data.push_back(idt_start_time.get_name_leafdata());
    if (not_ready_reason.is_set || is_set(not_ready_reason.operation)) leaf_name_data.push_back(not_ready_reason.get_name_leafdata());
    if (sync_status.is_set || is_set(sync_status.operation)) leaf_name_data.push_back(sync_status.get_name_leafdata());
    if (withdraw_time.is_set || is_set(withdraw_time.operation)) leaf_name_data.push_back(withdraw_time.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Summary::IssuStatus::IdtStatus::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Summary::IssuStatus::IdtStatus::get_children()
{
    return children;
}

void Rsvp::Summary::IssuStatus::IdtStatus::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "declare-time")
    {
        declare_time = value;
    }
    if(value_path == "idt-end-time")
    {
        idt_end_time = value;
    }
    if(value_path == "idt-start-time")
    {
        idt_start_time = value;
    }
    if(value_path == "not-ready-reason")
    {
        not_ready_reason = value;
    }
    if(value_path == "sync-status")
    {
        sync_status = value;
    }
    if(value_path == "withdraw-time")
    {
        withdraw_time = value;
    }
}

Rsvp::Summary::IssuStatus::PreviousIdtStatus::PreviousIdtStatus()
    :
    	declare_time{YType::uint32, "declare-time"},
	 idt_end_time{YType::uint32, "idt-end-time"},
	 idt_start_time{YType::uint32, "idt-start-time"},
	 not_ready_reason{YType::enumeration, "not-ready-reason"},
	 sync_status{YType::enumeration, "sync-status"},
	 withdraw_time{YType::uint32, "withdraw-time"}
{
    yang_name = "previous-idt-status"; yang_parent_name = "issu-status";
}

Rsvp::Summary::IssuStatus::PreviousIdtStatus::~PreviousIdtStatus()
{
}

bool Rsvp::Summary::IssuStatus::PreviousIdtStatus::has_data() const
{
    return declare_time.is_set
	|| idt_end_time.is_set
	|| idt_start_time.is_set
	|| not_ready_reason.is_set
	|| sync_status.is_set
	|| withdraw_time.is_set;
}

bool Rsvp::Summary::IssuStatus::PreviousIdtStatus::has_operation() const
{
    return is_set(operation)
	|| is_set(declare_time.operation)
	|| is_set(idt_end_time.operation)
	|| is_set(idt_start_time.operation)
	|| is_set(not_ready_reason.operation)
	|| is_set(sync_status.operation)
	|| is_set(withdraw_time.operation);
}

std::string Rsvp::Summary::IssuStatus::PreviousIdtStatus::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "previous-idt-status";

    return path_buffer.str();

}

EntityPath Rsvp::Summary::IssuStatus::PreviousIdtStatus::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/issu-status/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (declare_time.is_set || is_set(declare_time.operation)) leaf_name_data.push_back(declare_time.get_name_leafdata());
    if (idt_end_time.is_set || is_set(idt_end_time.operation)) leaf_name_data.push_back(idt_end_time.get_name_leafdata());
    if (idt_start_time.is_set || is_set(idt_start_time.operation)) leaf_name_data.push_back(idt_start_time.get_name_leafdata());
    if (not_ready_reason.is_set || is_set(not_ready_reason.operation)) leaf_name_data.push_back(not_ready_reason.get_name_leafdata());
    if (sync_status.is_set || is_set(sync_status.operation)) leaf_name_data.push_back(sync_status.get_name_leafdata());
    if (withdraw_time.is_set || is_set(withdraw_time.operation)) leaf_name_data.push_back(withdraw_time.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Summary::IssuStatus::PreviousIdtStatus::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Summary::IssuStatus::PreviousIdtStatus::get_children()
{
    return children;
}

void Rsvp::Summary::IssuStatus::PreviousIdtStatus::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "declare-time")
    {
        declare_time = value;
    }
    if(value_path == "idt-end-time")
    {
        idt_end_time = value;
    }
    if(value_path == "idt-start-time")
    {
        idt_start_time = value;
    }
    if(value_path == "not-ready-reason")
    {
        not_ready_reason = value;
    }
    if(value_path == "sync-status")
    {
        sync_status = value;
    }
    if(value_path == "withdraw-time")
    {
        withdraw_time = value;
    }
}

Rsvp::Summary::IssuStatus::IssuStatus()
    :
    	role{YType::enumeration, "role"}
    	,
    idt_status(std::make_unique<Rsvp::Summary::IssuStatus::IdtStatus>())
	,previous_idt_status(std::make_unique<Rsvp::Summary::IssuStatus::PreviousIdtStatus>())
{
    idt_status->parent = this;
    children["idt-status"] = idt_status.get();

    previous_idt_status->parent = this;
    children["previous-idt-status"] = previous_idt_status.get();

    yang_name = "issu-status"; yang_parent_name = "summary";
}

Rsvp::Summary::IssuStatus::~IssuStatus()
{
}

bool Rsvp::Summary::IssuStatus::has_data() const
{
    return role.is_set
	|| (idt_status !=  nullptr && idt_status->has_data())
	|| (previous_idt_status !=  nullptr && previous_idt_status->has_data());
}

bool Rsvp::Summary::IssuStatus::has_operation() const
{
    return is_set(operation)
	|| is_set(role.operation)
	|| (idt_status !=  nullptr && idt_status->has_operation())
	|| (previous_idt_status !=  nullptr && previous_idt_status->has_operation());
}

std::string Rsvp::Summary::IssuStatus::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "issu-status";

    return path_buffer.str();

}

EntityPath Rsvp::Summary::IssuStatus::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (role.is_set || is_set(role.operation)) leaf_name_data.push_back(role.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Summary::IssuStatus::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "idt-status")
    {
        if(idt_status != nullptr)
        {
            children["idt-status"] = idt_status.get();
        }
        else
        {
            idt_status = std::make_unique<Rsvp::Summary::IssuStatus::IdtStatus>();
            idt_status->parent = this;
            children["idt-status"] = idt_status.get();
        }
        return children.at("idt-status");
    }

    if(child_yang_name == "previous-idt-status")
    {
        if(previous_idt_status != nullptr)
        {
            children["previous-idt-status"] = previous_idt_status.get();
        }
        else
        {
            previous_idt_status = std::make_unique<Rsvp::Summary::IssuStatus::PreviousIdtStatus>();
            previous_idt_status->parent = this;
            children["previous-idt-status"] = previous_idt_status.get();
        }
        return children.at("previous-idt-status");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Summary::IssuStatus::get_children()
{
    if(children.find("idt-status") == children.end())
    {
        if(idt_status != nullptr)
        {
            children["idt-status"] = idt_status.get();
        }
    }

    if(children.find("previous-idt-status") == children.end())
    {
        if(previous_idt_status != nullptr)
        {
            children["previous-idt-status"] = previous_idt_status.get();
        }
    }

    return children;
}

void Rsvp::Summary::IssuStatus::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "role")
    {
        role = value;
    }
}

Rsvp::Summary::NsrStatus::IdtStatus::IdtStatus()
    :
    	declare_time{YType::uint32, "declare-time"},
	 idt_end_time{YType::uint32, "idt-end-time"},
	 idt_start_time{YType::uint32, "idt-start-time"},
	 not_ready_reason{YType::enumeration, "not-ready-reason"},
	 sync_status{YType::enumeration, "sync-status"},
	 withdraw_time{YType::uint32, "withdraw-time"}
{
    yang_name = "idt-status"; yang_parent_name = "nsr-status";
}

Rsvp::Summary::NsrStatus::IdtStatus::~IdtStatus()
{
}

bool Rsvp::Summary::NsrStatus::IdtStatus::has_data() const
{
    return declare_time.is_set
	|| idt_end_time.is_set
	|| idt_start_time.is_set
	|| not_ready_reason.is_set
	|| sync_status.is_set
	|| withdraw_time.is_set;
}

bool Rsvp::Summary::NsrStatus::IdtStatus::has_operation() const
{
    return is_set(operation)
	|| is_set(declare_time.operation)
	|| is_set(idt_end_time.operation)
	|| is_set(idt_start_time.operation)
	|| is_set(not_ready_reason.operation)
	|| is_set(sync_status.operation)
	|| is_set(withdraw_time.operation);
}

std::string Rsvp::Summary::NsrStatus::IdtStatus::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "idt-status";

    return path_buffer.str();

}

EntityPath Rsvp::Summary::NsrStatus::IdtStatus::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/nsr-status/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (declare_time.is_set || is_set(declare_time.operation)) leaf_name_data.push_back(declare_time.get_name_leafdata());
    if (idt_end_time.is_set || is_set(idt_end_time.operation)) leaf_name_data.push_back(idt_end_time.get_name_leafdata());
    if (idt_start_time.is_set || is_set(idt_start_time.operation)) leaf_name_data.push_back(idt_start_time.get_name_leafdata());
    if (not_ready_reason.is_set || is_set(not_ready_reason.operation)) leaf_name_data.push_back(not_ready_reason.get_name_leafdata());
    if (sync_status.is_set || is_set(sync_status.operation)) leaf_name_data.push_back(sync_status.get_name_leafdata());
    if (withdraw_time.is_set || is_set(withdraw_time.operation)) leaf_name_data.push_back(withdraw_time.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Summary::NsrStatus::IdtStatus::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Summary::NsrStatus::IdtStatus::get_children()
{
    return children;
}

void Rsvp::Summary::NsrStatus::IdtStatus::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "declare-time")
    {
        declare_time = value;
    }
    if(value_path == "idt-end-time")
    {
        idt_end_time = value;
    }
    if(value_path == "idt-start-time")
    {
        idt_start_time = value;
    }
    if(value_path == "not-ready-reason")
    {
        not_ready_reason = value;
    }
    if(value_path == "sync-status")
    {
        sync_status = value;
    }
    if(value_path == "withdraw-time")
    {
        withdraw_time = value;
    }
}

Rsvp::Summary::NsrStatus::PreviousIdtStatus::PreviousIdtStatus()
    :
    	declare_time{YType::uint32, "declare-time"},
	 idt_end_time{YType::uint32, "idt-end-time"},
	 idt_start_time{YType::uint32, "idt-start-time"},
	 not_ready_reason{YType::enumeration, "not-ready-reason"},
	 sync_status{YType::enumeration, "sync-status"},
	 withdraw_time{YType::uint32, "withdraw-time"}
{
    yang_name = "previous-idt-status"; yang_parent_name = "nsr-status";
}

Rsvp::Summary::NsrStatus::PreviousIdtStatus::~PreviousIdtStatus()
{
}

bool Rsvp::Summary::NsrStatus::PreviousIdtStatus::has_data() const
{
    return declare_time.is_set
	|| idt_end_time.is_set
	|| idt_start_time.is_set
	|| not_ready_reason.is_set
	|| sync_status.is_set
	|| withdraw_time.is_set;
}

bool Rsvp::Summary::NsrStatus::PreviousIdtStatus::has_operation() const
{
    return is_set(operation)
	|| is_set(declare_time.operation)
	|| is_set(idt_end_time.operation)
	|| is_set(idt_start_time.operation)
	|| is_set(not_ready_reason.operation)
	|| is_set(sync_status.operation)
	|| is_set(withdraw_time.operation);
}

std::string Rsvp::Summary::NsrStatus::PreviousIdtStatus::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "previous-idt-status";

    return path_buffer.str();

}

EntityPath Rsvp::Summary::NsrStatus::PreviousIdtStatus::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/nsr-status/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (declare_time.is_set || is_set(declare_time.operation)) leaf_name_data.push_back(declare_time.get_name_leafdata());
    if (idt_end_time.is_set || is_set(idt_end_time.operation)) leaf_name_data.push_back(idt_end_time.get_name_leafdata());
    if (idt_start_time.is_set || is_set(idt_start_time.operation)) leaf_name_data.push_back(idt_start_time.get_name_leafdata());
    if (not_ready_reason.is_set || is_set(not_ready_reason.operation)) leaf_name_data.push_back(not_ready_reason.get_name_leafdata());
    if (sync_status.is_set || is_set(sync_status.operation)) leaf_name_data.push_back(sync_status.get_name_leafdata());
    if (withdraw_time.is_set || is_set(withdraw_time.operation)) leaf_name_data.push_back(withdraw_time.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Summary::NsrStatus::PreviousIdtStatus::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Summary::NsrStatus::PreviousIdtStatus::get_children()
{
    return children;
}

void Rsvp::Summary::NsrStatus::PreviousIdtStatus::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "declare-time")
    {
        declare_time = value;
    }
    if(value_path == "idt-end-time")
    {
        idt_end_time = value;
    }
    if(value_path == "idt-start-time")
    {
        idt_start_time = value;
    }
    if(value_path == "not-ready-reason")
    {
        not_ready_reason = value;
    }
    if(value_path == "sync-status")
    {
        sync_status = value;
    }
    if(value_path == "withdraw-time")
    {
        withdraw_time = value;
    }
}

Rsvp::Summary::NsrStatus::NsrStatus()
    :
    	role{YType::enumeration, "role"}
    	,
    idt_status(std::make_unique<Rsvp::Summary::NsrStatus::IdtStatus>())
	,previous_idt_status(std::make_unique<Rsvp::Summary::NsrStatus::PreviousIdtStatus>())
{
    idt_status->parent = this;
    children["idt-status"] = idt_status.get();

    previous_idt_status->parent = this;
    children["previous-idt-status"] = previous_idt_status.get();

    yang_name = "nsr-status"; yang_parent_name = "summary";
}

Rsvp::Summary::NsrStatus::~NsrStatus()
{
}

bool Rsvp::Summary::NsrStatus::has_data() const
{
    return role.is_set
	|| (idt_status !=  nullptr && idt_status->has_data())
	|| (previous_idt_status !=  nullptr && previous_idt_status->has_data());
}

bool Rsvp::Summary::NsrStatus::has_operation() const
{
    return is_set(operation)
	|| is_set(role.operation)
	|| (idt_status !=  nullptr && idt_status->has_operation())
	|| (previous_idt_status !=  nullptr && previous_idt_status->has_operation());
}

std::string Rsvp::Summary::NsrStatus::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "nsr-status";

    return path_buffer.str();

}

EntityPath Rsvp::Summary::NsrStatus::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (role.is_set || is_set(role.operation)) leaf_name_data.push_back(role.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Summary::NsrStatus::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "idt-status")
    {
        if(idt_status != nullptr)
        {
            children["idt-status"] = idt_status.get();
        }
        else
        {
            idt_status = std::make_unique<Rsvp::Summary::NsrStatus::IdtStatus>();
            idt_status->parent = this;
            children["idt-status"] = idt_status.get();
        }
        return children.at("idt-status");
    }

    if(child_yang_name == "previous-idt-status")
    {
        if(previous_idt_status != nullptr)
        {
            children["previous-idt-status"] = previous_idt_status.get();
        }
        else
        {
            previous_idt_status = std::make_unique<Rsvp::Summary::NsrStatus::PreviousIdtStatus>();
            previous_idt_status->parent = this;
            children["previous-idt-status"] = previous_idt_status.get();
        }
        return children.at("previous-idt-status");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Summary::NsrStatus::get_children()
{
    if(children.find("idt-status") == children.end())
    {
        if(idt_status != nullptr)
        {
            children["idt-status"] = idt_status.get();
        }
    }

    if(children.find("previous-idt-status") == children.end())
    {
        if(previous_idt_status != nullptr)
        {
            children["previous-idt-status"] = previous_idt_status.get();
        }
    }

    return children;
}

void Rsvp::Summary::NsrStatus::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "role")
    {
        role = value;
    }
}

Rsvp::Summary::DatabaseCounters::DatabaseCounters()
    :
    	incoming_paths{YType::uint32, "incoming-paths"},
	 incoming_reservations{YType::uint32, "incoming-reservations"},
	 interfaces{YType::uint32, "interfaces"},
	 outgoing_paths{YType::uint32, "outgoing-paths"},
	 outgoing_reservations{YType::uint32, "outgoing-reservations"},
	 sessions{YType::uint32, "sessions"}
{
    yang_name = "database-counters"; yang_parent_name = "summary";
}

Rsvp::Summary::DatabaseCounters::~DatabaseCounters()
{
}

bool Rsvp::Summary::DatabaseCounters::has_data() const
{
    return incoming_paths.is_set
	|| incoming_reservations.is_set
	|| interfaces.is_set
	|| outgoing_paths.is_set
	|| outgoing_reservations.is_set
	|| sessions.is_set;
}

bool Rsvp::Summary::DatabaseCounters::has_operation() const
{
    return is_set(operation)
	|| is_set(incoming_paths.operation)
	|| is_set(incoming_reservations.operation)
	|| is_set(interfaces.operation)
	|| is_set(outgoing_paths.operation)
	|| is_set(outgoing_reservations.operation)
	|| is_set(sessions.operation);
}

std::string Rsvp::Summary::DatabaseCounters::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "database-counters";

    return path_buffer.str();

}

EntityPath Rsvp::Summary::DatabaseCounters::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (incoming_paths.is_set || is_set(incoming_paths.operation)) leaf_name_data.push_back(incoming_paths.get_name_leafdata());
    if (incoming_reservations.is_set || is_set(incoming_reservations.operation)) leaf_name_data.push_back(incoming_reservations.get_name_leafdata());
    if (interfaces.is_set || is_set(interfaces.operation)) leaf_name_data.push_back(interfaces.get_name_leafdata());
    if (outgoing_paths.is_set || is_set(outgoing_paths.operation)) leaf_name_data.push_back(outgoing_paths.get_name_leafdata());
    if (outgoing_reservations.is_set || is_set(outgoing_reservations.operation)) leaf_name_data.push_back(outgoing_reservations.get_name_leafdata());
    if (sessions.is_set || is_set(sessions.operation)) leaf_name_data.push_back(sessions.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Summary::DatabaseCounters::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Summary::DatabaseCounters::get_children()
{
    return children;
}

void Rsvp::Summary::DatabaseCounters::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "incoming-paths")
    {
        incoming_paths = value;
    }
    if(value_path == "incoming-reservations")
    {
        incoming_reservations = value;
    }
    if(value_path == "interfaces")
    {
        interfaces = value;
    }
    if(value_path == "outgoing-paths")
    {
        outgoing_paths = value;
    }
    if(value_path == "outgoing-reservations")
    {
        outgoing_reservations = value;
    }
    if(value_path == "sessions")
    {
        sessions = value;
    }
}

Rsvp::Summary::Summary()
    :
    	interfaces{YType::uint32, "interfaces"},
	 ls_ps{YType::uint32, "ls-ps"}
    	,
    database_counters(std::make_unique<Rsvp::Summary::DatabaseCounters>())
	,issu_status(std::make_unique<Rsvp::Summary::IssuStatus>())
	,nsr_status(std::make_unique<Rsvp::Summary::NsrStatus>())
{
    database_counters->parent = this;
    children["database-counters"] = database_counters.get();

    issu_status->parent = this;
    children["issu-status"] = issu_status.get();

    nsr_status->parent = this;
    children["nsr-status"] = nsr_status.get();

    yang_name = "summary"; yang_parent_name = "rsvp";
}

Rsvp::Summary::~Summary()
{
}

bool Rsvp::Summary::has_data() const
{
    return interfaces.is_set
	|| ls_ps.is_set
	|| (database_counters !=  nullptr && database_counters->has_data())
	|| (issu_status !=  nullptr && issu_status->has_data())
	|| (nsr_status !=  nullptr && nsr_status->has_data());
}

bool Rsvp::Summary::has_operation() const
{
    return is_set(operation)
	|| is_set(interfaces.operation)
	|| is_set(ls_ps.operation)
	|| (database_counters !=  nullptr && database_counters->has_operation())
	|| (issu_status !=  nullptr && issu_status->has_operation())
	|| (nsr_status !=  nullptr && nsr_status->has_operation());
}

std::string Rsvp::Summary::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "summary";

    return path_buffer.str();

}

EntityPath Rsvp::Summary::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interfaces.is_set || is_set(interfaces.operation)) leaf_name_data.push_back(interfaces.get_name_leafdata());
    if (ls_ps.is_set || is_set(ls_ps.operation)) leaf_name_data.push_back(ls_ps.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Summary::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "database-counters")
    {
        if(database_counters != nullptr)
        {
            children["database-counters"] = database_counters.get();
        }
        else
        {
            database_counters = std::make_unique<Rsvp::Summary::DatabaseCounters>();
            database_counters->parent = this;
            children["database-counters"] = database_counters.get();
        }
        return children.at("database-counters");
    }

    if(child_yang_name == "issu-status")
    {
        if(issu_status != nullptr)
        {
            children["issu-status"] = issu_status.get();
        }
        else
        {
            issu_status = std::make_unique<Rsvp::Summary::IssuStatus>();
            issu_status->parent = this;
            children["issu-status"] = issu_status.get();
        }
        return children.at("issu-status");
    }

    if(child_yang_name == "nsr-status")
    {
        if(nsr_status != nullptr)
        {
            children["nsr-status"] = nsr_status.get();
        }
        else
        {
            nsr_status = std::make_unique<Rsvp::Summary::NsrStatus>();
            nsr_status->parent = this;
            children["nsr-status"] = nsr_status.get();
        }
        return children.at("nsr-status");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Summary::get_children()
{
    if(children.find("database-counters") == children.end())
    {
        if(database_counters != nullptr)
        {
            children["database-counters"] = database_counters.get();
        }
    }

    if(children.find("issu-status") == children.end())
    {
        if(issu_status != nullptr)
        {
            children["issu-status"] = issu_status.get();
        }
    }

    if(children.find("nsr-status") == children.end())
    {
        if(nsr_status != nullptr)
        {
            children["nsr-status"] = nsr_status.get();
        }
    }

    return children;
}

void Rsvp::Summary::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interfaces")
    {
        interfaces = value;
    }
    if(value_path == "ls-ps")
    {
        ls_ps = value;
    }
}

Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::Frrs::Frr::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

Rsvp::Frrs::Frr::Session::RsvpSession::~RsvpSession()
{
}

bool Rsvp::Frrs::Frr::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool Rsvp::Frrs::Frr::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string Rsvp::Frrs::Frr::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath Rsvp::Frrs::Frr::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Frrs::Frr::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<Rsvp::Frrs::Frr::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Frrs::Frr::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void Rsvp::Frrs::Frr::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

Rsvp::Frrs::Frr::Session::Session()
    :
    rsvp_session(std::make_unique<Rsvp::Frrs::Frr::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "frr";
}

Rsvp::Frrs::Frr::Session::~Session()
{
}

bool Rsvp::Frrs::Frr::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool Rsvp::Frrs::Frr::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string Rsvp::Frrs::Frr::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath Rsvp::Frrs::Frr::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Frrs::Frr::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<Rsvp::Frrs::Frr::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Frrs::Frr::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void Rsvp::Frrs::Frr::Session::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::Frrs::Frr::S2LSubLsp::S2LSubLsp()
    :
    	s2l_destination_address{YType::str, "s2l-destination-address"}
{
    yang_name = "s2l-sub-lsp"; yang_parent_name = "frr";
}

Rsvp::Frrs::Frr::S2LSubLsp::~S2LSubLsp()
{
}

bool Rsvp::Frrs::Frr::S2LSubLsp::has_data() const
{
    return s2l_destination_address.is_set;
}

bool Rsvp::Frrs::Frr::S2LSubLsp::has_operation() const
{
    return is_set(operation)
	|| is_set(s2l_destination_address.operation);
}

std::string Rsvp::Frrs::Frr::S2LSubLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "s2l-sub-lsp";

    return path_buffer.str();

}

EntityPath Rsvp::Frrs::Frr::S2LSubLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (s2l_destination_address.is_set || is_set(s2l_destination_address.operation)) leaf_name_data.push_back(s2l_destination_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Frrs::Frr::S2LSubLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Frrs::Frr::S2LSubLsp::get_children()
{
    return children;
}

void Rsvp::Frrs::Frr::S2LSubLsp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "s2l-destination-address")
    {
        s2l_destination_address = value;
    }
}

Rsvp::Frrs::Frr::Frr()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 path_status{YType::enumeration, "path-status"},
	 protocol{YType::int32, "protocol"},
	 reservation_status{YType::enumeration, "reservation-status"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::int32, "source-port"},
	 sub_group_id{YType::int32, "sub-group-id"},
	 sub_group_origin{YType::str, "sub-group-origin"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    s2l_sub_lsp(std::make_unique<Rsvp::Frrs::Frr::S2LSubLsp>())
	,session(std::make_unique<Rsvp::Frrs::Frr::Session>())
{
    s2l_sub_lsp->parent = this;
    children["s2l-sub-lsp"] = s2l_sub_lsp.get();

    session->parent = this;
    children["session"] = session.get();

    yang_name = "frr"; yang_parent_name = "frrs";
}

Rsvp::Frrs::Frr::~Frr()
{
}

bool Rsvp::Frrs::Frr::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| path_status.is_set
	|| protocol.is_set
	|| reservation_status.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set
	|| sub_group_origin.is_set
	|| vrf_name.is_set
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_data())
	|| (session !=  nullptr && session->has_data());
}

bool Rsvp::Frrs::Frr::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(path_status.operation)
	|| is_set(protocol.operation)
	|| is_set(reservation_status.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(sub_group_origin.operation)
	|| is_set(vrf_name.operation)
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_operation())
	|| (session !=  nullptr && session->has_operation());
}

std::string Rsvp::Frrs::Frr::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frr";

    return path_buffer.str();

}

EntityPath Rsvp::Frrs::Frr::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (path_status.is_set || is_set(path_status.operation)) leaf_name_data.push_back(path_status.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (reservation_status.is_set || is_set(reservation_status.operation)) leaf_name_data.push_back(reservation_status.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (sub_group_origin.is_set || is_set(sub_group_origin.operation)) leaf_name_data.push_back(sub_group_origin.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Frrs::Frr::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "s2l-sub-lsp")
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        else
        {
            s2l_sub_lsp = std::make_unique<Rsvp::Frrs::Frr::S2LSubLsp>();
            s2l_sub_lsp->parent = this;
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        return children.at("s2l-sub-lsp");
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<Rsvp::Frrs::Frr::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Frrs::Frr::get_children()
{
    if(children.find("s2l-sub-lsp") == children.end())
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
    }

    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    return children;
}

void Rsvp::Frrs::Frr::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "path-status")
    {
        path_status = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "reservation-status")
    {
        reservation_status = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "sub-group-origin")
    {
        sub_group_origin = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

Rsvp::Frrs::Frrs()
{
    yang_name = "frrs"; yang_parent_name = "rsvp";
}

Rsvp::Frrs::~Frrs()
{
}

bool Rsvp::Frrs::has_data() const
{
    for (std::size_t index=0; index<frr.size(); index++)
    {
        if(frr[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::Frrs::has_operation() const
{
    for (std::size_t index=0; index<frr.size(); index++)
    {
        if(frr[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::Frrs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "frrs";

    return path_buffer.str();

}

EntityPath Rsvp::Frrs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::Frrs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "frr")
    {
        for(auto const & c : frr)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::Frrs::Frr>();
        c->parent = this;
        frr.push_back(std::move(c));
        children[segment_path] = frr.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::Frrs::get_children()
{
    for (auto const & c : frr)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::Frrs::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::~RsvpSession()
{
}

bool Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

Rsvp::RequestBriefs::RequestBrief::Session::Session()
    :
    rsvp_session(std::make_unique<Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "request-brief";
}

Rsvp::RequestBriefs::RequestBrief::Session::~Session()
{
}

bool Rsvp::RequestBriefs::RequestBrief::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool Rsvp::RequestBriefs::RequestBrief::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string Rsvp::RequestBriefs::RequestBrief::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath Rsvp::RequestBriefs::RequestBrief::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestBriefs::RequestBrief::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<Rsvp::RequestBriefs::RequestBrief::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestBriefs::RequestBrief::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void Rsvp::RequestBriefs::RequestBrief::Session::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::RequestBriefs::RequestBrief::S2LSubLsp::S2LSubLsp()
    :
    	s2l_destination_address{YType::str, "s2l-destination-address"}
{
    yang_name = "s2l-sub-lsp"; yang_parent_name = "request-brief";
}

Rsvp::RequestBriefs::RequestBrief::S2LSubLsp::~S2LSubLsp()
{
}

bool Rsvp::RequestBriefs::RequestBrief::S2LSubLsp::has_data() const
{
    return s2l_destination_address.is_set;
}

bool Rsvp::RequestBriefs::RequestBrief::S2LSubLsp::has_operation() const
{
    return is_set(operation)
	|| is_set(s2l_destination_address.operation);
}

std::string Rsvp::RequestBriefs::RequestBrief::S2LSubLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "s2l-sub-lsp";

    return path_buffer.str();

}

EntityPath Rsvp::RequestBriefs::RequestBrief::S2LSubLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (s2l_destination_address.is_set || is_set(s2l_destination_address.operation)) leaf_name_data.push_back(s2l_destination_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestBriefs::RequestBrief::S2LSubLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestBriefs::RequestBrief::S2LSubLsp::get_children()
{
    return children;
}

void Rsvp::RequestBriefs::RequestBrief::S2LSubLsp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "s2l-destination-address")
    {
        s2l_destination_address = value;
    }
}

Rsvp::RequestBriefs::RequestBrief::FlowSpec::FlowSpec()
    :
    	flow_average_rate{YType::uint64, "flow-average-rate"},
	 flow_max_burst{YType::uint64, "flow-max-burst"},
	 flow_max_unit{YType::uint32, "flow-max-unit"},
	 flow_min_unit{YType::uint32, "flow-min-unit"},
	 flow_peak_rate{YType::uint64, "flow-peak-rate"},
	 flow_qos{YType::enumeration, "flow-qos"},
	 flow_requested_rate{YType::uint64, "flow-requested-rate"},
	 flow_slack{YType::uint32, "flow-slack"}
{
    yang_name = "flow-spec"; yang_parent_name = "request-brief";
}

Rsvp::RequestBriefs::RequestBrief::FlowSpec::~FlowSpec()
{
}

bool Rsvp::RequestBriefs::RequestBrief::FlowSpec::has_data() const
{
    return flow_average_rate.is_set
	|| flow_max_burst.is_set
	|| flow_max_unit.is_set
	|| flow_min_unit.is_set
	|| flow_peak_rate.is_set
	|| flow_qos.is_set
	|| flow_requested_rate.is_set
	|| flow_slack.is_set;
}

bool Rsvp::RequestBriefs::RequestBrief::FlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_average_rate.operation)
	|| is_set(flow_max_burst.operation)
	|| is_set(flow_max_unit.operation)
	|| is_set(flow_min_unit.operation)
	|| is_set(flow_peak_rate.operation)
	|| is_set(flow_qos.operation)
	|| is_set(flow_requested_rate.operation)
	|| is_set(flow_slack.operation);
}

std::string Rsvp::RequestBriefs::RequestBrief::FlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flow-spec";

    return path_buffer.str();

}

EntityPath Rsvp::RequestBriefs::RequestBrief::FlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_average_rate.is_set || is_set(flow_average_rate.operation)) leaf_name_data.push_back(flow_average_rate.get_name_leafdata());
    if (flow_max_burst.is_set || is_set(flow_max_burst.operation)) leaf_name_data.push_back(flow_max_burst.get_name_leafdata());
    if (flow_max_unit.is_set || is_set(flow_max_unit.operation)) leaf_name_data.push_back(flow_max_unit.get_name_leafdata());
    if (flow_min_unit.is_set || is_set(flow_min_unit.operation)) leaf_name_data.push_back(flow_min_unit.get_name_leafdata());
    if (flow_peak_rate.is_set || is_set(flow_peak_rate.operation)) leaf_name_data.push_back(flow_peak_rate.get_name_leafdata());
    if (flow_qos.is_set || is_set(flow_qos.operation)) leaf_name_data.push_back(flow_qos.get_name_leafdata());
    if (flow_requested_rate.is_set || is_set(flow_requested_rate.operation)) leaf_name_data.push_back(flow_requested_rate.get_name_leafdata());
    if (flow_slack.is_set || is_set(flow_slack.operation)) leaf_name_data.push_back(flow_slack.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestBriefs::RequestBrief::FlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestBriefs::RequestBrief::FlowSpec::get_children()
{
    return children;
}

void Rsvp::RequestBriefs::RequestBrief::FlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-average-rate")
    {
        flow_average_rate = value;
    }
    if(value_path == "flow-max-burst")
    {
        flow_max_burst = value;
    }
    if(value_path == "flow-max-unit")
    {
        flow_max_unit = value;
    }
    if(value_path == "flow-min-unit")
    {
        flow_min_unit = value;
    }
    if(value_path == "flow-peak-rate")
    {
        flow_peak_rate = value;
    }
    if(value_path == "flow-qos")
    {
        flow_qos = value;
    }
    if(value_path == "flow-requested-rate")
    {
        flow_requested_rate = value;
    }
    if(value_path == "flow-slack")
    {
        flow_slack = value;
    }
}

Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec::G709OtnFlowSpec()
    :
    	flow_bit_rate{YType::uint64, "flow-bit-rate"},
	 flow_multiplier{YType::uint16, "flow-multiplier"},
	 flow_nvc{YType::uint16, "flow-nvc"},
	 flow_signal_type{YType::uint8, "flow-signal-type"}
{
    yang_name = "g709otn-flow-spec"; yang_parent_name = "generic-flow-spec";
}

Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec::~G709OtnFlowSpec()
{
}

bool Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec::has_data() const
{
    return flow_bit_rate.is_set
	|| flow_multiplier.is_set
	|| flow_nvc.is_set
	|| flow_signal_type.is_set;
}

bool Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_bit_rate.operation)
	|| is_set(flow_multiplier.operation)
	|| is_set(flow_nvc.operation)
	|| is_set(flow_signal_type.operation);
}

std::string Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-flow-spec";

    return path_buffer.str();

}

EntityPath Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/generic-flow-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_bit_rate.is_set || is_set(flow_bit_rate.operation)) leaf_name_data.push_back(flow_bit_rate.get_name_leafdata());
    if (flow_multiplier.is_set || is_set(flow_multiplier.operation)) leaf_name_data.push_back(flow_multiplier.get_name_leafdata());
    if (flow_nvc.is_set || is_set(flow_nvc.operation)) leaf_name_data.push_back(flow_nvc.get_name_leafdata());
    if (flow_signal_type.is_set || is_set(flow_signal_type.operation)) leaf_name_data.push_back(flow_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec::get_children()
{
    return children;
}

void Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-bit-rate")
    {
        flow_bit_rate = value;
    }
    if(value_path == "flow-multiplier")
    {
        flow_multiplier = value;
    }
    if(value_path == "flow-nvc")
    {
        flow_nvc = value;
    }
    if(value_path == "flow-signal-type")
    {
        flow_signal_type = value;
    }
}

Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::GenericFlowSpec()
    :
    	flow_spec_type{YType::enumeration, "flow-spec-type"}
    	,
    g709otn_flow_spec(std::make_unique<Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec>())
{
    g709otn_flow_spec->parent = this;
    children["g709otn-flow-spec"] = g709otn_flow_spec.get();

    yang_name = "generic-flow-spec"; yang_parent_name = "request-brief";
}

Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::~GenericFlowSpec()
{
}

bool Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::has_data() const
{
    return flow_spec_type.is_set
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_data());
}

bool Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_spec_type.operation)
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_operation());
}

std::string Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-flow-spec";

    return path_buffer.str();

}

EntityPath Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_spec_type.is_set || is_set(flow_spec_type.operation)) leaf_name_data.push_back(flow_spec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-flow-spec")
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        else
        {
            g709otn_flow_spec = std::make_unique<Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::G709OtnFlowSpec>();
            g709otn_flow_spec->parent = this;
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        return children.at("g709otn-flow-spec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::get_children()
{
    if(children.find("g709otn-flow-spec") == children.end())
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
    }

    return children;
}

void Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-spec-type")
    {
        flow_spec_type = value;
    }
}

Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session::UdpIpv4Session()
    :
    	source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"}
{
    yang_name = "udp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session::~UdpIpv4Session()
{
}

bool Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session::has_data() const
{
    return source_address.is_set
	|| source_port.is_set;
}

bool Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation);
}

std::string Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "udp-ipv4-session";

    return path_buffer.str();

}

EntityPath Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/filter/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session::get_children()
{
    return children;
}

void Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
}

Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session::P2MpIpv4Session()
    :
    	p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"},
	 sub_group_id{YType::uint16, "sub-group-id"}
{
    yang_name = "p2mp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session::~P2MpIpv4Session()
{
}

bool Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session::has_data() const
{
    return p2mp_sub_group_origin.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set;
}

bool Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation);
}

std::string Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "p2mp-ipv4-session";

    return path_buffer.str();

}

EntityPath Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/filter/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session::get_children()
{
    return children;
}

void Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
}

Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::RsvpFilter()
    :
    	filter_type{YType::enumeration, "filter-type"}
    	,
    p2mp_ipv4_session(std::make_unique<Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session>())
	,udp_ipv4_session(std::make_unique<Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session>())
{
    p2mp_ipv4_session->parent = this;
    children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();

    udp_ipv4_session->parent = this;
    children["udp-ipv4-session"] = udp_ipv4_session.get();

    yang_name = "rsvp-filter"; yang_parent_name = "filter";
}

Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::~RsvpFilter()
{
}

bool Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::has_data() const
{
    return filter_type.is_set
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_data())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_data());
}

bool Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::has_operation() const
{
    return is_set(operation)
	|| is_set(filter_type.operation)
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_operation())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_operation());
}

std::string Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-filter";

    return path_buffer.str();

}

EntityPath Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (filter_type.is_set || is_set(filter_type.operation)) leaf_name_data.push_back(filter_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "p2mp-ipv4-session")
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        else
        {
            p2mp_ipv4_session = std::make_unique<Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::P2MpIpv4Session>();
            p2mp_ipv4_session->parent = this;
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        return children.at("p2mp-ipv4-session");
    }

    if(child_yang_name == "udp-ipv4-session")
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        else
        {
            udp_ipv4_session = std::make_unique<Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::UdpIpv4Session>();
            udp_ipv4_session->parent = this;
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        return children.at("udp-ipv4-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::get_children()
{
    if(children.find("p2mp-ipv4-session") == children.end())
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
    }

    if(children.find("udp-ipv4-session") == children.end())
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
    }

    return children;
}

void Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "filter-type")
    {
        filter_type = value;
    }
}

Rsvp::RequestBriefs::RequestBrief::Filter::Filter()
    :
    rsvp_filter(std::make_unique<Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter>())
{
    rsvp_filter->parent = this;
    children["rsvp-filter"] = rsvp_filter.get();

    yang_name = "filter"; yang_parent_name = "request-brief";
}

Rsvp::RequestBriefs::RequestBrief::Filter::~Filter()
{
}

bool Rsvp::RequestBriefs::RequestBrief::Filter::has_data() const
{
    return (rsvp_filter !=  nullptr && rsvp_filter->has_data());
}

bool Rsvp::RequestBriefs::RequestBrief::Filter::has_operation() const
{
    return is_set(operation)
	|| (rsvp_filter !=  nullptr && rsvp_filter->has_operation());
}

std::string Rsvp::RequestBriefs::RequestBrief::Filter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "filter";

    return path_buffer.str();

}

EntityPath Rsvp::RequestBriefs::RequestBrief::Filter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestBriefs::RequestBrief::Filter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-filter")
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
        else
        {
            rsvp_filter = std::make_unique<Rsvp::RequestBriefs::RequestBrief::Filter::RsvpFilter>();
            rsvp_filter->parent = this;
            children["rsvp-filter"] = rsvp_filter.get();
        }
        return children.at("rsvp-filter");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestBriefs::RequestBrief::Filter::get_children()
{
    if(children.find("rsvp-filter") == children.end())
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
    }

    return children;
}

void Rsvp::RequestBriefs::RequestBrief::Filter::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::RequestBriefs::RequestBrief::Style::Style()
    :
    	reservation_type{YType::enumeration, "reservation-type"}
{
    yang_name = "style"; yang_parent_name = "request-brief";
}

Rsvp::RequestBriefs::RequestBrief::Style::~Style()
{
}

bool Rsvp::RequestBriefs::RequestBrief::Style::has_data() const
{
    return reservation_type.is_set;
}

bool Rsvp::RequestBriefs::RequestBrief::Style::has_operation() const
{
    return is_set(operation)
	|| is_set(reservation_type.operation);
}

std::string Rsvp::RequestBriefs::RequestBrief::Style::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "style";

    return path_buffer.str();

}

EntityPath Rsvp::RequestBriefs::RequestBrief::Style::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (reservation_type.is_set || is_set(reservation_type.operation)) leaf_name_data.push_back(reservation_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestBriefs::RequestBrief::Style::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestBriefs::RequestBrief::Style::get_children()
{
    return children;
}

void Rsvp::RequestBriefs::RequestBrief::Style::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "reservation-type")
    {
        reservation_type = value;
    }
}

Rsvp::RequestBriefs::RequestBrief::RequestBrief()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 output_interface{YType::str, "output-interface"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 protocol{YType::int32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::int32, "source-port"},
	 sub_group_id{YType::int32, "sub-group-id"},
	 sub_group_origin{YType::str, "sub-group-origin"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    filter(std::make_unique<Rsvp::RequestBriefs::RequestBrief::Filter>())
	,flow_spec(std::make_unique<Rsvp::RequestBriefs::RequestBrief::FlowSpec>())
	,generic_flow_spec(std::make_unique<Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec>())
	,s2l_sub_lsp(std::make_unique<Rsvp::RequestBriefs::RequestBrief::S2LSubLsp>())
	,session(std::make_unique<Rsvp::RequestBriefs::RequestBrief::Session>())
	,style(std::make_unique<Rsvp::RequestBriefs::RequestBrief::Style>())
{
    filter->parent = this;
    children["filter"] = filter.get();

    flow_spec->parent = this;
    children["flow-spec"] = flow_spec.get();

    generic_flow_spec->parent = this;
    children["generic-flow-spec"] = generic_flow_spec.get();

    s2l_sub_lsp->parent = this;
    children["s2l-sub-lsp"] = s2l_sub_lsp.get();

    session->parent = this;
    children["session"] = session.get();

    style->parent = this;
    children["style"] = style.get();

    yang_name = "request-brief"; yang_parent_name = "request-briefs";
}

Rsvp::RequestBriefs::RequestBrief::~RequestBrief()
{
}

bool Rsvp::RequestBriefs::RequestBrief::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| extended_tunnel_id.is_set
	|| output_interface.is_set
	|| p2mp_id.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set
	|| sub_group_origin.is_set
	|| vrf_name.is_set
	|| (filter !=  nullptr && filter->has_data())
	|| (flow_spec !=  nullptr && flow_spec->has_data())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_data())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_data())
	|| (session !=  nullptr && session->has_data())
	|| (style !=  nullptr && style->has_data());
}

bool Rsvp::RequestBriefs::RequestBrief::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(output_interface.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(sub_group_origin.operation)
	|| is_set(vrf_name.operation)
	|| (filter !=  nullptr && filter->has_operation())
	|| (flow_spec !=  nullptr && flow_spec->has_operation())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_operation())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_operation())
	|| (session !=  nullptr && session->has_operation())
	|| (style !=  nullptr && style->has_operation());
}

std::string Rsvp::RequestBriefs::RequestBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "request-brief";

    return path_buffer.str();

}

EntityPath Rsvp::RequestBriefs::RequestBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (output_interface.is_set || is_set(output_interface.operation)) leaf_name_data.push_back(output_interface.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (sub_group_origin.is_set || is_set(sub_group_origin.operation)) leaf_name_data.push_back(sub_group_origin.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestBriefs::RequestBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "filter")
    {
        if(filter != nullptr)
        {
            children["filter"] = filter.get();
        }
        else
        {
            filter = std::make_unique<Rsvp::RequestBriefs::RequestBrief::Filter>();
            filter->parent = this;
            children["filter"] = filter.get();
        }
        return children.at("filter");
    }

    if(child_yang_name == "flow-spec")
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
        else
        {
            flow_spec = std::make_unique<Rsvp::RequestBriefs::RequestBrief::FlowSpec>();
            flow_spec->parent = this;
            children["flow-spec"] = flow_spec.get();
        }
        return children.at("flow-spec");
    }

    if(child_yang_name == "generic-flow-spec")
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        else
        {
            generic_flow_spec = std::make_unique<Rsvp::RequestBriefs::RequestBrief::GenericFlowSpec>();
            generic_flow_spec->parent = this;
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        return children.at("generic-flow-spec");
    }

    if(child_yang_name == "s2l-sub-lsp")
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        else
        {
            s2l_sub_lsp = std::make_unique<Rsvp::RequestBriefs::RequestBrief::S2LSubLsp>();
            s2l_sub_lsp->parent = this;
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        return children.at("s2l-sub-lsp");
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<Rsvp::RequestBriefs::RequestBrief::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    if(child_yang_name == "style")
    {
        if(style != nullptr)
        {
            children["style"] = style.get();
        }
        else
        {
            style = std::make_unique<Rsvp::RequestBriefs::RequestBrief::Style>();
            style->parent = this;
            children["style"] = style.get();
        }
        return children.at("style");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestBriefs::RequestBrief::get_children()
{
    if(children.find("filter") == children.end())
    {
        if(filter != nullptr)
        {
            children["filter"] = filter.get();
        }
    }

    if(children.find("flow-spec") == children.end())
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
    }

    if(children.find("generic-flow-spec") == children.end())
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
    }

    if(children.find("s2l-sub-lsp") == children.end())
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
    }

    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    if(children.find("style") == children.end())
    {
        if(style != nullptr)
        {
            children["style"] = style.get();
        }
    }

    return children;
}

void Rsvp::RequestBriefs::RequestBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "output-interface")
    {
        output_interface = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "sub-group-origin")
    {
        sub_group_origin = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

Rsvp::RequestBriefs::RequestBriefs()
{
    yang_name = "request-briefs"; yang_parent_name = "rsvp";
}

Rsvp::RequestBriefs::~RequestBriefs()
{
}

bool Rsvp::RequestBriefs::has_data() const
{
    for (std::size_t index=0; index<request_brief.size(); index++)
    {
        if(request_brief[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::RequestBriefs::has_operation() const
{
    for (std::size_t index=0; index<request_brief.size(); index++)
    {
        if(request_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::RequestBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "request-briefs";

    return path_buffer.str();

}

EntityPath Rsvp::RequestBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "request-brief")
    {
        for(auto const & c : request_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::RequestBriefs::RequestBrief>();
        c->parent = this;
        request_brief.push_back(std::move(c));
        children[segment_path] = request_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestBriefs::get_children()
{
    for (auto const & c : request_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::RequestBriefs::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::~RsvpSession()
{
}

bool Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void Rsvp::RequestDetails::RequestDetail::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

Rsvp::RequestDetails::RequestDetail::Session::Session()
    :
    rsvp_session(std::make_unique<Rsvp::RequestDetails::RequestDetail::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "request-detail";
}

Rsvp::RequestDetails::RequestDetail::Session::~Session()
{
}

bool Rsvp::RequestDetails::RequestDetail::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool Rsvp::RequestDetails::RequestDetail::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string Rsvp::RequestDetails::RequestDetail::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<Rsvp::RequestDetails::RequestDetail::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void Rsvp::RequestDetails::RequestDetail::Session::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::RequestDetails::RequestDetail::S2LSubLsp::S2LSubLsp()
    :
    	s2l_destination_address{YType::str, "s2l-destination-address"}
{
    yang_name = "s2l-sub-lsp"; yang_parent_name = "request-detail";
}

Rsvp::RequestDetails::RequestDetail::S2LSubLsp::~S2LSubLsp()
{
}

bool Rsvp::RequestDetails::RequestDetail::S2LSubLsp::has_data() const
{
    return s2l_destination_address.is_set;
}

bool Rsvp::RequestDetails::RequestDetail::S2LSubLsp::has_operation() const
{
    return is_set(operation)
	|| is_set(s2l_destination_address.operation);
}

std::string Rsvp::RequestDetails::RequestDetail::S2LSubLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "s2l-sub-lsp";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::S2LSubLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (s2l_destination_address.is_set || is_set(s2l_destination_address.operation)) leaf_name_data.push_back(s2l_destination_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::S2LSubLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::S2LSubLsp::get_children()
{
    return children;
}

void Rsvp::RequestDetails::RequestDetail::S2LSubLsp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "s2l-destination-address")
    {
        s2l_destination_address = value;
    }
}

Rsvp::RequestDetails::RequestDetail::FlowSpec::FlowSpec()
    :
    	flow_average_rate{YType::uint64, "flow-average-rate"},
	 flow_max_burst{YType::uint64, "flow-max-burst"},
	 flow_max_unit{YType::uint32, "flow-max-unit"},
	 flow_min_unit{YType::uint32, "flow-min-unit"},
	 flow_peak_rate{YType::uint64, "flow-peak-rate"},
	 flow_qos{YType::enumeration, "flow-qos"},
	 flow_requested_rate{YType::uint64, "flow-requested-rate"},
	 flow_slack{YType::uint32, "flow-slack"}
{
    yang_name = "flow-spec"; yang_parent_name = "request-detail";
}

Rsvp::RequestDetails::RequestDetail::FlowSpec::~FlowSpec()
{
}

bool Rsvp::RequestDetails::RequestDetail::FlowSpec::has_data() const
{
    return flow_average_rate.is_set
	|| flow_max_burst.is_set
	|| flow_max_unit.is_set
	|| flow_min_unit.is_set
	|| flow_peak_rate.is_set
	|| flow_qos.is_set
	|| flow_requested_rate.is_set
	|| flow_slack.is_set;
}

bool Rsvp::RequestDetails::RequestDetail::FlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_average_rate.operation)
	|| is_set(flow_max_burst.operation)
	|| is_set(flow_max_unit.operation)
	|| is_set(flow_min_unit.operation)
	|| is_set(flow_peak_rate.operation)
	|| is_set(flow_qos.operation)
	|| is_set(flow_requested_rate.operation)
	|| is_set(flow_slack.operation);
}

std::string Rsvp::RequestDetails::RequestDetail::FlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flow-spec";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::FlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_average_rate.is_set || is_set(flow_average_rate.operation)) leaf_name_data.push_back(flow_average_rate.get_name_leafdata());
    if (flow_max_burst.is_set || is_set(flow_max_burst.operation)) leaf_name_data.push_back(flow_max_burst.get_name_leafdata());
    if (flow_max_unit.is_set || is_set(flow_max_unit.operation)) leaf_name_data.push_back(flow_max_unit.get_name_leafdata());
    if (flow_min_unit.is_set || is_set(flow_min_unit.operation)) leaf_name_data.push_back(flow_min_unit.get_name_leafdata());
    if (flow_peak_rate.is_set || is_set(flow_peak_rate.operation)) leaf_name_data.push_back(flow_peak_rate.get_name_leafdata());
    if (flow_qos.is_set || is_set(flow_qos.operation)) leaf_name_data.push_back(flow_qos.get_name_leafdata());
    if (flow_requested_rate.is_set || is_set(flow_requested_rate.operation)) leaf_name_data.push_back(flow_requested_rate.get_name_leafdata());
    if (flow_slack.is_set || is_set(flow_slack.operation)) leaf_name_data.push_back(flow_slack.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::FlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::FlowSpec::get_children()
{
    return children;
}

void Rsvp::RequestDetails::RequestDetail::FlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-average-rate")
    {
        flow_average_rate = value;
    }
    if(value_path == "flow-max-burst")
    {
        flow_max_burst = value;
    }
    if(value_path == "flow-max-unit")
    {
        flow_max_unit = value;
    }
    if(value_path == "flow-min-unit")
    {
        flow_min_unit = value;
    }
    if(value_path == "flow-peak-rate")
    {
        flow_peak_rate = value;
    }
    if(value_path == "flow-qos")
    {
        flow_qos = value;
    }
    if(value_path == "flow-requested-rate")
    {
        flow_requested_rate = value;
    }
    if(value_path == "flow-slack")
    {
        flow_slack = value;
    }
}

Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec::G709OtnFlowSpec()
    :
    	flow_bit_rate{YType::uint64, "flow-bit-rate"},
	 flow_multiplier{YType::uint16, "flow-multiplier"},
	 flow_nvc{YType::uint16, "flow-nvc"},
	 flow_signal_type{YType::uint8, "flow-signal-type"}
{
    yang_name = "g709otn-flow-spec"; yang_parent_name = "generic-flow-spec";
}

Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec::~G709OtnFlowSpec()
{
}

bool Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec::has_data() const
{
    return flow_bit_rate.is_set
	|| flow_multiplier.is_set
	|| flow_nvc.is_set
	|| flow_signal_type.is_set;
}

bool Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_bit_rate.operation)
	|| is_set(flow_multiplier.operation)
	|| is_set(flow_nvc.operation)
	|| is_set(flow_signal_type.operation);
}

std::string Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-flow-spec";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/generic-flow-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_bit_rate.is_set || is_set(flow_bit_rate.operation)) leaf_name_data.push_back(flow_bit_rate.get_name_leafdata());
    if (flow_multiplier.is_set || is_set(flow_multiplier.operation)) leaf_name_data.push_back(flow_multiplier.get_name_leafdata());
    if (flow_nvc.is_set || is_set(flow_nvc.operation)) leaf_name_data.push_back(flow_nvc.get_name_leafdata());
    if (flow_signal_type.is_set || is_set(flow_signal_type.operation)) leaf_name_data.push_back(flow_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec::get_children()
{
    return children;
}

void Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-bit-rate")
    {
        flow_bit_rate = value;
    }
    if(value_path == "flow-multiplier")
    {
        flow_multiplier = value;
    }
    if(value_path == "flow-nvc")
    {
        flow_nvc = value;
    }
    if(value_path == "flow-signal-type")
    {
        flow_signal_type = value;
    }
}

Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::GenericFlowSpec()
    :
    	flow_spec_type{YType::enumeration, "flow-spec-type"}
    	,
    g709otn_flow_spec(std::make_unique<Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec>())
{
    g709otn_flow_spec->parent = this;
    children["g709otn-flow-spec"] = g709otn_flow_spec.get();

    yang_name = "generic-flow-spec"; yang_parent_name = "request-detail";
}

Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::~GenericFlowSpec()
{
}

bool Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::has_data() const
{
    return flow_spec_type.is_set
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_data());
}

bool Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_spec_type.operation)
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_operation());
}

std::string Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-flow-spec";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_spec_type.is_set || is_set(flow_spec_type.operation)) leaf_name_data.push_back(flow_spec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-flow-spec")
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        else
        {
            g709otn_flow_spec = std::make_unique<Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::G709OtnFlowSpec>();
            g709otn_flow_spec->parent = this;
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        return children.at("g709otn-flow-spec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::get_children()
{
    if(children.find("g709otn-flow-spec") == children.end())
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
    }

    return children;
}

void Rsvp::RequestDetails::RequestDetail::GenericFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-spec-type")
    {
        flow_spec_type = value;
    }
}

Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session::UdpIpv4Session()
    :
    	source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"}
{
    yang_name = "udp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session::~UdpIpv4Session()
{
}

bool Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session::has_data() const
{
    return source_address.is_set
	|| source_port.is_set;
}

bool Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation);
}

std::string Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "udp-ipv4-session";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/filter/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session::get_children()
{
    return children;
}

void Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
}

Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session::P2MpIpv4Session()
    :
    	p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"},
	 sub_group_id{YType::uint16, "sub-group-id"}
{
    yang_name = "p2mp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session::~P2MpIpv4Session()
{
}

bool Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session::has_data() const
{
    return p2mp_sub_group_origin.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set;
}

bool Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation);
}

std::string Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "p2mp-ipv4-session";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/filter/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session::get_children()
{
    return children;
}

void Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
}

Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::RsvpFilter()
    :
    	filter_type{YType::enumeration, "filter-type"}
    	,
    p2mp_ipv4_session(std::make_unique<Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session>())
	,udp_ipv4_session(std::make_unique<Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session>())
{
    p2mp_ipv4_session->parent = this;
    children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();

    udp_ipv4_session->parent = this;
    children["udp-ipv4-session"] = udp_ipv4_session.get();

    yang_name = "rsvp-filter"; yang_parent_name = "filter";
}

Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::~RsvpFilter()
{
}

bool Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::has_data() const
{
    return filter_type.is_set
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_data())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_data());
}

bool Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::has_operation() const
{
    return is_set(operation)
	|| is_set(filter_type.operation)
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_operation())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_operation());
}

std::string Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-filter";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (filter_type.is_set || is_set(filter_type.operation)) leaf_name_data.push_back(filter_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "p2mp-ipv4-session")
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        else
        {
            p2mp_ipv4_session = std::make_unique<Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::P2MpIpv4Session>();
            p2mp_ipv4_session->parent = this;
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        return children.at("p2mp-ipv4-session");
    }

    if(child_yang_name == "udp-ipv4-session")
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        else
        {
            udp_ipv4_session = std::make_unique<Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::UdpIpv4Session>();
            udp_ipv4_session->parent = this;
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        return children.at("udp-ipv4-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::get_children()
{
    if(children.find("p2mp-ipv4-session") == children.end())
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
    }

    if(children.find("udp-ipv4-session") == children.end())
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
    }

    return children;
}

void Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "filter-type")
    {
        filter_type = value;
    }
}

Rsvp::RequestDetails::RequestDetail::Filter::Filter()
    :
    rsvp_filter(std::make_unique<Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter>())
{
    rsvp_filter->parent = this;
    children["rsvp-filter"] = rsvp_filter.get();

    yang_name = "filter"; yang_parent_name = "request-detail";
}

Rsvp::RequestDetails::RequestDetail::Filter::~Filter()
{
}

bool Rsvp::RequestDetails::RequestDetail::Filter::has_data() const
{
    return (rsvp_filter !=  nullptr && rsvp_filter->has_data());
}

bool Rsvp::RequestDetails::RequestDetail::Filter::has_operation() const
{
    return is_set(operation)
	|| (rsvp_filter !=  nullptr && rsvp_filter->has_operation());
}

std::string Rsvp::RequestDetails::RequestDetail::Filter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "filter";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::Filter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::Filter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-filter")
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
        else
        {
            rsvp_filter = std::make_unique<Rsvp::RequestDetails::RequestDetail::Filter::RsvpFilter>();
            rsvp_filter->parent = this;
            children["rsvp-filter"] = rsvp_filter.get();
        }
        return children.at("rsvp-filter");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::Filter::get_children()
{
    if(children.find("rsvp-filter") == children.end())
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
    }

    return children;
}

void Rsvp::RequestDetails::RequestDetail::Filter::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::RequestDetails::RequestDetail::Style::Style()
    :
    	reservation_type{YType::enumeration, "reservation-type"}
{
    yang_name = "style"; yang_parent_name = "request-detail";
}

Rsvp::RequestDetails::RequestDetail::Style::~Style()
{
}

bool Rsvp::RequestDetails::RequestDetail::Style::has_data() const
{
    return reservation_type.is_set;
}

bool Rsvp::RequestDetails::RequestDetail::Style::has_operation() const
{
    return is_set(operation)
	|| is_set(reservation_type.operation);
}

std::string Rsvp::RequestDetails::RequestDetail::Style::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "style";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::Style::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (reservation_type.is_set || is_set(reservation_type.operation)) leaf_name_data.push_back(reservation_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::Style::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::Style::get_children()
{
    return children;
}

void Rsvp::RequestDetails::RequestDetail::Style::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "reservation-type")
    {
        reservation_type = value;
    }
}

Rsvp::RequestDetails::RequestDetail::ReqFlags::ReqFlags()
    :
    	is_ack_outstanding{YType::boolean, "is-ack-outstanding"},
	 is_label_request_in_path{YType::boolean, "is-label-request-in-path"},
	 is_local_receiver{YType::boolean, "is-local-receiver"},
	 is_merge_point{YType::boolean, "is-merge-point"},
	 is_message_id_allocated{YType::boolean, "is-message-id-allocated"},
	 is_nack_received{YType::boolean, "is-nack-received"},
	 is_paced{YType::boolean, "is-paced"},
	 is_record_label_in_path{YType::boolean, "is-record-label-in-path"},
	 is_refreshing{YType::boolean, "is-refreshing"},
	 is_retransmit{YType::boolean, "is-retransmit"},
	 is_rro_in_path{YType::boolean, "is-rro-in-path"},
	 is_send_confirm{YType::boolean, "is-send-confirm"}
{
    yang_name = "req-flags"; yang_parent_name = "request-detail";
}

Rsvp::RequestDetails::RequestDetail::ReqFlags::~ReqFlags()
{
}

bool Rsvp::RequestDetails::RequestDetail::ReqFlags::has_data() const
{
    return is_ack_outstanding.is_set
	|| is_label_request_in_path.is_set
	|| is_local_receiver.is_set
	|| is_merge_point.is_set
	|| is_message_id_allocated.is_set
	|| is_nack_received.is_set
	|| is_paced.is_set
	|| is_record_label_in_path.is_set
	|| is_refreshing.is_set
	|| is_retransmit.is_set
	|| is_rro_in_path.is_set
	|| is_send_confirm.is_set;
}

bool Rsvp::RequestDetails::RequestDetail::ReqFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_ack_outstanding.operation)
	|| is_set(is_label_request_in_path.operation)
	|| is_set(is_local_receiver.operation)
	|| is_set(is_merge_point.operation)
	|| is_set(is_message_id_allocated.operation)
	|| is_set(is_nack_received.operation)
	|| is_set(is_paced.operation)
	|| is_set(is_record_label_in_path.operation)
	|| is_set(is_refreshing.operation)
	|| is_set(is_retransmit.operation)
	|| is_set(is_rro_in_path.operation)
	|| is_set(is_send_confirm.operation);
}

std::string Rsvp::RequestDetails::RequestDetail::ReqFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "req-flags";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::ReqFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_ack_outstanding.is_set || is_set(is_ack_outstanding.operation)) leaf_name_data.push_back(is_ack_outstanding.get_name_leafdata());
    if (is_label_request_in_path.is_set || is_set(is_label_request_in_path.operation)) leaf_name_data.push_back(is_label_request_in_path.get_name_leafdata());
    if (is_local_receiver.is_set || is_set(is_local_receiver.operation)) leaf_name_data.push_back(is_local_receiver.get_name_leafdata());
    if (is_merge_point.is_set || is_set(is_merge_point.operation)) leaf_name_data.push_back(is_merge_point.get_name_leafdata());
    if (is_message_id_allocated.is_set || is_set(is_message_id_allocated.operation)) leaf_name_data.push_back(is_message_id_allocated.get_name_leafdata());
    if (is_nack_received.is_set || is_set(is_nack_received.operation)) leaf_name_data.push_back(is_nack_received.get_name_leafdata());
    if (is_paced.is_set || is_set(is_paced.operation)) leaf_name_data.push_back(is_paced.get_name_leafdata());
    if (is_record_label_in_path.is_set || is_set(is_record_label_in_path.operation)) leaf_name_data.push_back(is_record_label_in_path.get_name_leafdata());
    if (is_refreshing.is_set || is_set(is_refreshing.operation)) leaf_name_data.push_back(is_refreshing.get_name_leafdata());
    if (is_retransmit.is_set || is_set(is_retransmit.operation)) leaf_name_data.push_back(is_retransmit.get_name_leafdata());
    if (is_rro_in_path.is_set || is_set(is_rro_in_path.operation)) leaf_name_data.push_back(is_rro_in_path.get_name_leafdata());
    if (is_send_confirm.is_set || is_set(is_send_confirm.operation)) leaf_name_data.push_back(is_send_confirm.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::ReqFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::ReqFlags::get_children()
{
    return children;
}

void Rsvp::RequestDetails::RequestDetail::ReqFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-ack-outstanding")
    {
        is_ack_outstanding = value;
    }
    if(value_path == "is-label-request-in-path")
    {
        is_label_request_in_path = value;
    }
    if(value_path == "is-local-receiver")
    {
        is_local_receiver = value;
    }
    if(value_path == "is-merge-point")
    {
        is_merge_point = value;
    }
    if(value_path == "is-message-id-allocated")
    {
        is_message_id_allocated = value;
    }
    if(value_path == "is-nack-received")
    {
        is_nack_received = value;
    }
    if(value_path == "is-paced")
    {
        is_paced = value;
    }
    if(value_path == "is-record-label-in-path")
    {
        is_record_label_in_path = value;
    }
    if(value_path == "is-refreshing")
    {
        is_refreshing = value;
    }
    if(value_path == "is-retransmit")
    {
        is_retransmit = value;
    }
    if(value_path == "is-rro-in-path")
    {
        is_rro_in_path = value;
    }
    if(value_path == "is-send-confirm")
    {
        is_send_confirm = value;
    }
}

Rsvp::RequestDetails::RequestDetail::Hop::Hop()
    :
    	neighbor_address{YType::str, "neighbor-address"},
	 neighbor_logical_interface_name{YType::str, "neighbor-logical-interface-name"}
{
    yang_name = "hop"; yang_parent_name = "request-detail";
}

Rsvp::RequestDetails::RequestDetail::Hop::~Hop()
{
}

bool Rsvp::RequestDetails::RequestDetail::Hop::has_data() const
{
    return neighbor_address.is_set
	|| neighbor_logical_interface_name.is_set;
}

bool Rsvp::RequestDetails::RequestDetail::Hop::has_operation() const
{
    return is_set(operation)
	|| is_set(neighbor_address.operation)
	|| is_set(neighbor_logical_interface_name.operation);
}

std::string Rsvp::RequestDetails::RequestDetail::Hop::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hop";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::Hop::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (neighbor_logical_interface_name.is_set || is_set(neighbor_logical_interface_name.operation)) leaf_name_data.push_back(neighbor_logical_interface_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::Hop::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::Hop::get_children()
{
    return children;
}

void Rsvp::RequestDetails::RequestDetail::Hop::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "neighbor-logical-interface-name")
    {
        neighbor_logical_interface_name = value;
    }
}

Rsvp::RequestDetails::RequestDetail::Header::Header()
    :
    	ip_source_address{YType::str, "ip-source-address"},
	 ip_tos{YType::uint8, "ip-tos"},
	 ip_ttl{YType::uint8, "ip-ttl"},
	 rsvp_header_flags{YType::uint8, "rsvp-header-flags"},
	 rsvp_message_type{YType::uint8, "rsvp-message-type"},
	 rsvp_ttl{YType::uint8, "rsvp-ttl"},
	 rsvp_version{YType::uint8, "rsvp-version"}
{
    yang_name = "header"; yang_parent_name = "request-detail";
}

Rsvp::RequestDetails::RequestDetail::Header::~Header()
{
}

bool Rsvp::RequestDetails::RequestDetail::Header::has_data() const
{
    return ip_source_address.is_set
	|| ip_tos.is_set
	|| ip_ttl.is_set
	|| rsvp_header_flags.is_set
	|| rsvp_message_type.is_set
	|| rsvp_ttl.is_set
	|| rsvp_version.is_set;
}

bool Rsvp::RequestDetails::RequestDetail::Header::has_operation() const
{
    return is_set(operation)
	|| is_set(ip_source_address.operation)
	|| is_set(ip_tos.operation)
	|| is_set(ip_ttl.operation)
	|| is_set(rsvp_header_flags.operation)
	|| is_set(rsvp_message_type.operation)
	|| is_set(rsvp_ttl.operation)
	|| is_set(rsvp_version.operation);
}

std::string Rsvp::RequestDetails::RequestDetail::Header::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "header";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::Header::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ip_source_address.is_set || is_set(ip_source_address.operation)) leaf_name_data.push_back(ip_source_address.get_name_leafdata());
    if (ip_tos.is_set || is_set(ip_tos.operation)) leaf_name_data.push_back(ip_tos.get_name_leafdata());
    if (ip_ttl.is_set || is_set(ip_ttl.operation)) leaf_name_data.push_back(ip_ttl.get_name_leafdata());
    if (rsvp_header_flags.is_set || is_set(rsvp_header_flags.operation)) leaf_name_data.push_back(rsvp_header_flags.get_name_leafdata());
    if (rsvp_message_type.is_set || is_set(rsvp_message_type.operation)) leaf_name_data.push_back(rsvp_message_type.get_name_leafdata());
    if (rsvp_ttl.is_set || is_set(rsvp_ttl.operation)) leaf_name_data.push_back(rsvp_ttl.get_name_leafdata());
    if (rsvp_version.is_set || is_set(rsvp_version.operation)) leaf_name_data.push_back(rsvp_version.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::Header::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::Header::get_children()
{
    return children;
}

void Rsvp::RequestDetails::RequestDetail::Header::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ip-source-address")
    {
        ip_source_address = value;
    }
    if(value_path == "ip-tos")
    {
        ip_tos = value;
    }
    if(value_path == "ip-ttl")
    {
        ip_ttl = value;
    }
    if(value_path == "rsvp-header-flags")
    {
        rsvp_header_flags = value;
    }
    if(value_path == "rsvp-message-type")
    {
        rsvp_message_type = value;
    }
    if(value_path == "rsvp-ttl")
    {
        rsvp_ttl = value;
    }
    if(value_path == "rsvp-version")
    {
        rsvp_version = value;
    }
}

Rsvp::RequestDetails::RequestDetail::PolicySources::PolicySources()
    :
    	is_cable{YType::boolean, "is-cable"},
	 is_cops{YType::boolean, "is-cops"},
	 is_default{YType::boolean, "is-default"},
	 is_local{YType::boolean, "is-local"},
	 is_te_link{YType::boolean, "is-te-link"}
{
    yang_name = "policy-sources"; yang_parent_name = "request-detail";
}

Rsvp::RequestDetails::RequestDetail::PolicySources::~PolicySources()
{
}

bool Rsvp::RequestDetails::RequestDetail::PolicySources::has_data() const
{
    return is_cable.is_set
	|| is_cops.is_set
	|| is_default.is_set
	|| is_local.is_set
	|| is_te_link.is_set;
}

bool Rsvp::RequestDetails::RequestDetail::PolicySources::has_operation() const
{
    return is_set(operation)
	|| is_set(is_cable.operation)
	|| is_set(is_cops.operation)
	|| is_set(is_default.operation)
	|| is_set(is_local.operation)
	|| is_set(is_te_link.operation);
}

std::string Rsvp::RequestDetails::RequestDetail::PolicySources::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-sources";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::PolicySources::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_cable.is_set || is_set(is_cable.operation)) leaf_name_data.push_back(is_cable.get_name_leafdata());
    if (is_cops.is_set || is_set(is_cops.operation)) leaf_name_data.push_back(is_cops.get_name_leafdata());
    if (is_default.is_set || is_set(is_default.operation)) leaf_name_data.push_back(is_default.get_name_leafdata());
    if (is_local.is_set || is_set(is_local.operation)) leaf_name_data.push_back(is_local.get_name_leafdata());
    if (is_te_link.is_set || is_set(is_te_link.operation)) leaf_name_data.push_back(is_te_link.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::PolicySources::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::PolicySources::get_children()
{
    return children;
}

void Rsvp::RequestDetails::RequestDetail::PolicySources::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-cable")
    {
        is_cable = value;
    }
    if(value_path == "is-cops")
    {
        is_cops = value;
    }
    if(value_path == "is-default")
    {
        is_default = value;
    }
    if(value_path == "is-local")
    {
        is_local = value;
    }
    if(value_path == "is-te-link")
    {
        is_te_link = value;
    }
}

Rsvp::RequestDetails::RequestDetail::PolicyFlags::PolicyFlags()
    :
    	is_accepted{YType::boolean, "is-accepted"},
	 is_forwarding{YType::boolean, "is-forwarding"},
	 is_installed{YType::boolean, "is-installed"}
{
    yang_name = "policy-flags"; yang_parent_name = "request-detail";
}

Rsvp::RequestDetails::RequestDetail::PolicyFlags::~PolicyFlags()
{
}

bool Rsvp::RequestDetails::RequestDetail::PolicyFlags::has_data() const
{
    return is_accepted.is_set
	|| is_forwarding.is_set
	|| is_installed.is_set;
}

bool Rsvp::RequestDetails::RequestDetail::PolicyFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_accepted.operation)
	|| is_set(is_forwarding.operation)
	|| is_set(is_installed.operation);
}

std::string Rsvp::RequestDetails::RequestDetail::PolicyFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-flags";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::PolicyFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_accepted.is_set || is_set(is_accepted.operation)) leaf_name_data.push_back(is_accepted.get_name_leafdata());
    if (is_forwarding.is_set || is_set(is_forwarding.operation)) leaf_name_data.push_back(is_forwarding.get_name_leafdata());
    if (is_installed.is_set || is_set(is_installed.operation)) leaf_name_data.push_back(is_installed.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::PolicyFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::PolicyFlags::get_children()
{
    return children;
}

void Rsvp::RequestDetails::RequestDetail::PolicyFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-accepted")
    {
        is_accepted = value;
    }
    if(value_path == "is-forwarding")
    {
        is_forwarding = value;
    }
    if(value_path == "is-installed")
    {
        is_installed = value;
    }
}

Rsvp::RequestDetails::RequestDetail::PolicyQueryFlags::PolicyQueryFlags()
    :
    	is_bypass{YType::boolean, "is-bypass"},
	 is_needed{YType::boolean, "is-needed"},
	 is_report_required{YType::boolean, "is-report-required"},
	 is_resync{YType::boolean, "is-resync"}
{
    yang_name = "policy-query-flags"; yang_parent_name = "request-detail";
}

Rsvp::RequestDetails::RequestDetail::PolicyQueryFlags::~PolicyQueryFlags()
{
}

bool Rsvp::RequestDetails::RequestDetail::PolicyQueryFlags::has_data() const
{
    return is_bypass.is_set
	|| is_needed.is_set
	|| is_report_required.is_set
	|| is_resync.is_set;
}

bool Rsvp::RequestDetails::RequestDetail::PolicyQueryFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bypass.operation)
	|| is_set(is_needed.operation)
	|| is_set(is_report_required.operation)
	|| is_set(is_resync.operation);
}

std::string Rsvp::RequestDetails::RequestDetail::PolicyQueryFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "policy-query-flags";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::PolicyQueryFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bypass.is_set || is_set(is_bypass.operation)) leaf_name_data.push_back(is_bypass.get_name_leafdata());
    if (is_needed.is_set || is_set(is_needed.operation)) leaf_name_data.push_back(is_needed.get_name_leafdata());
    if (is_report_required.is_set || is_set(is_report_required.operation)) leaf_name_data.push_back(is_report_required.get_name_leafdata());
    if (is_resync.is_set || is_set(is_resync.operation)) leaf_name_data.push_back(is_resync.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::PolicyQueryFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::PolicyQueryFlags::get_children()
{
    return children;
}

void Rsvp::RequestDetails::RequestDetail::PolicyQueryFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bypass")
    {
        is_bypass = value;
    }
    if(value_path == "is-needed")
    {
        is_needed = value;
    }
    if(value_path == "is-report-required")
    {
        is_report_required = value;
    }
    if(value_path == "is-resync")
    {
        is_resync = value;
    }
}

Rsvp::RequestDetails::RequestDetail::PsbKey::PsbKey()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port_or_tunnel_id{YType::uint32, "destination-port-or-tunnel-id"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 protocol{YType::uint32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port_or_lsp_id{YType::uint32, "source-port-or-lsp-id"},
	 sub_group_id{YType::uint16, "sub-group-id"},
	 vrfid{YType::uint32, "vrfid"}
{
    yang_name = "psb-key"; yang_parent_name = "request-detail";
}

Rsvp::RequestDetails::RequestDetail::PsbKey::~PsbKey()
{
}

bool Rsvp::RequestDetails::RequestDetail::PsbKey::has_data() const
{
    return destination_address.is_set
	|| destination_port_or_tunnel_id.is_set
	|| extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| p2mp_sub_group_origin.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port_or_lsp_id.is_set
	|| sub_group_id.is_set
	|| vrfid.is_set;
}

bool Rsvp::RequestDetails::RequestDetail::PsbKey::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port_or_tunnel_id.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port_or_lsp_id.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(vrfid.operation);
}

std::string Rsvp::RequestDetails::RequestDetail::PsbKey::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "psb-key";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::PsbKey::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port_or_tunnel_id.is_set || is_set(destination_port_or_tunnel_id.operation)) leaf_name_data.push_back(destination_port_or_tunnel_id.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port_or_lsp_id.is_set || is_set(source_port_or_lsp_id.operation)) leaf_name_data.push_back(source_port_or_lsp_id.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (vrfid.is_set || is_set(vrfid.operation)) leaf_name_data.push_back(vrfid.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::PsbKey::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::PsbKey::get_children()
{
    return children;
}

void Rsvp::RequestDetails::RequestDetail::PsbKey::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port-or-tunnel-id")
    {
        destination_port_or_tunnel_id = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port-or-lsp-id")
    {
        source_port_or_lsp_id = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "vrfid")
    {
        vrfid = value;
    }
}

Rsvp::RequestDetails::RequestDetail::RsbKey::RsbKey()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port_or_tunnel_id{YType::uint32, "destination-port-or-tunnel-id"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 protocol{YType::uint32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port_or_lsp_id{YType::uint32, "source-port-or-lsp-id"},
	 sub_group_id{YType::uint16, "sub-group-id"},
	 vrfid{YType::uint32, "vrfid"}
{
    yang_name = "rsb-key"; yang_parent_name = "request-detail";
}

Rsvp::RequestDetails::RequestDetail::RsbKey::~RsbKey()
{
}

bool Rsvp::RequestDetails::RequestDetail::RsbKey::has_data() const
{
    return destination_address.is_set
	|| destination_port_or_tunnel_id.is_set
	|| extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| p2mp_sub_group_origin.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port_or_lsp_id.is_set
	|| sub_group_id.is_set
	|| vrfid.is_set;
}

bool Rsvp::RequestDetails::RequestDetail::RsbKey::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port_or_tunnel_id.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port_or_lsp_id.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(vrfid.operation);
}

std::string Rsvp::RequestDetails::RequestDetail::RsbKey::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsb-key";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::RsbKey::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port_or_tunnel_id.is_set || is_set(destination_port_or_tunnel_id.operation)) leaf_name_data.push_back(destination_port_or_tunnel_id.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port_or_lsp_id.is_set || is_set(source_port_or_lsp_id.operation)) leaf_name_data.push_back(source_port_or_lsp_id.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (vrfid.is_set || is_set(vrfid.operation)) leaf_name_data.push_back(vrfid.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::RsbKey::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::RsbKey::get_children()
{
    return children;
}

void Rsvp::RequestDetails::RequestDetail::RsbKey::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port-or-tunnel-id")
    {
        destination_port_or_tunnel_id = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port-or-lsp-id")
    {
        source_port_or_lsp_id = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "vrfid")
    {
        vrfid = value;
    }
}

Rsvp::RequestDetails::RequestDetail::RequestDetail()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 output_interface{YType::str, "output-interface"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 protocol{YType::int32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::int32, "source-port"},
	 sub_group_id{YType::int32, "sub-group-id"},
	 sub_group_origin{YType::str, "sub-group-origin"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    filter(std::make_unique<Rsvp::RequestDetails::RequestDetail::Filter>())
	,flow_spec(std::make_unique<Rsvp::RequestDetails::RequestDetail::FlowSpec>())
	,generic_flow_spec(std::make_unique<Rsvp::RequestDetails::RequestDetail::GenericFlowSpec>())
	,header(std::make_unique<Rsvp::RequestDetails::RequestDetail::Header>())
	,hop(std::make_unique<Rsvp::RequestDetails::RequestDetail::Hop>())
	,policy_flags(std::make_unique<Rsvp::RequestDetails::RequestDetail::PolicyFlags>())
	,policy_query_flags(std::make_unique<Rsvp::RequestDetails::RequestDetail::PolicyQueryFlags>())
	,policy_sources(std::make_unique<Rsvp::RequestDetails::RequestDetail::PolicySources>())
	,req_flags(std::make_unique<Rsvp::RequestDetails::RequestDetail::ReqFlags>())
	,s2l_sub_lsp(std::make_unique<Rsvp::RequestDetails::RequestDetail::S2LSubLsp>())
	,session(std::make_unique<Rsvp::RequestDetails::RequestDetail::Session>())
	,style(std::make_unique<Rsvp::RequestDetails::RequestDetail::Style>())
{
    filter->parent = this;
    children["filter"] = filter.get();

    flow_spec->parent = this;
    children["flow-spec"] = flow_spec.get();

    generic_flow_spec->parent = this;
    children["generic-flow-spec"] = generic_flow_spec.get();

    header->parent = this;
    children["header"] = header.get();

    hop->parent = this;
    children["hop"] = hop.get();

    policy_flags->parent = this;
    children["policy-flags"] = policy_flags.get();

    policy_query_flags->parent = this;
    children["policy-query-flags"] = policy_query_flags.get();

    policy_sources->parent = this;
    children["policy-sources"] = policy_sources.get();

    req_flags->parent = this;
    children["req-flags"] = req_flags.get();

    s2l_sub_lsp->parent = this;
    children["s2l-sub-lsp"] = s2l_sub_lsp.get();

    session->parent = this;
    children["session"] = session.get();

    style->parent = this;
    children["style"] = style.get();

    yang_name = "request-detail"; yang_parent_name = "request-details";
}

Rsvp::RequestDetails::RequestDetail::~RequestDetail()
{
}

bool Rsvp::RequestDetails::RequestDetail::has_data() const
{
    for (std::size_t index=0; index<psb_key.size(); index++)
    {
        if(psb_key[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<rsb_key.size(); index++)
    {
        if(rsb_key[index]->has_data())
            return true;
    }
    return destination_address.is_set
	|| destination_port.is_set
	|| extended_tunnel_id.is_set
	|| output_interface.is_set
	|| p2mp_id.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set
	|| sub_group_origin.is_set
	|| vrf_name.is_set
	|| (filter !=  nullptr && filter->has_data())
	|| (flow_spec !=  nullptr && flow_spec->has_data())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_data())
	|| (header !=  nullptr && header->has_data())
	|| (hop !=  nullptr && hop->has_data())
	|| (policy_flags !=  nullptr && policy_flags->has_data())
	|| (policy_query_flags !=  nullptr && policy_query_flags->has_data())
	|| (policy_sources !=  nullptr && policy_sources->has_data())
	|| (req_flags !=  nullptr && req_flags->has_data())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_data())
	|| (session !=  nullptr && session->has_data())
	|| (style !=  nullptr && style->has_data());
}

bool Rsvp::RequestDetails::RequestDetail::has_operation() const
{
    for (std::size_t index=0; index<psb_key.size(); index++)
    {
        if(psb_key[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<rsb_key.size(); index++)
    {
        if(rsb_key[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(output_interface.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(sub_group_origin.operation)
	|| is_set(vrf_name.operation)
	|| (filter !=  nullptr && filter->has_operation())
	|| (flow_spec !=  nullptr && flow_spec->has_operation())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_operation())
	|| (header !=  nullptr && header->has_operation())
	|| (hop !=  nullptr && hop->has_operation())
	|| (policy_flags !=  nullptr && policy_flags->has_operation())
	|| (policy_query_flags !=  nullptr && policy_query_flags->has_operation())
	|| (policy_sources !=  nullptr && policy_sources->has_operation())
	|| (req_flags !=  nullptr && req_flags->has_operation())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_operation())
	|| (session !=  nullptr && session->has_operation())
	|| (style !=  nullptr && style->has_operation());
}

std::string Rsvp::RequestDetails::RequestDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "request-detail";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::RequestDetail::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (output_interface.is_set || is_set(output_interface.operation)) leaf_name_data.push_back(output_interface.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (sub_group_origin.is_set || is_set(sub_group_origin.operation)) leaf_name_data.push_back(sub_group_origin.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::RequestDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "filter")
    {
        if(filter != nullptr)
        {
            children["filter"] = filter.get();
        }
        else
        {
            filter = std::make_unique<Rsvp::RequestDetails::RequestDetail::Filter>();
            filter->parent = this;
            children["filter"] = filter.get();
        }
        return children.at("filter");
    }

    if(child_yang_name == "flow-spec")
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
        else
        {
            flow_spec = std::make_unique<Rsvp::RequestDetails::RequestDetail::FlowSpec>();
            flow_spec->parent = this;
            children["flow-spec"] = flow_spec.get();
        }
        return children.at("flow-spec");
    }

    if(child_yang_name == "generic-flow-spec")
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        else
        {
            generic_flow_spec = std::make_unique<Rsvp::RequestDetails::RequestDetail::GenericFlowSpec>();
            generic_flow_spec->parent = this;
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        return children.at("generic-flow-spec");
    }

    if(child_yang_name == "header")
    {
        if(header != nullptr)
        {
            children["header"] = header.get();
        }
        else
        {
            header = std::make_unique<Rsvp::RequestDetails::RequestDetail::Header>();
            header->parent = this;
            children["header"] = header.get();
        }
        return children.at("header");
    }

    if(child_yang_name == "hop")
    {
        if(hop != nullptr)
        {
            children["hop"] = hop.get();
        }
        else
        {
            hop = std::make_unique<Rsvp::RequestDetails::RequestDetail::Hop>();
            hop->parent = this;
            children["hop"] = hop.get();
        }
        return children.at("hop");
    }

    if(child_yang_name == "policy-flags")
    {
        if(policy_flags != nullptr)
        {
            children["policy-flags"] = policy_flags.get();
        }
        else
        {
            policy_flags = std::make_unique<Rsvp::RequestDetails::RequestDetail::PolicyFlags>();
            policy_flags->parent = this;
            children["policy-flags"] = policy_flags.get();
        }
        return children.at("policy-flags");
    }

    if(child_yang_name == "policy-query-flags")
    {
        if(policy_query_flags != nullptr)
        {
            children["policy-query-flags"] = policy_query_flags.get();
        }
        else
        {
            policy_query_flags = std::make_unique<Rsvp::RequestDetails::RequestDetail::PolicyQueryFlags>();
            policy_query_flags->parent = this;
            children["policy-query-flags"] = policy_query_flags.get();
        }
        return children.at("policy-query-flags");
    }

    if(child_yang_name == "policy-sources")
    {
        if(policy_sources != nullptr)
        {
            children["policy-sources"] = policy_sources.get();
        }
        else
        {
            policy_sources = std::make_unique<Rsvp::RequestDetails::RequestDetail::PolicySources>();
            policy_sources->parent = this;
            children["policy-sources"] = policy_sources.get();
        }
        return children.at("policy-sources");
    }

    if(child_yang_name == "psb-key")
    {
        for(auto const & c : psb_key)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::RequestDetails::RequestDetail::PsbKey>();
        c->parent = this;
        psb_key.push_back(std::move(c));
        children[segment_path] = psb_key.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "req-flags")
    {
        if(req_flags != nullptr)
        {
            children["req-flags"] = req_flags.get();
        }
        else
        {
            req_flags = std::make_unique<Rsvp::RequestDetails::RequestDetail::ReqFlags>();
            req_flags->parent = this;
            children["req-flags"] = req_flags.get();
        }
        return children.at("req-flags");
    }

    if(child_yang_name == "rsb-key")
    {
        for(auto const & c : rsb_key)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::RequestDetails::RequestDetail::RsbKey>();
        c->parent = this;
        rsb_key.push_back(std::move(c));
        children[segment_path] = rsb_key.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "s2l-sub-lsp")
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        else
        {
            s2l_sub_lsp = std::make_unique<Rsvp::RequestDetails::RequestDetail::S2LSubLsp>();
            s2l_sub_lsp->parent = this;
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        return children.at("s2l-sub-lsp");
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<Rsvp::RequestDetails::RequestDetail::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    if(child_yang_name == "style")
    {
        if(style != nullptr)
        {
            children["style"] = style.get();
        }
        else
        {
            style = std::make_unique<Rsvp::RequestDetails::RequestDetail::Style>();
            style->parent = this;
            children["style"] = style.get();
        }
        return children.at("style");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::RequestDetail::get_children()
{
    if(children.find("filter") == children.end())
    {
        if(filter != nullptr)
        {
            children["filter"] = filter.get();
        }
    }

    if(children.find("flow-spec") == children.end())
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
    }

    if(children.find("generic-flow-spec") == children.end())
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
    }

    if(children.find("header") == children.end())
    {
        if(header != nullptr)
        {
            children["header"] = header.get();
        }
    }

    if(children.find("hop") == children.end())
    {
        if(hop != nullptr)
        {
            children["hop"] = hop.get();
        }
    }

    if(children.find("policy-flags") == children.end())
    {
        if(policy_flags != nullptr)
        {
            children["policy-flags"] = policy_flags.get();
        }
    }

    if(children.find("policy-query-flags") == children.end())
    {
        if(policy_query_flags != nullptr)
        {
            children["policy-query-flags"] = policy_query_flags.get();
        }
    }

    if(children.find("policy-sources") == children.end())
    {
        if(policy_sources != nullptr)
        {
            children["policy-sources"] = policy_sources.get();
        }
    }

    for (auto const & c : psb_key)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("req-flags") == children.end())
    {
        if(req_flags != nullptr)
        {
            children["req-flags"] = req_flags.get();
        }
    }

    for (auto const & c : rsb_key)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("s2l-sub-lsp") == children.end())
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
    }

    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    if(children.find("style") == children.end())
    {
        if(style != nullptr)
        {
            children["style"] = style.get();
        }
    }

    return children;
}

void Rsvp::RequestDetails::RequestDetail::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "output-interface")
    {
        output_interface = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "sub-group-origin")
    {
        sub_group_origin = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

Rsvp::RequestDetails::RequestDetails()
{
    yang_name = "request-details"; yang_parent_name = "rsvp";
}

Rsvp::RequestDetails::~RequestDetails()
{
}

bool Rsvp::RequestDetails::has_data() const
{
    for (std::size_t index=0; index<request_detail.size(); index++)
    {
        if(request_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::RequestDetails::has_operation() const
{
    for (std::size_t index=0; index<request_detail.size(); index++)
    {
        if(request_detail[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::RequestDetails::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "request-details";

    return path_buffer.str();

}

EntityPath Rsvp::RequestDetails::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::RequestDetails::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "request-detail")
    {
        for(auto const & c : request_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::RequestDetails::RequestDetail>();
        c->parent = this;
        request_detail.push_back(std::move(c));
        children[segment_path] = request_detail.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::RequestDetails::get_children()
{
    for (auto const & c : request_detail)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::RequestDetails::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface::PreStandardDsteInterface()
    :
    	allocated_bit_rate{YType::uint64, "allocated-bit-rate"},
	 is_max_bandwidth_absolute{YType::boolean, "is-max-bandwidth-absolute"},
	 is_max_subpool_bandwidth_absolute{YType::boolean, "is-max-subpool-bandwidth-absolute"},
	 max_bandwidth{YType::uint64, "max-bandwidth"},
	 max_flow_bandwidth{YType::uint64, "max-flow-bandwidth"},
	 max_subpool_bandwidth{YType::uint64, "max-subpool-bandwidth"}
{
    yang_name = "pre-standard-dste-interface"; yang_parent_name = "bandwidth-information";
}

Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface::~PreStandardDsteInterface()
{
}

bool Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface::has_data() const
{
    return allocated_bit_rate.is_set
	|| is_max_bandwidth_absolute.is_set
	|| is_max_subpool_bandwidth_absolute.is_set
	|| max_bandwidth.is_set
	|| max_flow_bandwidth.is_set
	|| max_subpool_bandwidth.is_set;
}

bool Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(allocated_bit_rate.operation)
	|| is_set(is_max_bandwidth_absolute.operation)
	|| is_set(is_max_subpool_bandwidth_absolute.operation)
	|| is_set(max_bandwidth.operation)
	|| is_set(max_flow_bandwidth.operation)
	|| is_set(max_subpool_bandwidth.operation);
}

std::string Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "pre-standard-dste-interface";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (allocated_bit_rate.is_set || is_set(allocated_bit_rate.operation)) leaf_name_data.push_back(allocated_bit_rate.get_name_leafdata());
    if (is_max_bandwidth_absolute.is_set || is_set(is_max_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bandwidth_absolute.get_name_leafdata());
    if (is_max_subpool_bandwidth_absolute.is_set || is_set(is_max_subpool_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_subpool_bandwidth_absolute.get_name_leafdata());
    if (max_bandwidth.is_set || is_set(max_bandwidth.operation)) leaf_name_data.push_back(max_bandwidth.get_name_leafdata());
    if (max_flow_bandwidth.is_set || is_set(max_flow_bandwidth.operation)) leaf_name_data.push_back(max_flow_bandwidth.get_name_leafdata());
    if (max_subpool_bandwidth.is_set || is_set(max_subpool_bandwidth.operation)) leaf_name_data.push_back(max_subpool_bandwidth.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface::get_children()
{
    return children;
}

void Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "allocated-bit-rate")
    {
        allocated_bit_rate = value;
    }
    if(value_path == "is-max-bandwidth-absolute")
    {
        is_max_bandwidth_absolute = value;
    }
    if(value_path == "is-max-subpool-bandwidth-absolute")
    {
        is_max_subpool_bandwidth_absolute = value;
    }
    if(value_path == "max-bandwidth")
    {
        max_bandwidth = value;
    }
    if(value_path == "max-flow-bandwidth")
    {
        max_flow_bandwidth = value;
    }
    if(value_path == "max-subpool-bandwidth")
    {
        max_subpool_bandwidth = value;
    }
}

Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface::StandardDsteInterface()
    :
    	allocated_bit_rate{YType::uint64, "allocated-bit-rate"},
	 is_max_bandwidth_absolute{YType::boolean, "is-max-bandwidth-absolute"},
	 is_max_bc0_bandwidth_absolute{YType::boolean, "is-max-bc0-bandwidth-absolute"},
	 is_max_bc1_bandwidth_absolute{YType::boolean, "is-max-bc1-bandwidth-absolute"},
	 max_bandwidth{YType::uint64, "max-bandwidth"},
	 max_flow_bandwidth{YType::uint64, "max-flow-bandwidth"},
	 max_pool0_bandwidth{YType::uint64, "max-pool0-bandwidth"},
	 max_pool1_bandwidth{YType::uint64, "max-pool1-bandwidth"}
{
    yang_name = "standard-dste-interface"; yang_parent_name = "bandwidth-information";
}

Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface::~StandardDsteInterface()
{
}

bool Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface::has_data() const
{
    return allocated_bit_rate.is_set
	|| is_max_bandwidth_absolute.is_set
	|| is_max_bc0_bandwidth_absolute.is_set
	|| is_max_bc1_bandwidth_absolute.is_set
	|| max_bandwidth.is_set
	|| max_flow_bandwidth.is_set
	|| max_pool0_bandwidth.is_set
	|| max_pool1_bandwidth.is_set;
}

bool Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface::has_operation() const
{
    return is_set(operation)
	|| is_set(allocated_bit_rate.operation)
	|| is_set(is_max_bandwidth_absolute.operation)
	|| is_set(is_max_bc0_bandwidth_absolute.operation)
	|| is_set(is_max_bc1_bandwidth_absolute.operation)
	|| is_set(max_bandwidth.operation)
	|| is_set(max_flow_bandwidth.operation)
	|| is_set(max_pool0_bandwidth.operation)
	|| is_set(max_pool1_bandwidth.operation);
}

std::string Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "standard-dste-interface";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (allocated_bit_rate.is_set || is_set(allocated_bit_rate.operation)) leaf_name_data.push_back(allocated_bit_rate.get_name_leafdata());
    if (is_max_bandwidth_absolute.is_set || is_set(is_max_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bandwidth_absolute.get_name_leafdata());
    if (is_max_bc0_bandwidth_absolute.is_set || is_set(is_max_bc0_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bc0_bandwidth_absolute.get_name_leafdata());
    if (is_max_bc1_bandwidth_absolute.is_set || is_set(is_max_bc1_bandwidth_absolute.operation)) leaf_name_data.push_back(is_max_bc1_bandwidth_absolute.get_name_leafdata());
    if (max_bandwidth.is_set || is_set(max_bandwidth.operation)) leaf_name_data.push_back(max_bandwidth.get_name_leafdata());
    if (max_flow_bandwidth.is_set || is_set(max_flow_bandwidth.operation)) leaf_name_data.push_back(max_flow_bandwidth.get_name_leafdata());
    if (max_pool0_bandwidth.is_set || is_set(max_pool0_bandwidth.operation)) leaf_name_data.push_back(max_pool0_bandwidth.get_name_leafdata());
    if (max_pool1_bandwidth.is_set || is_set(max_pool1_bandwidth.operation)) leaf_name_data.push_back(max_pool1_bandwidth.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface::get_children()
{
    return children;
}

void Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "allocated-bit-rate")
    {
        allocated_bit_rate = value;
    }
    if(value_path == "is-max-bandwidth-absolute")
    {
        is_max_bandwidth_absolute = value;
    }
    if(value_path == "is-max-bc0-bandwidth-absolute")
    {
        is_max_bc0_bandwidth_absolute = value;
    }
    if(value_path == "is-max-bc1-bandwidth-absolute")
    {
        is_max_bc1_bandwidth_absolute = value;
    }
    if(value_path == "max-bandwidth")
    {
        max_bandwidth = value;
    }
    if(value_path == "max-flow-bandwidth")
    {
        max_flow_bandwidth = value;
    }
    if(value_path == "max-pool0-bandwidth")
    {
        max_pool0_bandwidth = value;
    }
    if(value_path == "max-pool1-bandwidth")
    {
        max_pool1_bandwidth = value;
    }
}

Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::BandwidthInformation()
    :
    	dste_mode{YType::enumeration, "dste-mode"}
    	,
    pre_standard_dste_interface(std::make_unique<Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface>())
	,standard_dste_interface(std::make_unique<Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface>())
{
    pre_standard_dste_interface->parent = this;
    children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();

    standard_dste_interface->parent = this;
    children["standard-dste-interface"] = standard_dste_interface.get();

    yang_name = "bandwidth-information"; yang_parent_name = "interface-brief";
}

Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::~BandwidthInformation()
{
}

bool Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::has_data() const
{
    return dste_mode.is_set
	|| (pre_standard_dste_interface !=  nullptr && pre_standard_dste_interface->has_data())
	|| (standard_dste_interface !=  nullptr && standard_dste_interface->has_data());
}

bool Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::has_operation() const
{
    return is_set(operation)
	|| is_set(dste_mode.operation)
	|| (pre_standard_dste_interface !=  nullptr && pre_standard_dste_interface->has_operation())
	|| (standard_dste_interface !=  nullptr && standard_dste_interface->has_operation());
}

std::string Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "bandwidth-information";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (dste_mode.is_set || is_set(dste_mode.operation)) leaf_name_data.push_back(dste_mode.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "pre-standard-dste-interface")
    {
        if(pre_standard_dste_interface != nullptr)
        {
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
        else
        {
            pre_standard_dste_interface = std::make_unique<Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::PreStandardDsteInterface>();
            pre_standard_dste_interface->parent = this;
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
        return children.at("pre-standard-dste-interface");
    }

    if(child_yang_name == "standard-dste-interface")
    {
        if(standard_dste_interface != nullptr)
        {
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
        else
        {
            standard_dste_interface = std::make_unique<Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::StandardDsteInterface>();
            standard_dste_interface->parent = this;
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
        return children.at("standard-dste-interface");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::get_children()
{
    if(children.find("pre-standard-dste-interface") == children.end())
    {
        if(pre_standard_dste_interface != nullptr)
        {
            children["pre-standard-dste-interface"] = pre_standard_dste_interface.get();
        }
    }

    if(children.find("standard-dste-interface") == children.end())
    {
        if(standard_dste_interface != nullptr)
        {
            children["standard-dste-interface"] = standard_dste_interface.get();
        }
    }

    return children;
}

void Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "dste-mode")
    {
        dste_mode = value;
    }
}

Rsvp::InterfaceBriefs::InterfaceBrief::InterfaceBrief()
    :
    	interface_name{YType::str, "interface-name"},
	 interface_name_xr{YType::str, "interface-name-xr"}
    	,
    bandwidth_information(std::make_unique<Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation>())
{
    bandwidth_information->parent = this;
    children["bandwidth-information"] = bandwidth_information.get();

    yang_name = "interface-brief"; yang_parent_name = "interface-briefs";
}

Rsvp::InterfaceBriefs::InterfaceBrief::~InterfaceBrief()
{
}

bool Rsvp::InterfaceBriefs::InterfaceBrief::has_data() const
{
    return interface_name.is_set
	|| interface_name_xr.is_set
	|| (bandwidth_information !=  nullptr && bandwidth_information->has_data());
}

bool Rsvp::InterfaceBriefs::InterfaceBrief::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_name.operation)
	|| is_set(interface_name_xr.operation)
	|| (bandwidth_information !=  nullptr && bandwidth_information->has_operation());
}

std::string Rsvp::InterfaceBriefs::InterfaceBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-brief" <<"[interface-name='" <<interface_name.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceBriefs::InterfaceBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_name.is_set || is_set(interface_name.operation)) leaf_name_data.push_back(interface_name.get_name_leafdata());
    if (interface_name_xr.is_set || is_set(interface_name_xr.operation)) leaf_name_data.push_back(interface_name_xr.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceBriefs::InterfaceBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "bandwidth-information")
    {
        if(bandwidth_information != nullptr)
        {
            children["bandwidth-information"] = bandwidth_information.get();
        }
        else
        {
            bandwidth_information = std::make_unique<Rsvp::InterfaceBriefs::InterfaceBrief::BandwidthInformation>();
            bandwidth_information->parent = this;
            children["bandwidth-information"] = bandwidth_information.get();
        }
        return children.at("bandwidth-information");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceBriefs::InterfaceBrief::get_children()
{
    if(children.find("bandwidth-information") == children.end())
    {
        if(bandwidth_information != nullptr)
        {
            children["bandwidth-information"] = bandwidth_information.get();
        }
    }

    return children;
}

void Rsvp::InterfaceBriefs::InterfaceBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-name")
    {
        interface_name = value;
    }
    if(value_path == "interface-name-xr")
    {
        interface_name_xr = value;
    }
}

Rsvp::InterfaceBriefs::InterfaceBriefs()
{
    yang_name = "interface-briefs"; yang_parent_name = "rsvp";
}

Rsvp::InterfaceBriefs::~InterfaceBriefs()
{
}

bool Rsvp::InterfaceBriefs::has_data() const
{
    for (std::size_t index=0; index<interface_brief.size(); index++)
    {
        if(interface_brief[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::InterfaceBriefs::has_operation() const
{
    for (std::size_t index=0; index<interface_brief.size(); index++)
    {
        if(interface_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::InterfaceBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "interface-briefs";

    return path_buffer.str();

}

EntityPath Rsvp::InterfaceBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::InterfaceBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "interface-brief")
    {
        for(auto const & c : interface_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::InterfaceBriefs::InterfaceBrief>();
        c->parent = this;
        interface_brief.push_back(std::move(c));
        children[segment_path] = interface_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::InterfaceBriefs::get_children()
{
    for (auto const & c : interface_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::InterfaceBriefs::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/compact/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/compact/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/compact/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/compact/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::~RsvpSession()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/compact/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::Session()
    :
    rsvp_session(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "compact";
}

Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::~Session()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/compact/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::Compact::Session::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::SessionDetaileds::SessionDetailed::Compact::Compact()
    :
    	detail_list_size{YType::uint32, "detail-list-size"},
	 ps_bs{YType::uint32, "ps-bs"},
	 requests{YType::uint32, "requests"},
	 rs_bs{YType::uint32, "rs-bs"}
    	,
    session(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::Compact::Session>())
{
    session->parent = this;
    children["session"] = session.get();

    yang_name = "compact"; yang_parent_name = "session-detailed";
}

Rsvp::SessionDetaileds::SessionDetailed::Compact::~Compact()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::Compact::has_data() const
{
    return detail_list_size.is_set
	|| ps_bs.is_set
	|| requests.is_set
	|| rs_bs.is_set
	|| (session !=  nullptr && session->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::Compact::has_operation() const
{
    return is_set(operation)
	|| is_set(detail_list_size.operation)
	|| is_set(ps_bs.operation)
	|| is_set(requests.operation)
	|| is_set(rs_bs.operation)
	|| (session !=  nullptr && session->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::Compact::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "compact";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::Compact::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (detail_list_size.is_set || is_set(detail_list_size.operation)) leaf_name_data.push_back(detail_list_size.get_name_leafdata());
    if (ps_bs.is_set || is_set(ps_bs.operation)) leaf_name_data.push_back(ps_bs.get_name_leafdata());
    if (requests.is_set || is_set(requests.operation)) leaf_name_data.push_back(requests.get_name_leafdata());
    if (rs_bs.is_set || is_set(rs_bs.operation)) leaf_name_data.push_back(rs_bs.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::Compact::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::Compact::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::Compact::get_children()
{
    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::Compact::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "detail-list-size")
    {
        detail_list_size = value;
    }
    if(value_path == "ps-bs")
    {
        ps_bs = value;
    }
    if(value_path == "requests")
    {
        requests = value;
    }
    if(value_path == "rs-bs")
    {
        rs_bs = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::S2LSubLsp::S2LSubLsp()
    :
    	s2l_destination_address{YType::str, "s2l-destination-address"}
{
    yang_name = "s2l-sub-lsp"; yang_parent_name = "session-detailed";
}

Rsvp::SessionDetaileds::SessionDetailed::S2LSubLsp::~S2LSubLsp()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::S2LSubLsp::has_data() const
{
    return s2l_destination_address.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::S2LSubLsp::has_operation() const
{
    return is_set(operation)
	|| is_set(s2l_destination_address.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::S2LSubLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "s2l-sub-lsp";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::S2LSubLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (s2l_destination_address.is_set || is_set(s2l_destination_address.operation)) leaf_name_data.push_back(s2l_destination_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::S2LSubLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::S2LSubLsp::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::S2LSubLsp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "s2l-destination-address")
    {
        s2l_destination_address = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-in-label";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-in-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GenericInLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-in-label"; yang_parent_name = "psb-info";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::~GenericInLabel()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-in-label";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec::TrafficSpec()
    :
    	traffic_average_rate{YType::uint64, "traffic-average-rate"},
	 traffic_max_burst{YType::uint64, "traffic-max-burst"},
	 traffic_max_unit{YType::uint32, "traffic-max-unit"},
	 traffic_min_unit{YType::uint32, "traffic-min-unit"},
	 traffic_peak_rate{YType::uint64, "traffic-peak-rate"}
{
    yang_name = "traffic-spec"; yang_parent_name = "psb-info";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec::~TrafficSpec()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec::has_data() const
{
    return traffic_average_rate.is_set
	|| traffic_max_burst.is_set
	|| traffic_max_unit.is_set
	|| traffic_min_unit.is_set
	|| traffic_peak_rate.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_average_rate.operation)
	|| is_set(traffic_max_burst.operation)
	|| is_set(traffic_max_unit.operation)
	|| is_set(traffic_min_unit.operation)
	|| is_set(traffic_peak_rate.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "traffic-spec";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_average_rate.is_set || is_set(traffic_average_rate.operation)) leaf_name_data.push_back(traffic_average_rate.get_name_leafdata());
    if (traffic_max_burst.is_set || is_set(traffic_max_burst.operation)) leaf_name_data.push_back(traffic_max_burst.get_name_leafdata());
    if (traffic_max_unit.is_set || is_set(traffic_max_unit.operation)) leaf_name_data.push_back(traffic_max_unit.get_name_leafdata());
    if (traffic_min_unit.is_set || is_set(traffic_min_unit.operation)) leaf_name_data.push_back(traffic_min_unit.get_name_leafdata());
    if (traffic_peak_rate.is_set || is_set(traffic_peak_rate.operation)) leaf_name_data.push_back(traffic_peak_rate.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-average-rate")
    {
        traffic_average_rate = value;
    }
    if(value_path == "traffic-max-burst")
    {
        traffic_max_burst = value;
    }
    if(value_path == "traffic-max-unit")
    {
        traffic_max_unit = value;
    }
    if(value_path == "traffic-min-unit")
    {
        traffic_min_unit = value;
    }
    if(value_path == "traffic-peak-rate")
    {
        traffic_peak_rate = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec::G709OtnTspec()
    :
    	traffic_bit_rate{YType::uint64, "traffic-bit-rate"},
	 traffic_multiplier{YType::uint16, "traffic-multiplier"},
	 traffic_nvc{YType::uint16, "traffic-nvc"},
	 traffic_signal_type{YType::uint8, "traffic-signal-type"}
{
    yang_name = "g709otn-tspec"; yang_parent_name = "generic-traffic-spec";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec::~G709OtnTspec()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec::has_data() const
{
    return traffic_bit_rate.is_set
	|| traffic_multiplier.is_set
	|| traffic_nvc.is_set
	|| traffic_signal_type.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_bit_rate.operation)
	|| is_set(traffic_multiplier.operation)
	|| is_set(traffic_nvc.operation)
	|| is_set(traffic_signal_type.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-tspec";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-traffic-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_bit_rate.is_set || is_set(traffic_bit_rate.operation)) leaf_name_data.push_back(traffic_bit_rate.get_name_leafdata());
    if (traffic_multiplier.is_set || is_set(traffic_multiplier.operation)) leaf_name_data.push_back(traffic_multiplier.get_name_leafdata());
    if (traffic_nvc.is_set || is_set(traffic_nvc.operation)) leaf_name_data.push_back(traffic_nvc.get_name_leafdata());
    if (traffic_signal_type.is_set || is_set(traffic_signal_type.operation)) leaf_name_data.push_back(traffic_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-bit-rate")
    {
        traffic_bit_rate = value;
    }
    if(value_path == "traffic-multiplier")
    {
        traffic_multiplier = value;
    }
    if(value_path == "traffic-nvc")
    {
        traffic_nvc = value;
    }
    if(value_path == "traffic-signal-type")
    {
        traffic_signal_type = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec::IntsrvTspec()
    :
    	traffic_average_rate{YType::uint64, "traffic-average-rate"},
	 traffic_max_burst{YType::uint64, "traffic-max-burst"},
	 traffic_max_unit{YType::uint32, "traffic-max-unit"},
	 traffic_min_unit{YType::uint32, "traffic-min-unit"},
	 traffic_peak_rate{YType::uint64, "traffic-peak-rate"}
{
    yang_name = "intsrv-tspec"; yang_parent_name = "generic-traffic-spec";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec::~IntsrvTspec()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec::has_data() const
{
    return traffic_average_rate.is_set
	|| traffic_max_burst.is_set
	|| traffic_max_unit.is_set
	|| traffic_min_unit.is_set
	|| traffic_peak_rate.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_average_rate.operation)
	|| is_set(traffic_max_burst.operation)
	|| is_set(traffic_max_unit.operation)
	|| is_set(traffic_min_unit.operation)
	|| is_set(traffic_peak_rate.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "intsrv-tspec";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-traffic-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_average_rate.is_set || is_set(traffic_average_rate.operation)) leaf_name_data.push_back(traffic_average_rate.get_name_leafdata());
    if (traffic_max_burst.is_set || is_set(traffic_max_burst.operation)) leaf_name_data.push_back(traffic_max_burst.get_name_leafdata());
    if (traffic_max_unit.is_set || is_set(traffic_max_unit.operation)) leaf_name_data.push_back(traffic_max_unit.get_name_leafdata());
    if (traffic_min_unit.is_set || is_set(traffic_min_unit.operation)) leaf_name_data.push_back(traffic_min_unit.get_name_leafdata());
    if (traffic_peak_rate.is_set || is_set(traffic_peak_rate.operation)) leaf_name_data.push_back(traffic_peak_rate.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-average-rate")
    {
        traffic_average_rate = value;
    }
    if(value_path == "traffic-max-burst")
    {
        traffic_max_burst = value;
    }
    if(value_path == "traffic-max-unit")
    {
        traffic_max_unit = value;
    }
    if(value_path == "traffic-min-unit")
    {
        traffic_min_unit = value;
    }
    if(value_path == "traffic-peak-rate")
    {
        traffic_peak_rate = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::GenericTrafficSpec()
    :
    	tspec_type{YType::enumeration, "tspec-type"}
    	,
    g709otn_tspec(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec>())
	,intsrv_tspec(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec>())
{
    g709otn_tspec->parent = this;
    children["g709otn-tspec"] = g709otn_tspec.get();

    intsrv_tspec->parent = this;
    children["intsrv-tspec"] = intsrv_tspec.get();

    yang_name = "generic-traffic-spec"; yang_parent_name = "psb-info";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::~GenericTrafficSpec()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::has_data() const
{
    return tspec_type.is_set
	|| (g709otn_tspec !=  nullptr && g709otn_tspec->has_data())
	|| (intsrv_tspec !=  nullptr && intsrv_tspec->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(tspec_type.operation)
	|| (g709otn_tspec !=  nullptr && g709otn_tspec->has_operation())
	|| (intsrv_tspec !=  nullptr && intsrv_tspec->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-traffic-spec";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (tspec_type.is_set || is_set(tspec_type.operation)) leaf_name_data.push_back(tspec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-tspec")
    {
        if(g709otn_tspec != nullptr)
        {
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
        else
        {
            g709otn_tspec = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::G709OtnTspec>();
            g709otn_tspec->parent = this;
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
        return children.at("g709otn-tspec");
    }

    if(child_yang_name == "intsrv-tspec")
    {
        if(intsrv_tspec != nullptr)
        {
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
        else
        {
            intsrv_tspec = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::IntsrvTspec>();
            intsrv_tspec->parent = this;
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
        return children.at("intsrv-tspec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::get_children()
{
    if(children.find("g709otn-tspec") == children.end())
    {
        if(g709otn_tspec != nullptr)
        {
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
    }

    if(children.find("intsrv-tspec") == children.end())
    {
        if(intsrv_tspec != nullptr)
        {
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "tspec-type")
    {
        tspec_type = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4::Ipv4()
    :
    	id{YType::uint16, "id"},
	 source{YType::str, "source"},
	 type{YType::uint16, "type"}
{
    yang_name = "ipv4"; yang_parent_name = "association";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4::~Ipv4()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4::has_data() const
{
    return id.is_set
	|| source.is_set
	|| type.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(id.operation)
	|| is_set(source.operation)
	|| is_set(type.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (id.is_set || is_set(id.operation)) leaf_name_data.push_back(id.get_name_leafdata());
    if (source.is_set || is_set(source.operation)) leaf_name_data.push_back(source.get_name_leafdata());
    if (type.is_set || is_set(type.operation)) leaf_name_data.push_back(type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "id")
    {
        id = value;
    }
    if(value_path == "source")
    {
        source = value;
    }
    if(value_path == "type")
    {
        type = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6::Ipv6()
    :
    	id{YType::uint16, "id"},
	 source{YType::str, "source"},
	 type{YType::uint16, "type"}
{
    yang_name = "ipv6"; yang_parent_name = "association";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6::~Ipv6()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6::has_data() const
{
    return id.is_set
	|| source.is_set
	|| type.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6::has_operation() const
{
    return is_set(operation)
	|| is_set(id.operation)
	|| is_set(source.operation)
	|| is_set(type.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv6";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (id.is_set || is_set(id.operation)) leaf_name_data.push_back(id.get_name_leafdata());
    if (source.is_set || is_set(source.operation)) leaf_name_data.push_back(source.get_name_leafdata());
    if (type.is_set || is_set(type.operation)) leaf_name_data.push_back(type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "id")
    {
        id = value;
    }
    if(value_path == "source")
    {
        source = value;
    }
    if(value_path == "type")
    {
        type = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4::ExtendedIpv4()
    :
    	extended_id{YType::uint32, "extended-id"},
	 global_source{YType::uint32, "global-source"},
	 id{YType::uint16, "id"},
	 source{YType::str, "source"},
	 type{YType::uint16, "type"}
{
    yang_name = "extended-ipv4"; yang_parent_name = "association";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4::~ExtendedIpv4()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4::has_data() const
{
    for (auto const & leaf : extended_id.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return global_source.is_set
	|| id.is_set
	|| source.is_set
	|| type.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4::has_operation() const
{
    for (auto const & leaf : extended_id.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(extended_id.operation)
	|| is_set(global_source.operation)
	|| is_set(id.operation)
	|| is_set(source.operation)
	|| is_set(type.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "extended-ipv4";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (global_source.is_set || is_set(global_source.operation)) leaf_name_data.push_back(global_source.get_name_leafdata());
    if (id.is_set || is_set(id.operation)) leaf_name_data.push_back(id.get_name_leafdata());
    if (source.is_set || is_set(source.operation)) leaf_name_data.push_back(source.get_name_leafdata());
    if (type.is_set || is_set(type.operation)) leaf_name_data.push_back(type.get_name_leafdata());

    auto extended_id_name_datas = extended_id.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), extended_id_name_datas.begin(), extended_id_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-id")
    {
        extended_id.append(value);
    }
    if(value_path == "global-source")
    {
        global_source = value;
    }
    if(value_path == "id")
    {
        id = value;
    }
    if(value_path == "source")
    {
        source = value;
    }
    if(value_path == "type")
    {
        type = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6::ExtendedIpv6()
    :
    	extended_id{YType::uint32, "extended-id"},
	 global_source{YType::uint32, "global-source"},
	 id{YType::uint16, "id"},
	 source{YType::str, "source"},
	 type{YType::uint16, "type"}
{
    yang_name = "extended-ipv6"; yang_parent_name = "association";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6::~ExtendedIpv6()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6::has_data() const
{
    for (auto const & leaf : extended_id.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return global_source.is_set
	|| id.is_set
	|| source.is_set
	|| type.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6::has_operation() const
{
    for (auto const & leaf : extended_id.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(extended_id.operation)
	|| is_set(global_source.operation)
	|| is_set(id.operation)
	|| is_set(source.operation)
	|| is_set(type.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "extended-ipv6";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (global_source.is_set || is_set(global_source.operation)) leaf_name_data.push_back(global_source.get_name_leafdata());
    if (id.is_set || is_set(id.operation)) leaf_name_data.push_back(id.get_name_leafdata());
    if (source.is_set || is_set(source.operation)) leaf_name_data.push_back(source.get_name_leafdata());
    if (type.is_set || is_set(type.operation)) leaf_name_data.push_back(type.get_name_leafdata());

    auto extended_id_name_datas = extended_id.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), extended_id_name_datas.begin(), extended_id_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-id")
    {
        extended_id.append(value);
    }
    if(value_path == "global-source")
    {
        global_source = value;
    }
    if(value_path == "id")
    {
        id = value;
    }
    if(value_path == "source")
    {
        source = value;
    }
    if(value_path == "type")
    {
        type = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Association()
    :
    	association_type{YType::enumeration, "association-type"}
    	,
    extended_ipv4(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4>())
	,extended_ipv6(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6>())
	,ipv4(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4>())
	,ipv6(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6>())
{
    extended_ipv4->parent = this;
    children["extended-ipv4"] = extended_ipv4.get();

    extended_ipv6->parent = this;
    children["extended-ipv6"] = extended_ipv6.get();

    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv6->parent = this;
    children["ipv6"] = ipv6.get();

    yang_name = "association"; yang_parent_name = "psb-info";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::~Association()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::has_data() const
{
    return association_type.is_set
	|| (extended_ipv4 !=  nullptr && extended_ipv4->has_data())
	|| (extended_ipv6 !=  nullptr && extended_ipv6->has_data())
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv6 !=  nullptr && ipv6->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::has_operation() const
{
    return is_set(operation)
	|| is_set(association_type.operation)
	|| (extended_ipv4 !=  nullptr && extended_ipv4->has_operation())
	|| (extended_ipv6 !=  nullptr && extended_ipv6->has_operation())
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv6 !=  nullptr && ipv6->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "association";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (association_type.is_set || is_set(association_type.operation)) leaf_name_data.push_back(association_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "extended-ipv4")
    {
        if(extended_ipv4 != nullptr)
        {
            children["extended-ipv4"] = extended_ipv4.get();
        }
        else
        {
            extended_ipv4 = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv4>();
            extended_ipv4->parent = this;
            children["extended-ipv4"] = extended_ipv4.get();
        }
        return children.at("extended-ipv4");
    }

    if(child_yang_name == "extended-ipv6")
    {
        if(extended_ipv6 != nullptr)
        {
            children["extended-ipv6"] = extended_ipv6.get();
        }
        else
        {
            extended_ipv6 = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::ExtendedIpv6>();
            extended_ipv6->parent = this;
            children["extended-ipv6"] = extended_ipv6.get();
        }
        return children.at("extended-ipv6");
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv6")
    {
        if(ipv6 != nullptr)
        {
            children["ipv6"] = ipv6.get();
        }
        else
        {
            ipv6 = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::Ipv6>();
            ipv6->parent = this;
            children["ipv6"] = ipv6.get();
        }
        return children.at("ipv6");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::get_children()
{
    if(children.find("extended-ipv4") == children.end())
    {
        if(extended_ipv4 != nullptr)
        {
            children["extended-ipv4"] = extended_ipv4.get();
        }
    }

    if(children.find("extended-ipv6") == children.end())
    {
        if(extended_ipv6 != nullptr)
        {
            children["extended-ipv6"] = extended_ipv6.get();
        }
    }

    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv6") == children.end())
    {
        if(ipv6 != nullptr)
        {
            children["ipv6"] = ipv6.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "association-type")
    {
        association_type = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags::LspFlags()
    :
    	one_plus_one_bi{YType::boolean, "one-plus-one-bi"},
	 one_plus_one_uni{YType::boolean, "one-plus-one-uni"},
	 one_to_n_protection_et{YType::boolean, "one-to-n-protection-et"},
	 rerouting{YType::boolean, "rerouting"},
	 rerouting_no_et{YType::boolean, "rerouting-no-et"}
{
    yang_name = "lsp-flags"; yang_parent_name = "protection";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags::~LspFlags()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags::has_data() const
{
    return one_plus_one_bi.is_set
	|| one_plus_one_uni.is_set
	|| one_to_n_protection_et.is_set
	|| rerouting.is_set
	|| rerouting_no_et.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(one_plus_one_bi.operation)
	|| is_set(one_plus_one_uni.operation)
	|| is_set(one_to_n_protection_et.operation)
	|| is_set(rerouting.operation)
	|| is_set(rerouting_no_et.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "lsp-flags";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/protection/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (one_plus_one_bi.is_set || is_set(one_plus_one_bi.operation)) leaf_name_data.push_back(one_plus_one_bi.get_name_leafdata());
    if (one_plus_one_uni.is_set || is_set(one_plus_one_uni.operation)) leaf_name_data.push_back(one_plus_one_uni.get_name_leafdata());
    if (one_to_n_protection_et.is_set || is_set(one_to_n_protection_et.operation)) leaf_name_data.push_back(one_to_n_protection_et.get_name_leafdata());
    if (rerouting.is_set || is_set(rerouting.operation)) leaf_name_data.push_back(rerouting.get_name_leafdata());
    if (rerouting_no_et.is_set || is_set(rerouting_no_et.operation)) leaf_name_data.push_back(rerouting_no_et.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "one-plus-one-bi")
    {
        one_plus_one_bi = value;
    }
    if(value_path == "one-plus-one-uni")
    {
        one_plus_one_uni = value;
    }
    if(value_path == "one-to-n-protection-et")
    {
        one_to_n_protection_et = value;
    }
    if(value_path == "rerouting")
    {
        rerouting = value;
    }
    if(value_path == "rerouting-no-et")
    {
        rerouting_no_et = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags::LinkFlags()
    :
    	ded1_plus1{YType::boolean, "ded1-plus1"},
	 ded1_to1{YType::boolean, "ded1-to1"},
	 enhanced{YType::boolean, "enhanced"},
	 extra_traffic{YType::boolean, "extra-traffic"},
	 reserved_bit1{YType::boolean, "reserved-bit1"},
	 reserved_bit2{YType::boolean, "reserved-bit2"},
	 shared{YType::boolean, "shared"},
	 unprotected{YType::boolean, "unprotected"}
{
    yang_name = "link-flags"; yang_parent_name = "protection";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags::~LinkFlags()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags::has_data() const
{
    return ded1_plus1.is_set
	|| ded1_to1.is_set
	|| enhanced.is_set
	|| extra_traffic.is_set
	|| reserved_bit1.is_set
	|| reserved_bit2.is_set
	|| shared.is_set
	|| unprotected.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(ded1_plus1.operation)
	|| is_set(ded1_to1.operation)
	|| is_set(enhanced.operation)
	|| is_set(extra_traffic.operation)
	|| is_set(reserved_bit1.operation)
	|| is_set(reserved_bit2.operation)
	|| is_set(shared.operation)
	|| is_set(unprotected.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "link-flags";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/protection/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ded1_plus1.is_set || is_set(ded1_plus1.operation)) leaf_name_data.push_back(ded1_plus1.get_name_leafdata());
    if (ded1_to1.is_set || is_set(ded1_to1.operation)) leaf_name_data.push_back(ded1_to1.get_name_leafdata());
    if (enhanced.is_set || is_set(enhanced.operation)) leaf_name_data.push_back(enhanced.get_name_leafdata());
    if (extra_traffic.is_set || is_set(extra_traffic.operation)) leaf_name_data.push_back(extra_traffic.get_name_leafdata());
    if (reserved_bit1.is_set || is_set(reserved_bit1.operation)) leaf_name_data.push_back(reserved_bit1.get_name_leafdata());
    if (reserved_bit2.is_set || is_set(reserved_bit2.operation)) leaf_name_data.push_back(reserved_bit2.get_name_leafdata());
    if (shared.is_set || is_set(shared.operation)) leaf_name_data.push_back(shared.get_name_leafdata());
    if (unprotected.is_set || is_set(unprotected.operation)) leaf_name_data.push_back(unprotected.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ded1-plus1")
    {
        ded1_plus1 = value;
    }
    if(value_path == "ded1-to1")
    {
        ded1_to1 = value;
    }
    if(value_path == "enhanced")
    {
        enhanced = value;
    }
    if(value_path == "extra-traffic")
    {
        extra_traffic = value;
    }
    if(value_path == "reserved-bit1")
    {
        reserved_bit1 = value;
    }
    if(value_path == "reserved-bit2")
    {
        reserved_bit2 = value;
    }
    if(value_path == "shared")
    {
        shared = value;
    }
    if(value_path == "unprotected")
    {
        unprotected = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::Protection()
    :
    	n{YType::boolean, "n"},
	 o{YType::boolean, "o"},
	 p{YType::boolean, "p"},
	 s{YType::boolean, "s"}
    	,
    link_flags(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags>())
	,lsp_flags(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags>())
{
    link_flags->parent = this;
    children["link-flags"] = link_flags.get();

    lsp_flags->parent = this;
    children["lsp-flags"] = lsp_flags.get();

    yang_name = "protection"; yang_parent_name = "psb-info";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::~Protection()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::has_data() const
{
    return n.is_set
	|| o.is_set
	|| p.is_set
	|| s.is_set
	|| (link_flags !=  nullptr && link_flags->has_data())
	|| (lsp_flags !=  nullptr && lsp_flags->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::has_operation() const
{
    return is_set(operation)
	|| is_set(n.operation)
	|| is_set(o.operation)
	|| is_set(p.operation)
	|| is_set(s.operation)
	|| (link_flags !=  nullptr && link_flags->has_operation())
	|| (lsp_flags !=  nullptr && lsp_flags->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "protection";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (n.is_set || is_set(n.operation)) leaf_name_data.push_back(n.get_name_leafdata());
    if (o.is_set || is_set(o.operation)) leaf_name_data.push_back(o.get_name_leafdata());
    if (p.is_set || is_set(p.operation)) leaf_name_data.push_back(p.get_name_leafdata());
    if (s.is_set || is_set(s.operation)) leaf_name_data.push_back(s.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "link-flags")
    {
        if(link_flags != nullptr)
        {
            children["link-flags"] = link_flags.get();
        }
        else
        {
            link_flags = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LinkFlags>();
            link_flags->parent = this;
            children["link-flags"] = link_flags.get();
        }
        return children.at("link-flags");
    }

    if(child_yang_name == "lsp-flags")
    {
        if(lsp_flags != nullptr)
        {
            children["lsp-flags"] = lsp_flags.get();
        }
        else
        {
            lsp_flags = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::LspFlags>();
            lsp_flags->parent = this;
            children["lsp-flags"] = lsp_flags.get();
        }
        return children.at("lsp-flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::get_children()
{
    if(children.find("link-flags") == children.end())
    {
        if(link_flags != nullptr)
        {
            children["link-flags"] = link_flags.get();
        }
    }

    if(children.find("lsp-flags") == children.end())
    {
        if(lsp_flags != nullptr)
        {
            children["lsp-flags"] = lsp_flags.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "n")
    {
        n = value;
    }
    if(value_path == "o")
    {
        o = value;
    }
    if(value_path == "p")
    {
        p = value;
    }
    if(value_path == "s")
    {
        s = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec::G709OtnTspec()
    :
    	traffic_bit_rate{YType::uint64, "traffic-bit-rate"},
	 traffic_multiplier{YType::uint16, "traffic-multiplier"},
	 traffic_nvc{YType::uint16, "traffic-nvc"},
	 traffic_signal_type{YType::uint8, "traffic-signal-type"}
{
    yang_name = "g709otn-tspec"; yang_parent_name = "generic-traffic-spec";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec::~G709OtnTspec()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec::has_data() const
{
    return traffic_bit_rate.is_set
	|| traffic_multiplier.is_set
	|| traffic_nvc.is_set
	|| traffic_signal_type.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_bit_rate.operation)
	|| is_set(traffic_multiplier.operation)
	|| is_set(traffic_nvc.operation)
	|| is_set(traffic_signal_type.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-tspec";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/generic-traffic-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_bit_rate.is_set || is_set(traffic_bit_rate.operation)) leaf_name_data.push_back(traffic_bit_rate.get_name_leafdata());
    if (traffic_multiplier.is_set || is_set(traffic_multiplier.operation)) leaf_name_data.push_back(traffic_multiplier.get_name_leafdata());
    if (traffic_nvc.is_set || is_set(traffic_nvc.operation)) leaf_name_data.push_back(traffic_nvc.get_name_leafdata());
    if (traffic_signal_type.is_set || is_set(traffic_signal_type.operation)) leaf_name_data.push_back(traffic_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-bit-rate")
    {
        traffic_bit_rate = value;
    }
    if(value_path == "traffic-multiplier")
    {
        traffic_multiplier = value;
    }
    if(value_path == "traffic-nvc")
    {
        traffic_nvc = value;
    }
    if(value_path == "traffic-signal-type")
    {
        traffic_signal_type = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec::IntsrvTspec()
    :
    	traffic_average_rate{YType::uint64, "traffic-average-rate"},
	 traffic_max_burst{YType::uint64, "traffic-max-burst"},
	 traffic_max_unit{YType::uint32, "traffic-max-unit"},
	 traffic_min_unit{YType::uint32, "traffic-min-unit"},
	 traffic_peak_rate{YType::uint64, "traffic-peak-rate"}
{
    yang_name = "intsrv-tspec"; yang_parent_name = "generic-traffic-spec";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec::~IntsrvTspec()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec::has_data() const
{
    return traffic_average_rate.is_set
	|| traffic_max_burst.is_set
	|| traffic_max_unit.is_set
	|| traffic_min_unit.is_set
	|| traffic_peak_rate.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_average_rate.operation)
	|| is_set(traffic_max_burst.operation)
	|| is_set(traffic_max_unit.operation)
	|| is_set(traffic_min_unit.operation)
	|| is_set(traffic_peak_rate.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "intsrv-tspec";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/generic-traffic-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_average_rate.is_set || is_set(traffic_average_rate.operation)) leaf_name_data.push_back(traffic_average_rate.get_name_leafdata());
    if (traffic_max_burst.is_set || is_set(traffic_max_burst.operation)) leaf_name_data.push_back(traffic_max_burst.get_name_leafdata());
    if (traffic_max_unit.is_set || is_set(traffic_max_unit.operation)) leaf_name_data.push_back(traffic_max_unit.get_name_leafdata());
    if (traffic_min_unit.is_set || is_set(traffic_min_unit.operation)) leaf_name_data.push_back(traffic_min_unit.get_name_leafdata());
    if (traffic_peak_rate.is_set || is_set(traffic_peak_rate.operation)) leaf_name_data.push_back(traffic_peak_rate.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-average-rate")
    {
        traffic_average_rate = value;
    }
    if(value_path == "traffic-max-burst")
    {
        traffic_max_burst = value;
    }
    if(value_path == "traffic-max-unit")
    {
        traffic_max_unit = value;
    }
    if(value_path == "traffic-min-unit")
    {
        traffic_min_unit = value;
    }
    if(value_path == "traffic-peak-rate")
    {
        traffic_peak_rate = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::GenericTrafficSpec()
    :
    	tspec_type{YType::enumeration, "tspec-type"}
    	,
    g709otn_tspec(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec>())
	,intsrv_tspec(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec>())
{
    g709otn_tspec->parent = this;
    children["g709otn-tspec"] = g709otn_tspec.get();

    intsrv_tspec->parent = this;
    children["intsrv-tspec"] = intsrv_tspec.get();

    yang_name = "generic-traffic-spec"; yang_parent_name = "reverse-lsp";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::~GenericTrafficSpec()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::has_data() const
{
    return tspec_type.is_set
	|| (g709otn_tspec !=  nullptr && g709otn_tspec->has_data())
	|| (intsrv_tspec !=  nullptr && intsrv_tspec->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(tspec_type.operation)
	|| (g709otn_tspec !=  nullptr && g709otn_tspec->has_operation())
	|| (intsrv_tspec !=  nullptr && intsrv_tspec->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-traffic-spec";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (tspec_type.is_set || is_set(tspec_type.operation)) leaf_name_data.push_back(tspec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-tspec")
    {
        if(g709otn_tspec != nullptr)
        {
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
        else
        {
            g709otn_tspec = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::G709OtnTspec>();
            g709otn_tspec->parent = this;
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
        return children.at("g709otn-tspec");
    }

    if(child_yang_name == "intsrv-tspec")
    {
        if(intsrv_tspec != nullptr)
        {
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
        else
        {
            intsrv_tspec = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::IntsrvTspec>();
            intsrv_tspec->parent = this;
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
        return children.at("intsrv-tspec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::get_children()
{
    if(children.find("g709otn-tspec") == children.end())
    {
        if(g709otn_tspec != nullptr)
        {
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
    }

    if(children.find("intsrv-tspec") == children.end())
    {
        if(intsrv_tspec != nullptr)
        {
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "tspec-type")
    {
        tspec_type = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject::Ipv4EroSubObject()
    :
    	ero_address{YType::str, "ero-address"},
	 is_strict_route{YType::boolean, "is-strict-route"},
	 prefix_length{YType::uint8, "prefix-length"}
{
    yang_name = "ipv4ero-sub-object"; yang_parent_name = "ero";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject::~Ipv4EroSubObject()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject::has_data() const
{
    return ero_address.is_set
	|| is_strict_route.is_set
	|| prefix_length.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_address.operation)
	|| is_set(is_strict_route.operation)
	|| is_set(prefix_length.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4ero-sub-object";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/ero/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_address.is_set || is_set(ero_address.operation)) leaf_name_data.push_back(ero_address.get_name_leafdata());
    if (is_strict_route.is_set || is_set(is_strict_route.operation)) leaf_name_data.push_back(is_strict_route.get_name_leafdata());
    if (prefix_length.is_set || is_set(prefix_length.operation)) leaf_name_data.push_back(prefix_length.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-address")
    {
        ero_address = value;
    }
    if(value_path == "is-strict-route")
    {
        is_strict_route = value;
    }
    if(value_path == "prefix-length")
    {
        prefix_length = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject::UnnumberedEroSubObject()
    :
    	ero_interface_id{YType::uint32, "ero-interface-id"},
	 ero_router_id{YType::str, "ero-router-id"},
	 is_strict_route{YType::boolean, "is-strict-route"},
	 status{YType::enumeration, "status"}
{
    yang_name = "unnumbered-ero-sub-object"; yang_parent_name = "ero";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject::~UnnumberedEroSubObject()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject::has_data() const
{
    return ero_interface_id.is_set
	|| ero_router_id.is_set
	|| is_strict_route.is_set
	|| status.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_interface_id.operation)
	|| is_set(ero_router_id.operation)
	|| is_set(is_strict_route.operation)
	|| is_set(status.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "unnumbered-ero-sub-object";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/ero/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_interface_id.is_set || is_set(ero_interface_id.operation)) leaf_name_data.push_back(ero_interface_id.get_name_leafdata());
    if (ero_router_id.is_set || is_set(ero_router_id.operation)) leaf_name_data.push_back(ero_router_id.get_name_leafdata());
    if (is_strict_route.is_set || is_set(is_strict_route.operation)) leaf_name_data.push_back(is_strict_route.get_name_leafdata());
    if (status.is_set || is_set(status.operation)) leaf_name_data.push_back(status.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-interface-id")
    {
        ero_interface_id = value;
    }
    if(value_path == "ero-router-id")
    {
        ero_router_id = value;
    }
    if(value_path == "is-strict-route")
    {
        is_strict_route = value;
    }
    if(value_path == "status")
    {
        status = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ero()
    :
    	ero_type{YType::enumeration, "ero-type"}
    	,
    ipv4ero_sub_object(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject>())
	,unnumbered_ero_sub_object(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject>())
{
    ipv4ero_sub_object->parent = this;
    children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();

    unnumbered_ero_sub_object->parent = this;
    children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();

    yang_name = "ero"; yang_parent_name = "reverse-lsp";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::~Ero()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::has_data() const
{
    return ero_type.is_set
	|| (ipv4ero_sub_object !=  nullptr && ipv4ero_sub_object->has_data())
	|| (unnumbered_ero_sub_object !=  nullptr && unnumbered_ero_sub_object->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_type.operation)
	|| (ipv4ero_sub_object !=  nullptr && ipv4ero_sub_object->has_operation())
	|| (unnumbered_ero_sub_object !=  nullptr && unnumbered_ero_sub_object->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ero";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_type.is_set || is_set(ero_type.operation)) leaf_name_data.push_back(ero_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4ero-sub-object")
    {
        if(ipv4ero_sub_object != nullptr)
        {
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
        else
        {
            ipv4ero_sub_object = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::Ipv4EroSubObject>();
            ipv4ero_sub_object->parent = this;
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
        return children.at("ipv4ero-sub-object");
    }

    if(child_yang_name == "unnumbered-ero-sub-object")
    {
        if(unnumbered_ero_sub_object != nullptr)
        {
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
        else
        {
            unnumbered_ero_sub_object = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::UnnumberedEroSubObject>();
            unnumbered_ero_sub_object->parent = this;
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
        return children.at("unnumbered-ero-sub-object");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::get_children()
{
    if(children.find("ipv4ero-sub-object") == children.end())
    {
        if(ipv4ero_sub_object != nullptr)
        {
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
    }

    if(children.find("unnumbered-ero-sub-object") == children.end())
    {
        if(unnumbered_ero_sub_object != nullptr)
        {
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-type")
    {
        ero_type = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject::UnsupSubObject()
    :
    	rsvp_mgmt_rev_lsp_unsupported_subobj{YType::uint8, "rsvp-mgmt-rev-lsp-unsupported-subobj"}
{
    yang_name = "unsup-sub-object"; yang_parent_name = "reverse-lsp";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject::~UnsupSubObject()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject::has_data() const
{
    for (auto const & leaf : rsvp_mgmt_rev_lsp_unsupported_subobj.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject::has_operation() const
{
    for (auto const & leaf : rsvp_mgmt_rev_lsp_unsupported_subobj.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(rsvp_mgmt_rev_lsp_unsupported_subobj.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "unsup-sub-object";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto rsvp_mgmt_rev_lsp_unsupported_subobj_name_datas = rsvp_mgmt_rev_lsp_unsupported_subobj.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), rsvp_mgmt_rev_lsp_unsupported_subobj_name_datas.begin(), rsvp_mgmt_rev_lsp_unsupported_subobj_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "rsvp-mgmt-rev-lsp-unsupported-subobj")
    {
        rsvp_mgmt_rev_lsp_unsupported_subobj.append(value);
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::ReverseLsp()
    :
    generic_traffic_spec(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec>())
{
    generic_traffic_spec->parent = this;
    children["generic-traffic-spec"] = generic_traffic_spec.get();

    yang_name = "reverse-lsp"; yang_parent_name = "psb-info";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::~ReverseLsp()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::has_data() const
{
    for (std::size_t index=0; index<ero.size(); index++)
    {
        if(ero[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<unsup_sub_object.size(); index++)
    {
        if(unsup_sub_object[index]->has_data())
            return true;
    }
    return (generic_traffic_spec !=  nullptr && generic_traffic_spec->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::has_operation() const
{
    for (std::size_t index=0; index<ero.size(); index++)
    {
        if(ero[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<unsup_sub_object.size(); index++)
    {
        if(unsup_sub_object[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| (generic_traffic_spec !=  nullptr && generic_traffic_spec->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "reverse-lsp";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ero")
    {
        for(auto const & c : ero)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::Ero>();
        c->parent = this;
        ero.push_back(std::move(c));
        children[segment_path] = ero.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "generic-traffic-spec")
    {
        if(generic_traffic_spec != nullptr)
        {
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
        else
        {
            generic_traffic_spec = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::GenericTrafficSpec>();
            generic_traffic_spec->parent = this;
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
        return children.at("generic-traffic-spec");
    }

    if(child_yang_name == "unsup-sub-object")
    {
        for(auto const & c : unsup_sub_object)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::UnsupSubObject>();
        c->parent = this;
        unsup_sub_object.push_back(std::move(c));
        children[segment_path] = unsup_sub_object.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::get_children()
{
    for (auto const & c : ero)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("generic-traffic-spec") == children.end())
    {
        if(generic_traffic_spec != nullptr)
        {
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
    }

    for (auto const & c : unsup_sub_object)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject::Ipv4EroSubObject()
    :
    	ero_address{YType::str, "ero-address"},
	 is_strict_route{YType::boolean, "is-strict-route"},
	 prefix_length{YType::uint8, "prefix-length"}
{
    yang_name = "ipv4ero-sub-object"; yang_parent_name = "ero";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject::~Ipv4EroSubObject()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject::has_data() const
{
    return ero_address.is_set
	|| is_strict_route.is_set
	|| prefix_length.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_address.operation)
	|| is_set(is_strict_route.operation)
	|| is_set(prefix_length.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4ero-sub-object";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/ero/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_address.is_set || is_set(ero_address.operation)) leaf_name_data.push_back(ero_address.get_name_leafdata());
    if (is_strict_route.is_set || is_set(is_strict_route.operation)) leaf_name_data.push_back(is_strict_route.get_name_leafdata());
    if (prefix_length.is_set || is_set(prefix_length.operation)) leaf_name_data.push_back(prefix_length.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-address")
    {
        ero_address = value;
    }
    if(value_path == "is-strict-route")
    {
        is_strict_route = value;
    }
    if(value_path == "prefix-length")
    {
        prefix_length = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject::UnnumberedEroSubObject()
    :
    	ero_interface_id{YType::uint32, "ero-interface-id"},
	 ero_router_id{YType::str, "ero-router-id"},
	 is_strict_route{YType::boolean, "is-strict-route"},
	 status{YType::enumeration, "status"}
{
    yang_name = "unnumbered-ero-sub-object"; yang_parent_name = "ero";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject::~UnnumberedEroSubObject()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject::has_data() const
{
    return ero_interface_id.is_set
	|| ero_router_id.is_set
	|| is_strict_route.is_set
	|| status.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_interface_id.operation)
	|| is_set(ero_router_id.operation)
	|| is_set(is_strict_route.operation)
	|| is_set(status.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "unnumbered-ero-sub-object";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/ero/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_interface_id.is_set || is_set(ero_interface_id.operation)) leaf_name_data.push_back(ero_interface_id.get_name_leafdata());
    if (ero_router_id.is_set || is_set(ero_router_id.operation)) leaf_name_data.push_back(ero_router_id.get_name_leafdata());
    if (is_strict_route.is_set || is_set(is_strict_route.operation)) leaf_name_data.push_back(is_strict_route.get_name_leafdata());
    if (status.is_set || is_set(status.operation)) leaf_name_data.push_back(status.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-interface-id")
    {
        ero_interface_id = value;
    }
    if(value_path == "ero-router-id")
    {
        ero_router_id = value;
    }
    if(value_path == "is-strict-route")
    {
        is_strict_route = value;
    }
    if(value_path == "status")
    {
        status = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ero()
    :
    	ero_type{YType::enumeration, "ero-type"}
    	,
    ipv4ero_sub_object(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject>())
	,unnumbered_ero_sub_object(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject>())
{
    ipv4ero_sub_object->parent = this;
    children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();

    unnumbered_ero_sub_object->parent = this;
    children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();

    yang_name = "ero"; yang_parent_name = "psb-info";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::~Ero()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::has_data() const
{
    return ero_type.is_set
	|| (ipv4ero_sub_object !=  nullptr && ipv4ero_sub_object->has_data())
	|| (unnumbered_ero_sub_object !=  nullptr && unnumbered_ero_sub_object->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::has_operation() const
{
    return is_set(operation)
	|| is_set(ero_type.operation)
	|| (ipv4ero_sub_object !=  nullptr && ipv4ero_sub_object->has_operation())
	|| (unnumbered_ero_sub_object !=  nullptr && unnumbered_ero_sub_object->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ero";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (ero_type.is_set || is_set(ero_type.operation)) leaf_name_data.push_back(ero_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4ero-sub-object")
    {
        if(ipv4ero_sub_object != nullptr)
        {
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
        else
        {
            ipv4ero_sub_object = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::Ipv4EroSubObject>();
            ipv4ero_sub_object->parent = this;
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
        return children.at("ipv4ero-sub-object");
    }

    if(child_yang_name == "unnumbered-ero-sub-object")
    {
        if(unnumbered_ero_sub_object != nullptr)
        {
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
        else
        {
            unnumbered_ero_sub_object = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::UnnumberedEroSubObject>();
            unnumbered_ero_sub_object->parent = this;
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
        return children.at("unnumbered-ero-sub-object");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::get_children()
{
    if(children.find("ipv4ero-sub-object") == children.end())
    {
        if(ipv4ero_sub_object != nullptr)
        {
            children["ipv4ero-sub-object"] = ipv4ero_sub_object.get();
        }
    }

    if(children.find("unnumbered-ero-sub-object") == children.end())
    {
        if(unnumbered_ero_sub_object != nullptr)
        {
            children["unnumbered-ero-sub-object"] = unnumbered_ero_sub_object.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "ero-type")
    {
        ero_type = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags::Flags()
    :
    	is_bandwidth_protected{YType::boolean, "is-bandwidth-protected"},
	 is_node_id{YType::boolean, "is-node-id"},
	 is_node_protection_available{YType::boolean, "is-node-protection-available"},
	 is_protection_available{YType::boolean, "is-protection-available"},
	 is_protection_in_use{YType::boolean, "is-protection-in-use"}
{
    yang_name = "flags"; yang_parent_name = "ipv4rro-sub-object";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags::~Flags()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags::has_data() const
{
    return is_bandwidth_protected.is_set
	|| is_node_id.is_set
	|| is_node_protection_available.is_set
	|| is_protection_available.is_set
	|| is_protection_in_use.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bandwidth_protected.operation)
	|| is_set(is_node_id.operation)
	|| is_set(is_node_protection_available.operation)
	|| is_set(is_protection_available.operation)
	|| is_set(is_protection_in_use.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flags";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/ipv4rro-sub-object/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bandwidth_protected.is_set || is_set(is_bandwidth_protected.operation)) leaf_name_data.push_back(is_bandwidth_protected.get_name_leafdata());
    if (is_node_id.is_set || is_set(is_node_id.operation)) leaf_name_data.push_back(is_node_id.get_name_leafdata());
    if (is_node_protection_available.is_set || is_set(is_node_protection_available.operation)) leaf_name_data.push_back(is_node_protection_available.get_name_leafdata());
    if (is_protection_available.is_set || is_set(is_protection_available.operation)) leaf_name_data.push_back(is_protection_available.get_name_leafdata());
    if (is_protection_in_use.is_set || is_set(is_protection_in_use.operation)) leaf_name_data.push_back(is_protection_in_use.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bandwidth-protected")
    {
        is_bandwidth_protected = value;
    }
    if(value_path == "is-node-id")
    {
        is_node_id = value;
    }
    if(value_path == "is-node-protection-available")
    {
        is_node_protection_available = value;
    }
    if(value_path == "is-protection-available")
    {
        is_protection_available = value;
    }
    if(value_path == "is-protection-in-use")
    {
        is_protection_in_use = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Ipv4RroSubObject()
    :
    	rro_address{YType::str, "rro-address"}
    	,
    flags(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags>())
{
    flags->parent = this;
    children["flags"] = flags.get();

    yang_name = "ipv4rro-sub-object"; yang_parent_name = "rro";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::~Ipv4RroSubObject()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::has_data() const
{
    return rro_address.is_set
	|| (flags !=  nullptr && flags->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(rro_address.operation)
	|| (flags !=  nullptr && flags->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4rro-sub-object";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (rro_address.is_set || is_set(rro_address.operation)) leaf_name_data.push_back(rro_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "flags")
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
        else
        {
            flags = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::Flags>();
            flags->parent = this;
            children["flags"] = flags.get();
        }
        return children.at("flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::get_children()
{
    if(children.find("flags") == children.end())
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "rro-address")
    {
        rro_address = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags::Flags()
    :
    	is_global_label{YType::boolean, "is-global-label"}
{
    yang_name = "flags"; yang_parent_name = "label-rro-sub-object";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags::~Flags()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags::has_data() const
{
    return is_global_label.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_global_label.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flags";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/label-rro-sub-object/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_global_label.is_set || is_set(is_global_label.operation)) leaf_name_data.push_back(is_global_label.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-global-label")
    {
        is_global_label = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::LabelRroSubObject()
    :
    	is_label_variable_length{YType::boolean, "is-label-variable-length"},
	 label{YType::uint32, "label"},
	 variable_length_label{YType::uint32, "variable-length-label"}
    	,
    flags(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags>())
{
    flags->parent = this;
    children["flags"] = flags.get();

    yang_name = "label-rro-sub-object"; yang_parent_name = "rro";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::~LabelRroSubObject()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::has_data() const
{
    for (auto const & leaf : variable_length_label.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return is_label_variable_length.is_set
	|| label.is_set
	|| (flags !=  nullptr && flags->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::has_operation() const
{
    for (auto const & leaf : variable_length_label.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(is_label_variable_length.operation)
	|| is_set(label.operation)
	|| is_set(variable_length_label.operation)
	|| (flags !=  nullptr && flags->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "label-rro-sub-object";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_label_variable_length.is_set || is_set(is_label_variable_length.operation)) leaf_name_data.push_back(is_label_variable_length.get_name_leafdata());
    if (label.is_set || is_set(label.operation)) leaf_name_data.push_back(label.get_name_leafdata());

    auto variable_length_label_name_datas = variable_length_label.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), variable_length_label_name_datas.begin(), variable_length_label_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "flags")
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
        else
        {
            flags = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::Flags>();
            flags->parent = this;
            children["flags"] = flags.get();
        }
        return children.at("flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::get_children()
{
    if(children.find("flags") == children.end())
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-label-variable-length")
    {
        is_label_variable_length = value;
    }
    if(value_path == "label")
    {
        label = value;
    }
    if(value_path == "variable-length-label")
    {
        variable_length_label.append(value);
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags::Flags()
    :
    	is_bandwidth_protected{YType::boolean, "is-bandwidth-protected"},
	 is_node_id{YType::boolean, "is-node-id"},
	 is_node_protection_available{YType::boolean, "is-node-protection-available"},
	 is_protection_available{YType::boolean, "is-protection-available"},
	 is_protection_in_use{YType::boolean, "is-protection-in-use"}
{
    yang_name = "flags"; yang_parent_name = "unnumbered-rro-sub-object";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags::~Flags()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags::has_data() const
{
    return is_bandwidth_protected.is_set
	|| is_node_id.is_set
	|| is_node_protection_available.is_set
	|| is_protection_available.is_set
	|| is_protection_in_use.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bandwidth_protected.operation)
	|| is_set(is_node_id.operation)
	|| is_set(is_node_protection_available.operation)
	|| is_set(is_protection_available.operation)
	|| is_set(is_protection_in_use.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flags";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/unnumbered-rro-sub-object/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bandwidth_protected.is_set || is_set(is_bandwidth_protected.operation)) leaf_name_data.push_back(is_bandwidth_protected.get_name_leafdata());
    if (is_node_id.is_set || is_set(is_node_id.operation)) leaf_name_data.push_back(is_node_id.get_name_leafdata());
    if (is_node_protection_available.is_set || is_set(is_node_protection_available.operation)) leaf_name_data.push_back(is_node_protection_available.get_name_leafdata());
    if (is_protection_available.is_set || is_set(is_protection_available.operation)) leaf_name_data.push_back(is_protection_available.get_name_leafdata());
    if (is_protection_in_use.is_set || is_set(is_protection_in_use.operation)) leaf_name_data.push_back(is_protection_in_use.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bandwidth-protected")
    {
        is_bandwidth_protected = value;
    }
    if(value_path == "is-node-id")
    {
        is_node_id = value;
    }
    if(value_path == "is-node-protection-available")
    {
        is_node_protection_available = value;
    }
    if(value_path == "is-protection-available")
    {
        is_protection_available = value;
    }
    if(value_path == "is-protection-in-use")
    {
        is_protection_in_use = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::UnnumberedRroSubObject()
    :
    	interface_address{YType::str, "interface-address"},
	 interface_id{YType::uint32, "interface-id"}
    	,
    flags(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags>())
{
    flags->parent = this;
    children["flags"] = flags.get();

    yang_name = "unnumbered-rro-sub-object"; yang_parent_name = "rro";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::~UnnumberedRroSubObject()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::has_data() const
{
    return interface_address.is_set
	|| interface_id.is_set
	|| (flags !=  nullptr && flags->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_address.operation)
	|| is_set(interface_id.operation)
	|| (flags !=  nullptr && flags->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "unnumbered-rro-sub-object";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_address.is_set || is_set(interface_address.operation)) leaf_name_data.push_back(interface_address.get_name_leafdata());
    if (interface_id.is_set || is_set(interface_id.operation)) leaf_name_data.push_back(interface_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "flags")
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
        else
        {
            flags = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::Flags>();
            flags->parent = this;
            children["flags"] = flags.get();
        }
        return children.at("flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::get_children()
{
    if(children.find("flags") == children.end())
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-address")
    {
        interface_address = value;
    }
    if(value_path == "interface-id")
    {
        interface_id = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject::SrlgRroSubObject()
    :
    	srl_gs{YType::uint32, "srl-gs"}
{
    yang_name = "srlg-rro-sub-object"; yang_parent_name = "rro";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject::~SrlgRroSubObject()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject::has_data() const
{
    for (auto const & leaf : srl_gs.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject::has_operation() const
{
    for (auto const & leaf : srl_gs.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(srl_gs.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "srlg-rro-sub-object";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto srl_gs_name_datas = srl_gs.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), srl_gs_name_datas.begin(), srl_gs_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "srl-gs")
    {
        srl_gs.append(value);
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Rro()
    :
    	rro_type{YType::enumeration, "rro-type"}
    	,
    ipv4rro_sub_object(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject>())
	,label_rro_sub_object(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject>())
	,srlg_rro_sub_object(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject>())
	,unnumbered_rro_sub_object(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject>())
{
    ipv4rro_sub_object->parent = this;
    children["ipv4rro-sub-object"] = ipv4rro_sub_object.get();

    label_rro_sub_object->parent = this;
    children["label-rro-sub-object"] = label_rro_sub_object.get();

    srlg_rro_sub_object->parent = this;
    children["srlg-rro-sub-object"] = srlg_rro_sub_object.get();

    unnumbered_rro_sub_object->parent = this;
    children["unnumbered-rro-sub-object"] = unnumbered_rro_sub_object.get();

    yang_name = "rro"; yang_parent_name = "psb-info";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::~Rro()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::has_data() const
{
    return rro_type.is_set
	|| (ipv4rro_sub_object !=  nullptr && ipv4rro_sub_object->has_data())
	|| (label_rro_sub_object !=  nullptr && label_rro_sub_object->has_data())
	|| (srlg_rro_sub_object !=  nullptr && srlg_rro_sub_object->has_data())
	|| (unnumbered_rro_sub_object !=  nullptr && unnumbered_rro_sub_object->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::has_operation() const
{
    return is_set(operation)
	|| is_set(rro_type.operation)
	|| (ipv4rro_sub_object !=  nullptr && ipv4rro_sub_object->has_operation())
	|| (label_rro_sub_object !=  nullptr && label_rro_sub_object->has_operation())
	|| (srlg_rro_sub_object !=  nullptr && srlg_rro_sub_object->has_operation())
	|| (unnumbered_rro_sub_object !=  nullptr && unnumbered_rro_sub_object->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rro";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (rro_type.is_set || is_set(rro_type.operation)) leaf_name_data.push_back(rro_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4rro-sub-object")
    {
        if(ipv4rro_sub_object != nullptr)
        {
            children["ipv4rro-sub-object"] = ipv4rro_sub_object.get();
        }
        else
        {
            ipv4rro_sub_object = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::Ipv4RroSubObject>();
            ipv4rro_sub_object->parent = this;
            children["ipv4rro-sub-object"] = ipv4rro_sub_object.get();
        }
        return children.at("ipv4rro-sub-object");
    }

    if(child_yang_name == "label-rro-sub-object")
    {
        if(label_rro_sub_object != nullptr)
        {
            children["label-rro-sub-object"] = label_rro_sub_object.get();
        }
        else
        {
            label_rro_sub_object = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::LabelRroSubObject>();
            label_rro_sub_object->parent = this;
            children["label-rro-sub-object"] = label_rro_sub_object.get();
        }
        return children.at("label-rro-sub-object");
    }

    if(child_yang_name == "srlg-rro-sub-object")
    {
        if(srlg_rro_sub_object != nullptr)
        {
            children["srlg-rro-sub-object"] = srlg_rro_sub_object.get();
        }
        else
        {
            srlg_rro_sub_object = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::SrlgRroSubObject>();
            srlg_rro_sub_object->parent = this;
            children["srlg-rro-sub-object"] = srlg_rro_sub_object.get();
        }
        return children.at("srlg-rro-sub-object");
    }

    if(child_yang_name == "unnumbered-rro-sub-object")
    {
        if(unnumbered_rro_sub_object != nullptr)
        {
            children["unnumbered-rro-sub-object"] = unnumbered_rro_sub_object.get();
        }
        else
        {
            unnumbered_rro_sub_object = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::UnnumberedRroSubObject>();
            unnumbered_rro_sub_object->parent = this;
            children["unnumbered-rro-sub-object"] = unnumbered_rro_sub_object.get();
        }
        return children.at("unnumbered-rro-sub-object");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::get_children()
{
    if(children.find("ipv4rro-sub-object") == children.end())
    {
        if(ipv4rro_sub_object != nullptr)
        {
            children["ipv4rro-sub-object"] = ipv4rro_sub_object.get();
        }
    }

    if(children.find("label-rro-sub-object") == children.end())
    {
        if(label_rro_sub_object != nullptr)
        {
            children["label-rro-sub-object"] = label_rro_sub_object.get();
        }
    }

    if(children.find("srlg-rro-sub-object") == children.end())
    {
        if(srlg_rro_sub_object != nullptr)
        {
            children["srlg-rro-sub-object"] = srlg_rro_sub_object.get();
        }
    }

    if(children.find("unnumbered-rro-sub-object") == children.end())
    {
        if(unnumbered_rro_sub_object != nullptr)
        {
            children["unnumbered-rro-sub-object"] = unnumbered_rro_sub_object.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "rro-type")
    {
        rro_type = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::PsbInfo()
    :
    	destination_address{YType::str, "destination-address"},
	 in_interface{YType::str, "in-interface"},
	 in_label{YType::uint32, "in-label"},
	 incoming_interface_address{YType::str, "incoming-interface-address"},
	 is_bad_address{YType::boolean, "is-bad-address"},
	 is_ero_valid{YType::boolean, "is-ero-valid"},
	 is_rro_valid{YType::boolean, "is-rro-valid"},
	 is_traffic_spec_valid{YType::boolean, "is-traffic-spec-valid"},
	 is_valid{YType::boolean, "is-valid"},
	 lsp_id{YType::uint32, "lsp-id"},
	 lsp_wrap_label{YType::uint32, "lsp-wrap-label"},
	 p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 sub_group_id{YType::uint16, "sub-group-id"},
	 tunnel_name{YType::str, "tunnel-name"}
    	,
    association(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association>())
	,generic_in_label(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel>())
	,generic_traffic_spec(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec>())
	,protection(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection>())
	,reverse_lsp(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp>())
	,traffic_spec(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec>())
{
    association->parent = this;
    children["association"] = association.get();

    generic_in_label->parent = this;
    children["generic-in-label"] = generic_in_label.get();

    generic_traffic_spec->parent = this;
    children["generic-traffic-spec"] = generic_traffic_spec.get();

    protection->parent = this;
    children["protection"] = protection.get();

    reverse_lsp->parent = this;
    children["reverse-lsp"] = reverse_lsp.get();

    traffic_spec->parent = this;
    children["traffic-spec"] = traffic_spec.get();

    yang_name = "psb-info"; yang_parent_name = "psb-rsb-info";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::~PsbInfo()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::has_data() const
{
    for (std::size_t index=0; index<ero.size(); index++)
    {
        if(ero[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<rro.size(); index++)
    {
        if(rro[index]->has_data())
            return true;
    }
    return destination_address.is_set
	|| in_interface.is_set
	|| in_label.is_set
	|| incoming_interface_address.is_set
	|| is_bad_address.is_set
	|| is_ero_valid.is_set
	|| is_rro_valid.is_set
	|| is_traffic_spec_valid.is_set
	|| is_valid.is_set
	|| lsp_id.is_set
	|| lsp_wrap_label.is_set
	|| p2mp_sub_group_origin.is_set
	|| sub_group_id.is_set
	|| tunnel_name.is_set
	|| (association !=  nullptr && association->has_data())
	|| (generic_in_label !=  nullptr && generic_in_label->has_data())
	|| (generic_traffic_spec !=  nullptr && generic_traffic_spec->has_data())
	|| (protection !=  nullptr && protection->has_data())
	|| (reverse_lsp !=  nullptr && reverse_lsp->has_data())
	|| (traffic_spec !=  nullptr && traffic_spec->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::has_operation() const
{
    for (std::size_t index=0; index<ero.size(); index++)
    {
        if(ero[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<rro.size(); index++)
    {
        if(rro[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(in_interface.operation)
	|| is_set(in_label.operation)
	|| is_set(incoming_interface_address.operation)
	|| is_set(is_bad_address.operation)
	|| is_set(is_ero_valid.operation)
	|| is_set(is_rro_valid.operation)
	|| is_set(is_traffic_spec_valid.operation)
	|| is_set(is_valid.operation)
	|| is_set(lsp_id.operation)
	|| is_set(lsp_wrap_label.operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(tunnel_name.operation)
	|| (association !=  nullptr && association->has_operation())
	|| (generic_in_label !=  nullptr && generic_in_label->has_operation())
	|| (generic_traffic_spec !=  nullptr && generic_traffic_spec->has_operation())
	|| (protection !=  nullptr && protection->has_operation())
	|| (reverse_lsp !=  nullptr && reverse_lsp->has_operation())
	|| (traffic_spec !=  nullptr && traffic_spec->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "psb-info";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (in_interface.is_set || is_set(in_interface.operation)) leaf_name_data.push_back(in_interface.get_name_leafdata());
    if (in_label.is_set || is_set(in_label.operation)) leaf_name_data.push_back(in_label.get_name_leafdata());
    if (incoming_interface_address.is_set || is_set(incoming_interface_address.operation)) leaf_name_data.push_back(incoming_interface_address.get_name_leafdata());
    if (is_bad_address.is_set || is_set(is_bad_address.operation)) leaf_name_data.push_back(is_bad_address.get_name_leafdata());
    if (is_ero_valid.is_set || is_set(is_ero_valid.operation)) leaf_name_data.push_back(is_ero_valid.get_name_leafdata());
    if (is_rro_valid.is_set || is_set(is_rro_valid.operation)) leaf_name_data.push_back(is_rro_valid.get_name_leafdata());
    if (is_traffic_spec_valid.is_set || is_set(is_traffic_spec_valid.operation)) leaf_name_data.push_back(is_traffic_spec_valid.get_name_leafdata());
    if (is_valid.is_set || is_set(is_valid.operation)) leaf_name_data.push_back(is_valid.get_name_leafdata());
    if (lsp_id.is_set || is_set(lsp_id.operation)) leaf_name_data.push_back(lsp_id.get_name_leafdata());
    if (lsp_wrap_label.is_set || is_set(lsp_wrap_label.operation)) leaf_name_data.push_back(lsp_wrap_label.get_name_leafdata());
    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (tunnel_name.is_set || is_set(tunnel_name.operation)) leaf_name_data.push_back(tunnel_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "association")
    {
        if(association != nullptr)
        {
            children["association"] = association.get();
        }
        else
        {
            association = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Association>();
            association->parent = this;
            children["association"] = association.get();
        }
        return children.at("association");
    }

    if(child_yang_name == "ero")
    {
        for(auto const & c : ero)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Ero>();
        c->parent = this;
        ero.push_back(std::move(c));
        children[segment_path] = ero.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "generic-in-label")
    {
        if(generic_in_label != nullptr)
        {
            children["generic-in-label"] = generic_in_label.get();
        }
        else
        {
            generic_in_label = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericInLabel>();
            generic_in_label->parent = this;
            children["generic-in-label"] = generic_in_label.get();
        }
        return children.at("generic-in-label");
    }

    if(child_yang_name == "generic-traffic-spec")
    {
        if(generic_traffic_spec != nullptr)
        {
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
        else
        {
            generic_traffic_spec = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::GenericTrafficSpec>();
            generic_traffic_spec->parent = this;
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
        return children.at("generic-traffic-spec");
    }

    if(child_yang_name == "protection")
    {
        if(protection != nullptr)
        {
            children["protection"] = protection.get();
        }
        else
        {
            protection = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Protection>();
            protection->parent = this;
            children["protection"] = protection.get();
        }
        return children.at("protection");
    }

    if(child_yang_name == "reverse-lsp")
    {
        if(reverse_lsp != nullptr)
        {
            children["reverse-lsp"] = reverse_lsp.get();
        }
        else
        {
            reverse_lsp = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::ReverseLsp>();
            reverse_lsp->parent = this;
            children["reverse-lsp"] = reverse_lsp.get();
        }
        return children.at("reverse-lsp");
    }

    if(child_yang_name == "rro")
    {
        for(auto const & c : rro)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::Rro>();
        c->parent = this;
        rro.push_back(std::move(c));
        children[segment_path] = rro.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "traffic-spec")
    {
        if(traffic_spec != nullptr)
        {
            children["traffic-spec"] = traffic_spec.get();
        }
        else
        {
            traffic_spec = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::TrafficSpec>();
            traffic_spec->parent = this;
            children["traffic-spec"] = traffic_spec.get();
        }
        return children.at("traffic-spec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::get_children()
{
    if(children.find("association") == children.end())
    {
        if(association != nullptr)
        {
            children["association"] = association.get();
        }
    }

    for (auto const & c : ero)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("generic-in-label") == children.end())
    {
        if(generic_in_label != nullptr)
        {
            children["generic-in-label"] = generic_in_label.get();
        }
    }

    if(children.find("generic-traffic-spec") == children.end())
    {
        if(generic_traffic_spec != nullptr)
        {
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
    }

    if(children.find("protection") == children.end())
    {
        if(protection != nullptr)
        {
            children["protection"] = protection.get();
        }
    }

    if(children.find("reverse-lsp") == children.end())
    {
        if(reverse_lsp != nullptr)
        {
            children["reverse-lsp"] = reverse_lsp.get();
        }
    }

    for (auto const & c : rro)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("traffic-spec") == children.end())
    {
        if(traffic_spec != nullptr)
        {
            children["traffic-spec"] = traffic_spec.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "in-interface")
    {
        in_interface = value;
    }
    if(value_path == "in-label")
    {
        in_label = value;
    }
    if(value_path == "incoming-interface-address")
    {
        incoming_interface_address = value;
    }
    if(value_path == "is-bad-address")
    {
        is_bad_address = value;
    }
    if(value_path == "is-ero-valid")
    {
        is_ero_valid = value;
    }
    if(value_path == "is-rro-valid")
    {
        is_rro_valid = value;
    }
    if(value_path == "is-traffic-spec-valid")
    {
        is_traffic_spec_valid = value;
    }
    if(value_path == "is-valid")
    {
        is_valid = value;
    }
    if(value_path == "lsp-id")
    {
        lsp_id = value;
    }
    if(value_path == "lsp-wrap-label")
    {
        lsp_wrap_label = value;
    }
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "tunnel-name")
    {
        tunnel_name = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel::GeneralizedLabel()
    :
    	value_{YType::uint32, "value"}
{
    yang_name = "generalized-label"; yang_parent_name = "generic-out-label";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel::~GeneralizedLabel()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel::has_data() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel::has_operation() const
{
    for (auto const & leaf : value_.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(value_.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generalized-label";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/generic-out-label/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto value__name_datas = value_.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), value__name_datas.begin(), value__name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "value")
    {
        value_.append(value);
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GenericOutLabel()
    :
    	generic_label_type{YType::enumeration, "generic-label-type"}
    	,
    generalized_label(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel>())
{
    generalized_label->parent = this;
    children["generalized-label"] = generalized_label.get();

    yang_name = "generic-out-label"; yang_parent_name = "rsb-info";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::~GenericOutLabel()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::has_data() const
{
    return generic_label_type.is_set
	|| (generalized_label !=  nullptr && generalized_label->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::has_operation() const
{
    return is_set(operation)
	|| is_set(generic_label_type.operation)
	|| (generalized_label !=  nullptr && generalized_label->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-out-label";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (generic_label_type.is_set || is_set(generic_label_type.operation)) leaf_name_data.push_back(generic_label_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generalized-label")
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
        else
        {
            generalized_label = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::GeneralizedLabel>();
            generalized_label->parent = this;
            children["generalized-label"] = generalized_label.get();
        }
        return children.at("generalized-label");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::get_children()
{
    if(children.find("generalized-label") == children.end())
    {
        if(generalized_label != nullptr)
        {
            children["generalized-label"] = generalized_label.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "generic-label-type")
    {
        generic_label_type = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec::FlowSpec()
    :
    	flow_average_rate{YType::uint64, "flow-average-rate"},
	 flow_max_burst{YType::uint64, "flow-max-burst"},
	 flow_max_unit{YType::uint32, "flow-max-unit"},
	 flow_min_unit{YType::uint32, "flow-min-unit"},
	 flow_peak_rate{YType::uint64, "flow-peak-rate"},
	 flow_qos{YType::enumeration, "flow-qos"},
	 flow_requested_rate{YType::uint64, "flow-requested-rate"},
	 flow_slack{YType::uint32, "flow-slack"}
{
    yang_name = "flow-spec"; yang_parent_name = "rsb-info";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec::~FlowSpec()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec::has_data() const
{
    return flow_average_rate.is_set
	|| flow_max_burst.is_set
	|| flow_max_unit.is_set
	|| flow_min_unit.is_set
	|| flow_peak_rate.is_set
	|| flow_qos.is_set
	|| flow_requested_rate.is_set
	|| flow_slack.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_average_rate.operation)
	|| is_set(flow_max_burst.operation)
	|| is_set(flow_max_unit.operation)
	|| is_set(flow_min_unit.operation)
	|| is_set(flow_peak_rate.operation)
	|| is_set(flow_qos.operation)
	|| is_set(flow_requested_rate.operation)
	|| is_set(flow_slack.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flow-spec";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_average_rate.is_set || is_set(flow_average_rate.operation)) leaf_name_data.push_back(flow_average_rate.get_name_leafdata());
    if (flow_max_burst.is_set || is_set(flow_max_burst.operation)) leaf_name_data.push_back(flow_max_burst.get_name_leafdata());
    if (flow_max_unit.is_set || is_set(flow_max_unit.operation)) leaf_name_data.push_back(flow_max_unit.get_name_leafdata());
    if (flow_min_unit.is_set || is_set(flow_min_unit.operation)) leaf_name_data.push_back(flow_min_unit.get_name_leafdata());
    if (flow_peak_rate.is_set || is_set(flow_peak_rate.operation)) leaf_name_data.push_back(flow_peak_rate.get_name_leafdata());
    if (flow_qos.is_set || is_set(flow_qos.operation)) leaf_name_data.push_back(flow_qos.get_name_leafdata());
    if (flow_requested_rate.is_set || is_set(flow_requested_rate.operation)) leaf_name_data.push_back(flow_requested_rate.get_name_leafdata());
    if (flow_slack.is_set || is_set(flow_slack.operation)) leaf_name_data.push_back(flow_slack.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-average-rate")
    {
        flow_average_rate = value;
    }
    if(value_path == "flow-max-burst")
    {
        flow_max_burst = value;
    }
    if(value_path == "flow-max-unit")
    {
        flow_max_unit = value;
    }
    if(value_path == "flow-min-unit")
    {
        flow_min_unit = value;
    }
    if(value_path == "flow-peak-rate")
    {
        flow_peak_rate = value;
    }
    if(value_path == "flow-qos")
    {
        flow_qos = value;
    }
    if(value_path == "flow-requested-rate")
    {
        flow_requested_rate = value;
    }
    if(value_path == "flow-slack")
    {
        flow_slack = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec::G709OtnFlowSpec()
    :
    	flow_bit_rate{YType::uint64, "flow-bit-rate"},
	 flow_multiplier{YType::uint16, "flow-multiplier"},
	 flow_nvc{YType::uint16, "flow-nvc"},
	 flow_signal_type{YType::uint8, "flow-signal-type"}
{
    yang_name = "g709otn-flow-spec"; yang_parent_name = "generic-flow-spec";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec::~G709OtnFlowSpec()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec::has_data() const
{
    return flow_bit_rate.is_set
	|| flow_multiplier.is_set
	|| flow_nvc.is_set
	|| flow_signal_type.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_bit_rate.operation)
	|| is_set(flow_multiplier.operation)
	|| is_set(flow_nvc.operation)
	|| is_set(flow_signal_type.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-flow-spec";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/generic-flow-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_bit_rate.is_set || is_set(flow_bit_rate.operation)) leaf_name_data.push_back(flow_bit_rate.get_name_leafdata());
    if (flow_multiplier.is_set || is_set(flow_multiplier.operation)) leaf_name_data.push_back(flow_multiplier.get_name_leafdata());
    if (flow_nvc.is_set || is_set(flow_nvc.operation)) leaf_name_data.push_back(flow_nvc.get_name_leafdata());
    if (flow_signal_type.is_set || is_set(flow_signal_type.operation)) leaf_name_data.push_back(flow_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-bit-rate")
    {
        flow_bit_rate = value;
    }
    if(value_path == "flow-multiplier")
    {
        flow_multiplier = value;
    }
    if(value_path == "flow-nvc")
    {
        flow_nvc = value;
    }
    if(value_path == "flow-signal-type")
    {
        flow_signal_type = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::GenericFlowSpec()
    :
    	flow_spec_type{YType::enumeration, "flow-spec-type"}
    	,
    g709otn_flow_spec(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec>())
{
    g709otn_flow_spec->parent = this;
    children["g709otn-flow-spec"] = g709otn_flow_spec.get();

    yang_name = "generic-flow-spec"; yang_parent_name = "rsb-info";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::~GenericFlowSpec()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::has_data() const
{
    return flow_spec_type.is_set
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(flow_spec_type.operation)
	|| (g709otn_flow_spec !=  nullptr && g709otn_flow_spec->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-flow-spec";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (flow_spec_type.is_set || is_set(flow_spec_type.operation)) leaf_name_data.push_back(flow_spec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-flow-spec")
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        else
        {
            g709otn_flow_spec = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::G709OtnFlowSpec>();
            g709otn_flow_spec->parent = this;
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
        return children.at("g709otn-flow-spec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::get_children()
{
    if(children.find("g709otn-flow-spec") == children.end())
    {
        if(g709otn_flow_spec != nullptr)
        {
            children["g709otn-flow-spec"] = g709otn_flow_spec.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "flow-spec-type")
    {
        flow_spec_type = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags::Flags()
    :
    	is_bandwidth_protected{YType::boolean, "is-bandwidth-protected"},
	 is_node_id{YType::boolean, "is-node-id"},
	 is_node_protection_available{YType::boolean, "is-node-protection-available"},
	 is_protection_available{YType::boolean, "is-protection-available"},
	 is_protection_in_use{YType::boolean, "is-protection-in-use"}
{
    yang_name = "flags"; yang_parent_name = "ipv4rro-sub-object";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags::~Flags()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags::has_data() const
{
    return is_bandwidth_protected.is_set
	|| is_node_id.is_set
	|| is_node_protection_available.is_set
	|| is_protection_available.is_set
	|| is_protection_in_use.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bandwidth_protected.operation)
	|| is_set(is_node_id.operation)
	|| is_set(is_node_protection_available.operation)
	|| is_set(is_protection_available.operation)
	|| is_set(is_protection_in_use.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flags";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/ipv4rro-sub-object/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bandwidth_protected.is_set || is_set(is_bandwidth_protected.operation)) leaf_name_data.push_back(is_bandwidth_protected.get_name_leafdata());
    if (is_node_id.is_set || is_set(is_node_id.operation)) leaf_name_data.push_back(is_node_id.get_name_leafdata());
    if (is_node_protection_available.is_set || is_set(is_node_protection_available.operation)) leaf_name_data.push_back(is_node_protection_available.get_name_leafdata());
    if (is_protection_available.is_set || is_set(is_protection_available.operation)) leaf_name_data.push_back(is_protection_available.get_name_leafdata());
    if (is_protection_in_use.is_set || is_set(is_protection_in_use.operation)) leaf_name_data.push_back(is_protection_in_use.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bandwidth-protected")
    {
        is_bandwidth_protected = value;
    }
    if(value_path == "is-node-id")
    {
        is_node_id = value;
    }
    if(value_path == "is-node-protection-available")
    {
        is_node_protection_available = value;
    }
    if(value_path == "is-protection-available")
    {
        is_protection_available = value;
    }
    if(value_path == "is-protection-in-use")
    {
        is_protection_in_use = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Ipv4RroSubObject()
    :
    	rro_address{YType::str, "rro-address"}
    	,
    flags(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags>())
{
    flags->parent = this;
    children["flags"] = flags.get();

    yang_name = "ipv4rro-sub-object"; yang_parent_name = "rro";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::~Ipv4RroSubObject()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::has_data() const
{
    return rro_address.is_set
	|| (flags !=  nullptr && flags->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(rro_address.operation)
	|| (flags !=  nullptr && flags->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4rro-sub-object";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (rro_address.is_set || is_set(rro_address.operation)) leaf_name_data.push_back(rro_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "flags")
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
        else
        {
            flags = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::Flags>();
            flags->parent = this;
            children["flags"] = flags.get();
        }
        return children.at("flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::get_children()
{
    if(children.find("flags") == children.end())
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "rro-address")
    {
        rro_address = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags::Flags()
    :
    	is_global_label{YType::boolean, "is-global-label"}
{
    yang_name = "flags"; yang_parent_name = "label-rro-sub-object";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags::~Flags()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags::has_data() const
{
    return is_global_label.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_global_label.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flags";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/label-rro-sub-object/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_global_label.is_set || is_set(is_global_label.operation)) leaf_name_data.push_back(is_global_label.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-global-label")
    {
        is_global_label = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::LabelRroSubObject()
    :
    	is_label_variable_length{YType::boolean, "is-label-variable-length"},
	 label{YType::uint32, "label"},
	 variable_length_label{YType::uint32, "variable-length-label"}
    	,
    flags(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags>())
{
    flags->parent = this;
    children["flags"] = flags.get();

    yang_name = "label-rro-sub-object"; yang_parent_name = "rro";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::~LabelRroSubObject()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::has_data() const
{
    for (auto const & leaf : variable_length_label.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return is_label_variable_length.is_set
	|| label.is_set
	|| (flags !=  nullptr && flags->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::has_operation() const
{
    for (auto const & leaf : variable_length_label.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(is_label_variable_length.operation)
	|| is_set(label.operation)
	|| is_set(variable_length_label.operation)
	|| (flags !=  nullptr && flags->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "label-rro-sub-object";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_label_variable_length.is_set || is_set(is_label_variable_length.operation)) leaf_name_data.push_back(is_label_variable_length.get_name_leafdata());
    if (label.is_set || is_set(label.operation)) leaf_name_data.push_back(label.get_name_leafdata());

    auto variable_length_label_name_datas = variable_length_label.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), variable_length_label_name_datas.begin(), variable_length_label_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "flags")
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
        else
        {
            flags = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::Flags>();
            flags->parent = this;
            children["flags"] = flags.get();
        }
        return children.at("flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::get_children()
{
    if(children.find("flags") == children.end())
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-label-variable-length")
    {
        is_label_variable_length = value;
    }
    if(value_path == "label")
    {
        label = value;
    }
    if(value_path == "variable-length-label")
    {
        variable_length_label.append(value);
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags::Flags()
    :
    	is_bandwidth_protected{YType::boolean, "is-bandwidth-protected"},
	 is_node_id{YType::boolean, "is-node-id"},
	 is_node_protection_available{YType::boolean, "is-node-protection-available"},
	 is_protection_available{YType::boolean, "is-protection-available"},
	 is_protection_in_use{YType::boolean, "is-protection-in-use"}
{
    yang_name = "flags"; yang_parent_name = "unnumbered-rro-sub-object";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags::~Flags()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags::has_data() const
{
    return is_bandwidth_protected.is_set
	|| is_node_id.is_set
	|| is_node_protection_available.is_set
	|| is_protection_available.is_set
	|| is_protection_in_use.is_set;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bandwidth_protected.operation)
	|| is_set(is_node_id.operation)
	|| is_set(is_node_protection_available.operation)
	|| is_set(is_protection_available.operation)
	|| is_set(is_protection_in_use.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "flags";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/unnumbered-rro-sub-object/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bandwidth_protected.is_set || is_set(is_bandwidth_protected.operation)) leaf_name_data.push_back(is_bandwidth_protected.get_name_leafdata());
    if (is_node_id.is_set || is_set(is_node_id.operation)) leaf_name_data.push_back(is_node_id.get_name_leafdata());
    if (is_node_protection_available.is_set || is_set(is_node_protection_available.operation)) leaf_name_data.push_back(is_node_protection_available.get_name_leafdata());
    if (is_protection_available.is_set || is_set(is_protection_available.operation)) leaf_name_data.push_back(is_protection_available.get_name_leafdata());
    if (is_protection_in_use.is_set || is_set(is_protection_in_use.operation)) leaf_name_data.push_back(is_protection_in_use.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bandwidth-protected")
    {
        is_bandwidth_protected = value;
    }
    if(value_path == "is-node-id")
    {
        is_node_id = value;
    }
    if(value_path == "is-node-protection-available")
    {
        is_node_protection_available = value;
    }
    if(value_path == "is-protection-available")
    {
        is_protection_available = value;
    }
    if(value_path == "is-protection-in-use")
    {
        is_protection_in_use = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::UnnumberedRroSubObject()
    :
    	interface_address{YType::str, "interface-address"},
	 interface_id{YType::uint32, "interface-id"}
    	,
    flags(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags>())
{
    flags->parent = this;
    children["flags"] = flags.get();

    yang_name = "unnumbered-rro-sub-object"; yang_parent_name = "rro";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::~UnnumberedRroSubObject()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::has_data() const
{
    return interface_address.is_set
	|| interface_id.is_set
	|| (flags !=  nullptr && flags->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::has_operation() const
{
    return is_set(operation)
	|| is_set(interface_address.operation)
	|| is_set(interface_id.operation)
	|| (flags !=  nullptr && flags->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "unnumbered-rro-sub-object";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (interface_address.is_set || is_set(interface_address.operation)) leaf_name_data.push_back(interface_address.get_name_leafdata());
    if (interface_id.is_set || is_set(interface_id.operation)) leaf_name_data.push_back(interface_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "flags")
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
        else
        {
            flags = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::Flags>();
            flags->parent = this;
            children["flags"] = flags.get();
        }
        return children.at("flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::get_children()
{
    if(children.find("flags") == children.end())
    {
        if(flags != nullptr)
        {
            children["flags"] = flags.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "interface-address")
    {
        interface_address = value;
    }
    if(value_path == "interface-id")
    {
        interface_id = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject::SrlgRroSubObject()
    :
    	srl_gs{YType::uint32, "srl-gs"}
{
    yang_name = "srlg-rro-sub-object"; yang_parent_name = "rro";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject::~SrlgRroSubObject()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject::has_data() const
{
    for (auto const & leaf : srl_gs.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return false;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject::has_operation() const
{
    for (auto const & leaf : srl_gs.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(srl_gs.operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "srlg-rro-sub-object";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};


    auto srl_gs_name_datas = srl_gs.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), srl_gs_name_datas.begin(), srl_gs_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject::get_children()
{
    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "srl-gs")
    {
        srl_gs.append(value);
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Rro()
    :
    	rro_type{YType::enumeration, "rro-type"}
    	,
    ipv4rro_sub_object(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject>())
	,label_rro_sub_object(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject>())
	,srlg_rro_sub_object(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject>())
	,unnumbered_rro_sub_object(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject>())
{
    ipv4rro_sub_object->parent = this;
    children["ipv4rro-sub-object"] = ipv4rro_sub_object.get();

    label_rro_sub_object->parent = this;
    children["label-rro-sub-object"] = label_rro_sub_object.get();

    srlg_rro_sub_object->parent = this;
    children["srlg-rro-sub-object"] = srlg_rro_sub_object.get();

    unnumbered_rro_sub_object->parent = this;
    children["unnumbered-rro-sub-object"] = unnumbered_rro_sub_object.get();

    yang_name = "rro"; yang_parent_name = "rsb-info";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::~Rro()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::has_data() const
{
    return rro_type.is_set
	|| (ipv4rro_sub_object !=  nullptr && ipv4rro_sub_object->has_data())
	|| (label_rro_sub_object !=  nullptr && label_rro_sub_object->has_data())
	|| (srlg_rro_sub_object !=  nullptr && srlg_rro_sub_object->has_data())
	|| (unnumbered_rro_sub_object !=  nullptr && unnumbered_rro_sub_object->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::has_operation() const
{
    return is_set(operation)
	|| is_set(rro_type.operation)
	|| (ipv4rro_sub_object !=  nullptr && ipv4rro_sub_object->has_operation())
	|| (label_rro_sub_object !=  nullptr && label_rro_sub_object->has_operation())
	|| (srlg_rro_sub_object !=  nullptr && srlg_rro_sub_object->has_operation())
	|| (unnumbered_rro_sub_object !=  nullptr && unnumbered_rro_sub_object->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rro";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (rro_type.is_set || is_set(rro_type.operation)) leaf_name_data.push_back(rro_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4rro-sub-object")
    {
        if(ipv4rro_sub_object != nullptr)
        {
            children["ipv4rro-sub-object"] = ipv4rro_sub_object.get();
        }
        else
        {
            ipv4rro_sub_object = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::Ipv4RroSubObject>();
            ipv4rro_sub_object->parent = this;
            children["ipv4rro-sub-object"] = ipv4rro_sub_object.get();
        }
        return children.at("ipv4rro-sub-object");
    }

    if(child_yang_name == "label-rro-sub-object")
    {
        if(label_rro_sub_object != nullptr)
        {
            children["label-rro-sub-object"] = label_rro_sub_object.get();
        }
        else
        {
            label_rro_sub_object = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::LabelRroSubObject>();
            label_rro_sub_object->parent = this;
            children["label-rro-sub-object"] = label_rro_sub_object.get();
        }
        return children.at("label-rro-sub-object");
    }

    if(child_yang_name == "srlg-rro-sub-object")
    {
        if(srlg_rro_sub_object != nullptr)
        {
            children["srlg-rro-sub-object"] = srlg_rro_sub_object.get();
        }
        else
        {
            srlg_rro_sub_object = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::SrlgRroSubObject>();
            srlg_rro_sub_object->parent = this;
            children["srlg-rro-sub-object"] = srlg_rro_sub_object.get();
        }
        return children.at("srlg-rro-sub-object");
    }

    if(child_yang_name == "unnumbered-rro-sub-object")
    {
        if(unnumbered_rro_sub_object != nullptr)
        {
            children["unnumbered-rro-sub-object"] = unnumbered_rro_sub_object.get();
        }
        else
        {
            unnumbered_rro_sub_object = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::UnnumberedRroSubObject>();
            unnumbered_rro_sub_object->parent = this;
            children["unnumbered-rro-sub-object"] = unnumbered_rro_sub_object.get();
        }
        return children.at("unnumbered-rro-sub-object");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::get_children()
{
    if(children.find("ipv4rro-sub-object") == children.end())
    {
        if(ipv4rro_sub_object != nullptr)
        {
            children["ipv4rro-sub-object"] = ipv4rro_sub_object.get();
        }
    }

    if(children.find("label-rro-sub-object") == children.end())
    {
        if(label_rro_sub_object != nullptr)
        {
            children["label-rro-sub-object"] = label_rro_sub_object.get();
        }
    }

    if(children.find("srlg-rro-sub-object") == children.end())
    {
        if(srlg_rro_sub_object != nullptr)
        {
            children["srlg-rro-sub-object"] = srlg_rro_sub_object.get();
        }
    }

    if(children.find("unnumbered-rro-sub-object") == children.end())
    {
        if(unnumbered_rro_sub_object != nullptr)
        {
            children["unnumbered-rro-sub-object"] = unnumbered_rro_sub_object.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "rro-type")
    {
        rro_type = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::RsbInfo()
    :
    	backup_interface{YType::str, "backup-interface"},
	 backup_label{YType::uint32, "backup-label"},
	 destination_address{YType::str, "destination-address"},
	 is_flow_spec_valid{YType::boolean, "is-flow-spec-valid"},
	 is_rro_valid{YType::boolean, "is-rro-valid"},
	 is_valid{YType::boolean, "is-valid"},
	 out_interface{YType::str, "out-interface"},
	 out_label{YType::uint32, "out-label"}
    	,
    flow_spec(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec>())
	,generic_flow_spec(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec>())
	,generic_out_label(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel>())
{
    flow_spec->parent = this;
    children["flow-spec"] = flow_spec.get();

    generic_flow_spec->parent = this;
    children["generic-flow-spec"] = generic_flow_spec.get();

    generic_out_label->parent = this;
    children["generic-out-label"] = generic_out_label.get();

    yang_name = "rsb-info"; yang_parent_name = "psb-rsb-info";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::~RsbInfo()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::has_data() const
{
    for (std::size_t index=0; index<rro.size(); index++)
    {
        if(rro[index]->has_data())
            return true;
    }
    return backup_interface.is_set
	|| backup_label.is_set
	|| destination_address.is_set
	|| is_flow_spec_valid.is_set
	|| is_rro_valid.is_set
	|| is_valid.is_set
	|| out_interface.is_set
	|| out_label.is_set
	|| (flow_spec !=  nullptr && flow_spec->has_data())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_data())
	|| (generic_out_label !=  nullptr && generic_out_label->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::has_operation() const
{
    for (std::size_t index=0; index<rro.size(); index++)
    {
        if(rro[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(backup_interface.operation)
	|| is_set(backup_label.operation)
	|| is_set(destination_address.operation)
	|| is_set(is_flow_spec_valid.operation)
	|| is_set(is_rro_valid.operation)
	|| is_set(is_valid.operation)
	|| is_set(out_interface.operation)
	|| is_set(out_label.operation)
	|| (flow_spec !=  nullptr && flow_spec->has_operation())
	|| (generic_flow_spec !=  nullptr && generic_flow_spec->has_operation())
	|| (generic_out_label !=  nullptr && generic_out_label->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsb-info";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (backup_interface.is_set || is_set(backup_interface.operation)) leaf_name_data.push_back(backup_interface.get_name_leafdata());
    if (backup_label.is_set || is_set(backup_label.operation)) leaf_name_data.push_back(backup_label.get_name_leafdata());
    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (is_flow_spec_valid.is_set || is_set(is_flow_spec_valid.operation)) leaf_name_data.push_back(is_flow_spec_valid.get_name_leafdata());
    if (is_rro_valid.is_set || is_set(is_rro_valid.operation)) leaf_name_data.push_back(is_rro_valid.get_name_leafdata());
    if (is_valid.is_set || is_set(is_valid.operation)) leaf_name_data.push_back(is_valid.get_name_leafdata());
    if (out_interface.is_set || is_set(out_interface.operation)) leaf_name_data.push_back(out_interface.get_name_leafdata());
    if (out_label.is_set || is_set(out_label.operation)) leaf_name_data.push_back(out_label.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "flow-spec")
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
        else
        {
            flow_spec = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::FlowSpec>();
            flow_spec->parent = this;
            children["flow-spec"] = flow_spec.get();
        }
        return children.at("flow-spec");
    }

    if(child_yang_name == "generic-flow-spec")
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        else
        {
            generic_flow_spec = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericFlowSpec>();
            generic_flow_spec->parent = this;
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
        return children.at("generic-flow-spec");
    }

    if(child_yang_name == "generic-out-label")
    {
        if(generic_out_label != nullptr)
        {
            children["generic-out-label"] = generic_out_label.get();
        }
        else
        {
            generic_out_label = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::GenericOutLabel>();
            generic_out_label->parent = this;
            children["generic-out-label"] = generic_out_label.get();
        }
        return children.at("generic-out-label");
    }

    if(child_yang_name == "rro")
    {
        for(auto const & c : rro)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::Rro>();
        c->parent = this;
        rro.push_back(std::move(c));
        children[segment_path] = rro.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::get_children()
{
    if(children.find("flow-spec") == children.end())
    {
        if(flow_spec != nullptr)
        {
            children["flow-spec"] = flow_spec.get();
        }
    }

    if(children.find("generic-flow-spec") == children.end())
    {
        if(generic_flow_spec != nullptr)
        {
            children["generic-flow-spec"] = generic_flow_spec.get();
        }
    }

    if(children.find("generic-out-label") == children.end())
    {
        if(generic_out_label != nullptr)
        {
            children["generic-out-label"] = generic_out_label.get();
        }
    }

    for (auto const & c : rro)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "backup-interface")
    {
        backup_interface = value;
    }
    if(value_path == "backup-label")
    {
        backup_label = value;
    }
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "is-flow-spec-valid")
    {
        is_flow_spec_valid = value;
    }
    if(value_path == "is-rro-valid")
    {
        is_rro_valid = value;
    }
    if(value_path == "is-valid")
    {
        is_valid = value;
    }
    if(value_path == "out-interface")
    {
        out_interface = value;
    }
    if(value_path == "out-label")
    {
        out_label = value;
    }
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbRsbInfo()
{
    yang_name = "psb-rsb-info"; yang_parent_name = "session-detailed";
}

Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::~PsbRsbInfo()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::has_data() const
{
    for (std::size_t index=0; index<psb_info.size(); index++)
    {
        if(psb_info[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<rsb_info.size(); index++)
    {
        if(rsb_info[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::has_operation() const
{
    for (std::size_t index=0; index<psb_info.size(); index++)
    {
        if(psb_info[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<rsb_info.size(); index++)
    {
        if(rsb_info[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "psb-rsb-info";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "psb-info")
    {
        for(auto const & c : psb_info)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::PsbInfo>();
        c->parent = this;
        psb_info.push_back(std::move(c));
        children[segment_path] = psb_info.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "rsb-info")
    {
        for(auto const & c : rsb_info)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::RsbInfo>();
        c->parent = this;
        rsb_info.push_back(std::move(c));
        children[segment_path] = rsb_info.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::get_children()
{
    for (auto const & c : psb_info)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    for (auto const & c : rsb_info)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::SessionDetaileds::SessionDetailed::SessionDetailed()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 protocol{YType::int32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    compact(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::Compact>())
	,s2l_sub_lsp(std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::S2LSubLsp>())
{
    compact->parent = this;
    children["compact"] = compact.get();

    s2l_sub_lsp->parent = this;
    children["s2l-sub-lsp"] = s2l_sub_lsp.get();

    yang_name = "session-detailed"; yang_parent_name = "session-detaileds";
}

Rsvp::SessionDetaileds::SessionDetailed::~SessionDetailed()
{
}

bool Rsvp::SessionDetaileds::SessionDetailed::has_data() const
{
    for (std::size_t index=0; index<psb_rsb_info.size(); index++)
    {
        if(psb_rsb_info[index]->has_data())
            return true;
    }
    return destination_address.is_set
	|| destination_port.is_set
	|| extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| vrf_name.is_set
	|| (compact !=  nullptr && compact->has_data())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_data());
}

bool Rsvp::SessionDetaileds::SessionDetailed::has_operation() const
{
    for (std::size_t index=0; index<psb_rsb_info.size(); index++)
    {
        if(psb_rsb_info[index]->has_operation())
            return true;
    }
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(vrf_name.operation)
	|| (compact !=  nullptr && compact->has_operation())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_operation());
}

std::string Rsvp::SessionDetaileds::SessionDetailed::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session-detailed";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::SessionDetailed::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::SessionDetailed::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "compact")
    {
        if(compact != nullptr)
        {
            children["compact"] = compact.get();
        }
        else
        {
            compact = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::Compact>();
            compact->parent = this;
            children["compact"] = compact.get();
        }
        return children.at("compact");
    }

    if(child_yang_name == "psb-rsb-info")
    {
        for(auto const & c : psb_rsb_info)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::PsbRsbInfo>();
        c->parent = this;
        psb_rsb_info.push_back(std::move(c));
        children[segment_path] = psb_rsb_info.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "s2l-sub-lsp")
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        else
        {
            s2l_sub_lsp = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed::S2LSubLsp>();
            s2l_sub_lsp->parent = this;
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        return children.at("s2l-sub-lsp");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::SessionDetailed::get_children()
{
    if(children.find("compact") == children.end())
    {
        if(compact != nullptr)
        {
            children["compact"] = compact.get();
        }
    }

    for (auto const & c : psb_rsb_info)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("s2l-sub-lsp") == children.end())
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::SessionDetailed::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

Rsvp::SessionDetaileds::SessionDetaileds()
{
    yang_name = "session-detaileds"; yang_parent_name = "rsvp";
}

Rsvp::SessionDetaileds::~SessionDetaileds()
{
}

bool Rsvp::SessionDetaileds::has_data() const
{
    for (std::size_t index=0; index<session_detailed.size(); index++)
    {
        if(session_detailed[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::SessionDetaileds::has_operation() const
{
    for (std::size_t index=0; index<session_detailed.size(); index++)
    {
        if(session_detailed[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::SessionDetaileds::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session-detaileds";

    return path_buffer.str();

}

EntityPath Rsvp::SessionDetaileds::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::SessionDetaileds::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "session-detailed")
    {
        for(auto const & c : session_detailed)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::SessionDetaileds::SessionDetailed>();
        c->parent = this;
        session_detailed.push_back(std::move(c));
        children[segment_path] = session_detailed.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::SessionDetaileds::get_children()
{
    for (auto const & c : session_detailed)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::SessionDetaileds::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::HelloInstanceDetails::HelloInstanceDetail::UpTime::UpTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "up-time"; yang_parent_name = "hello-instance-detail";
}

Rsvp::HelloInstanceDetails::HelloInstanceDetail::UpTime::~UpTime()
{
}

bool Rsvp::HelloInstanceDetails::HelloInstanceDetail::UpTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool Rsvp::HelloInstanceDetails::HelloInstanceDetail::UpTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string Rsvp::HelloInstanceDetails::HelloInstanceDetail::UpTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "up-time";

    return path_buffer.str();

}

EntityPath Rsvp::HelloInstanceDetails::HelloInstanceDetail::UpTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::HelloInstanceDetails::HelloInstanceDetail::UpTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::HelloInstanceDetails::HelloInstanceDetail::UpTime::get_children()
{
    return children;
}

void Rsvp::HelloInstanceDetails::HelloInstanceDetail::UpTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

Rsvp::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime::CommunicationLostTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "communication-lost-time"; yang_parent_name = "hello-instance-detail";
}

Rsvp::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime::~CommunicationLostTime()
{
}

bool Rsvp::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool Rsvp::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string Rsvp::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "communication-lost-time";

    return path_buffer.str();

}

EntityPath Rsvp::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime::get_children()
{
    return children;
}

void Rsvp::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

Rsvp::HelloInstanceDetails::HelloInstanceDetail::HelloInstanceDetail()
    :
    	destination_address{YType::str, "destination-address"},
	 source_address{YType::str, "source-address"},
	 communication_lost_hello_missed{YType::uint16, "communication-lost-hello-missed"},
	 communication_lost_interface_down{YType::uint16, "communication-lost-interface-down"},
	 communication_lost_neighbor_disabled_hello{YType::uint16, "communication-lost-neighbor-disabled-hello"},
	 communication_lost_reason{YType::enumeration, "communication-lost-reason"},
	 communication_lost_wrong_destination_inst{YType::uint16, "communication-lost-wrong-destination-inst"},
	 communication_lost_wrong_source_inst{YType::uint16, "communication-lost-wrong-source-inst"},
	 destination_address_xr{YType::str, "destination-address-xr"},
	 destination_instance{YType::uint32, "destination-instance"},
	 hello_instance_owner{YType::enumeration, "hello-instance-owner"},
	 hello_interface{YType::str, "hello-interface"},
	 hello_interval{YType::uint32, "hello-interval"},
	 hello_messages_received{YType::uint64, "hello-messages-received"},
	 hello_messages_sent{YType::uint64, "hello-messages-sent"},
	 hello_request_suppressed{YType::uint64, "hello-request-suppressed"},
	 instance_type{YType::enumeration, "instance-type"},
	 missed_acks_allowed{YType::uint32, "missed-acks-allowed"},
	 neighbor_hello_state{YType::enumeration, "neighbor-hello-state"},
	 source_address_xr{YType::str, "source-address-xr"},
	 source_instance{YType::uint32, "source-instance"},
	 total_communication_lost{YType::uint16, "total-communication-lost"}
    	,
    communication_lost_time(std::make_unique<Rsvp::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime>())
	,up_time(std::make_unique<Rsvp::HelloInstanceDetails::HelloInstanceDetail::UpTime>())
{
    communication_lost_time->parent = this;
    children["communication-lost-time"] = communication_lost_time.get();

    up_time->parent = this;
    children["up-time"] = up_time.get();

    yang_name = "hello-instance-detail"; yang_parent_name = "hello-instance-details";
}

Rsvp::HelloInstanceDetails::HelloInstanceDetail::~HelloInstanceDetail()
{
}

bool Rsvp::HelloInstanceDetails::HelloInstanceDetail::has_data() const
{
    return destination_address.is_set
	|| source_address.is_set
	|| communication_lost_hello_missed.is_set
	|| communication_lost_interface_down.is_set
	|| communication_lost_neighbor_disabled_hello.is_set
	|| communication_lost_reason.is_set
	|| communication_lost_wrong_destination_inst.is_set
	|| communication_lost_wrong_source_inst.is_set
	|| destination_address_xr.is_set
	|| destination_instance.is_set
	|| hello_instance_owner.is_set
	|| hello_interface.is_set
	|| hello_interval.is_set
	|| hello_messages_received.is_set
	|| hello_messages_sent.is_set
	|| hello_request_suppressed.is_set
	|| instance_type.is_set
	|| missed_acks_allowed.is_set
	|| neighbor_hello_state.is_set
	|| source_address_xr.is_set
	|| source_instance.is_set
	|| total_communication_lost.is_set
	|| (communication_lost_time !=  nullptr && communication_lost_time->has_data())
	|| (up_time !=  nullptr && up_time->has_data());
}

bool Rsvp::HelloInstanceDetails::HelloInstanceDetail::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(source_address.operation)
	|| is_set(communication_lost_hello_missed.operation)
	|| is_set(communication_lost_interface_down.operation)
	|| is_set(communication_lost_neighbor_disabled_hello.operation)
	|| is_set(communication_lost_reason.operation)
	|| is_set(communication_lost_wrong_destination_inst.operation)
	|| is_set(communication_lost_wrong_source_inst.operation)
	|| is_set(destination_address_xr.operation)
	|| is_set(destination_instance.operation)
	|| is_set(hello_instance_owner.operation)
	|| is_set(hello_interface.operation)
	|| is_set(hello_interval.operation)
	|| is_set(hello_messages_received.operation)
	|| is_set(hello_messages_sent.operation)
	|| is_set(hello_request_suppressed.operation)
	|| is_set(instance_type.operation)
	|| is_set(missed_acks_allowed.operation)
	|| is_set(neighbor_hello_state.operation)
	|| is_set(source_address_xr.operation)
	|| is_set(source_instance.operation)
	|| is_set(total_communication_lost.operation)
	|| (communication_lost_time !=  nullptr && communication_lost_time->has_operation())
	|| (up_time !=  nullptr && up_time->has_operation());
}

std::string Rsvp::HelloInstanceDetails::HelloInstanceDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hello-instance-detail" <<"[destination-address='" <<destination_address.get() <<"']" <<"[source-address='" <<source_address.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::HelloInstanceDetails::HelloInstanceDetail::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/hello-instance-details/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (communication_lost_hello_missed.is_set || is_set(communication_lost_hello_missed.operation)) leaf_name_data.push_back(communication_lost_hello_missed.get_name_leafdata());
    if (communication_lost_interface_down.is_set || is_set(communication_lost_interface_down.operation)) leaf_name_data.push_back(communication_lost_interface_down.get_name_leafdata());
    if (communication_lost_neighbor_disabled_hello.is_set || is_set(communication_lost_neighbor_disabled_hello.operation)) leaf_name_data.push_back(communication_lost_neighbor_disabled_hello.get_name_leafdata());
    if (communication_lost_reason.is_set || is_set(communication_lost_reason.operation)) leaf_name_data.push_back(communication_lost_reason.get_name_leafdata());
    if (communication_lost_wrong_destination_inst.is_set || is_set(communication_lost_wrong_destination_inst.operation)) leaf_name_data.push_back(communication_lost_wrong_destination_inst.get_name_leafdata());
    if (communication_lost_wrong_source_inst.is_set || is_set(communication_lost_wrong_source_inst.operation)) leaf_name_data.push_back(communication_lost_wrong_source_inst.get_name_leafdata());
    if (destination_address_xr.is_set || is_set(destination_address_xr.operation)) leaf_name_data.push_back(destination_address_xr.get_name_leafdata());
    if (destination_instance.is_set || is_set(destination_instance.operation)) leaf_name_data.push_back(destination_instance.get_name_leafdata());
    if (hello_instance_owner.is_set || is_set(hello_instance_owner.operation)) leaf_name_data.push_back(hello_instance_owner.get_name_leafdata());
    if (hello_interface.is_set || is_set(hello_interface.operation)) leaf_name_data.push_back(hello_interface.get_name_leafdata());
    if (hello_interval.is_set || is_set(hello_interval.operation)) leaf_name_data.push_back(hello_interval.get_name_leafdata());
    if (hello_messages_received.is_set || is_set(hello_messages_received.operation)) leaf_name_data.push_back(hello_messages_received.get_name_leafdata());
    if (hello_messages_sent.is_set || is_set(hello_messages_sent.operation)) leaf_name_data.push_back(hello_messages_sent.get_name_leafdata());
    if (hello_request_suppressed.is_set || is_set(hello_request_suppressed.operation)) leaf_name_data.push_back(hello_request_suppressed.get_name_leafdata());
    if (instance_type.is_set || is_set(instance_type.operation)) leaf_name_data.push_back(instance_type.get_name_leafdata());
    if (missed_acks_allowed.is_set || is_set(missed_acks_allowed.operation)) leaf_name_data.push_back(missed_acks_allowed.get_name_leafdata());
    if (neighbor_hello_state.is_set || is_set(neighbor_hello_state.operation)) leaf_name_data.push_back(neighbor_hello_state.get_name_leafdata());
    if (source_address_xr.is_set || is_set(source_address_xr.operation)) leaf_name_data.push_back(source_address_xr.get_name_leafdata());
    if (source_instance.is_set || is_set(source_instance.operation)) leaf_name_data.push_back(source_instance.get_name_leafdata());
    if (total_communication_lost.is_set || is_set(total_communication_lost.operation)) leaf_name_data.push_back(total_communication_lost.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::HelloInstanceDetails::HelloInstanceDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "communication-lost-time")
    {
        if(communication_lost_time != nullptr)
        {
            children["communication-lost-time"] = communication_lost_time.get();
        }
        else
        {
            communication_lost_time = std::make_unique<Rsvp::HelloInstanceDetails::HelloInstanceDetail::CommunicationLostTime>();
            communication_lost_time->parent = this;
            children["communication-lost-time"] = communication_lost_time.get();
        }
        return children.at("communication-lost-time");
    }

    if(child_yang_name == "up-time")
    {
        if(up_time != nullptr)
        {
            children["up-time"] = up_time.get();
        }
        else
        {
            up_time = std::make_unique<Rsvp::HelloInstanceDetails::HelloInstanceDetail::UpTime>();
            up_time->parent = this;
            children["up-time"] = up_time.get();
        }
        return children.at("up-time");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::HelloInstanceDetails::HelloInstanceDetail::get_children()
{
    if(children.find("communication-lost-time") == children.end())
    {
        if(communication_lost_time != nullptr)
        {
            children["communication-lost-time"] = communication_lost_time.get();
        }
    }

    if(children.find("up-time") == children.end())
    {
        if(up_time != nullptr)
        {
            children["up-time"] = up_time.get();
        }
    }

    return children;
}

void Rsvp::HelloInstanceDetails::HelloInstanceDetail::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "communication-lost-hello-missed")
    {
        communication_lost_hello_missed = value;
    }
    if(value_path == "communication-lost-interface-down")
    {
        communication_lost_interface_down = value;
    }
    if(value_path == "communication-lost-neighbor-disabled-hello")
    {
        communication_lost_neighbor_disabled_hello = value;
    }
    if(value_path == "communication-lost-reason")
    {
        communication_lost_reason = value;
    }
    if(value_path == "communication-lost-wrong-destination-inst")
    {
        communication_lost_wrong_destination_inst = value;
    }
    if(value_path == "communication-lost-wrong-source-inst")
    {
        communication_lost_wrong_source_inst = value;
    }
    if(value_path == "destination-address-xr")
    {
        destination_address_xr = value;
    }
    if(value_path == "destination-instance")
    {
        destination_instance = value;
    }
    if(value_path == "hello-instance-owner")
    {
        hello_instance_owner = value;
    }
    if(value_path == "hello-interface")
    {
        hello_interface = value;
    }
    if(value_path == "hello-interval")
    {
        hello_interval = value;
    }
    if(value_path == "hello-messages-received")
    {
        hello_messages_received = value;
    }
    if(value_path == "hello-messages-sent")
    {
        hello_messages_sent = value;
    }
    if(value_path == "hello-request-suppressed")
    {
        hello_request_suppressed = value;
    }
    if(value_path == "instance-type")
    {
        instance_type = value;
    }
    if(value_path == "missed-acks-allowed")
    {
        missed_acks_allowed = value;
    }
    if(value_path == "neighbor-hello-state")
    {
        neighbor_hello_state = value;
    }
    if(value_path == "source-address-xr")
    {
        source_address_xr = value;
    }
    if(value_path == "source-instance")
    {
        source_instance = value;
    }
    if(value_path == "total-communication-lost")
    {
        total_communication_lost = value;
    }
}

Rsvp::HelloInstanceDetails::HelloInstanceDetails()
{
    yang_name = "hello-instance-details"; yang_parent_name = "rsvp";
}

Rsvp::HelloInstanceDetails::~HelloInstanceDetails()
{
}

bool Rsvp::HelloInstanceDetails::has_data() const
{
    for (std::size_t index=0; index<hello_instance_detail.size(); index++)
    {
        if(hello_instance_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::HelloInstanceDetails::has_operation() const
{
    for (std::size_t index=0; index<hello_instance_detail.size(); index++)
    {
        if(hello_instance_detail[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::HelloInstanceDetails::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "hello-instance-details";

    return path_buffer.str();

}

EntityPath Rsvp::HelloInstanceDetails::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::HelloInstanceDetails::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "hello-instance-detail")
    {
        for(auto const & c : hello_instance_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::HelloInstanceDetails::HelloInstanceDetail>();
        c->parent = this;
        hello_instance_detail.push_back(std::move(c));
        children[segment_path] = hello_instance_detail.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::HelloInstanceDetails::get_children()
{
    for (auto const & c : hello_instance_detail)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::HelloInstanceDetails::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags::GlobalNeighborFlags()
    :
    	is_application_mpls{YType::boolean, "is-application-mpls"},
	 is_application_ouni{YType::boolean, "is-application-ouni"}
{
    yang_name = "global-neighbor-flags"; yang_parent_name = "global-neighbor-detail";
}

Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags::~GlobalNeighborFlags()
{
}

bool Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags::has_data() const
{
    return is_application_mpls.is_set
	|| is_application_ouni.is_set;
}

bool Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_application_mpls.operation)
	|| is_set(is_application_ouni.operation);
}

std::string Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "global-neighbor-flags";

    return path_buffer.str();

}

EntityPath Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_application_mpls.is_set || is_set(is_application_mpls.operation)) leaf_name_data.push_back(is_application_mpls.get_name_leafdata());
    if (is_application_ouni.is_set || is_set(is_application_ouni.operation)) leaf_name_data.push_back(is_application_ouni.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags::get_children()
{
    return children;
}

void Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-application-mpls")
    {
        is_application_mpls = value;
    }
    if(value_path == "is-application-ouni")
    {
        is_application_ouni = value;
    }
}

Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft::RestartTimeLeft()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "restart-time-left"; yang_parent_name = "global-neighbor-detail";
}

Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft::~RestartTimeLeft()
{
}

bool Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "restart-time-left";

    return path_buffer.str();

}

EntityPath Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft::get_children()
{
    return children;
}

void Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime::RestartTimerExpiryTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "restart-timer-expiry-time"; yang_parent_name = "global-neighbor-detail";
}

Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime::~RestartTimerExpiryTime()
{
}

bool Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "restart-timer-expiry-time";

    return path_buffer.str();

}

EntityPath Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime::get_children()
{
    return children;
}

void Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft::RecoveryTimeLeft()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "recovery-time-left"; yang_parent_name = "global-neighbor-detail";
}

Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft::~RecoveryTimeLeft()
{
}

bool Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "recovery-time-left";

    return path_buffer.str();

}

EntityPath Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft::get_children()
{
    return children;
}

void Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime::RecoveryTimerExpTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "recovery-timer-exp-time"; yang_parent_name = "global-neighbor-detail";
}

Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime::~RecoveryTimerExpTime()
{
}

bool Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "recovery-timer-exp-time";

    return path_buffer.str();

}

EntityPath Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime::get_children()
{
    return children;
}

void Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::UpTime::UpTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "up-time"; yang_parent_name = "global-neighbor-detail";
}

Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::UpTime::~UpTime()
{
}

bool Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::UpTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::UpTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::UpTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "up-time";

    return path_buffer.str();

}

EntityPath Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::UpTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::UpTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::UpTime::get_children()
{
    return children;
}

void Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::UpTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime::LostCommunicationTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "lost-communication-time"; yang_parent_name = "global-neighbor-detail";
}

Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime::~LostCommunicationTime()
{
}

bool Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "lost-communication-time";

    return path_buffer.str();

}

EntityPath Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime::get_children()
{
    return children;
}

void Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborDetail()
    :
    	neighbor_address{YType::str, "neighbor-address"},
	 hello_interval{YType::uint32, "hello-interval"},
	 interface_neighbor{YType::str, "interface-neighbor"},
	 is_gr_enabled{YType::boolean, "is-gr-enabled"},
	 is_recovery_timer_running{YType::boolean, "is-recovery-timer-running"},
	 is_restart_timer_running{YType::boolean, "is-restart-timer-running"},
	 local_node_address{YType::str, "local-node-address"},
	 lost_communication_reason{YType::enumeration, "lost-communication-reason"},
	 lost_communication_total{YType::uint16, "lost-communication-total"},
	 missed_hellos{YType::uint8, "missed-hellos"},
	 neighbor_hello_state{YType::enumeration, "neighbor-hello-state"},
	 node_address{YType::str, "node-address"},
	 pending_states{YType::uint32, "pending-states"},
	 recovery_time{YType::uint32, "recovery-time"},
	 restart_state{YType::enumeration, "restart-state"},
	 restart_time{YType::uint32, "restart-time"}
    	,
    global_neighbor_flags(std::make_unique<Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags>())
	,recovery_time_left(std::make_unique<Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft>())
	,recovery_timer_exp_time(std::make_unique<Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime>())
	,restart_time_left(std::make_unique<Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft>())
	,restart_timer_expiry_time(std::make_unique<Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime>())
{
    global_neighbor_flags->parent = this;
    children["global-neighbor-flags"] = global_neighbor_flags.get();

    recovery_time_left->parent = this;
    children["recovery-time-left"] = recovery_time_left.get();

    recovery_timer_exp_time->parent = this;
    children["recovery-timer-exp-time"] = recovery_timer_exp_time.get();

    restart_time_left->parent = this;
    children["restart-time-left"] = restart_time_left.get();

    restart_timer_expiry_time->parent = this;
    children["restart-timer-expiry-time"] = restart_timer_expiry_time.get();

    yang_name = "global-neighbor-detail"; yang_parent_name = "global-neighbor-details";
}

Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::~GlobalNeighborDetail()
{
}

bool Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::has_data() const
{
    for (std::size_t index=0; index<lost_communication_time.size(); index++)
    {
        if(lost_communication_time[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<up_time.size(); index++)
    {
        if(up_time[index]->has_data())
            return true;
    }
    for (auto const & leaf : interface_neighbor.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    for (auto const & leaf : local_node_address.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    for (auto const & leaf : lost_communication_reason.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    for (auto const & leaf : lost_communication_total.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    for (auto const & leaf : neighbor_hello_state.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return neighbor_address.is_set
	|| hello_interval.is_set
	|| is_gr_enabled.is_set
	|| is_recovery_timer_running.is_set
	|| is_restart_timer_running.is_set
	|| missed_hellos.is_set
	|| node_address.is_set
	|| pending_states.is_set
	|| recovery_time.is_set
	|| restart_state.is_set
	|| restart_time.is_set
	|| (global_neighbor_flags !=  nullptr && global_neighbor_flags->has_data())
	|| (recovery_time_left !=  nullptr && recovery_time_left->has_data())
	|| (recovery_timer_exp_time !=  nullptr && recovery_timer_exp_time->has_data())
	|| (restart_time_left !=  nullptr && restart_time_left->has_data())
	|| (restart_timer_expiry_time !=  nullptr && restart_timer_expiry_time->has_data());
}

bool Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::has_operation() const
{
    for (std::size_t index=0; index<lost_communication_time.size(); index++)
    {
        if(lost_communication_time[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<up_time.size(); index++)
    {
        if(up_time[index]->has_operation())
            return true;
    }
    for (auto const & leaf : interface_neighbor.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    for (auto const & leaf : local_node_address.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    for (auto const & leaf : lost_communication_reason.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    for (auto const & leaf : lost_communication_total.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    for (auto const & leaf : neighbor_hello_state.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(neighbor_address.operation)
	|| is_set(hello_interval.operation)
	|| is_set(interface_neighbor.operation)
	|| is_set(is_gr_enabled.operation)
	|| is_set(is_recovery_timer_running.operation)
	|| is_set(is_restart_timer_running.operation)
	|| is_set(local_node_address.operation)
	|| is_set(lost_communication_reason.operation)
	|| is_set(lost_communication_total.operation)
	|| is_set(missed_hellos.operation)
	|| is_set(neighbor_hello_state.operation)
	|| is_set(node_address.operation)
	|| is_set(pending_states.operation)
	|| is_set(recovery_time.operation)
	|| is_set(restart_state.operation)
	|| is_set(restart_time.operation)
	|| (global_neighbor_flags !=  nullptr && global_neighbor_flags->has_operation())
	|| (recovery_time_left !=  nullptr && recovery_time_left->has_operation())
	|| (recovery_timer_exp_time !=  nullptr && recovery_timer_exp_time->has_operation())
	|| (restart_time_left !=  nullptr && restart_time_left->has_operation())
	|| (restart_timer_expiry_time !=  nullptr && restart_timer_expiry_time->has_operation());
}

std::string Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "global-neighbor-detail" <<"[neighbor-address='" <<neighbor_address.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-details/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (hello_interval.is_set || is_set(hello_interval.operation)) leaf_name_data.push_back(hello_interval.get_name_leafdata());
    if (is_gr_enabled.is_set || is_set(is_gr_enabled.operation)) leaf_name_data.push_back(is_gr_enabled.get_name_leafdata());
    if (is_recovery_timer_running.is_set || is_set(is_recovery_timer_running.operation)) leaf_name_data.push_back(is_recovery_timer_running.get_name_leafdata());
    if (is_restart_timer_running.is_set || is_set(is_restart_timer_running.operation)) leaf_name_data.push_back(is_restart_timer_running.get_name_leafdata());
    if (missed_hellos.is_set || is_set(missed_hellos.operation)) leaf_name_data.push_back(missed_hellos.get_name_leafdata());
    if (node_address.is_set || is_set(node_address.operation)) leaf_name_data.push_back(node_address.get_name_leafdata());
    if (pending_states.is_set || is_set(pending_states.operation)) leaf_name_data.push_back(pending_states.get_name_leafdata());
    if (recovery_time.is_set || is_set(recovery_time.operation)) leaf_name_data.push_back(recovery_time.get_name_leafdata());
    if (restart_state.is_set || is_set(restart_state.operation)) leaf_name_data.push_back(restart_state.get_name_leafdata());
    if (restart_time.is_set || is_set(restart_time.operation)) leaf_name_data.push_back(restart_time.get_name_leafdata());

    auto interface_neighbor_name_datas = interface_neighbor.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), interface_neighbor_name_datas.begin(), interface_neighbor_name_datas.end());
    auto local_node_address_name_datas = local_node_address.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), local_node_address_name_datas.begin(), local_node_address_name_datas.end());
    auto lost_communication_reason_name_datas = lost_communication_reason.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), lost_communication_reason_name_datas.begin(), lost_communication_reason_name_datas.end());
    auto lost_communication_total_name_datas = lost_communication_total.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), lost_communication_total_name_datas.begin(), lost_communication_total_name_datas.end());
    auto neighbor_hello_state_name_datas = neighbor_hello_state.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), neighbor_hello_state_name_datas.begin(), neighbor_hello_state_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "global-neighbor-flags")
    {
        if(global_neighbor_flags != nullptr)
        {
            children["global-neighbor-flags"] = global_neighbor_flags.get();
        }
        else
        {
            global_neighbor_flags = std::make_unique<Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::GlobalNeighborFlags>();
            global_neighbor_flags->parent = this;
            children["global-neighbor-flags"] = global_neighbor_flags.get();
        }
        return children.at("global-neighbor-flags");
    }

    if(child_yang_name == "lost-communication-time")
    {
        for(auto const & c : lost_communication_time)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::LostCommunicationTime>();
        c->parent = this;
        lost_communication_time.push_back(std::move(c));
        children[segment_path] = lost_communication_time.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "recovery-time-left")
    {
        if(recovery_time_left != nullptr)
        {
            children["recovery-time-left"] = recovery_time_left.get();
        }
        else
        {
            recovery_time_left = std::make_unique<Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimeLeft>();
            recovery_time_left->parent = this;
            children["recovery-time-left"] = recovery_time_left.get();
        }
        return children.at("recovery-time-left");
    }

    if(child_yang_name == "recovery-timer-exp-time")
    {
        if(recovery_timer_exp_time != nullptr)
        {
            children["recovery-timer-exp-time"] = recovery_timer_exp_time.get();
        }
        else
        {
            recovery_timer_exp_time = std::make_unique<Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RecoveryTimerExpTime>();
            recovery_timer_exp_time->parent = this;
            children["recovery-timer-exp-time"] = recovery_timer_exp_time.get();
        }
        return children.at("recovery-timer-exp-time");
    }

    if(child_yang_name == "restart-time-left")
    {
        if(restart_time_left != nullptr)
        {
            children["restart-time-left"] = restart_time_left.get();
        }
        else
        {
            restart_time_left = std::make_unique<Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimeLeft>();
            restart_time_left->parent = this;
            children["restart-time-left"] = restart_time_left.get();
        }
        return children.at("restart-time-left");
    }

    if(child_yang_name == "restart-timer-expiry-time")
    {
        if(restart_timer_expiry_time != nullptr)
        {
            children["restart-timer-expiry-time"] = restart_timer_expiry_time.get();
        }
        else
        {
            restart_timer_expiry_time = std::make_unique<Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::RestartTimerExpiryTime>();
            restart_timer_expiry_time->parent = this;
            children["restart-timer-expiry-time"] = restart_timer_expiry_time.get();
        }
        return children.at("restart-timer-expiry-time");
    }

    if(child_yang_name == "up-time")
    {
        for(auto const & c : up_time)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::UpTime>();
        c->parent = this;
        up_time.push_back(std::move(c));
        children[segment_path] = up_time.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::get_children()
{
    if(children.find("global-neighbor-flags") == children.end())
    {
        if(global_neighbor_flags != nullptr)
        {
            children["global-neighbor-flags"] = global_neighbor_flags.get();
        }
    }

    for (auto const & c : lost_communication_time)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    if(children.find("recovery-time-left") == children.end())
    {
        if(recovery_time_left != nullptr)
        {
            children["recovery-time-left"] = recovery_time_left.get();
        }
    }

    if(children.find("recovery-timer-exp-time") == children.end())
    {
        if(recovery_timer_exp_time != nullptr)
        {
            children["recovery-timer-exp-time"] = recovery_timer_exp_time.get();
        }
    }

    if(children.find("restart-time-left") == children.end())
    {
        if(restart_time_left != nullptr)
        {
            children["restart-time-left"] = restart_time_left.get();
        }
    }

    if(children.find("restart-timer-expiry-time") == children.end())
    {
        if(restart_timer_expiry_time != nullptr)
        {
            children["restart-timer-expiry-time"] = restart_timer_expiry_time.get();
        }
    }

    for (auto const & c : up_time)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::GlobalNeighborDetails::GlobalNeighborDetail::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "hello-interval")
    {
        hello_interval = value;
    }
    if(value_path == "interface-neighbor")
    {
        interface_neighbor.append(value);
    }
    if(value_path == "is-gr-enabled")
    {
        is_gr_enabled = value;
    }
    if(value_path == "is-recovery-timer-running")
    {
        is_recovery_timer_running = value;
    }
    if(value_path == "is-restart-timer-running")
    {
        is_restart_timer_running = value;
    }
    if(value_path == "local-node-address")
    {
        local_node_address.append(value);
    }
    if(value_path == "lost-communication-reason")
    {
        lost_communication_reason.append(value);
    }
    if(value_path == "lost-communication-total")
    {
        lost_communication_total.append(value);
    }
    if(value_path == "missed-hellos")
    {
        missed_hellos = value;
    }
    if(value_path == "neighbor-hello-state")
    {
        neighbor_hello_state.append(value);
    }
    if(value_path == "node-address")
    {
        node_address = value;
    }
    if(value_path == "pending-states")
    {
        pending_states = value;
    }
    if(value_path == "recovery-time")
    {
        recovery_time = value;
    }
    if(value_path == "restart-state")
    {
        restart_state = value;
    }
    if(value_path == "restart-time")
    {
        restart_time = value;
    }
}

Rsvp::GlobalNeighborDetails::GlobalNeighborDetails()
{
    yang_name = "global-neighbor-details"; yang_parent_name = "rsvp";
}

Rsvp::GlobalNeighborDetails::~GlobalNeighborDetails()
{
}

bool Rsvp::GlobalNeighborDetails::has_data() const
{
    for (std::size_t index=0; index<global_neighbor_detail.size(); index++)
    {
        if(global_neighbor_detail[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::GlobalNeighborDetails::has_operation() const
{
    for (std::size_t index=0; index<global_neighbor_detail.size(); index++)
    {
        if(global_neighbor_detail[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::GlobalNeighborDetails::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "global-neighbor-details";

    return path_buffer.str();

}

EntityPath Rsvp::GlobalNeighborDetails::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::GlobalNeighborDetails::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "global-neighbor-detail")
    {
        for(auto const & c : global_neighbor_detail)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::GlobalNeighborDetails::GlobalNeighborDetail>();
        c->parent = this;
        global_neighbor_detail.push_back(std::move(c));
        children[segment_path] = global_neighbor_detail.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::GlobalNeighborDetails::get_children()
{
    for (auto const & c : global_neighbor_detail)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::GlobalNeighborDetails::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4::Ipv4()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::uint16, "destination-port"},
	 protocol{YType::uint8, "protocol"}
{
    yang_name = "ipv4"; yang_parent_name = "rsvp-session";
}

Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4::~Ipv4()
{
}

bool Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| protocol.is_set;
}

bool Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(protocol.operation);
}

std::string Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4";

    return path_buffer.str();

}

EntityPath Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4::get_children()
{
    return children;
}

void Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
}

Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession::Ipv4LspSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession::~Ipv4LspSession()
{
}

bool Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession::has_data() const
{
    return destination_address.is_set
	|| extended_tunnel_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession::get_children()
{
    return children;
}

void Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession::Ipv4UniSession()
    :
    	destination_address{YType::str, "destination-address"},
	 extended_address{YType::str, "extended-address"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-uni-session"; yang_parent_name = "rsvp-session";
}

Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession::~Ipv4UniSession()
{
}

bool Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession::has_data() const
{
    return destination_address.is_set
	|| extended_address.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(extended_address.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-uni-session";

    return path_buffer.str();

}

EntityPath Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (extended_address.is_set || is_set(extended_address.operation)) leaf_name_data.push_back(extended_address.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession::get_children()
{
    return children;
}

void Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "extended-address")
    {
        extended_address = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::Ipv4P2MpLspSession()
    :
    	extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 p2mp_id{YType::uint32, "p2mp-id"},
	 tunnel_id{YType::uint16, "tunnel-id"}
{
    yang_name = "ipv4-p2mp-lsp-session"; yang_parent_name = "rsvp-session";
}

Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::~Ipv4P2MpLspSession()
{
}

bool Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::has_data() const
{
    return extended_tunnel_id.is_set
	|| p2mp_id.is_set
	|| tunnel_id.is_set;
}

bool Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::has_operation() const
{
    return is_set(operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(tunnel_id.operation);
}

std::string Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "ipv4-p2mp-lsp-session";

    return path_buffer.str();

}

EntityPath Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/session/rsvp-session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (tunnel_id.is_set || is_set(tunnel_id.operation)) leaf_name_data.push_back(tunnel_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::get_children()
{
    return children;
}

void Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "tunnel-id")
    {
        tunnel_id = value;
    }
}

Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::RsvpSession()
    :
    	session_type{YType::enumeration, "session-type"}
    	,
    ipv4(std::make_unique<Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4>())
	,ipv4_lsp_session(std::make_unique<Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession>())
	,ipv4_p2mp_lsp_session(std::make_unique<Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession>())
	,ipv4_uni_session(std::make_unique<Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession>())
{
    ipv4->parent = this;
    children["ipv4"] = ipv4.get();

    ipv4_lsp_session->parent = this;
    children["ipv4-lsp-session"] = ipv4_lsp_session.get();

    ipv4_p2mp_lsp_session->parent = this;
    children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();

    ipv4_uni_session->parent = this;
    children["ipv4-uni-session"] = ipv4_uni_session.get();

    yang_name = "rsvp-session"; yang_parent_name = "session";
}

Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::~RsvpSession()
{
}

bool Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::has_data() const
{
    return session_type.is_set
	|| (ipv4 !=  nullptr && ipv4->has_data())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_data())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_data())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_data());
}

bool Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::has_operation() const
{
    return is_set(operation)
	|| is_set(session_type.operation)
	|| (ipv4 !=  nullptr && ipv4->has_operation())
	|| (ipv4_lsp_session !=  nullptr && ipv4_lsp_session->has_operation())
	|| (ipv4_p2mp_lsp_session !=  nullptr && ipv4_p2mp_lsp_session->has_operation())
	|| (ipv4_uni_session !=  nullptr && ipv4_uni_session->has_operation());
}

std::string Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-session";

    return path_buffer.str();

}

EntityPath Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/session/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "ipv4")
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
        else
        {
            ipv4 = std::make_unique<Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4>();
            ipv4->parent = this;
            children["ipv4"] = ipv4.get();
        }
        return children.at("ipv4");
    }

    if(child_yang_name == "ipv4-lsp-session")
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        else
        {
            ipv4_lsp_session = std::make_unique<Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4LspSession>();
            ipv4_lsp_session->parent = this;
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
        return children.at("ipv4-lsp-session");
    }

    if(child_yang_name == "ipv4-p2mp-lsp-session")
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        else
        {
            ipv4_p2mp_lsp_session = std::make_unique<Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4P2MpLspSession>();
            ipv4_p2mp_lsp_session->parent = this;
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
        return children.at("ipv4-p2mp-lsp-session");
    }

    if(child_yang_name == "ipv4-uni-session")
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        else
        {
            ipv4_uni_session = std::make_unique<Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::Ipv4UniSession>();
            ipv4_uni_session->parent = this;
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
        return children.at("ipv4-uni-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::get_children()
{
    if(children.find("ipv4") == children.end())
    {
        if(ipv4 != nullptr)
        {
            children["ipv4"] = ipv4.get();
        }
    }

    if(children.find("ipv4-lsp-session") == children.end())
    {
        if(ipv4_lsp_session != nullptr)
        {
            children["ipv4-lsp-session"] = ipv4_lsp_session.get();
        }
    }

    if(children.find("ipv4-p2mp-lsp-session") == children.end())
    {
        if(ipv4_p2mp_lsp_session != nullptr)
        {
            children["ipv4-p2mp-lsp-session"] = ipv4_p2mp_lsp_session.get();
        }
    }

    if(children.find("ipv4-uni-session") == children.end())
    {
        if(ipv4_uni_session != nullptr)
        {
            children["ipv4-uni-session"] = ipv4_uni_session.get();
        }
    }

    return children;
}

void Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "session-type")
    {
        session_type = value;
    }
}

Rsvp::PsbBriefs::PsbBrief::Session::Session()
    :
    rsvp_session(std::make_unique<Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession>())
{
    rsvp_session->parent = this;
    children["rsvp-session"] = rsvp_session.get();

    yang_name = "session"; yang_parent_name = "psb-brief";
}

Rsvp::PsbBriefs::PsbBrief::Session::~Session()
{
}

bool Rsvp::PsbBriefs::PsbBrief::Session::has_data() const
{
    return (rsvp_session !=  nullptr && rsvp_session->has_data());
}

bool Rsvp::PsbBriefs::PsbBrief::Session::has_operation() const
{
    return is_set(operation)
	|| (rsvp_session !=  nullptr && rsvp_session->has_operation());
}

std::string Rsvp::PsbBriefs::PsbBrief::Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session";

    return path_buffer.str();

}

EntityPath Rsvp::PsbBriefs::PsbBrief::Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbBriefs::PsbBrief::Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-session")
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
        else
        {
            rsvp_session = std::make_unique<Rsvp::PsbBriefs::PsbBrief::Session::RsvpSession>();
            rsvp_session->parent = this;
            children["rsvp-session"] = rsvp_session.get();
        }
        return children.at("rsvp-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbBriefs::PsbBrief::Session::get_children()
{
    if(children.find("rsvp-session") == children.end())
    {
        if(rsvp_session != nullptr)
        {
            children["rsvp-session"] = rsvp_session.get();
        }
    }

    return children;
}

void Rsvp::PsbBriefs::PsbBrief::Session::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::PsbBriefs::PsbBrief::S2LSubLsp::S2LSubLsp()
    :
    	s2l_destination_address{YType::str, "s2l-destination-address"}
{
    yang_name = "s2l-sub-lsp"; yang_parent_name = "psb-brief";
}

Rsvp::PsbBriefs::PsbBrief::S2LSubLsp::~S2LSubLsp()
{
}

bool Rsvp::PsbBriefs::PsbBrief::S2LSubLsp::has_data() const
{
    return s2l_destination_address.is_set;
}

bool Rsvp::PsbBriefs::PsbBrief::S2LSubLsp::has_operation() const
{
    return is_set(operation)
	|| is_set(s2l_destination_address.operation);
}

std::string Rsvp::PsbBriefs::PsbBrief::S2LSubLsp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "s2l-sub-lsp";

    return path_buffer.str();

}

EntityPath Rsvp::PsbBriefs::PsbBrief::S2LSubLsp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (s2l_destination_address.is_set || is_set(s2l_destination_address.operation)) leaf_name_data.push_back(s2l_destination_address.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbBriefs::PsbBrief::S2LSubLsp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbBriefs::PsbBrief::S2LSubLsp::get_children()
{
    return children;
}

void Rsvp::PsbBriefs::PsbBrief::S2LSubLsp::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "s2l-destination-address")
    {
        s2l_destination_address = value;
    }
}

Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session::UdpIpv4Session()
    :
    	source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"}
{
    yang_name = "udp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session::~UdpIpv4Session()
{
}

bool Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session::has_data() const
{
    return source_address.is_set
	|| source_port.is_set;
}

bool Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation);
}

std::string Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "udp-ipv4-session";

    return path_buffer.str();

}

EntityPath Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/template/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session::get_children()
{
    return children;
}

void Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
}

Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session::P2MpIpv4Session()
    :
    	p2mp_sub_group_origin{YType::str, "p2mp-sub-group-origin"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::uint16, "source-port"},
	 sub_group_id{YType::uint16, "sub-group-id"}
{
    yang_name = "p2mp-ipv4-session"; yang_parent_name = "rsvp-filter";
}

Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session::~P2MpIpv4Session()
{
}

bool Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session::has_data() const
{
    return p2mp_sub_group_origin.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set;
}

bool Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session::has_operation() const
{
    return is_set(operation)
	|| is_set(p2mp_sub_group_origin.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation);
}

std::string Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "p2mp-ipv4-session";

    return path_buffer.str();

}

EntityPath Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/template/rsvp-filter/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (p2mp_sub_group_origin.is_set || is_set(p2mp_sub_group_origin.operation)) leaf_name_data.push_back(p2mp_sub_group_origin.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session::get_children()
{
    return children;
}

void Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "p2mp-sub-group-origin")
    {
        p2mp_sub_group_origin = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
}

Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::RsvpFilter()
    :
    	filter_type{YType::enumeration, "filter-type"}
    	,
    p2mp_ipv4_session(std::make_unique<Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session>())
	,udp_ipv4_session(std::make_unique<Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session>())
{
    p2mp_ipv4_session->parent = this;
    children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();

    udp_ipv4_session->parent = this;
    children["udp-ipv4-session"] = udp_ipv4_session.get();

    yang_name = "rsvp-filter"; yang_parent_name = "template";
}

Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::~RsvpFilter()
{
}

bool Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::has_data() const
{
    return filter_type.is_set
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_data())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_data());
}

bool Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::has_operation() const
{
    return is_set(operation)
	|| is_set(filter_type.operation)
	|| (p2mp_ipv4_session !=  nullptr && p2mp_ipv4_session->has_operation())
	|| (udp_ipv4_session !=  nullptr && udp_ipv4_session->has_operation());
}

std::string Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "rsvp-filter";

    return path_buffer.str();

}

EntityPath Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/template/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (filter_type.is_set || is_set(filter_type.operation)) leaf_name_data.push_back(filter_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "p2mp-ipv4-session")
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        else
        {
            p2mp_ipv4_session = std::make_unique<Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::P2MpIpv4Session>();
            p2mp_ipv4_session->parent = this;
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
        return children.at("p2mp-ipv4-session");
    }

    if(child_yang_name == "udp-ipv4-session")
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        else
        {
            udp_ipv4_session = std::make_unique<Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::UdpIpv4Session>();
            udp_ipv4_session->parent = this;
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
        return children.at("udp-ipv4-session");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::get_children()
{
    if(children.find("p2mp-ipv4-session") == children.end())
    {
        if(p2mp_ipv4_session != nullptr)
        {
            children["p2mp-ipv4-session"] = p2mp_ipv4_session.get();
        }
    }

    if(children.find("udp-ipv4-session") == children.end())
    {
        if(udp_ipv4_session != nullptr)
        {
            children["udp-ipv4-session"] = udp_ipv4_session.get();
        }
    }

    return children;
}

void Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "filter-type")
    {
        filter_type = value;
    }
}

Rsvp::PsbBriefs::PsbBrief::Template_::Template_()
    :
    rsvp_filter(std::make_unique<Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter>())
{
    rsvp_filter->parent = this;
    children["rsvp-filter"] = rsvp_filter.get();

    yang_name = "template"; yang_parent_name = "psb-brief";
}

Rsvp::PsbBriefs::PsbBrief::Template_::~Template_()
{
}

bool Rsvp::PsbBriefs::PsbBrief::Template_::has_data() const
{
    return (rsvp_filter !=  nullptr && rsvp_filter->has_data());
}

bool Rsvp::PsbBriefs::PsbBrief::Template_::has_operation() const
{
    return is_set(operation)
	|| (rsvp_filter !=  nullptr && rsvp_filter->has_operation());
}

std::string Rsvp::PsbBriefs::PsbBrief::Template_::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "template";

    return path_buffer.str();

}

EntityPath Rsvp::PsbBriefs::PsbBrief::Template_::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbBriefs::PsbBrief::Template_::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "rsvp-filter")
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
        else
        {
            rsvp_filter = std::make_unique<Rsvp::PsbBriefs::PsbBrief::Template_::RsvpFilter>();
            rsvp_filter->parent = this;
            children["rsvp-filter"] = rsvp_filter.get();
        }
        return children.at("rsvp-filter");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbBriefs::PsbBrief::Template_::get_children()
{
    if(children.find("rsvp-filter") == children.end())
    {
        if(rsvp_filter != nullptr)
        {
            children["rsvp-filter"] = rsvp_filter.get();
        }
    }

    return children;
}

void Rsvp::PsbBriefs::PsbBrief::Template_::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags::SessAttributeFlags()
    :
    	is_bandwidth_protect{YType::boolean, "is-bandwidth-protect"},
	 is_local_protect{YType::boolean, "is-local-protect"},
	 is_node_protect{YType::boolean, "is-node-protect"},
	 is_record_labels{YType::boolean, "is-record-labels"},
	 is_shared_explicit_requested{YType::boolean, "is-shared-explicit-requested"}
{
    yang_name = "sess-attribute-flags"; yang_parent_name = "session-attribute";
}

Rsvp::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags::~SessAttributeFlags()
{
}

bool Rsvp::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags::has_data() const
{
    return is_bandwidth_protect.is_set
	|| is_local_protect.is_set
	|| is_node_protect.is_set
	|| is_record_labels.is_set
	|| is_shared_explicit_requested.is_set;
}

bool Rsvp::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_bandwidth_protect.operation)
	|| is_set(is_local_protect.operation)
	|| is_set(is_node_protect.operation)
	|| is_set(is_record_labels.operation)
	|| is_set(is_shared_explicit_requested.operation);
}

std::string Rsvp::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "sess-attribute-flags";

    return path_buffer.str();

}

EntityPath Rsvp::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/session-attribute/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_bandwidth_protect.is_set || is_set(is_bandwidth_protect.operation)) leaf_name_data.push_back(is_bandwidth_protect.get_name_leafdata());
    if (is_local_protect.is_set || is_set(is_local_protect.operation)) leaf_name_data.push_back(is_local_protect.get_name_leafdata());
    if (is_node_protect.is_set || is_set(is_node_protect.operation)) leaf_name_data.push_back(is_node_protect.get_name_leafdata());
    if (is_record_labels.is_set || is_set(is_record_labels.operation)) leaf_name_data.push_back(is_record_labels.get_name_leafdata());
    if (is_shared_explicit_requested.is_set || is_set(is_shared_explicit_requested.operation)) leaf_name_data.push_back(is_shared_explicit_requested.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags::get_children()
{
    return children;
}

void Rsvp::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-bandwidth-protect")
    {
        is_bandwidth_protect = value;
    }
    if(value_path == "is-local-protect")
    {
        is_local_protect = value;
    }
    if(value_path == "is-node-protect")
    {
        is_node_protect = value;
    }
    if(value_path == "is-record-labels")
    {
        is_record_labels = value;
    }
    if(value_path == "is-shared-explicit-requested")
    {
        is_shared_explicit_requested = value;
    }
}

Rsvp::PsbBriefs::PsbBrief::SessionAttribute::SessionAttribute()
    :
    	reservation_priority{YType::uint8, "reservation-priority"},
	 setup_priority{YType::uint8, "setup-priority"}
    	,
    sess_attribute_flags(std::make_unique<Rsvp::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags>())
{
    sess_attribute_flags->parent = this;
    children["sess-attribute-flags"] = sess_attribute_flags.get();

    yang_name = "session-attribute"; yang_parent_name = "psb-brief";
}

Rsvp::PsbBriefs::PsbBrief::SessionAttribute::~SessionAttribute()
{
}

bool Rsvp::PsbBriefs::PsbBrief::SessionAttribute::has_data() const
{
    return reservation_priority.is_set
	|| setup_priority.is_set
	|| (sess_attribute_flags !=  nullptr && sess_attribute_flags->has_data());
}

bool Rsvp::PsbBriefs::PsbBrief::SessionAttribute::has_operation() const
{
    return is_set(operation)
	|| is_set(reservation_priority.operation)
	|| is_set(setup_priority.operation)
	|| (sess_attribute_flags !=  nullptr && sess_attribute_flags->has_operation());
}

std::string Rsvp::PsbBriefs::PsbBrief::SessionAttribute::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "session-attribute";

    return path_buffer.str();

}

EntityPath Rsvp::PsbBriefs::PsbBrief::SessionAttribute::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (reservation_priority.is_set || is_set(reservation_priority.operation)) leaf_name_data.push_back(reservation_priority.get_name_leafdata());
    if (setup_priority.is_set || is_set(setup_priority.operation)) leaf_name_data.push_back(setup_priority.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbBriefs::PsbBrief::SessionAttribute::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "sess-attribute-flags")
    {
        if(sess_attribute_flags != nullptr)
        {
            children["sess-attribute-flags"] = sess_attribute_flags.get();
        }
        else
        {
            sess_attribute_flags = std::make_unique<Rsvp::PsbBriefs::PsbBrief::SessionAttribute::SessAttributeFlags>();
            sess_attribute_flags->parent = this;
            children["sess-attribute-flags"] = sess_attribute_flags.get();
        }
        return children.at("sess-attribute-flags");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbBriefs::PsbBrief::SessionAttribute::get_children()
{
    if(children.find("sess-attribute-flags") == children.end())
    {
        if(sess_attribute_flags != nullptr)
        {
            children["sess-attribute-flags"] = sess_attribute_flags.get();
        }
    }

    return children;
}

void Rsvp::PsbBriefs::PsbBrief::SessionAttribute::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "reservation-priority")
    {
        reservation_priority = value;
    }
    if(value_path == "setup-priority")
    {
        setup_priority = value;
    }
}

Rsvp::PsbBriefs::PsbBrief::TrafficSpec::TrafficSpec()
    :
    	traffic_average_rate{YType::uint64, "traffic-average-rate"},
	 traffic_max_burst{YType::uint64, "traffic-max-burst"},
	 traffic_max_unit{YType::uint32, "traffic-max-unit"},
	 traffic_min_unit{YType::uint32, "traffic-min-unit"},
	 traffic_peak_rate{YType::uint64, "traffic-peak-rate"}
{
    yang_name = "traffic-spec"; yang_parent_name = "psb-brief";
}

Rsvp::PsbBriefs::PsbBrief::TrafficSpec::~TrafficSpec()
{
}

bool Rsvp::PsbBriefs::PsbBrief::TrafficSpec::has_data() const
{
    return traffic_average_rate.is_set
	|| traffic_max_burst.is_set
	|| traffic_max_unit.is_set
	|| traffic_min_unit.is_set
	|| traffic_peak_rate.is_set;
}

bool Rsvp::PsbBriefs::PsbBrief::TrafficSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_average_rate.operation)
	|| is_set(traffic_max_burst.operation)
	|| is_set(traffic_max_unit.operation)
	|| is_set(traffic_min_unit.operation)
	|| is_set(traffic_peak_rate.operation);
}

std::string Rsvp::PsbBriefs::PsbBrief::TrafficSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "traffic-spec";

    return path_buffer.str();

}

EntityPath Rsvp::PsbBriefs::PsbBrief::TrafficSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_average_rate.is_set || is_set(traffic_average_rate.operation)) leaf_name_data.push_back(traffic_average_rate.get_name_leafdata());
    if (traffic_max_burst.is_set || is_set(traffic_max_burst.operation)) leaf_name_data.push_back(traffic_max_burst.get_name_leafdata());
    if (traffic_max_unit.is_set || is_set(traffic_max_unit.operation)) leaf_name_data.push_back(traffic_max_unit.get_name_leafdata());
    if (traffic_min_unit.is_set || is_set(traffic_min_unit.operation)) leaf_name_data.push_back(traffic_min_unit.get_name_leafdata());
    if (traffic_peak_rate.is_set || is_set(traffic_peak_rate.operation)) leaf_name_data.push_back(traffic_peak_rate.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbBriefs::PsbBrief::TrafficSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbBriefs::PsbBrief::TrafficSpec::get_children()
{
    return children;
}

void Rsvp::PsbBriefs::PsbBrief::TrafficSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-average-rate")
    {
        traffic_average_rate = value;
    }
    if(value_path == "traffic-max-burst")
    {
        traffic_max_burst = value;
    }
    if(value_path == "traffic-max-unit")
    {
        traffic_max_unit = value;
    }
    if(value_path == "traffic-min-unit")
    {
        traffic_min_unit = value;
    }
    if(value_path == "traffic-peak-rate")
    {
        traffic_peak_rate = value;
    }
}

Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec::G709OtnTspec()
    :
    	traffic_bit_rate{YType::uint64, "traffic-bit-rate"},
	 traffic_multiplier{YType::uint16, "traffic-multiplier"},
	 traffic_nvc{YType::uint16, "traffic-nvc"},
	 traffic_signal_type{YType::uint8, "traffic-signal-type"}
{
    yang_name = "g709otn-tspec"; yang_parent_name = "generic-traffic-spec";
}

Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec::~G709OtnTspec()
{
}

bool Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec::has_data() const
{
    return traffic_bit_rate.is_set
	|| traffic_multiplier.is_set
	|| traffic_nvc.is_set
	|| traffic_signal_type.is_set;
}

bool Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_bit_rate.operation)
	|| is_set(traffic_multiplier.operation)
	|| is_set(traffic_nvc.operation)
	|| is_set(traffic_signal_type.operation);
}

std::string Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "g709otn-tspec";

    return path_buffer.str();

}

EntityPath Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/generic-traffic-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_bit_rate.is_set || is_set(traffic_bit_rate.operation)) leaf_name_data.push_back(traffic_bit_rate.get_name_leafdata());
    if (traffic_multiplier.is_set || is_set(traffic_multiplier.operation)) leaf_name_data.push_back(traffic_multiplier.get_name_leafdata());
    if (traffic_nvc.is_set || is_set(traffic_nvc.operation)) leaf_name_data.push_back(traffic_nvc.get_name_leafdata());
    if (traffic_signal_type.is_set || is_set(traffic_signal_type.operation)) leaf_name_data.push_back(traffic_signal_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec::get_children()
{
    return children;
}

void Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-bit-rate")
    {
        traffic_bit_rate = value;
    }
    if(value_path == "traffic-multiplier")
    {
        traffic_multiplier = value;
    }
    if(value_path == "traffic-nvc")
    {
        traffic_nvc = value;
    }
    if(value_path == "traffic-signal-type")
    {
        traffic_signal_type = value;
    }
}

Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec::IntsrvTspec()
    :
    	traffic_average_rate{YType::uint64, "traffic-average-rate"},
	 traffic_max_burst{YType::uint64, "traffic-max-burst"},
	 traffic_max_unit{YType::uint32, "traffic-max-unit"},
	 traffic_min_unit{YType::uint32, "traffic-min-unit"},
	 traffic_peak_rate{YType::uint64, "traffic-peak-rate"}
{
    yang_name = "intsrv-tspec"; yang_parent_name = "generic-traffic-spec";
}

Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec::~IntsrvTspec()
{
}

bool Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec::has_data() const
{
    return traffic_average_rate.is_set
	|| traffic_max_burst.is_set
	|| traffic_max_unit.is_set
	|| traffic_min_unit.is_set
	|| traffic_peak_rate.is_set;
}

bool Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec::has_operation() const
{
    return is_set(operation)
	|| is_set(traffic_average_rate.operation)
	|| is_set(traffic_max_burst.operation)
	|| is_set(traffic_max_unit.operation)
	|| is_set(traffic_min_unit.operation)
	|| is_set(traffic_peak_rate.operation);
}

std::string Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "intsrv-tspec";

    return path_buffer.str();

}

EntityPath Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/generic-traffic-spec/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (traffic_average_rate.is_set || is_set(traffic_average_rate.operation)) leaf_name_data.push_back(traffic_average_rate.get_name_leafdata());
    if (traffic_max_burst.is_set || is_set(traffic_max_burst.operation)) leaf_name_data.push_back(traffic_max_burst.get_name_leafdata());
    if (traffic_max_unit.is_set || is_set(traffic_max_unit.operation)) leaf_name_data.push_back(traffic_max_unit.get_name_leafdata());
    if (traffic_min_unit.is_set || is_set(traffic_min_unit.operation)) leaf_name_data.push_back(traffic_min_unit.get_name_leafdata());
    if (traffic_peak_rate.is_set || is_set(traffic_peak_rate.operation)) leaf_name_data.push_back(traffic_peak_rate.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec::get_children()
{
    return children;
}

void Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "traffic-average-rate")
    {
        traffic_average_rate = value;
    }
    if(value_path == "traffic-max-burst")
    {
        traffic_max_burst = value;
    }
    if(value_path == "traffic-max-unit")
    {
        traffic_max_unit = value;
    }
    if(value_path == "traffic-min-unit")
    {
        traffic_min_unit = value;
    }
    if(value_path == "traffic-peak-rate")
    {
        traffic_peak_rate = value;
    }
}

Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::GenericTrafficSpec()
    :
    	tspec_type{YType::enumeration, "tspec-type"}
    	,
    g709otn_tspec(std::make_unique<Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec>())
	,intsrv_tspec(std::make_unique<Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec>())
{
    g709otn_tspec->parent = this;
    children["g709otn-tspec"] = g709otn_tspec.get();

    intsrv_tspec->parent = this;
    children["intsrv-tspec"] = intsrv_tspec.get();

    yang_name = "generic-traffic-spec"; yang_parent_name = "psb-brief";
}

Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::~GenericTrafficSpec()
{
}

bool Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::has_data() const
{
    return tspec_type.is_set
	|| (g709otn_tspec !=  nullptr && g709otn_tspec->has_data())
	|| (intsrv_tspec !=  nullptr && intsrv_tspec->has_data());
}

bool Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::has_operation() const
{
    return is_set(operation)
	|| is_set(tspec_type.operation)
	|| (g709otn_tspec !=  nullptr && g709otn_tspec->has_operation())
	|| (intsrv_tspec !=  nullptr && intsrv_tspec->has_operation());
}

std::string Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "generic-traffic-spec";

    return path_buffer.str();

}

EntityPath Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (tspec_type.is_set || is_set(tspec_type.operation)) leaf_name_data.push_back(tspec_type.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "g709otn-tspec")
    {
        if(g709otn_tspec != nullptr)
        {
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
        else
        {
            g709otn_tspec = std::make_unique<Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::G709OtnTspec>();
            g709otn_tspec->parent = this;
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
        return children.at("g709otn-tspec");
    }

    if(child_yang_name == "intsrv-tspec")
    {
        if(intsrv_tspec != nullptr)
        {
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
        else
        {
            intsrv_tspec = std::make_unique<Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::IntsrvTspec>();
            intsrv_tspec->parent = this;
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
        return children.at("intsrv-tspec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::get_children()
{
    if(children.find("g709otn-tspec") == children.end())
    {
        if(g709otn_tspec != nullptr)
        {
            children["g709otn-tspec"] = g709otn_tspec.get();
        }
    }

    if(children.find("intsrv-tspec") == children.end())
    {
        if(intsrv_tspec != nullptr)
        {
            children["intsrv-tspec"] = intsrv_tspec.get();
        }
    }

    return children;
}

void Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "tspec-type")
    {
        tspec_type = value;
    }
}

Rsvp::PsbBriefs::PsbBrief::PsbBrief()
    :
    	destination_address{YType::str, "destination-address"},
	 destination_port{YType::int32, "destination-port"},
	 extended_tunnel_id{YType::str, "extended-tunnel-id"},
	 input_interface{YType::str, "input-interface"},
	 p2mp_id{YType::int32, "p2mp-id"},
	 protocol{YType::int32, "protocol"},
	 session_type{YType::enumeration, "session-type"},
	 source_address{YType::str, "source-address"},
	 source_port{YType::int32, "source-port"},
	 sub_group_id{YType::int32, "sub-group-id"},
	 sub_group_origin{YType::str, "sub-group-origin"},
	 vrf_name{YType::str, "vrf-name"}
    	,
    generic_traffic_spec(std::make_unique<Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec>())
	,s2l_sub_lsp(std::make_unique<Rsvp::PsbBriefs::PsbBrief::S2LSubLsp>())
	,session(std::make_unique<Rsvp::PsbBriefs::PsbBrief::Session>())
	,session_attribute(std::make_unique<Rsvp::PsbBriefs::PsbBrief::SessionAttribute>())
	,template_(std::make_unique<Rsvp::PsbBriefs::PsbBrief::Template_>())
	,traffic_spec(std::make_unique<Rsvp::PsbBriefs::PsbBrief::TrafficSpec>())
{
    generic_traffic_spec->parent = this;
    children["generic-traffic-spec"] = generic_traffic_spec.get();

    s2l_sub_lsp->parent = this;
    children["s2l-sub-lsp"] = s2l_sub_lsp.get();

    session->parent = this;
    children["session"] = session.get();

    session_attribute->parent = this;
    children["session-attribute"] = session_attribute.get();

    template_->parent = this;
    children["template"] = template_.get();

    traffic_spec->parent = this;
    children["traffic-spec"] = traffic_spec.get();

    yang_name = "psb-brief"; yang_parent_name = "psb-briefs";
}

Rsvp::PsbBriefs::PsbBrief::~PsbBrief()
{
}

bool Rsvp::PsbBriefs::PsbBrief::has_data() const
{
    return destination_address.is_set
	|| destination_port.is_set
	|| extended_tunnel_id.is_set
	|| input_interface.is_set
	|| p2mp_id.is_set
	|| protocol.is_set
	|| session_type.is_set
	|| source_address.is_set
	|| source_port.is_set
	|| sub_group_id.is_set
	|| sub_group_origin.is_set
	|| vrf_name.is_set
	|| (generic_traffic_spec !=  nullptr && generic_traffic_spec->has_data())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_data())
	|| (session !=  nullptr && session->has_data())
	|| (session_attribute !=  nullptr && session_attribute->has_data())
	|| (template_ !=  nullptr && template_->has_data())
	|| (traffic_spec !=  nullptr && traffic_spec->has_data());
}

bool Rsvp::PsbBriefs::PsbBrief::has_operation() const
{
    return is_set(operation)
	|| is_set(destination_address.operation)
	|| is_set(destination_port.operation)
	|| is_set(extended_tunnel_id.operation)
	|| is_set(input_interface.operation)
	|| is_set(p2mp_id.operation)
	|| is_set(protocol.operation)
	|| is_set(session_type.operation)
	|| is_set(source_address.operation)
	|| is_set(source_port.operation)
	|| is_set(sub_group_id.operation)
	|| is_set(sub_group_origin.operation)
	|| is_set(vrf_name.operation)
	|| (generic_traffic_spec !=  nullptr && generic_traffic_spec->has_operation())
	|| (s2l_sub_lsp !=  nullptr && s2l_sub_lsp->has_operation())
	|| (session !=  nullptr && session->has_operation())
	|| (session_attribute !=  nullptr && session_attribute->has_operation())
	|| (template_ !=  nullptr && template_->has_operation())
	|| (traffic_spec !=  nullptr && traffic_spec->has_operation());
}

std::string Rsvp::PsbBriefs::PsbBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "psb-brief";

    return path_buffer.str();

}

EntityPath Rsvp::PsbBriefs::PsbBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (destination_address.is_set || is_set(destination_address.operation)) leaf_name_data.push_back(destination_address.get_name_leafdata());
    if (destination_port.is_set || is_set(destination_port.operation)) leaf_name_data.push_back(destination_port.get_name_leafdata());
    if (extended_tunnel_id.is_set || is_set(extended_tunnel_id.operation)) leaf_name_data.push_back(extended_tunnel_id.get_name_leafdata());
    if (input_interface.is_set || is_set(input_interface.operation)) leaf_name_data.push_back(input_interface.get_name_leafdata());
    if (p2mp_id.is_set || is_set(p2mp_id.operation)) leaf_name_data.push_back(p2mp_id.get_name_leafdata());
    if (protocol.is_set || is_set(protocol.operation)) leaf_name_data.push_back(protocol.get_name_leafdata());
    if (session_type.is_set || is_set(session_type.operation)) leaf_name_data.push_back(session_type.get_name_leafdata());
    if (source_address.is_set || is_set(source_address.operation)) leaf_name_data.push_back(source_address.get_name_leafdata());
    if (source_port.is_set || is_set(source_port.operation)) leaf_name_data.push_back(source_port.get_name_leafdata());
    if (sub_group_id.is_set || is_set(sub_group_id.operation)) leaf_name_data.push_back(sub_group_id.get_name_leafdata());
    if (sub_group_origin.is_set || is_set(sub_group_origin.operation)) leaf_name_data.push_back(sub_group_origin.get_name_leafdata());
    if (vrf_name.is_set || is_set(vrf_name.operation)) leaf_name_data.push_back(vrf_name.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbBriefs::PsbBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "generic-traffic-spec")
    {
        if(generic_traffic_spec != nullptr)
        {
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
        else
        {
            generic_traffic_spec = std::make_unique<Rsvp::PsbBriefs::PsbBrief::GenericTrafficSpec>();
            generic_traffic_spec->parent = this;
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
        return children.at("generic-traffic-spec");
    }

    if(child_yang_name == "s2l-sub-lsp")
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        else
        {
            s2l_sub_lsp = std::make_unique<Rsvp::PsbBriefs::PsbBrief::S2LSubLsp>();
            s2l_sub_lsp->parent = this;
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
        return children.at("s2l-sub-lsp");
    }

    if(child_yang_name == "session")
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
        else
        {
            session = std::make_unique<Rsvp::PsbBriefs::PsbBrief::Session>();
            session->parent = this;
            children["session"] = session.get();
        }
        return children.at("session");
    }

    if(child_yang_name == "session-attribute")
    {
        if(session_attribute != nullptr)
        {
            children["session-attribute"] = session_attribute.get();
        }
        else
        {
            session_attribute = std::make_unique<Rsvp::PsbBriefs::PsbBrief::SessionAttribute>();
            session_attribute->parent = this;
            children["session-attribute"] = session_attribute.get();
        }
        return children.at("session-attribute");
    }

    if(child_yang_name == "template")
    {
        if(template_ != nullptr)
        {
            children["template"] = template_.get();
        }
        else
        {
            template_ = std::make_unique<Rsvp::PsbBriefs::PsbBrief::Template_>();
            template_->parent = this;
            children["template"] = template_.get();
        }
        return children.at("template");
    }

    if(child_yang_name == "traffic-spec")
    {
        if(traffic_spec != nullptr)
        {
            children["traffic-spec"] = traffic_spec.get();
        }
        else
        {
            traffic_spec = std::make_unique<Rsvp::PsbBriefs::PsbBrief::TrafficSpec>();
            traffic_spec->parent = this;
            children["traffic-spec"] = traffic_spec.get();
        }
        return children.at("traffic-spec");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbBriefs::PsbBrief::get_children()
{
    if(children.find("generic-traffic-spec") == children.end())
    {
        if(generic_traffic_spec != nullptr)
        {
            children["generic-traffic-spec"] = generic_traffic_spec.get();
        }
    }

    if(children.find("s2l-sub-lsp") == children.end())
    {
        if(s2l_sub_lsp != nullptr)
        {
            children["s2l-sub-lsp"] = s2l_sub_lsp.get();
        }
    }

    if(children.find("session") == children.end())
    {
        if(session != nullptr)
        {
            children["session"] = session.get();
        }
    }

    if(children.find("session-attribute") == children.end())
    {
        if(session_attribute != nullptr)
        {
            children["session-attribute"] = session_attribute.get();
        }
    }

    if(children.find("template") == children.end())
    {
        if(template_ != nullptr)
        {
            children["template"] = template_.get();
        }
    }

    if(children.find("traffic-spec") == children.end())
    {
        if(traffic_spec != nullptr)
        {
            children["traffic-spec"] = traffic_spec.get();
        }
    }

    return children;
}

void Rsvp::PsbBriefs::PsbBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "destination-address")
    {
        destination_address = value;
    }
    if(value_path == "destination-port")
    {
        destination_port = value;
    }
    if(value_path == "extended-tunnel-id")
    {
        extended_tunnel_id = value;
    }
    if(value_path == "input-interface")
    {
        input_interface = value;
    }
    if(value_path == "p2mp-id")
    {
        p2mp_id = value;
    }
    if(value_path == "protocol")
    {
        protocol = value;
    }
    if(value_path == "session-type")
    {
        session_type = value;
    }
    if(value_path == "source-address")
    {
        source_address = value;
    }
    if(value_path == "source-port")
    {
        source_port = value;
    }
    if(value_path == "sub-group-id")
    {
        sub_group_id = value;
    }
    if(value_path == "sub-group-origin")
    {
        sub_group_origin = value;
    }
    if(value_path == "vrf-name")
    {
        vrf_name = value;
    }
}

Rsvp::PsbBriefs::PsbBriefs()
{
    yang_name = "psb-briefs"; yang_parent_name = "rsvp";
}

Rsvp::PsbBriefs::~PsbBriefs()
{
}

bool Rsvp::PsbBriefs::has_data() const
{
    for (std::size_t index=0; index<psb_brief.size(); index++)
    {
        if(psb_brief[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::PsbBriefs::has_operation() const
{
    for (std::size_t index=0; index<psb_brief.size(); index++)
    {
        if(psb_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::PsbBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "psb-briefs";

    return path_buffer.str();

}

EntityPath Rsvp::PsbBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::PsbBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "psb-brief")
    {
        for(auto const & c : psb_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::PsbBriefs::PsbBrief>();
        c->parent = this;
        psb_brief.push_back(std::move(c));
        children[segment_path] = psb_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::PsbBriefs::get_children()
{
    for (auto const & c : psb_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::PsbBriefs::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags::GlobalNeighborFlags()
    :
    	is_application_mpls{YType::boolean, "is-application-mpls"},
	 is_application_ouni{YType::boolean, "is-application-ouni"}
{
    yang_name = "global-neighbor-flags"; yang_parent_name = "global-neighbor-brief";
}

Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags::~GlobalNeighborFlags()
{
}

bool Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags::has_data() const
{
    return is_application_mpls.is_set
	|| is_application_ouni.is_set;
}

bool Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags::has_operation() const
{
    return is_set(operation)
	|| is_set(is_application_mpls.operation)
	|| is_set(is_application_ouni.operation);
}

std::string Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "global-neighbor-flags";

    return path_buffer.str();

}

EntityPath Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (is_application_mpls.is_set || is_set(is_application_mpls.operation)) leaf_name_data.push_back(is_application_mpls.get_name_leafdata());
    if (is_application_ouni.is_set || is_set(is_application_ouni.operation)) leaf_name_data.push_back(is_application_ouni.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags::get_children()
{
    return children;
}

void Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "is-application-mpls")
    {
        is_application_mpls = value;
    }
    if(value_path == "is-application-ouni")
    {
        is_application_ouni = value;
    }
}

Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime::UpTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "up-time"; yang_parent_name = "global-neighbor-brief";
}

Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime::~UpTime()
{
}

bool Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "up-time";

    return path_buffer.str();

}

EntityPath Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime::get_children()
{
    return children;
}

void Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime::LostCommunicationTime()
    :
    	nanoseconds{YType::int32, "nanoseconds"},
	 seconds{YType::int32, "seconds"}
{
    yang_name = "lost-communication-time"; yang_parent_name = "global-neighbor-brief";
}

Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime::~LostCommunicationTime()
{
}

bool Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime::has_data() const
{
    return nanoseconds.is_set
	|| seconds.is_set;
}

bool Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime::has_operation() const
{
    return is_set(operation)
	|| is_set(nanoseconds.operation)
	|| is_set(seconds.operation);
}

std::string Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "lost-communication-time";

    return path_buffer.str();

}

EntityPath Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor cannot be nullptr as one of the ancestors is a list"});
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (nanoseconds.is_set || is_set(nanoseconds.operation)) leaf_name_data.push_back(nanoseconds.get_name_leafdata());
    if (seconds.is_set || is_set(seconds.operation)) leaf_name_data.push_back(seconds.get_name_leafdata());


    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime::get_children()
{
    return children;
}

void Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "nanoseconds")
    {
        nanoseconds = value;
    }
    if(value_path == "seconds")
    {
        seconds = value;
    }
}

Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborBrief()
    :
    	neighbor_address{YType::str, "neighbor-address"},
	 is_gr_enabled{YType::boolean, "is-gr-enabled"},
	 local_node_address{YType::str, "local-node-address"},
	 lost_communication_reason{YType::enumeration, "lost-communication-reason"},
	 lost_communication_total{YType::uint16, "lost-communication-total"},
	 neighbor_hello_state{YType::enumeration, "neighbor-hello-state"},
	 node_address{YType::str, "node-address"},
	 restart_state{YType::enumeration, "restart-state"}
    	,
    global_neighbor_flags(std::make_unique<Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags>())
{
    global_neighbor_flags->parent = this;
    children["global-neighbor-flags"] = global_neighbor_flags.get();

    yang_name = "global-neighbor-brief"; yang_parent_name = "global-neighbor-briefs";
}

Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::~GlobalNeighborBrief()
{
}

bool Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::has_data() const
{
    for (std::size_t index=0; index<lost_communication_time.size(); index++)
    {
        if(lost_communication_time[index]->has_data())
            return true;
    }
    for (std::size_t index=0; index<up_time.size(); index++)
    {
        if(up_time[index]->has_data())
            return true;
    }
    for (auto const & leaf : local_node_address.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    for (auto const & leaf : lost_communication_reason.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    for (auto const & leaf : lost_communication_total.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    for (auto const & leaf : neighbor_hello_state.getYLeafs())
    {
        if(leaf.is_set)
            return true;
    }
    return neighbor_address.is_set
	|| is_gr_enabled.is_set
	|| node_address.is_set
	|| restart_state.is_set
	|| (global_neighbor_flags !=  nullptr && global_neighbor_flags->has_data());
}

bool Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::has_operation() const
{
    for (std::size_t index=0; index<lost_communication_time.size(); index++)
    {
        if(lost_communication_time[index]->has_operation())
            return true;
    }
    for (std::size_t index=0; index<up_time.size(); index++)
    {
        if(up_time[index]->has_operation())
            return true;
    }
    for (auto const & leaf : local_node_address.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    for (auto const & leaf : lost_communication_reason.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    for (auto const & leaf : lost_communication_total.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    for (auto const & leaf : neighbor_hello_state.getYLeafs())
    {
        if(is_set(leaf.operation))
            return true;
    }
    return is_set(operation)
	|| is_set(neighbor_address.operation)
	|| is_set(is_gr_enabled.operation)
	|| is_set(local_node_address.operation)
	|| is_set(lost_communication_reason.operation)
	|| is_set(lost_communication_total.operation)
	|| is_set(neighbor_hello_state.operation)
	|| is_set(node_address.operation)
	|| is_set(restart_state.operation)
	|| (global_neighbor_flags !=  nullptr && global_neighbor_flags->has_operation());
}

std::string Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "global-neighbor-brief" <<"[neighbor-address='" <<neighbor_address.get() <<"']";

    return path_buffer.str();

}

EntityPath Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-briefs/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};

    if (neighbor_address.is_set || is_set(neighbor_address.operation)) leaf_name_data.push_back(neighbor_address.get_name_leafdata());
    if (is_gr_enabled.is_set || is_set(is_gr_enabled.operation)) leaf_name_data.push_back(is_gr_enabled.get_name_leafdata());
    if (node_address.is_set || is_set(node_address.operation)) leaf_name_data.push_back(node_address.get_name_leafdata());
    if (restart_state.is_set || is_set(restart_state.operation)) leaf_name_data.push_back(restart_state.get_name_leafdata());

    auto local_node_address_name_datas = local_node_address.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), local_node_address_name_datas.begin(), local_node_address_name_datas.end());
    auto lost_communication_reason_name_datas = lost_communication_reason.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), lost_communication_reason_name_datas.begin(), lost_communication_reason_name_datas.end());
    auto lost_communication_total_name_datas = lost_communication_total.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), lost_communication_total_name_datas.begin(), lost_communication_total_name_datas.end());
    auto neighbor_hello_state_name_datas = neighbor_hello_state.get_name_leafdata();
    leaf_name_data.insert(leaf_name_data.end(), neighbor_hello_state_name_datas.begin(), neighbor_hello_state_name_datas.end());

    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "global-neighbor-flags")
    {
        if(global_neighbor_flags != nullptr)
        {
            children["global-neighbor-flags"] = global_neighbor_flags.get();
        }
        else
        {
            global_neighbor_flags = std::make_unique<Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::GlobalNeighborFlags>();
            global_neighbor_flags->parent = this;
            children["global-neighbor-flags"] = global_neighbor_flags.get();
        }
        return children.at("global-neighbor-flags");
    }

    if(child_yang_name == "lost-communication-time")
    {
        for(auto const & c : lost_communication_time)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::LostCommunicationTime>();
        c->parent = this;
        lost_communication_time.push_back(std::move(c));
        children[segment_path] = lost_communication_time.back().get();
        return children.at(segment_path);
    }

    if(child_yang_name == "up-time")
    {
        for(auto const & c : up_time)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::UpTime>();
        c->parent = this;
        up_time.push_back(std::move(c));
        children[segment_path] = up_time.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::get_children()
{
    if(children.find("global-neighbor-flags") == children.end())
    {
        if(global_neighbor_flags != nullptr)
        {
            children["global-neighbor-flags"] = global_neighbor_flags.get();
        }
    }

    for (auto const & c : lost_communication_time)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    for (auto const & c : up_time)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief::set_value(const std::string & value_path, std::string value)
{
    if(value_path == "neighbor-address")
    {
        neighbor_address = value;
    }
    if(value_path == "is-gr-enabled")
    {
        is_gr_enabled = value;
    }
    if(value_path == "local-node-address")
    {
        local_node_address.append(value);
    }
    if(value_path == "lost-communication-reason")
    {
        lost_communication_reason.append(value);
    }
    if(value_path == "lost-communication-total")
    {
        lost_communication_total.append(value);
    }
    if(value_path == "neighbor-hello-state")
    {
        neighbor_hello_state.append(value);
    }
    if(value_path == "node-address")
    {
        node_address = value;
    }
    if(value_path == "restart-state")
    {
        restart_state = value;
    }
}

Rsvp::GlobalNeighborBriefs::GlobalNeighborBriefs()
{
    yang_name = "global-neighbor-briefs"; yang_parent_name = "rsvp";
}

Rsvp::GlobalNeighborBriefs::~GlobalNeighborBriefs()
{
}

bool Rsvp::GlobalNeighborBriefs::has_data() const
{
    for (std::size_t index=0; index<global_neighbor_brief.size(); index++)
    {
        if(global_neighbor_brief[index]->has_data())
            return true;
    }
    return false;
}

bool Rsvp::GlobalNeighborBriefs::has_operation() const
{
    for (std::size_t index=0; index<global_neighbor_brief.size(); index++)
    {
        if(global_neighbor_brief[index]->has_operation())
            return true;
    }
    return is_set(operation);
}

std::string Rsvp::GlobalNeighborBriefs::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "global-neighbor-briefs";

    return path_buffer.str();

}

EntityPath Rsvp::GlobalNeighborBriefs::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor == nullptr)
    {
        path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" << get_segment_path();
    }
    else
    {
        get_relative_entity_path(this, ancestor, path_buffer);
    }

    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::GlobalNeighborBriefs::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "global-neighbor-brief")
    {
        for(auto const & c : global_neighbor_brief)
        {
            std::string segment = c->get_segment_path();
            if(segment_path == segment)
            {
                children[segment_path] = c.get();
                return children.at(segment_path);
            }
        }
        auto c = std::make_unique<Rsvp::GlobalNeighborBriefs::GlobalNeighborBrief>();
        c->parent = this;
        global_neighbor_brief.push_back(std::move(c));
        children[segment_path] = global_neighbor_brief.back().get();
        return children.at(segment_path);
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::GlobalNeighborBriefs::get_children()
{
    for (auto const & c : global_neighbor_brief)
    {
        if(children.find(c->get_segment_path()) == children.end())
        {
            children[c->get_segment_path()] = c.get();
        }
    }

    return children;
}

void Rsvp::GlobalNeighborBriefs::set_value(const std::string & value_path, std::string value)
{
}

Rsvp::Rsvp()
    :
    authentication_briefs(std::make_unique<Rsvp::AuthenticationBriefs>())
	,authentication_details(std::make_unique<Rsvp::AuthenticationDetails>())
	,bw_pool_info(std::make_unique<Rsvp::BwPoolInfo>())
	,controller_briefs(std::make_unique<Rsvp::ControllerBriefs>())
	,controller_detaileds(std::make_unique<Rsvp::ControllerDetaileds>())
	,controller_summaries(std::make_unique<Rsvp::ControllerSummaries>())
	,counters(std::make_unique<Rsvp::Counters>())
	,frr_summary(std::make_unique<Rsvp::FrrSummary>())
	,frrs(std::make_unique<Rsvp::Frrs>())
	,global_neighbor_briefs(std::make_unique<Rsvp::GlobalNeighborBriefs>())
	,global_neighbor_details(std::make_unique<Rsvp::GlobalNeighborDetails>())
	,graceful_restart(std::make_unique<Rsvp::GracefulRestart>())
	,hello_instance_briefs(std::make_unique<Rsvp::HelloInstanceBriefs>())
	,hello_instance_details(std::make_unique<Rsvp::HelloInstanceDetails>())
	,hello_interface_instance_briefs(std::make_unique<Rsvp::HelloInterfaceInstanceBriefs>())
	,hello_interface_instance_details(std::make_unique<Rsvp::HelloInterfaceInstanceDetails>())
	,interface_briefs(std::make_unique<Rsvp::InterfaceBriefs>())
	,interface_detaileds(std::make_unique<Rsvp::InterfaceDetaileds>())
	,interface_neighbor_briefs(std::make_unique<Rsvp::InterfaceNeighborBriefs>())
	,interface_neighbor_details(std::make_unique<Rsvp::InterfaceNeighborDetails>())
	,interface_summaries(std::make_unique<Rsvp::InterfaceSummaries>())
	,issu(std::make_unique<Rsvp::Issu>())
	,nsr(std::make_unique<Rsvp::Nsr>())
	,open_config(std::make_unique<Rsvp::OpenConfig>())
	,psb_briefs(std::make_unique<Rsvp::PsbBriefs>())
	,psb_detaileds(std::make_unique<Rsvp::PsbDetaileds>())
	,pxsb_details(std::make_unique<Rsvp::PxsbDetails>())
	,request_briefs(std::make_unique<Rsvp::RequestBriefs>())
	,request_details(std::make_unique<Rsvp::RequestDetails>())
	,rsb_briefs(std::make_unique<Rsvp::RsbBriefs>())
	,rsb_detaileds(std::make_unique<Rsvp::RsbDetaileds>())
	,rxsb_details(std::make_unique<Rsvp::RxsbDetails>())
	,session_briefs(std::make_unique<Rsvp::SessionBriefs>())
	,session_detaileds(std::make_unique<Rsvp::SessionDetaileds>())
	,summary(std::make_unique<Rsvp::Summary>())
{
    authentication_briefs->parent = this;
    children["authentication-briefs"] = authentication_briefs.get();

    authentication_details->parent = this;
    children["authentication-details"] = authentication_details.get();

    bw_pool_info->parent = this;
    children["bw-pool-info"] = bw_pool_info.get();

    controller_briefs->parent = this;
    children["controller-briefs"] = controller_briefs.get();

    controller_detaileds->parent = this;
    children["controller-detaileds"] = controller_detaileds.get();

    controller_summaries->parent = this;
    children["controller-summaries"] = controller_summaries.get();

    counters->parent = this;
    children["counters"] = counters.get();

    frr_summary->parent = this;
    children["frr-summary"] = frr_summary.get();

    frrs->parent = this;
    children["frrs"] = frrs.get();

    global_neighbor_briefs->parent = this;
    children["global-neighbor-briefs"] = global_neighbor_briefs.get();

    global_neighbor_details->parent = this;
    children["global-neighbor-details"] = global_neighbor_details.get();

    graceful_restart->parent = this;
    children["graceful-restart"] = graceful_restart.get();

    hello_instance_briefs->parent = this;
    children["hello-instance-briefs"] = hello_instance_briefs.get();

    hello_instance_details->parent = this;
    children["hello-instance-details"] = hello_instance_details.get();

    hello_interface_instance_briefs->parent = this;
    children["hello-interface-instance-briefs"] = hello_interface_instance_briefs.get();

    hello_interface_instance_details->parent = this;
    children["hello-interface-instance-details"] = hello_interface_instance_details.get();

    interface_briefs->parent = this;
    children["interface-briefs"] = interface_briefs.get();

    interface_detaileds->parent = this;
    children["interface-detaileds"] = interface_detaileds.get();

    interface_neighbor_briefs->parent = this;
    children["interface-neighbor-briefs"] = interface_neighbor_briefs.get();

    interface_neighbor_details->parent = this;
    children["interface-neighbor-details"] = interface_neighbor_details.get();

    interface_summaries->parent = this;
    children["interface-summaries"] = interface_summaries.get();

    issu->parent = this;
    children["issu"] = issu.get();

    nsr->parent = this;
    children["nsr"] = nsr.get();

    open_config->parent = this;
    children["open-config"] = open_config.get();

    psb_briefs->parent = this;
    children["psb-briefs"] = psb_briefs.get();

    psb_detaileds->parent = this;
    children["psb-detaileds"] = psb_detaileds.get();

    pxsb_details->parent = this;
    children["pxsb-details"] = pxsb_details.get();

    request_briefs->parent = this;
    children["request-briefs"] = request_briefs.get();

    request_details->parent = this;
    children["request-details"] = request_details.get();

    rsb_briefs->parent = this;
    children["rsb-briefs"] = rsb_briefs.get();

    rsb_detaileds->parent = this;
    children["rsb-detaileds"] = rsb_detaileds.get();

    rxsb_details->parent = this;
    children["rxsb-details"] = rxsb_details.get();

    session_briefs->parent = this;
    children["session-briefs"] = session_briefs.get();

    session_detaileds->parent = this;
    children["session-detaileds"] = session_detaileds.get();

    summary->parent = this;
    children["summary"] = summary.get();

    yang_name = "rsvp"; yang_parent_name = "Cisco-IOS-XR-ip-rsvp-oper";
}

Rsvp::~Rsvp()
{
}

bool Rsvp::has_data() const
{
    return (authentication_briefs !=  nullptr && authentication_briefs->has_data())
	|| (authentication_details !=  nullptr && authentication_details->has_data())
	|| (bw_pool_info !=  nullptr && bw_pool_info->has_data())
	|| (controller_briefs !=  nullptr && controller_briefs->has_data())
	|| (controller_detaileds !=  nullptr && controller_detaileds->has_data())
	|| (controller_summaries !=  nullptr && controller_summaries->has_data())
	|| (counters !=  nullptr && counters->has_data())
	|| (frr_summary !=  nullptr && frr_summary->has_data())
	|| (frrs !=  nullptr && frrs->has_data())
	|| (global_neighbor_briefs !=  nullptr && global_neighbor_briefs->has_data())
	|| (global_neighbor_details !=  nullptr && global_neighbor_details->has_data())
	|| (graceful_restart !=  nullptr && graceful_restart->has_data())
	|| (hello_instance_briefs !=  nullptr && hello_instance_briefs->has_data())
	|| (hello_instance_details !=  nullptr && hello_instance_details->has_data())
	|| (hello_interface_instance_briefs !=  nullptr && hello_interface_instance_briefs->has_data())
	|| (hello_interface_instance_details !=  nullptr && hello_interface_instance_details->has_data())
	|| (interface_briefs !=  nullptr && interface_briefs->has_data())
	|| (interface_detaileds !=  nullptr && interface_detaileds->has_data())
	|| (interface_neighbor_briefs !=  nullptr && interface_neighbor_briefs->has_data())
	|| (interface_neighbor_details !=  nullptr && interface_neighbor_details->has_data())
	|| (interface_summaries !=  nullptr && interface_summaries->has_data())
	|| (issu !=  nullptr && issu->has_data())
	|| (nsr !=  nullptr && nsr->has_data())
	|| (open_config !=  nullptr && open_config->has_data())
	|| (psb_briefs !=  nullptr && psb_briefs->has_data())
	|| (psb_detaileds !=  nullptr && psb_detaileds->has_data())
	|| (pxsb_details !=  nullptr && pxsb_details->has_data())
	|| (request_briefs !=  nullptr && request_briefs->has_data())
	|| (request_details !=  nullptr && request_details->has_data())
	|| (rsb_briefs !=  nullptr && rsb_briefs->has_data())
	|| (rsb_detaileds !=  nullptr && rsb_detaileds->has_data())
	|| (rxsb_details !=  nullptr && rxsb_details->has_data())
	|| (session_briefs !=  nullptr && session_briefs->has_data())
	|| (session_detaileds !=  nullptr && session_detaileds->has_data())
	|| (summary !=  nullptr && summary->has_data());
}

bool Rsvp::has_operation() const
{
    return is_set(operation)
	|| (authentication_briefs !=  nullptr && authentication_briefs->has_operation())
	|| (authentication_details !=  nullptr && authentication_details->has_operation())
	|| (bw_pool_info !=  nullptr && bw_pool_info->has_operation())
	|| (controller_briefs !=  nullptr && controller_briefs->has_operation())
	|| (controller_detaileds !=  nullptr && controller_detaileds->has_operation())
	|| (controller_summaries !=  nullptr && controller_summaries->has_operation())
	|| (counters !=  nullptr && counters->has_operation())
	|| (frr_summary !=  nullptr && frr_summary->has_operation())
	|| (frrs !=  nullptr && frrs->has_operation())
	|| (global_neighbor_briefs !=  nullptr && global_neighbor_briefs->has_operation())
	|| (global_neighbor_details !=  nullptr && global_neighbor_details->has_operation())
	|| (graceful_restart !=  nullptr && graceful_restart->has_operation())
	|| (hello_instance_briefs !=  nullptr && hello_instance_briefs->has_operation())
	|| (hello_instance_details !=  nullptr && hello_instance_details->has_operation())
	|| (hello_interface_instance_briefs !=  nullptr && hello_interface_instance_briefs->has_operation())
	|| (hello_interface_instance_details !=  nullptr && hello_interface_instance_details->has_operation())
	|| (interface_briefs !=  nullptr && interface_briefs->has_operation())
	|| (interface_detaileds !=  nullptr && interface_detaileds->has_operation())
	|| (interface_neighbor_briefs !=  nullptr && interface_neighbor_briefs->has_operation())
	|| (interface_neighbor_details !=  nullptr && interface_neighbor_details->has_operation())
	|| (interface_summaries !=  nullptr && interface_summaries->has_operation())
	|| (issu !=  nullptr && issu->has_operation())
	|| (nsr !=  nullptr && nsr->has_operation())
	|| (open_config !=  nullptr && open_config->has_operation())
	|| (psb_briefs !=  nullptr && psb_briefs->has_operation())
	|| (psb_detaileds !=  nullptr && psb_detaileds->has_operation())
	|| (pxsb_details !=  nullptr && pxsb_details->has_operation())
	|| (request_briefs !=  nullptr && request_briefs->has_operation())
	|| (request_details !=  nullptr && request_details->has_operation())
	|| (rsb_briefs !=  nullptr && rsb_briefs->has_operation())
	|| (rsb_detaileds !=  nullptr && rsb_detaileds->has_operation())
	|| (rxsb_details !=  nullptr && rxsb_details->has_operation())
	|| (session_briefs !=  nullptr && session_briefs->has_operation())
	|| (session_detaileds !=  nullptr && session_detaileds->has_operation())
	|| (summary !=  nullptr && summary->has_operation());
}

std::string Rsvp::get_segment_path() const
{
    std::ostringstream path_buffer;
    path_buffer << "Cisco-IOS-XR-ip-rsvp-oper:rsvp";

    return path_buffer.str();

}

EntityPath Rsvp::get_entity_path(Entity* ancestor) const
{
    std::ostringstream path_buffer;
    if (ancestor != nullptr)
    {
        BOOST_THROW_EXCEPTION(YCPPInvalidArgumentError{"ancestor has to be nullptr for top-level node"});
    }

    path_buffer << get_segment_path();
    std::vector<std::pair<std::string, LeafData> > leaf_name_data {};



    EntityPath entity_path {path_buffer.str(), leaf_name_data};
    return entity_path;

}

Entity* Rsvp::get_child_by_name(const std::string & child_yang_name, const std::string & segment_path)
{
    if(children.find(child_yang_name) != children.end())
    {
        return children.at(child_yang_name);
    }
    else if(children.find(segment_path) != children.end())
    {
        return children.at(segment_path);
    }

    if(child_yang_name == "authentication-briefs")
    {
        if(authentication_briefs != nullptr)
        {
            children["authentication-briefs"] = authentication_briefs.get();
        }
        else
        {
            authentication_briefs = std::make_unique<Rsvp::AuthenticationBriefs>();
            authentication_briefs->parent = this;
            children["authentication-briefs"] = authentication_briefs.get();
        }
        return children.at("authentication-briefs");
    }

    if(child_yang_name == "authentication-details")
    {
        if(authentication_details != nullptr)
        {
            children["authentication-details"] = authentication_details.get();
        }
        else
        {
            authentication_details = std::make_unique<Rsvp::AuthenticationDetails>();
            authentication_details->parent = this;
            children["authentication-details"] = authentication_details.get();
        }
        return children.at("authentication-details");
    }

    if(child_yang_name == "bw-pool-info")
    {
        if(bw_pool_info != nullptr)
        {
            children["bw-pool-info"] = bw_pool_info.get();
        }
        else
        {
            bw_pool_info = std::make_unique<Rsvp::BwPoolInfo>();
            bw_pool_info->parent = this;
            children["bw-pool-info"] = bw_pool_info.get();
        }
        return children.at("bw-pool-info");
    }

    if(child_yang_name == "controller-briefs")
    {
        if(controller_briefs != nullptr)
        {
            children["controller-briefs"] = controller_briefs.get();
        }
        else
        {
            controller_briefs = std::make_unique<Rsvp::ControllerBriefs>();
            controller_briefs->parent = this;
            children["controller-briefs"] = controller_briefs.get();
        }
        return children.at("controller-briefs");
    }

    if(child_yang_name == "controller-detaileds")
    {
        if(controller_detaileds != nullptr)
        {
            children["controller-detaileds"] = controller_detaileds.get();
        }
        else
        {
            controller_detaileds = std::make_unique<Rsvp::ControllerDetaileds>();
            controller_detaileds->parent = this;
            children["controller-detaileds"] = controller_detaileds.get();
        }
        return children.at("controller-detaileds");
    }

    if(child_yang_name == "controller-summaries")
    {
        if(controller_summaries != nullptr)
        {
            children["controller-summaries"] = controller_summaries.get();
        }
        else
        {
            controller_summaries = std::make_unique<Rsvp::ControllerSummaries>();
            controller_summaries->parent = this;
            children["controller-summaries"] = controller_summaries.get();
        }
        return children.at("controller-summaries");
    }

    if(child_yang_name == "counters")
    {
        if(counters != nullptr)
        {
            children["counters"] = counters.get();
        }
        else
        {
            counters = std::make_unique<Rsvp::Counters>();
            counters->parent = this;
            children["counters"] = counters.get();
        }
        return children.at("counters");
    }

    if(child_yang_name == "frr-summary")
    {
        if(frr_summary != nullptr)
        {
            children["frr-summary"] = frr_summary.get();
        }
        else
        {
            frr_summary = std::make_unique<Rsvp::FrrSummary>();
            frr_summary->parent = this;
            children["frr-summary"] = frr_summary.get();
        }
        return children.at("frr-summary");
    }

    if(child_yang_name == "frrs")
    {
        if(frrs != nullptr)
        {
            children["frrs"] = frrs.get();
        }
        else
        {
            frrs = std::make_unique<Rsvp::Frrs>();
            frrs->parent = this;
            children["frrs"] = frrs.get();
        }
        return children.at("frrs");
    }

    if(child_yang_name == "global-neighbor-briefs")
    {
        if(global_neighbor_briefs != nullptr)
        {
            children["global-neighbor-briefs"] = global_neighbor_briefs.get();
        }
        else
        {
            global_neighbor_briefs = std::make_unique<Rsvp::GlobalNeighborBriefs>();
            global_neighbor_briefs->parent = this;
            children["global-neighbor-briefs"] = global_neighbor_briefs.get();
        }
        return children.at("global-neighbor-briefs");
    }

    if(child_yang_name == "global-neighbor-details")
    {
        if(global_neighbor_details != nullptr)
        {
            children["global-neighbor-details"] = global_neighbor_details.get();
        }
        else
        {
            global_neighbor_details = std::make_unique<Rsvp::GlobalNeighborDetails>();
            global_neighbor_details->parent = this;
            children["global-neighbor-details"] = global_neighbor_details.get();
        }
        return children.at("global-neighbor-details");
    }

    if(child_yang_name == "graceful-restart")
    {
        if(graceful_restart != nullptr)
        {
            children["graceful-restart"] = graceful_restart.get();
        }
        else
        {
            graceful_restart = std::make_unique<Rsvp::GracefulRestart>();
            graceful_restart->parent = this;
            children["graceful-restart"] = graceful_restart.get();
        }
        return children.at("graceful-restart");
    }

    if(child_yang_name == "hello-instance-briefs")
    {
        if(hello_instance_briefs != nullptr)
        {
            children["hello-instance-briefs"] = hello_instance_briefs.get();
        }
        else
        {
            hello_instance_briefs = std::make_unique<Rsvp::HelloInstanceBriefs>();
            hello_instance_briefs->parent = this;
            children["hello-instance-briefs"] = hello_instance_briefs.get();
        }
        return children.at("hello-instance-briefs");
    }

    if(child_yang_name == "hello-instance-details")
    {
        if(hello_instance_details != nullptr)
        {
            children["hello-instance-details"] = hello_instance_details.get();
        }
        else
        {
            hello_instance_details = std::make_unique<Rsvp::HelloInstanceDetails>();
            hello_instance_details->parent = this;
            children["hello-instance-details"] = hello_instance_details.get();
        }
        return children.at("hello-instance-details");
    }

    if(child_yang_name == "hello-interface-instance-briefs")
    {
        if(hello_interface_instance_briefs != nullptr)
        {
            children["hello-interface-instance-briefs"] = hello_interface_instance_briefs.get();
        }
        else
        {
            hello_interface_instance_briefs = std::make_unique<Rsvp::HelloInterfaceInstanceBriefs>();
            hello_interface_instance_briefs->parent = this;
            children["hello-interface-instance-briefs"] = hello_interface_instance_briefs.get();
        }
        return children.at("hello-interface-instance-briefs");
    }

    if(child_yang_name == "hello-interface-instance-details")
    {
        if(hello_interface_instance_details != nullptr)
        {
            children["hello-interface-instance-details"] = hello_interface_instance_details.get();
        }
        else
        {
            hello_interface_instance_details = std::make_unique<Rsvp::HelloInterfaceInstanceDetails>();
            hello_interface_instance_details->parent = this;
            children["hello-interface-instance-details"] = hello_interface_instance_details.get();
        }
        return children.at("hello-interface-instance-details");
    }

    if(child_yang_name == "interface-briefs")
    {
        if(interface_briefs != nullptr)
        {
            children["interface-briefs"] = interface_briefs.get();
        }
        else
        {
            interface_briefs = std::make_unique<Rsvp::InterfaceBriefs>();
            interface_briefs->parent = this;
            children["interface-briefs"] = interface_briefs.get();
        }
        return children.at("interface-briefs");
    }

    if(child_yang_name == "interface-detaileds")
    {
        if(interface_detaileds != nullptr)
        {
            children["interface-detaileds"] = interface_detaileds.get();
        }
        else
        {
            interface_detaileds = std::make_unique<Rsvp::InterfaceDetaileds>();
            interface_detaileds->parent = this;
            children["interface-detaileds"] = interface_detaileds.get();
        }
        return children.at("interface-detaileds");
    }

    if(child_yang_name == "interface-neighbor-briefs")
    {
        if(interface_neighbor_briefs != nullptr)
        {
            children["interface-neighbor-briefs"] = interface_neighbor_briefs.get();
        }
        else
        {
            interface_neighbor_briefs = std::make_unique<Rsvp::InterfaceNeighborBriefs>();
            interface_neighbor_briefs->parent = this;
            children["interface-neighbor-briefs"] = interface_neighbor_briefs.get();
        }
        return children.at("interface-neighbor-briefs");
    }

    if(child_yang_name == "interface-neighbor-details")
    {
        if(interface_neighbor_details != nullptr)
        {
            children["interface-neighbor-details"] = interface_neighbor_details.get();
        }
        else
        {
            interface_neighbor_details = std::make_unique<Rsvp::InterfaceNeighborDetails>();
            interface_neighbor_details->parent = this;
            children["interface-neighbor-details"] = interface_neighbor_details.get();
        }
        return children.at("interface-neighbor-details");
    }

    if(child_yang_name == "interface-summaries")
    {
        if(interface_summaries != nullptr)
        {
            children["interface-summaries"] = interface_summaries.get();
        }
        else
        {
            interface_summaries = std::make_unique<Rsvp::InterfaceSummaries>();
            interface_summaries->parent = this;
            children["interface-summaries"] = interface_summaries.get();
        }
        return children.at("interface-summaries");
    }

    if(child_yang_name == "issu")
    {
        if(issu != nullptr)
        {
            children["issu"] = issu.get();
        }
        else
        {
            issu = std::make_unique<Rsvp::Issu>();
            issu->parent = this;
            children["issu"] = issu.get();
        }
        return children.at("issu");
    }

    if(child_yang_name == "nsr")
    {
        if(nsr != nullptr)
        {
            children["nsr"] = nsr.get();
        }
        else
        {
            nsr = std::make_unique<Rsvp::Nsr>();
            nsr->parent = this;
            children["nsr"] = nsr.get();
        }
        return children.at("nsr");
    }

    if(child_yang_name == "open-config")
    {
        if(open_config != nullptr)
        {
            children["open-config"] = open_config.get();
        }
        else
        {
            open_config = std::make_unique<Rsvp::OpenConfig>();
            open_config->parent = this;
            children["open-config"] = open_config.get();
        }
        return children.at("open-config");
    }

    if(child_yang_name == "psb-briefs")
    {
        if(psb_briefs != nullptr)
        {
            children["psb-briefs"] = psb_briefs.get();
        }
        else
        {
            psb_briefs = std::make_unique<Rsvp::PsbBriefs>();
            psb_briefs->parent = this;
            children["psb-briefs"] = psb_briefs.get();
        }
        return children.at("psb-briefs");
    }

    if(child_yang_name == "psb-detaileds")
    {
        if(psb_detaileds != nullptr)
        {
            children["psb-detaileds"] = psb_detaileds.get();
        }
        else
        {
            psb_detaileds = std::make_unique<Rsvp::PsbDetaileds>();
            psb_detaileds->parent = this;
            children["psb-detaileds"] = psb_detaileds.get();
        }
        return children.at("psb-detaileds");
    }

    if(child_yang_name == "pxsb-details")
    {
        if(pxsb_details != nullptr)
        {
            children["pxsb-details"] = pxsb_details.get();
        }
        else
        {
            pxsb_details = std::make_unique<Rsvp::PxsbDetails>();
            pxsb_details->parent = this;
            children["pxsb-details"] = pxsb_details.get();
        }
        return children.at("pxsb-details");
    }

    if(child_yang_name == "request-briefs")
    {
        if(request_briefs != nullptr)
        {
            children["request-briefs"] = request_briefs.get();
        }
        else
        {
            request_briefs = std::make_unique<Rsvp::RequestBriefs>();
            request_briefs->parent = this;
            children["request-briefs"] = request_briefs.get();
        }
        return children.at("request-briefs");
    }

    if(child_yang_name == "request-details")
    {
        if(request_details != nullptr)
        {
            children["request-details"] = request_details.get();
        }
        else
        {
            request_details = std::make_unique<Rsvp::RequestDetails>();
            request_details->parent = this;
            children["request-details"] = request_details.get();
        }
        return children.at("request-details");
    }

    if(child_yang_name == "rsb-briefs")
    {
        if(rsb_briefs != nullptr)
        {
            children["rsb-briefs"] = rsb_briefs.get();
        }
        else
        {
            rsb_briefs = std::make_unique<Rsvp::RsbBriefs>();
            rsb_briefs->parent = this;
            children["rsb-briefs"] = rsb_briefs.get();
        }
        return children.at("rsb-briefs");
    }

    if(child_yang_name == "rsb-detaileds")
    {
        if(rsb_detaileds != nullptr)
        {
            children["rsb-detaileds"] = rsb_detaileds.get();
        }
        else
        {
            rsb_detaileds = std::make_unique<Rsvp::RsbDetaileds>();
            rsb_detaileds->parent = this;
            children["rsb-detaileds"] = rsb_detaileds.get();
        }
        return children.at("rsb-detaileds");
    }

    if(child_yang_name == "rxsb-details")
    {
        if(rxsb_details != nullptr)
        {
            children["rxsb-details"] = rxsb_details.get();
        }
        else
        {
            rxsb_details = std::make_unique<Rsvp::RxsbDetails>();
            rxsb_details->parent = this;
            children["rxsb-details"] = rxsb_details.get();
        }
        return children.at("rxsb-details");
    }

    if(child_yang_name == "session-briefs")
    {
        if(session_briefs != nullptr)
        {
            children["session-briefs"] = session_briefs.get();
        }
        else
        {
            session_briefs = std::make_unique<Rsvp::SessionBriefs>();
            session_briefs->parent = this;
            children["session-briefs"] = session_briefs.get();
        }
        return children.at("session-briefs");
    }

    if(child_yang_name == "session-detaileds")
    {
        if(session_detaileds != nullptr)
        {
            children["session-detaileds"] = session_detaileds.get();
        }
        else
        {
            session_detaileds = std::make_unique<Rsvp::SessionDetaileds>();
            session_detaileds->parent = this;
            children["session-detaileds"] = session_detaileds.get();
        }
        return children.at("session-detaileds");
    }

    if(child_yang_name == "summary")
    {
        if(summary != nullptr)
        {
            children["summary"] = summary.get();
        }
        else
        {
            summary = std::make_unique<Rsvp::Summary>();
            summary->parent = this;
            children["summary"] = summary.get();
        }
        return children.at("summary");
    }

    return nullptr;
}

std::map<std::string, Entity*> & Rsvp::get_children()
{
    if(children.find("authentication-briefs") == children.end())
    {
        if(authentication_briefs != nullptr)
        {
            children["authentication-briefs"] = authentication_briefs.get();
        }
    }

    if(children.find("authentication-details") == children.end())
    {
        if(authentication_details != nullptr)
        {
            children["authentication-details"] = authentication_details.get();
        }
    }

    if(children.find("bw-pool-info") == children.end())
    {
        if(bw_pool_info != nullptr)
        {
            children["bw-pool-info"] = bw_pool_info.get();
        }
    }

    if(children.find("controller-briefs") == children.end())
    {
        if(controller_briefs != nullptr)
        {
            children["controller-briefs"] = controller_briefs.get();
        }
    }

    if(children.find("controller-detaileds") == children.end())
    {
        if(controller_detaileds != nullptr)
        {
            children["controller-detaileds"] = controller_detaileds.get();
        }
    }

    if(children.find("controller-summaries") == children.end())
    {
        if(controller_summaries != nullptr)
        {
            children["controller-summaries"] = controller_summaries.get();
        }
    }

    if(children.find("counters") == children.end())
    {
        if(counters != nullptr)
        {
            children["counters"] = counters.get();
        }
    }

    if(children.find("frr-summary") == children.end())
    {
        if(frr_summary != nullptr)
        {
            children["frr-summary"] = frr_summary.get();
        }
    }

    if(children.find("frrs") == children.end())
    {
        if(frrs != nullptr)
        {
            children["frrs"] = frrs.get();
        }
    }

    if(children.find("global-neighbor-briefs") == children.end())
    {
        if(global_neighbor_briefs != nullptr)
        {
            children["global-neighbor-briefs"] = global_neighbor_briefs.get();
        }
    }

    if(children.find("global-neighbor-details") == children.end())
    {
        if(global_neighbor_details != nullptr)
        {
            children["global-neighbor-details"] = global_neighbor_details.get();
        }
    }

    if(children.find("graceful-restart") == children.end())
    {
        if(graceful_restart != nullptr)
        {
            children["graceful-restart"] = graceful_restart.get();
        }
    }

    if(children.find("hello-instance-briefs") == children.end())
    {
        if(hello_instance_briefs != nullptr)
        {
            children["hello-instance-briefs"] = hello_instance_briefs.get();
        }
    }

    if(children.find("hello-instance-details") == children.end())
    {
        if(hello_instance_details != nullptr)
        {
            children["hello-instance-details"] = hello_instance_details.get();
        }
    }

    if(children.find("hello-interface-instance-briefs") == children.end())
    {
        if(hello_interface_instance_briefs != nullptr)
        {
            children["hello-interface-instance-briefs"] = hello_interface_instance_briefs.get();
        }
    }

    if(children.find("hello-interface-instance-details") == children.end())
    {
        if(hello_interface_instance_details != nullptr)
        {
            children["hello-interface-instance-details"] = hello_interface_instance_details.get();
        }
    }

    if(children.find("interface-briefs") == children.end())
    {
        if(interface_briefs != nullptr)
        {
            children["interface-briefs"] = interface_briefs.get();
        }
    }

    if(children.find("interface-detaileds") == children.end())
    {
        if(interface_detaileds != nullptr)
        {
            children["interface-detaileds"] = interface_detaileds.get();
        }
    }

    if(children.find("interface-neighbor-briefs") == children.end())
    {
        if(interface_neighbor_briefs != nullptr)
        {
            children["interface-neighbor-briefs"] = interface_neighbor_briefs.get();
        }
    }

    if(children.find("interface-neighbor-details") == children.end())
    {
        if(interface_neighbor_details != nullptr)
        {
            children["interface-neighbor-details"] = interface_neighbor_details.get();
        }
    }

    if(children.find("interface-summaries") == children.end())
    {
        if(interface_summaries != nullptr)
        {
            children["interface-summaries"] = interface_summaries.get();
        }
    }

    if(children.find("issu") == children.end())
    {
        if(issu != nullptr)
        {
            children["issu"] = issu.get();
        }
    }

    if(children.find("nsr") == children.end())
    {
        if(nsr != nullptr)
        {
            children["nsr"] = nsr.get();
        }
    }

    if(children.find("open-config") == children.end())
    {
        if(open_config != nullptr)
        {
            children["open-config"] = open_config.get();
        }
    }

    if(children.find("psb-briefs") == children.end())
    {
        if(psb_briefs != nullptr)
        {
            children["psb-briefs"] = psb_briefs.get();
        }
    }

    if(children.find("psb-detaileds") == children.end())
    {
        if(psb_detaileds != nullptr)
        {
            children["psb-detaileds"] = psb_detaileds.get();
        }
    }

    if(children.find("pxsb-details") == children.end())
    {
        if(pxsb_details != nullptr)
        {
            children["pxsb-details"] = pxsb_details.get();
        }
    }

    if(children.find("request-briefs") == children.end())
    {
        if(request_briefs != nullptr)
        {
            children["request-briefs"] = request_briefs.get();
        }
    }

    if(children.find("request-details") == children.end())
    {
        if(request_details != nullptr)
        {
            children["request-details"] = request_details.get();
        }
    }

    if(children.find("rsb-briefs") == children.end())
    {
        if(rsb_briefs != nullptr)
        {
            children["rsb-briefs"] = rsb_briefs.get();
        }
    }

    if(children.find("rsb-detaileds") == children.end())
    {
        if(rsb_detaileds != nullptr)
        {
            children["rsb-detaileds"] = rsb_detaileds.get();
        }
    }

    if(children.find("rxsb-details") == children.end())
    {
        if(rxsb_details != nullptr)
        {
            children["rxsb-details"] = rxsb_details.get();
        }
    }

    if(children.find("session-briefs") == children.end())
    {
        if(session_briefs != nullptr)
        {
            children["session-briefs"] = session_briefs.get();
        }
    }

    if(children.find("session-detaileds") == children.end())
    {
        if(session_detaileds != nullptr)
        {
            children["session-detaileds"] = session_detaileds.get();
        }
    }

    if(children.find("summary") == children.end())
    {
        if(summary != nullptr)
        {
            children["summary"] = summary.get();
        }
    }

    return children;
}

void Rsvp::set_value(const std::string & value_path, std::string value)
{
}

std::unique_ptr<Entity> Rsvp::clone_ptr()
{
    return std::make_unique<Rsvp>();
}

const Enum::YLeaf RsvpMgmtAssociationEnum::none {0, "none"};
const Enum::YLeaf RsvpMgmtAssociationEnum::ipv4 {1, "ipv4"};
const Enum::YLeaf RsvpMgmtAssociationEnum::ipv6 {2, "ipv6"};
const Enum::YLeaf RsvpMgmtAssociationEnum::extended_ipv4 {3, "extended-ipv4"};
const Enum::YLeaf RsvpMgmtAssociationEnum::extended_ipv6 {4, "extended-ipv6"};

const Enum::YLeaf RsvpMgmtEroSubobjEnum::rsvp_mgmt_ero_type_ipv4 {1, "rsvp-mgmt-ero-type-ipv4"};
const Enum::YLeaf RsvpMgmtEroSubobjEnum::rsvp_mgmt_ero_type_un_num {4, "rsvp-mgmt-ero-type-un-num"};

const Enum::YLeaf RsvpMgmtQosServiceEnumEnum::rsvp_mgmt_qos_unknown {0, "rsvp-mgmt-qos-unknown"};
const Enum::YLeaf RsvpMgmtQosServiceEnumEnum::rsvp_mgmt_qos_guaranteed {3, "rsvp-mgmt-qos-guaranteed"};
const Enum::YLeaf RsvpMgmtQosServiceEnumEnum::rsvp_mgmt_qos_controlled_load {5, "rsvp-mgmt-qos-controlled-load"};
const Enum::YLeaf RsvpMgmtQosServiceEnumEnum::rsvp_mgmt_qos_qualitative {6, "rsvp-mgmt-qos-qualitative"};

const Enum::YLeaf RsvpMgmtHelloInstanceEnum::active {0, "active"};
const Enum::YLeaf RsvpMgmtHelloInstanceEnum::passive {1, "passive"};

const Enum::YLeaf IgpteLibBwModelEnum::rdm {0, "rdm"};
const Enum::YLeaf IgpteLibBwModelEnum::mam {1, "mam"};
const Enum::YLeaf IgpteLibBwModelEnum::not_set {2, "not-set"};

const Enum::YLeaf RsvpMgmtFrrStateEnumEnum::ready_state {0, "ready-state"};
const Enum::YLeaf RsvpMgmtFrrStateEnumEnum::pending_state {1, "pending-state"};
const Enum::YLeaf RsvpMgmtFrrStateEnumEnum::active_state {2, "active-state"};

const Enum::YLeaf RsvpProcNsrNotReadyReasonEnum::collab_time_out {0, "collab-time-out"};
const Enum::YLeaf RsvpProcNsrNotReadyReasonEnum::collab_conntection_idt {1, "collab-conntection-idt"};
const Enum::YLeaf RsvpProcNsrNotReadyReasonEnum::nsr_peer_not_connected {2, "nsr-peer-not-connected"};
const Enum::YLeaf RsvpProcNsrNotReadyReasonEnum::nsr_peer_not_in_sync {3, "nsr-peer-not-in-sync"};

const Enum::YLeaf RsvpMgmtDsteModesEnum::pre_standard {1, "pre-standard"};
const Enum::YLeaf RsvpMgmtDsteModesEnum::standard {3, "standard"};

const Enum::YLeaf RsvpMgmtRestartStateEnum::done {0, "done"};
const Enum::YLeaf RsvpMgmtRestartStateEnum::recovery {1, "recovery"};
const Enum::YLeaf RsvpMgmtRestartStateEnum::abort {2, "abort"};

const Enum::YLeaf RsvpMgmtReservationTypeEnumEnum::rsvp_mgmt_ff_option {10, "rsvp-mgmt-ff-option"};
const Enum::YLeaf RsvpMgmtReservationTypeEnumEnum::rsvp_mgmt_wf_option {17, "rsvp-mgmt-wf-option"};
const Enum::YLeaf RsvpMgmtReservationTypeEnumEnum::rsvp_mgmt_se_option {18, "rsvp-mgmt-se-option"};

const Enum::YLeaf RsvpMgmtTspecEnum::g709otn {5, "g709otn"};
const Enum::YLeaf RsvpMgmtTspecEnum::intsrv {12, "intsrv"};

const Enum::YLeaf RsvpMgmtAuthDirectionEnum::rsvp_mgmt_auth_direction_send {0, "rsvp-mgmt-auth-direction-send"};
const Enum::YLeaf RsvpMgmtAuthDirectionEnum::rsvp_mgmt_auth_direction_recv {1, "rsvp-mgmt-auth-direction-recv"};

const Enum::YLeaf RsvpMgmtFilterEnum::rsvp_mgmt_filter_type_ipv4 {1, "rsvp-mgmt-filter-type-ipv4"};
const Enum::YLeaf RsvpMgmtFilterEnum::rsvp_mgmt_filter_type_p2mp_lsp_ipv4 {12, "rsvp-mgmt-filter-type-p2mp-lsp-ipv4"};

const Enum::YLeaf RsvpProcRoleEnum::unknown {0, "unknown"};
const Enum::YLeaf RsvpProcRoleEnum::v1_active {1, "v1-active"};
const Enum::YLeaf RsvpProcRoleEnum::v1_standby {2, "v1-standby"};
const Enum::YLeaf RsvpProcRoleEnum::v2_active {3, "v2-active"};
const Enum::YLeaf RsvpProcRoleEnum::v2_standby {4, "v2-standby"};
const Enum::YLeaf RsvpProcRoleEnum::v1_active_post_big_bang {5, "v1-active-post-big-bang"};
const Enum::YLeaf RsvpProcRoleEnum::v1_standby_post_big_bang {6, "v1-standby-post-big-bang"};
const Enum::YLeaf RsvpProcRoleEnum::count {7, "count"};

const Enum::YLeaf RsvpSessionEnum::ipv4 {1, "ipv4"};
const Enum::YLeaf RsvpSessionEnum::p2p_lsp_ipv4 {7, "p2p-lsp-ipv4"};
const Enum::YLeaf RsvpSessionEnum::ouni_ipv4 {9, "ouni-ipv4"};
const Enum::YLeaf RsvpSessionEnum::p2mp_lsp_ipv4 {13, "p2mp-lsp-ipv4"};

const Enum::YLeaf RsvpMgmtHelloStateEnum::hello_state_init {0, "hello-state-init"};
const Enum::YLeaf RsvpMgmtHelloStateEnum::hello_state_up {1, "hello-state-up"};
const Enum::YLeaf RsvpMgmtHelloStateEnum::hello_state_down {2, "hello-state-down"};

const Enum::YLeaf RsvpMgmtFlowSpecEnum::g709otn {5, "g709otn"};

const Enum::YLeaf RsvpMgmtHelloInstanceOwnerEnum::mpls_graceful_restart {0, "mpls-graceful-restart"};
const Enum::YLeaf RsvpMgmtHelloInstanceOwnerEnum::mpls_ouni {1, "mpls-ouni"};

const Enum::YLeaf RsvpMgmtRroSubobjEnum::ipv4rro_type {1, "ipv4rro-type"};
const Enum::YLeaf RsvpMgmtRroSubobjEnum::label_rro_type {3, "label-rro-type"};
const Enum::YLeaf RsvpMgmtRroSubobjEnum::unnumbered_rro_type {4, "unnumbered-rro-type"};
const Enum::YLeaf RsvpMgmtRroSubobjEnum::srlg_rro_type {34, "srlg-rro-type"};

const Enum::YLeaf RsvpMgmtSessionEnum::rsvp_mgmt_session_type_udp_ipv4 {1, "rsvp-mgmt-session-type-udp-ipv4"};
const Enum::YLeaf RsvpMgmtSessionEnum::rsvp_mgmt_session_type_lsp_ipv4 {7, "rsvp-mgmt-session-type-lsp-ipv4"};
const Enum::YLeaf RsvpMgmtSessionEnum::rsvp_mgmt_session_type_uni_ipv4 {9, "rsvp-mgmt-session-type-uni-ipv4"};
const Enum::YLeaf RsvpMgmtSessionEnum::rsvp_mgmt_session_type_p2mp_lsp_ipv4 {13, "rsvp-mgmt-session-type-p2mp-lsp-ipv4"};

const Enum::YLeaf RsvpMgmtHelloDownReasonEnum::not_applicable {0, "not-applicable"};
const Enum::YLeaf RsvpMgmtHelloDownReasonEnum::wrong_destination_instance {1, "wrong-destination-instance"};
const Enum::YLeaf RsvpMgmtHelloDownReasonEnum::wrong_source_instance {2, "wrong-source-instance"};
const Enum::YLeaf RsvpMgmtHelloDownReasonEnum::hello_missed {3, "hello-missed"};
const Enum::YLeaf RsvpMgmtHelloDownReasonEnum::interface_down {4, "interface-down"};
const Enum::YLeaf RsvpMgmtHelloDownReasonEnum::neighbor_disabled_hello {5, "neighbor-disabled-hello"};
const Enum::YLeaf RsvpMgmtHelloDownReasonEnum::control_channel_down {6, "control-channel-down"};

const Enum::YLeaf RsvpMgmtGenericLabelEnum::rsvp_mgmt_label_type_gmpls {2, "rsvp-mgmt-label-type-gmpls"};

const Enum::YLeaf RsvpMgmtGrAppEnum::ouni {0, "ouni"};
const Enum::YLeaf RsvpMgmtGrAppEnum::gmpls {1, "gmpls"};

const Enum::YLeaf RsvpMgmtAuthChallengeStatusEnum::rsvp_mgmt_auth_cs_not_cfg {0, "rsvp-mgmt-auth-cs-not-cfg"};
const Enum::YLeaf RsvpMgmtAuthChallengeStatusEnum::rsvp_mgmt_auth_cs_completed {1, "rsvp-mgmt-auth-cs-completed"};
const Enum::YLeaf RsvpMgmtAuthChallengeStatusEnum::rsvp_mgmt_auth_cs_in_progress {2, "rsvp-mgmt-auth-cs-in-progress"};
const Enum::YLeaf RsvpMgmtAuthChallengeStatusEnum::rsvp_mgmt_auth_cs_failure {3, "rsvp-mgmt-auth-cs-failure"};
const Enum::YLeaf RsvpMgmtAuthChallengeStatusEnum::rsvp_mgmt_auth_cs_not_supported {4, "rsvp-mgmt-auth-cs-not-supported"};

const Enum::YLeaf RsvpMgmtAuthKiEnum::rsvp_mgmt_auth_ki_type_none {0, "rsvp-mgmt-auth-ki-type-none"};
const Enum::YLeaf RsvpMgmtAuthKiEnum::rsvp_mgmt_auth_ki_type_global {1, "rsvp-mgmt-auth-ki-type-global"};
const Enum::YLeaf RsvpMgmtAuthKiEnum::rsvp_mgmt_auth_ki_type_interface {2, "rsvp-mgmt-auth-ki-type-interface"};
const Enum::YLeaf RsvpMgmtAuthKiEnum::rsvp_mgmt_auth_ki_type_neighbor {3, "rsvp-mgmt-auth-ki-type-neighbor"};

const Enum::YLeaf RsvpTimerStateEnum::rsvp_timer_running_and_sleeping {1, "rsvp-timer-running-and-sleeping"};
const Enum::YLeaf RsvpTimerStateEnum::rsvp_timer_running {2, "rsvp-timer-running"};
const Enum::YLeaf RsvpTimerStateEnum::rsvp_timer_not_running {3, "rsvp-timer-not-running"};

const Enum::YLeaf RsvpSyncStatusEnum::not_ready {0, "not-ready"};
const Enum::YLeaf RsvpSyncStatusEnum::ready {1, "ready"};

const Enum::YLeaf RsvpModeEnum::send {0, "send"};
const Enum::YLeaf RsvpModeEnum::receive {1, "receive"};

const Enum::YLeaf RsvpMgmtEroSubobjStatusEnum::rsvp_mgmt_ero_status_not_available {0, "rsvp-mgmt-ero-status-not-available"};
const Enum::YLeaf RsvpMgmtEroSubobjStatusEnum::rsvp_mgmt_ero_status_available {1, "rsvp-mgmt-ero-status-available"};
const Enum::YLeaf RsvpMgmtEroSubobjStatusEnum::rsvp_mgmt_ero_status_bw_not_available {2, "rsvp-mgmt-ero-status-bw-not-available"};


}
}

